/**
 * @file This file contains functions to validate certain Devvit settings fields.
 */
import { Context, SettingsFormFieldValidatorEvent, OnValidateHandler } from "@devvit/public-api";
/**
 * This function lets you chain multiple validators together.
 * @param validators An array of OnValidateHandler functions.
 * @param event SettingsFormFieldValidatorEvent object.
 * @param context Devvit Context object.
 * @param errorMessage The error message to return if the validation fails, returns the error message of the first validator that fails if not specified.
 * @returns The error message of the first validator that fails, or undefined if all validators pass.
 */
export declare function validateMultiple<ValueType>(validators: OnValidateHandler<ValueType>[], event: SettingsFormFieldValidatorEvent<ValueType>, context: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a custom date format string.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateCustomDateformat(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a custom timezone string.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateCustomTimezone(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a custom locale string.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateCustomLocale(event: SettingsFormFieldValidatorEvent<string | string[]>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a positive integer, zero is not considered valid.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 * @deprecated Consider using validateMultiple with validatePositive, validateInteger, and validateNonZero instead.
 */
export declare function validatePositiveInteger(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a positive number, zero and infinity are not considered valid.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 * @deprecated Consider using validateMultiple with validatePositive and validateNonZero instead.
 */
export declare function validatePositiveNumber(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a positive number.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validatePositive(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a negative number, zero is considered positive.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns
 */
export declare function validateNegative(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is an integer.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateInteger(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is not zero.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateNonZero(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is finite as opposed to infinite or NaN.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateFinite(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a number.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateNumber(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a comma-separated list of usernames.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to username length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /u/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageTrailing This is the returned error message if the string ends with a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateUsernameList(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageTrailing?: string): Promise<string | undefined>;
/**
 * This function validates a comma-separated list of subreddit names.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to subname length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /r/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageTrailing This is the returned error message if the string ends with a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateSubredditNameList(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageTrailing?: string): Promise<string | undefined>;
/**
 * This function validates a username.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to username length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /u/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageComma This is the returned error message if the string contains a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateUsername(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageComma?: string): Promise<string | undefined>;
/**
 * This function validates a subreddit name.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to subreddit name length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /r/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageComma This is the returned error message if the string contains a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateSubredditName(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageComma?: string): Promise<string | undefined>;

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SettingsClient_metadata;
import { Devvit } from '../../devvit/Devvit.js';
import { flattenFormFieldValue } from '../ui/helpers/getFormValues.js';
export class SettingsClient {
    constructor(metadata) {
        _SettingsClient_metadata.set(this, void 0);
        __classPrivateFieldSet(this, _SettingsClient_metadata, metadata, "f");
    }
    async get(name) {
        const settings = await this.getAll();
        return settings[name];
    }
    async getAll() {
        const settingsClient = Devvit.settingsPlugin;
        const response = await settingsClient.GetSettings({}, __classPrivateFieldGet(this, _SettingsClient_metadata, "f"));
        if (!response.installationSettings) {
            throw new Error('Could not get installation settings');
        }
        if (!response.appSettings) {
            throw new Error('Could not get app settings');
        }
        return {
            ...getSettingsValues(response.installationSettings.settings, Devvit.installationSettings),
            ...getSettingsValues(response.appSettings.settings, Devvit.appSettings),
        };
    }
}
_SettingsClient_metadata = new WeakMap();
export function getSettingsValues(results, settingsDefinitions) {
    const settingsValues = Object.keys(results).reduce((acc, key) => {
        acc[key] = flattenFormFieldValue(results[key]);
        return acc;
    }, {});
    if (settingsDefinitions) {
        setDefaultsIfNecessary(settingsValues, settingsDefinitions);
    }
    return settingsValues;
}
export function setDefaultsIfNecessary(settingsValues, settingsDefinitions) {
    for (const definition of settingsDefinitions) {
        if (definition.type === 'group') {
            // Groups get their defaults set recursively
            setDefaultsIfNecessary(settingsValues, definition.fields);
        }
        else {
            // Only set the default if the value is not already set - note that this checks if the key is
            // missing from the object, not if the value is falsy. So if the user somehow manually sets a
            // setting to `undefined`, we won't use the default value here. Same goes for 'defaultValue' -
            // if the user didn't set a default value, we won't set it to anything.
            if (!(definition.name in settingsValues) && 'defaultValue' in definition) {
                settingsValues[definition.name] = definition.defaultValue;
            }
        }
    }
}

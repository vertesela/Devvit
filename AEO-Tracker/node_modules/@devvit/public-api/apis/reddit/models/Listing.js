var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Listing_instances, _Listing_before, _Listing_after, _Listing_more, _Listing_started, _Listing_next;
import { makeGettersEnumerable } from '../helpers/makeGettersEnumerable.js';
const DEFAULT_PAGE_SIZE = 100;
const DEFAULT_LIMIT = Infinity;
export class Listing {
    /**
     * @internal
     */
    constructor(options) {
        _Listing_instances.add(this);
        _Listing_before.set(this, void 0);
        _Listing_after.set(this, void 0);
        _Listing_more.set(this, void 0);
        _Listing_started.set(this, false);
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.limit = DEFAULT_LIMIT;
        this.children = [];
        makeGettersEnumerable(this);
        this._fetch = options.fetch;
        this.pageSize = options.pageSize ?? DEFAULT_PAGE_SIZE;
        this.limit = options.limit ?? DEFAULT_LIMIT;
        __classPrivateFieldSet(this, _Listing_after, options.after, "f");
        __classPrivateFieldSet(this, _Listing_before, options.before, "f");
        __classPrivateFieldSet(this, _Listing_more, options.more, "f");
        if (options.children) {
            this.children = options.children;
        }
    }
    get hasMore() {
        return !__classPrivateFieldGet(this, _Listing_started, "f") || Boolean(__classPrivateFieldGet(this, _Listing_after, "f") || __classPrivateFieldGet(this, _Listing_before, "f") || __classPrivateFieldGet(this, _Listing_more, "f"));
    }
    async *[(_Listing_before = new WeakMap(), _Listing_after = new WeakMap(), _Listing_more = new WeakMap(), _Listing_started = new WeakMap(), _Listing_instances = new WeakSet(), Symbol.asyncIterator)]() {
        let currentIndex = 0;
        while (true) {
            if (currentIndex === this.children.length) {
                if (this.hasMore) {
                    const nextPage = await __classPrivateFieldGet(this, _Listing_instances, "m", _Listing_next).call(this);
                    // r2 api sometimes returns an empty page
                    if (nextPage.length === 0) {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            yield this.children[currentIndex];
            currentIndex++;
            if (currentIndex === this.limit) {
                break;
            }
        }
    }
    setMore(more) {
        __classPrivateFieldSet(this, _Listing_more, more, "f");
    }
    preventInitialFetch() {
        __classPrivateFieldSet(this, _Listing_started, true, "f");
    }
    async all() {
        while (this.hasMore && this.children.length < this.limit) {
            await __classPrivateFieldGet(this, _Listing_instances, "m", _Listing_next).call(this);
        }
        return this.children.slice(0, this.limit);
    }
    async get(count) {
        const limit = count <= this.limit ? count : this.limit;
        while (this.hasMore && this.children.length < limit) {
            await __classPrivateFieldGet(this, _Listing_instances, "m", _Listing_next).call(this);
        }
        return this.children.slice(0, limit);
    }
}
_Listing_next = async function _Listing_next() {
    if (!this.hasMore) {
        throw new Error('This listing does not have any more items to load.');
    }
    const { children, before, after, more } = await this._fetch({
        before: __classPrivateFieldGet(this, _Listing_before, "f"),
        after: __classPrivateFieldGet(this, _Listing_after, "f"),
        limit: this.pageSize,
        more: __classPrivateFieldGet(this, _Listing_more, "f"),
    });
    this.children.push(...children);
    __classPrivateFieldSet(this, _Listing_before, before, "f");
    __classPrivateFieldSet(this, _Listing_after, after, "f");
    __classPrivateFieldSet(this, _Listing_more, more, "f");
    __classPrivateFieldSet(this, _Listing_started, true, "f");
    return children;
};

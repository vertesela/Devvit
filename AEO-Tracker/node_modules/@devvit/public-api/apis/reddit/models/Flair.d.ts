import type { T3ID } from '@devvit/shared-types/tid.js';
export declare enum FlairType {
    User = "USER_FLAIR",
    Post = "LINK_FLAIR"
}
export type AllowableFlairContent = 'all' | 'emoji' | 'text';
export type FlairTextColor = 'light' | 'dark';
export type FlairBackgroundColor = `#${string}` | 'transparent';
export type CreateFlairTemplateOptions = {
    /** The name of the subreddit to create the flair template in. */
    subredditName: string;
    /** The flair template's allowable content. Either 'all', 'emoji', or 'text'. */
    allowableContent?: AllowableFlairContent;
    /** The background color of the flair. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    backgroundColor?: string;
    maxEmojis?: number;
    /** Whether or not this flair template is only available to moderators. */
    modOnly?: boolean;
    /** The text to display in the flair. */
    text: string;
    /** Either 'dark' or 'light'. */
    textColor?: FlairTextColor;
    /** Whether or not users are allowed to edit this flair template before using it. */
    allowUserEdits?: boolean;
};
export type EditFlairTemplateOptions = CreateFlairTemplateOptions & {
    id: string;
};
export declare class FlairTemplate {
    #private;
    /** The flair template's ID */
    get id(): string;
    /** The flair template's text */
    get text(): string;
    /** The flair template's text color. Either 'dark' or 'light'. */
    get textColor(): FlairTextColor;
    /** The flair template's background color. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    get backgroundColor(): FlairBackgroundColor;
    /** The flair template's allowable content. Either 'all', 'emoji', or 'text'. */
    get allowableContent(): AllowableFlairContent;
    /** Is the flair template only available to moderators? */
    get modOnly(): boolean;
    /** The flair template's maximum number of emojis. */
    get maxEmojis(): number;
    /** Does the flair template allow users to edit their flair? */
    get allowUserEdits(): boolean;
    /** Delete this flair template */
    delete(): Promise<void>;
    /** Edit this flair template */
    edit(options: Partial<Omit<EditFlairTemplateOptions, 'id' | 'subredditName'>>): Promise<FlairTemplate>;
}
export type SetFlairOptions = {
    /** The name of the subreddit of the item to set the flair on */
    subredditName: string;
    /** The flair template's ID */
    flairTemplateId?: string;
    /** The flair text */
    text?: string;
    /** The flair CSS class */
    cssClass?: string;
    /** The flair text color. Either 'dark' or 'light'. */
    textColor?: FlairTextColor;
    /** The flair background color. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    backgroundColor?: string;
};
export type SetUserFlairOptions = SetFlairOptions & {
    /** The username of the user to set the flair on */
    username: string;
};
export type SetPostFlairOptions = SetFlairOptions & {
    /** The ID of the post to set the flair on */
    postId: string;
};
export type InternalSetPostFlairOptions = SetFlairOptions & {
    postId: T3ID;
};
export type UserFlairPageOptions = {
    /** A user id optionally provided which will result in a slice of user flairs, starting after this user, to be returned.  */
    after?: string;
    /** A user id optionally provided which will result in a slice of user flairs, starting before this user, to be returned.  */
    before?: string;
    /** A limit to the number of flairs that will be returned. Default: 25, Max: 1000  */
    limit?: number;
};
export type GetUserFlairBySubredditOptions = UserFlairPageOptions & {
    /** The subreddit associated with the flair being retrieved. */
    subreddit: string;
    /** The username associated with the flair being retrieved. */
    name?: string;
};
export type UserFlair = {
    /** The CSS class applied to this flair in the UI. */
    flairCssClass?: string;
    /** The username of the user to which this flair is assigned.*/
    user?: string;
    /** The text displayed in the UI for this flair. */
    flairText?: string;
};
export type GetUserFlairBySubredditResponse = {
    /** The list of user flair */
    users: UserFlair[];
    /** The user id of the last user flair in this slice. Its presence indicates
     * that there are more items that can be fetched. Pass this into the "after" parameter
     * in the next call to get the next slice of data  */
    next?: string;
    /** The user id of the first user flair in this slice. Its presence indicates
     * that there are items before this item that can be fetched. Pass this into the "before" parameter
     * in the next call to get the previous slice of data  */
    prev?: string;
};
export declare class Flair {
    #private;
}
//# sourceMappingURL=Flair.d.ts.map
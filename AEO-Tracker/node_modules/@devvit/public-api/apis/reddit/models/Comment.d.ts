import type { T1ID, T2ID, T3ID, T5ID } from '@devvit/shared-types/tid.js';
import type { RichTextBuilder } from '@devvit/shared-types/richtext/RichTextBuilder.js';
import { Listing } from './Listing.js';
import { User } from './User.js';
export type CommentSort = 'confidence' | 'top' | 'new' | 'controversial' | 'old' | 'random' | 'qa' | 'live';
export type GetCommentsOptions = {
    postId: string;
    commentId?: string | undefined;
    depth?: number;
    pageSize?: number;
    limit?: number;
    sort?: CommentSort;
};
export type CommentSubmissionOptions = {
    text: string;
} | {
    richtext: object | RichTextBuilder;
};
export type EditCommentOptions = CommentSubmissionOptions;
export type ReplyToCommentOptions = CommentSubmissionOptions;
export type GetCommentsByUserOptions = {
    username: string;
    sort?: 'hot' | 'new' | 'top' | 'controversial';
    timeframe?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';
    pageSize?: number;
    limit?: number;
    after?: string;
    before?: string;
};
export declare class Comment {
    #private;
    get id(): T1ID;
    get authorId(): T2ID | undefined;
    get authorName(): string;
    get subredditId(): T5ID;
    get subredditName(): string;
    get body(): string;
    get createdAt(): Date;
    get parentId(): T1ID | T3ID;
    get postId(): T3ID;
    get replies(): Listing<Comment>;
    get distinguishedBy(): string | undefined;
    get locked(): boolean;
    get stickied(): boolean;
    get removed(): boolean;
    get approved(): boolean;
    get spam(): boolean;
    get edited(): boolean;
    get numReports(): number;
    get collapsedBecauseCrowdControl(): boolean;
    get score(): number;
    get permalink(): string;
    get userReportReasons(): string[];
    get modReportReasons(): string[];
    get url(): string;
    toJSON(): Pick<Comment, 'id' | 'authorName' | 'subredditId' | 'subredditName' | 'body' | 'createdAt' | 'parentId' | 'postId' | 'replies' | 'approved' | 'locked' | 'removed' | 'stickied' | 'spam' | 'edited' | 'distinguishedBy' | 'numReports' | 'collapsedBecauseCrowdControl' | 'score' | 'permalink' | 'userReportReasons' | 'modReportReasons' | 'url'>;
    isLocked(): boolean;
    isApproved(): boolean;
    isRemoved(): boolean;
    isSpam(): boolean;
    isStickied(): boolean;
    isDistinguished(): boolean;
    isEdited(): boolean;
    delete(): Promise<void>;
    edit(options: EditCommentOptions): Promise<this>;
    approve(): Promise<void>;
    remove(isSpam?: boolean): Promise<void>;
    lock(): Promise<void>;
    unlock(): Promise<void>;
    reply(options: ReplyToCommentOptions): Promise<Comment>;
    getAuthor(): Promise<User>;
    distinguish(makeSticky?: boolean): Promise<void>;
    distinguishAsAdmin(makeSticky?: boolean): Promise<void>;
    undistinguish(): Promise<void>;
    /**
     * Add a mod note for why the comment was removed
     *
     * @param options.reasonId id of a Removal Reason - you can leave this as an empty string if you don't have one
     * @param options.modNote the reason for removal (maximum 100 characters) (optional)
     * @returns
     */
    addRemovalNote(options: {
        reasonId: string;
        modNote?: string;
    }): Promise<void>;
}
//# sourceMappingURL=Comment.d.ts.map
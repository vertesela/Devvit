import type { T2ID } from '@devvit/shared-types/tid.js';
import type { GetCommentsByUserOptions } from './Comment.js';
import { Comment } from './Comment.js';
import type { UserFlair } from './Flair.js';
import type { ListingFetchOptions } from './Listing.js';
import { Listing } from './Listing.js';
import type { GetPostsByUserOptions } from './Post.js';
import { Post } from './Post.js';
export type GetSubredditUsersByTypeOptions = ListingFetchOptions & {
    subredditName: string;
    type: 'banned' | 'muted' | 'wikibanned' | 'contributors' | 'wikicontributors' | 'moderators';
    username?: string;
};
export type RelationshipType = 'moderator_invite' | 'contributor' | 'banned' | 'muted' | 'wikibanned' | 'wikicontributor';
export type ModeratorPermission = 'all' | 'wiki' | 'posts' | 'access' | 'mail' | 'config' | 'flair' | 'chat_operator' | 'chat_config';
export type CreateRelationshipOptions = {
    subredditName: string;
    username: string;
    type: RelationshipType;
    banContext?: string;
    banMessage?: string;
    banReason?: string;
    duration?: number;
    note?: string;
    permissions?: ModeratorPermission[];
};
export type RemoveRelationshipOptions = {
    subredditName: string;
    username: string;
    type: RelationshipType | 'moderator';
};
export type BanUserOptions = {
    username: string;
    subredditName: string;
    context?: string;
    message?: string;
    reason?: string;
    duration?: number;
    note?: string;
};
export type BanWikiContributorOptions = {
    username: string;
    subredditName: string;
    reason?: string;
    duration?: number;
    note?: string;
};
export type GetUserOverviewOptions = {
    username: string;
    sort?: 'hot' | 'new' | 'top' | 'controversial';
    timeframe?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';
    pageSize?: number;
    limit?: number;
    after?: string;
    before?: string;
};
/**
 * A class representing a user.
 */
export declare class User {
    #private;
    /**
     * The ID (starting with t2_) of the user to retrieve.
     * @example 't2_1w72'
     */
    get id(): T2ID;
    /**
     * The username of the user omitting the u/.
     * @example 'spez'
     */
    get username(): string;
    /**
     * The date the user was created.
     */
    get createdAt(): Date;
    /**
     * The amount of link karma the user has.
     */
    get linkKarma(): number;
    /**
     * The amount of comment karma the user has.
     */
    get commentKarma(): number;
    /**
     * Whether the user's profile is marked as NSFW (Not Safe For Work).
     */
    get nsfw(): boolean;
    /**
     * Whether the user is admin.
     */
    get isAdmin(): boolean;
    /**
     * The permissions the user has on the subreddit.
     */
    get modPermissions(): Map<string, ModeratorPermission[]>;
    /**
     * Returns the HTTP URL for the user
     */
    get url(): string;
    /**
     * Returns a permalink path relative to https://www.reddit.com
     */
    get permalink(): string;
    toJSON(): Pick<User, 'id' | 'username' | 'createdAt' | 'linkKarma' | 'commentKarma' | 'nsfw'> & {
        modPermissionsBySubreddit: Record<string, ModeratorPermission[]>;
    };
    /**
     * Get the mod permissions the user has on the subreddit if they are a moderator.
     *
     * @param subredditName - name of the subreddit
     * @returns the moderator permissions the user has on the subreddit
     */
    getModPermissionsForSubreddit(subredditName: string): Promise<ModeratorPermission[]>;
    /**
     * Get the user's comments.
     *
     * @param options - Options for the request
     * @param options.sort - The sort order of the comments. e.g. 'new'
     * @param options.timeframe - The timeframe of the comments. e.g. 'all'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @returns A Listing of Comment objects.
     */
    getComments(options: Omit<GetCommentsByUserOptions, 'username'>): Listing<Comment>;
    /**
     * Get the user's posts.
     *
     * @param options - Options for the request
     * @param options.sort - The sort order of the posts. e.g. 'new'
     * @param options.timeframe - The timeframe of the posts. e.g. 'all'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     */
    getPosts(options: Omit<GetPostsByUserOptions, 'username'>): Listing<Post>;
    /**
     * Retrieve the user's flair for the subreddit.
     *
     * @param subreddit - The name of the subreddit associated with the user's flair.
     *
     * @example
     * ```ts
     * const username = "badapple"
     * const subredditName = "mysubreddit"
     * const user = await reddit.getUserByUsername(username);
     * const userFlair = await user.getUserFlairBySubreddit(subredditName);
     * ```
     */
    getUserFlairBySubreddit(subreddit: string): Promise<UserFlair | undefined>;
    getSnoovatarUrl(): Promise<string | undefined>;
}
//# sourceMappingURL=User.d.ts.map
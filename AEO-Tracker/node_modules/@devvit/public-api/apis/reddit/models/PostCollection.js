var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PostCollection_metadata, _PostCollection_id, _PostCollection_subredditId, _PostCollection_title, _PostCollection_description, _PostCollection_authorId, _PostCollection_authorName, _PostCollection_permalink, _PostCollection_primaryLinkId, _PostCollection_linkIds, _PostCollection_createdAtUtc, _PostCollection_lastUpdateUtc, _PostCollection_displayLayout;
import { assertNonNull } from '@devvit/shared-types/NonNull.js';
import { Devvit } from '../../../devvit/Devvit.js';
import { makeGettersEnumerable } from '../helpers/makeGettersEnumerable.js';
/** Determines how the collection items will be displayed in the ui. */
export var CollectionDisplayLayout;
(function (CollectionDisplayLayout) {
    /** PostCollection items will be displayed as a gallery. */
    CollectionDisplayLayout["Gallery"] = "GALLERY";
    /** PostCollection items will be displayed as a list. */
    CollectionDisplayLayout["Timeline"] = "TIMELINE";
})(CollectionDisplayLayout || (CollectionDisplayLayout = {}));
function ConvertDisplayLayoutFromProtoToAPI(displayLayout) {
    if (displayLayout === 'GALLERY') {
        return CollectionDisplayLayout.Gallery;
    }
    return CollectionDisplayLayout.Timeline;
}
export class PostCollection {
    /**
     * @internal
     */
    constructor(data, metadata) {
        _PostCollection_metadata.set(this, void 0);
        _PostCollection_id.set(this, void 0);
        _PostCollection_subredditId.set(this, void 0);
        _PostCollection_title.set(this, void 0);
        _PostCollection_description.set(this, void 0);
        _PostCollection_authorId.set(this, void 0);
        _PostCollection_authorName.set(this, void 0);
        _PostCollection_permalink.set(this, void 0);
        _PostCollection_primaryLinkId.set(this, void 0);
        _PostCollection_linkIds.set(this, void 0);
        _PostCollection_createdAtUtc.set(this, void 0);
        _PostCollection_lastUpdateUtc.set(this, void 0);
        _PostCollection_displayLayout.set(this, void 0);
        assertNonNull(data.collectionId, 'Collection Id is missing or undefined');
        assertNonNull(data.subredditId, 'Subreddit Id is missing or undefined');
        assertNonNull(data.title, 'Collection title is missing or undefined');
        assertNonNull(data.authorId, "Collection author's id is missing or undefined");
        assertNonNull(data.authorName, "Collection author's id is missing or undefined");
        assertNonNull(data.createdAtUtc, 'Collection create timestamp is missing');
        assertNonNull(data.lastUpdateUtc, 'Collection last updated timestamp is missing');
        __classPrivateFieldSet(this, _PostCollection_metadata, metadata, "f");
        __classPrivateFieldSet(this, _PostCollection_id, data.collectionId, "f");
        __classPrivateFieldSet(this, _PostCollection_subredditId, data.subredditId, "f");
        __classPrivateFieldSet(this, _PostCollection_title, data.title, "f");
        __classPrivateFieldSet(this, _PostCollection_description, data.description || '', "f");
        __classPrivateFieldSet(this, _PostCollection_authorId, data.authorId, "f");
        __classPrivateFieldSet(this, _PostCollection_authorName, data.authorName, "f");
        __classPrivateFieldSet(this, _PostCollection_permalink, data.permalink, "f");
        __classPrivateFieldSet(this, _PostCollection_primaryLinkId, data.primaryLinkId, "f");
        __classPrivateFieldSet(this, _PostCollection_linkIds, data.linkIds || [], "f");
        __classPrivateFieldSet(this, _PostCollection_displayLayout, ConvertDisplayLayoutFromProtoToAPI(data.displayLayout), "f");
        __classPrivateFieldSet(this, _PostCollection_createdAtUtc, data.createdAtUtc, "f");
        __classPrivateFieldSet(this, _PostCollection_lastUpdateUtc, data.lastUpdateUtc, "f");
        makeGettersEnumerable(this);
    }
    // Getters
    /**
     * The ID of the collection
     */
    get id() {
        return __classPrivateFieldGet(this, _PostCollection_id, "f");
    }
    /**
     * The subreddit ID of the subreddit where the collection belongs.
     */
    get subredditId() {
        return __classPrivateFieldGet(this, _PostCollection_subredditId, "f");
    }
    /**
     * The title of the collection.
     */
    get title() {
        return __classPrivateFieldGet(this, _PostCollection_title, "f");
    }
    /**
     * The description of the collection.
     */
    get description() {
        return __classPrivateFieldGet(this, _PostCollection_description, "f");
    }
    /**
     * The user ID of the author of the collection.
     */
    get authorId() {
        return __classPrivateFieldGet(this, _PostCollection_authorId, "f");
    }
    /**
     * The username of the author of the collection.
     */
    get authorName() {
        return __classPrivateFieldGet(this, _PostCollection_authorName, "f");
    }
    /**
     * The permalink to the collection.
     */
    get permalink() {
        return __classPrivateFieldGet(this, _PostCollection_permalink, "f");
    }
    /**
     * The primaryLinkId in the collection.
     */
    get primaryLinkId() {
        return __classPrivateFieldGet(this, _PostCollection_primaryLinkId, "f");
    }
    /**
     * The post IDs of the posts in the collection.
     */
    get linkIds() {
        return __classPrivateFieldGet(this, _PostCollection_linkIds, "f");
    }
    /**
     * The timestamp when this collection was created.
     */
    get createdAtUtc() {
        return __classPrivateFieldGet(this, _PostCollection_createdAtUtc, "f");
    }
    /**
     * The timestamp when this collection was last updated.
     */
    get lastUpdateUtc() {
        return __classPrivateFieldGet(this, _PostCollection_lastUpdateUtc, "f");
    }
    /**
     * The layout used to display this collection in the UI.
     */
    get displayLayout() {
        return __classPrivateFieldGet(this, _PostCollection_displayLayout, "f");
    }
    // Static Methods
    /**
     * Fetches a collection given the collection ID.
     *
     * @param options See interface
     * @param metadata See interface
     *
     * @returns A promise that resolves to a collection.
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById({
     *      collection_id: "198febf6-084c-4a21-bdbd-a014e5fd0d4d",
     *   },
     *   metadata
     * );
     * ```
     * @internal
     */
    static async getCollectionById(options, metadata) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        const response = await client.Collection(options, metadata);
        return new PostCollection(response, metadata);
    }
    /**
     * Creates a new collection for the given subreddit.
     *
     * @param options See interface
     * @param metadata See interface
     *
     * @returns A promise that resolves to a collection.
     *
     * @example
     * ```ts
     *   const collection = await reddit.createCollection({
     *      title: "Cats",
     *      description: "This is a post collection about cats",
     *      subredditId: "t5_asd",
     *      displayLayout: "GALLERY"
     *    })
     * ```
     * @internal
     */
    static async create(options, metadata) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        const response = await client.Create({
            srFullname: options.subredditId,
            title: options.title,
            description: options.description,
            displayLayout: options.displayLayout,
        }, metadata);
        return new PostCollection(response, metadata);
    }
    /**
     * Gets the list of collections that exist in a subreddit.
     *
     * @param options See interface
     * @param metadata See interface
     *
     * @returns A promise that resolves to an array of collections.
     *
     * @example
     * ```ts
     * const collections = await reddit.getCollectionsForSubreddit({
     *    subredditId: "t5_asdf"
     * })
     * ```
     * @internal
     */
    static async getCollectionsForSubreddit(options, metadata) {
        const response = await Devvit.redditapiv2Plugin.GetSubredditCollections({ srFullname: options.subredditId }, metadata);
        return response.collections.map((data) => new PostCollection(data, metadata));
    }
    /**
     * Adds a post to the collection.
     *
     * @param postId The id of the post to add to the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.addPost("t3_asd")
     * ```
     */
    async addPost(postId) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.AddPost({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            linkFullname: postId,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldGet(this, _PostCollection_linkIds, "f").push(postId);
    }
    /**
     * Remove a post from the collection.
     *
     * @param postId The id of the post to add to the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.removePost("t3_asd")
     * ```
     */
    async removePost(postId) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.RemovePost({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            linkFullname: postId,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldSet(this, _PostCollection_linkIds, __classPrivateFieldGet(this, _PostCollection_linkIds, "f").filter((id) => id !== postId), "f");
    }
    /**
     * Deletes the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.delete()
     * ```
     */
    async delete() {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.Delete({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
    }
    /**
     * Follows the collection.
     *
     * @param follow True to follow the collection, false to unfollow the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * // Follow the collection
     * await collection.follow(true)
     * // Unfollow the collection
     * await collection.follow(false)
     * ```
     */
    async follow(follow) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.Follow({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            follow,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
    }
    /**
     * Sets the order of the posts in the collection.
     *
     * @param postIds Array of post ids that determins the order of the posts in the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.reorder(["t3_asd", "t3_fgh"])
     * ```
     */
    async reorder(postIds) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.Reorder({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            linkIds: postIds.join(','),
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldSet(this, _PostCollection_linkIds, postIds, "f");
    }
    /**
     * Sets the title of the collection.
     *
     * @param title The new title of the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateTitle("Dogs")
     * ```
     */
    async updateTitle(title) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.UpdateTitle({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            title,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldSet(this, _PostCollection_title, title, "f");
    }
    /**
     * Sets the description of the collection.
     *
     * @param description The new description of the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateDescription("Posts about dogs")
     * ```
     */
    async updateDescription(description) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.UpdateDescription({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            description,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldSet(this, _PostCollection_description, description, "f");
    }
    /**
     * Sets the display layout of the collection
     *
     * @param displayLayout One of: TIMELINE | GALLERY. This determines the layout of posts in the collection UI.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateLayout("GALLERY")
     * ```
     */
    async updateLayout(displayLayout) {
        const client = Devvit.redditAPIPlugins.PostCollections;
        await client.UpdateDisplayLayout({
            collectionId: __classPrivateFieldGet(this, _PostCollection_id, "f"),
            displayLayout,
        }, __classPrivateFieldGet(this, _PostCollection_metadata, "f"));
        __classPrivateFieldSet(this, _PostCollection_displayLayout, displayLayout, "f");
    }
}
_PostCollection_metadata = new WeakMap(), _PostCollection_id = new WeakMap(), _PostCollection_subredditId = new WeakMap(), _PostCollection_title = new WeakMap(), _PostCollection_description = new WeakMap(), _PostCollection_authorId = new WeakMap(), _PostCollection_authorName = new WeakMap(), _PostCollection_permalink = new WeakMap(), _PostCollection_primaryLinkId = new WeakMap(), _PostCollection_linkIds = new WeakMap(), _PostCollection_createdAtUtc = new WeakMap(), _PostCollection_lastUpdateUtc = new WeakMap(), _PostCollection_displayLayout = new WeakMap();

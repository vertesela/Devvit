/** Determines how the collection items will be displayed in the ui. */
export declare enum CollectionDisplayLayout {
    /** PostCollection items will be displayed as a gallery. */
    Gallery = "GALLERY",
    /** PostCollection items will be displayed as a list. */
    Timeline = "TIMELINE"
}
export type CreateCollectionInput = {
    /** The title of the collection. */
    title?: string;
    /** The t5_ id of the subreddit in which this collection will be created. */
    subredditId?: string;
    /** The description of the collection. */
    description?: string;
    /** One of: TIMELINE | GALLERY. This determines the layout of posts in the collection UI. */
    displayLayout?: CollectionDisplayLayout;
};
export type SubredditCollectionsInput = {
    /** The t5_ id of the subreddit that contains the collections to be retrieved. */
    subredditId?: string;
};
export declare class PostCollection {
    #private;
    /**
     * The ID of the collection
     */
    get id(): string;
    /**
     * The subreddit ID of the subreddit where the collection belongs.
     */
    get subredditId(): string;
    /**
     * The title of the collection.
     */
    get title(): string;
    /**
     * The description of the collection.
     */
    get description(): string;
    /**
     * The user ID of the author of the collection.
     */
    get authorId(): string;
    /**
     * The username of the author of the collection.
     */
    get authorName(): string;
    /**
     * The permalink to the collection.
     */
    get permalink(): string | undefined;
    /**
     * The primaryLinkId in the collection.
     */
    get primaryLinkId(): string | undefined;
    /**
     * The post IDs of the posts in the collection.
     */
    get linkIds(): string[];
    /**
     * The timestamp when this collection was created.
     */
    get createdAtUtc(): Date;
    /**
     * The timestamp when this collection was last updated.
     */
    get lastUpdateUtc(): Date;
    /**
     * The layout used to display this collection in the UI.
     */
    get displayLayout(): CollectionDisplayLayout;
    /**
     * Adds a post to the collection.
     *
     * @param postId The id of the post to add to the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.addPost("t3_asd")
     * ```
     */
    addPost(postId: string): Promise<void>;
    /**
     * Remove a post from the collection.
     *
     * @param postId The id of the post to add to the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.removePost("t3_asd")
     * ```
     */
    removePost(postId: string): Promise<void>;
    /**
     * Deletes the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.delete()
     * ```
     */
    delete(): Promise<void>;
    /**
     * Follows the collection.
     *
     * @param follow True to follow the collection, false to unfollow the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * // Follow the collection
     * await collection.follow(true)
     * // Unfollow the collection
     * await collection.follow(false)
     * ```
     */
    follow(follow: boolean): Promise<void>;
    /**
     * Sets the order of the posts in the collection.
     *
     * @param postIds Array of post ids that determins the order of the posts in the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.reorder(["t3_asd", "t3_fgh"])
     * ```
     */
    reorder(postIds: string[]): Promise<void>;
    /**
     * Sets the title of the collection.
     *
     * @param title The new title of the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateTitle("Dogs")
     * ```
     */
    updateTitle(title: string): Promise<void>;
    /**
     * Sets the description of the collection.
     *
     * @param description The new description of the collection.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateDescription("Posts about dogs")
     * ```
     */
    updateDescription(description: string): Promise<void>;
    /**
     * Sets the display layout of the collection
     *
     * @param displayLayout One of: TIMELINE | GALLERY. This determines the layout of posts in the collection UI.
     *
     * @returns Void
     *
     * @example
     * ```ts
     * const collection = await reddit.getCollectionById("198febf6-084c-4a21-bdbd-a014e5fd0d4d")
     * await collection.updateLayout("GALLERY")
     * ```
     */
    updateLayout(displayLayout: CollectionDisplayLayout): Promise<void>;
}
//# sourceMappingURL=PostCollection.d.ts.map
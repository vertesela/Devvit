import type { JsonStatus, Metadata } from '@devvit/protos';
import type { AddRemovalNoteOptions, AddWidgetData, BanUserOptions, BanWikiContributorOptions, CommentSubmissionOptions, CreateCollectionInput, CreateFlairTemplateOptions, CreateModNoteOptions, CreateWikiPageOptions, CrosspostOptions, DeleteNotesOptions, EditFlairTemplateOptions, GetCommentsByUserOptions, GetCommentsOptions, GetHotPostsOptions, GetModNotesOptions, GetModerationLogOptions, GetPageRevisionsOptions, GetPostsByUserOptions, GetPostsOptions, GetPostsOptionsWithTimeframe, GetPrivateMessagesOptions, GetSubredditUsersByTypeOptions, GetUserOverviewOptions, Listing, ModAction, ModLogOptions, ModeratorPermission, RemovalReason, SendPrivateMessageAsSubredditOptions, SendPrivateMessageOptions, SetPostFlairOptions, SetUserFlairOptions, SubmitPostOptions, UpdatePageSettingsOptions, UpdateWikiPageOptions, WikiPageRevision, WikiPageSettings } from './models/index.js';
import { Comment, FlairTemplate, ModMailService, ModNote, Post, PostCollection, PrivateMessage, Subreddit, User, Widget, WikiPage } from './models/index.js';
type GetSubredditUsersOptions = Omit<GetSubredditUsersByTypeOptions, 'type'>;
export type InviteModeratorOptions = {
    /** The name of the subreddit to invite the user to moderate */
    subredditName: string;
    /** The name of the user to invite as a moderator */
    username: string;
    /** The permissions to grant the user */
    permissions?: ModeratorPermission[];
};
export type MuteUserOptions = {
    /** The name of the subreddit to mute the user in */
    subredditName: string;
    /** The name of the user to mute */
    username: string;
    /** A mod note on why the user was muted. (optional) */
    note?: string;
};
/**
 * The Reddit API Client
 *
 * To use the Reddit API Client, add it to the plugin configuration at the top of the file.
 *
 * @example
 * ```ts
 *
 * Devvit.configure({
 *    redditAPI: true,
 *    // other plugins
 * })

 * // use within one of our capability handlers e.g. Menu Actions, Triggers, Scheduled Job Type, etc
 * async (event, context) => {
 *     const { reddit } = context
 *     const subreddit = await reddit.getSubredditById(context.subredditId);
 *     context.reddit.submitPost({
 *       subredditName: subreddit.name,
 *       title: 'test post',
 *       text: 'test body',
 *     })
 *     // additional code
 * }
 * ```
 */
export declare class RedditAPIClient {
    #private;
    constructor(metadata: Metadata);
    /**
     * Get ModMail API object
     *
     * @example
     * ```ts
     * await reddit.modMail.reply({
     *   body: "Here is my message",
     *   conversationId: "abcd42";
     * })
     * ```
     */
    get modMail(): ModMailService;
    /**
     * Gets a {@link Subreddit} object by ID
     *
     * @param {string} id - The ID (starting with t5_) of the subreddit to retrieve. e.g. t5_2qjpg
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const memes = await reddit.getSubredditById('t5_2qjpg');
     * ```
     */
    getSubredditById(id: string): Promise<Subreddit>;
    /**
     * Gets a {@link Subreddit} object by name
     *
     * @param {string} name The name of a subreddit omitting the r/. This is case insensitive.
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const askReddit = await reddit.getSubredditByName('askReddit');
     * ```
     */
    getSubredditByName(name: string): Promise<Subreddit>;
    /**
     * Add a removal reason to a subreddit
     *
     * @param subredditName Name of the subreddit being removed.
     * @param options Options.
     * @param options.title The title of the removal reason.
     * @param options.message The message associated with the removal reason.
     * @example
     * ```ts
     * const newReason = await reddit.addSubredditRemovalReasons(
     *   'askReddit',
     *   {
     *     title: 'Spam',
     *     message: 'This is spam!'
     *   }
     * );
     * console.log(newReason.id)
     * ```
     *
     * @returns {string} Removal Reason ID
     */
    addSubredditRemovalReason(subredditName: string, options: {
        title: string;
        message: string;
    }): Promise<string>;
    /**
     * Get the list of subreddit's removal reasons (ordered)
     *
     * @param subredditName
     * @example
     * ```ts
     * const reasons = await reddit.getSubredditRemovalReasons('askReddit');
     *
     * for (let reason of reasons) {
     *   console.log(reason.id, reason.message, reason.title)
     * }
     * ```
     *
     * @returns Ordered array of Removal Reasons
     */
    getSubredditRemovalReasons(subredditName: string): Promise<RemovalReason[]>;
    /**
     * Retrieves the current subreddit based on the provided metadata.
     *
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const currentSubreddit = await reddit.getCurrentSubreddit(metadata);
     * ```
     */
    getCurrentSubreddit(): Promise<Subreddit>;
    /**
     * Gets a {@link Post} object by ID
     *
     * @param id
     * @returns A Promise that resolves to a Post object.
     */
    getPostById(id: string): Promise<Post>;
    /**
     * Submits a new post to a subreddit.
     *
     * @param options - Either a self post or a link post.
     * @returns A Promise that resolves to a Post object.
     * @example
     * ```ts
     * const post = await reddit.submitPost({
     *   subredditName: 'devvit',
     *   title: 'Hello World',
     *   richtext: new RichTextBuilder()
     *     .heading({ level: 1 }, (h) => {
     *       h.rawText('Hello world');
     *     })
     *     .codeBlock({}, (cb) => cb.rawText('This post was created via the Devvit API'))
     *     .build()
     * });
     * ```
     */
    submitPost(options: SubmitPostOptions): Promise<Post>;
    /**
     * Crossposts a post to a subreddit.
     *
     * @param options - Options for crossposting a post
     * @param options.subredditName - The name of the subreddit to crosspost to
     * @param options.postId - The ID of the post to crosspost
     * @param options.title - The title of the crosspost
     * @returns - A Promise that resolves to a Post object.
     */
    crosspost(options: CrosspostOptions): Promise<Post>;
    /**
     * Gets a {@link User} object by ID
     *
     * @param id - The ID (starting with t2_) of the user to retrieve. e.g. t2_1qjpg
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getUserById('t2_1qjpg');
     * ```
     */
    getUserById(id: string): Promise<User>;
    getCollectionById(collectionId: string): Promise<PostCollection>;
    createCollection(options: CreateCollectionInput): Promise<PostCollection>;
    getCollectionsForSubreddit(subredditId: string): Promise<PostCollection[]>;
    /**
     * Gets a {@link User} object by username
     *
     * @param username - The username of the user omitting the u/. e.g. 'devvit'
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getUserByUsername('devvit');
     * ```
     */
    getUserByUsername(username: string): Promise<User>;
    /**
     * Get the current calling user based on the provided metadata.
     *
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getCurrentUser(metadata);
     * ```
     */
    getCurrentUser(): Promise<User>;
    /**
     * Get the user that the app runs as on the provided metadata.
     *
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getAppUser(metadata);
     * ```
     */
    getAppUser(): Promise<User>;
    /**
     * Get the snoovatar URL for a given username.
     *
     * @param username - The username of the snoovatar to retrieve
     * @returns A Promise that resolves to a URL of the snoovatar image if it exists.
     */
    getSnoovatarUrl(username: string): Promise<string | undefined>;
    /**
     * Get a {@link Comment} object by ID
     *
     * @param id - The ID (starting with t1_) of the comment to retrieve. e.g. t1_1qjpg
     * @returns A Promise that resolves to a Comment object.
     * @example
     * ```ts
     * const comment = await reddit.getCommentById('t1_1qjpg');
     * ```
     */
    getCommentById(id: string): Promise<Comment>;
    /**
     * Get a list of comments from a specific post or comment.
     *
     * @param options - Options for the request
     * @param options.postId - The ID of the post e.g. 't3_1qjpg'
     * @param options.commentId - The ID of the comment e.g. 't1_1qjpg'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @returns A Listing of Comment objects.
     * @example
     * ```ts
     * const comments = await reddit.getComments({
     *   postId: 't3_1qjpg',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getComments(options: GetCommentsOptions): Listing<Comment>;
    /**
     * Get a list of comments by a specific user.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user omitting the u/. e.g. 'spez'
     * @param options.sort - The sort order of the comments. e.g. 'new'
     * @param options.timeframe - The timeframe of the comments. e.g. 'all'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @returns A Listing of Comment objects.
     */
    getCommentsByUser(options: GetCommentsByUserOptions): Listing<Comment>;
    /**
     * Submit a new comment to a post or comment.
     *
     * @param options - You must provide either `options.text` or `options.richtext` but not both.
     * @param options.id - The ID of the post or comment to comment on. e.g. 't3_1qjpg' for post and 't1_1qgif' for comment
     * @param options.text - The text of the comment
     * @param options.richtext - The rich text of the comment
     * @returns A Promise that resolves to a Comment object.
     */
    submitComment(options: CommentSubmissionOptions & {
        id: string;
    }): Promise<Comment>;
    /**
     * Get a list of controversial posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getControversialPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getControversialPosts(options: GetPostsOptionsWithTimeframe): Listing<Post>;
    /**
     * Get a list of controversial posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getControversialPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getTopPosts(options: GetPostsOptionsWithTimeframe): Listing<Post>;
    /**
     * Get a list of hot posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getHotPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getHotPosts(options: GetHotPostsOptions): Listing<Post>;
    /**
     * Get a list of new posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getNewPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getNewPosts(options: GetPostsOptions): Listing<Post>;
    /**
     * Get a list of hot posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getRisingPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getRisingPosts(options: GetPostsOptions): Listing<Post>;
    /**
     * Get a list of posts from a specific user.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user omitting the u/. e.g. 'spez'
     * @param options.sort - The sort method to use. e.g. 'new'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     */
    getPostsByUser(options: GetPostsByUserOptions): Listing<Post>;
    /**
     * Get a list of posts and comments from a specific user.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user omitting the u/. e.g. 'spez'
     * @param options.sort - The sort method to use. e.g. 'new'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of `Post` and `Comment` objects.
     */
    getCommentsAndPostsByUser(options: GetUserOverviewOptions): Listing<Post | Comment>;
    /**
     * Get the moderation log for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the moderation log from. e.g. 'memes'
     * @param options.moderatorUsernames (optional) A moderator filter. Accepts an array of usernames
     * @param options.type (optional) Filter the entries by the type of the Moderator action
     * @param options.limit - (optional) The maximum number of ModActions to return. e.g. 1000
     * @param options.pageSize - (optional) The number of ModActions to return per request. e.g. 100
     * @returns A Listing of ModAction objects.
     * @example
     * ```ts
     * const modActions = await reddit.getModerationLog({
     *   subredditName: 'memes',
     *   moderatorUsernames: ['spez'],
     *   type: 'banuser',
     *   limit: 1000,
     *   pageSize: 100
     * }).all();
     * ```
     */
    getModerationLog(options: GetModerationLogOptions): Listing<ModAction>;
    /**
     * Get a list of users who have been approved to post in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the approved users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is approved to post in the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A Listing of User objects.
     */
    getApprovedUsers(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Approve a user to post in a subreddit.
     *
     * @param username - The username of the user to approve. e.g. 'spez'
     * @param subredditName - The name of the subreddit to approve the user in. e.g. 'memes'
     */
    approveUser(username: string, subredditName: string): Promise<void>;
    /**
     * Remove a user's approval to post in a subreddit.
     *
     * @param username - The username of the user to remove approval from. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user's approval from. e.g. 'memes'
     */
    removeUser(username: string, subredditName: string): Promise<void>;
    /**
     * Get a list of users who are wiki contributors of a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the wiki contributors from. e.g. 'memes'
     * @param options.username - Use this to see if a user is a wiki contributor for the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A Listing of User objects.
     */
    getWikiContributors(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Add a user as a wiki contributor for a subreddit.
     *
     * @param username - The username of the user to add as a wiki contributor. e.g. 'spez'
     * @param subredditName - The name of the subreddit to add the user as a wiki contributor. e.g. 'memes'
     */
    addWikiContributor(username: string, subredditName: string): Promise<void>;
    /**
     * Remove a user's wiki contributor status for a subreddit.
     *
     * @param username - The username of the user to remove wiki contributor status from. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user's wiki contributor status from. e.g. 'memes'
     */
    removeWikiContributor(username: string, subredditName: string): Promise<void>;
    /**
     * Get a list of users who are banned from a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the banned users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is banned from the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A Listing of User objects.
     */
    getBannedUsers(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Ban a user from a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to ban. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to ban the user from. e.g. 'memes'
     * @param options.note - A mod note for the ban. (optional)
     * @param options.duration - The number of days the user should be banned for. (optional)
     * @param options.message - A message to send to the user when they are banned. (optional)
     * @param options.context - The ID of the post or comment that caused the ban. (optional)
     * @param options.reason - The reason for the ban. (optional)
     */
    banUser(options: BanUserOptions): Promise<void>;
    /**
     * Unban a user from a subreddit.
     *
     * @param username - The username of the user to unban. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unban the user from. e.g. 'memes'
     */
    unbanUser(username: string, subredditName: string): Promise<void>;
    /**
     * Get a list of users who are banned from contributing to the wiki on a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the banned wiki contributors from. e.g. 'memes'
     * @param options.username - Use this to see if a user is banned from contributing to the wiki on a subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A Listing of User objects.
     */
    getBannedWikiContributors(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Ban a user from contributing to the wiki on a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to ban. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to ban the user from contributing to the wiki on. e.g. 'memes'
     * @param options.reason - The reason for the ban. (optional)
     * @param options.duration - The number of days the user should be banned for. (optional)
     * @param options.note - A mod note for the ban. (optional)
     */
    banWikiContributor(options: BanWikiContributorOptions): Promise<void>;
    /**
     *
     * @param username - The username of the user to unban. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unban the user from contributing to the wiki on. e.g. 'memes'
     */
    unbanWikiContributor(username: string, subredditName: string): Promise<void>;
    /**
     * Get a list of users who are moderators for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the moderators from. e.g. 'memes'
     * @param options.username - Use this to see if a user is a moderator of the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A Listing of User objects.
     */
    getModerators(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Invite a user to become a moderator of a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to invite. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to invite the user to moderate. e.g. 'memes'
     * @param options.permissions - The permissions to give the user. (optional) Defaults to 'all'.
     */
    inviteModerator(options: InviteModeratorOptions): Promise<void>;
    /**
     * Revoke a moderator invite for a user to a subreddit.
     *
     * @param username - The username of the user to revoke the invite for. e.g. 'spez'
     * @param subredditName - The name of the subreddit to revoke the invite for. e.g. 'memes'
     */
    revokeModeratorInvite(username: string, subredditName: string): Promise<void>;
    /**
     * Remove a user as a moderator of a subreddit.
     *
     * @param username - The username of the user to remove as a moderator. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user as a moderator from. e.g. 'memes'
     */
    removeModerator(username: string, subredditName: string): Promise<void>;
    /**
     * Update the permissions of a moderator of a subreddit.
     *
     * @param username - The username of the user to update the permissions for. e.g. 'spez'
     * @param subredditName - The name of the subreddit. e.g. 'memes'
     * @param permissions - The permissions to give the user. e.g ['posts', 'wiki']
     */
    setModeratorPermissions(username: string, subredditName: string, permissions: ModeratorPermission[]): Promise<void>;
    /**
     * Get a list of users who are muted in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the muted users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is muted in the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @returns A listing of User objects.
     */
    getMutedUsers(options: GetSubredditUsersOptions): Listing<User>;
    /**
     * Mute a user in a subreddit. Muting a user prevents them from sending modmail.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to mute. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to mute the user in. e.g. 'memes'
     * @param options.note - A mod note on why the user was muted. (optional)
     */
    muteUser(options: MuteUserOptions): Promise<void>;
    /**
     * Unmute a user in a subreddit. Unmuting a user allows them to send modmail.
     *
     * @param username - The username of the user to unmute. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unmute the user in. e.g. 'memes'
     */
    unmuteUser(username: string, subredditName: string): Promise<void>;
    /**
     * Get a list of mod notes related to a user in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the mod notes from. e.g. 'memes'
     * @param options.username - The username of the user to get the mod notes for. e.g. 'spez'
     * @param options.filter - Filter the mod notes by type. e.g. 'NOTE', 'BAN', 'APPROVAL'
     * @param options.limit - The maximum number of mod notes to return. e.g. 1000
     * @param options.pageSize - The number of mod notes to return per request. e.g. 100
     * @returns A listing of ModNote objects.
     */
    getModNotes(options: GetModNotesOptions): Listing<ModNote>;
    /**
     * Delete a mod note.
     *
     * @param options - Options for the request
     * @param options.subreddit - The name of the subreddit to delete the mod note from. e.g. 'memes'
     * @param options.noteId - The ID of the mod note to delete (should have a ModNote_ prefix).
     * @returns True if it was deleted successfully; false otherwise.
     */
    deleteModNote(options: DeleteNotesOptions): Promise<boolean>;
    /**
     * Add a mod note.
     *
     * @param options - Options for the request
     * @param options.subreddit - The name of the subreddit to add the mod note to. e.g. 'memes'
     * @param options.user - The username of the user to add the mod note to. e.g. 'spez'
     * @param options.redditId - The ID of the comment or post to add the mod note to. e.g. 't3_1234'
     * @param options.label - The label of the mod note. e.g. 'SPAM_WARNING'
     * @param options.note - The text of the mod note.
     * @returns A Promise that resolves if the mod note was successfully added.
     */
    addModNote(options: Omit<CreateModNoteOptions, 'redditId'> & {
        redditId: string;
    }): Promise<ModNote>;
    /**
     * Add a mod note for why a post or comment was removed
     *
     * @param options.itemIds list of thing ids
     * @param options.reasonId id of a Removal Reason - you can leave this as an empty string if you don't have one
     * @param options.modNote the reason for removal (maximum 100 characters) (optional)
     */
    addRemovalNote(options: AddRemovalNoteOptions): Promise<void>;
    /**
     * Sends a private message to a user.
     *
     * @param options - The options for sending the message.
     * @returns A Promise that resolves if the private message was successfully sent.
     */
    sendPrivateMessage(options: SendPrivateMessageOptions): Promise<void>;
    /**
     * Sends a private message to a user on behalf of a subreddit.
     *
     * @param options - The options for sending the message as a subreddit.
     * @returns A Promise that resolves if the private message was successfully sent.
     */
    sendPrivateMessageAsSubreddit(options: SendPrivateMessageAsSubredditOptions): Promise<void>;
    /**
     * Approve a post or comment.
     *
     * @param id - The id of the post (t3_) or comment (t1_) to approve.
     * @example
     * ```ts
     * await reddit.approve('t3_123456');
     * await reddit.approve('t1_123456');
     * ```
     */
    approve(id: string): Promise<void>;
    /**
     * Remove a post or comment.
     *
     * @param id - The id of the post (t3_) or comment (t1_) to remove.
     * @param isSpam - Is the post or comment being removed because it's spam?
     * @example
     * ```ts
     * await reddit.remove('t3_123456', false);
     * await reddit.remove('t1_123456', true);
     * ```
     */
    remove(id: string, isSpam: boolean): Promise<void>;
    /**
     * Get the list of post flair templates for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the post flair templates for.
     * @returns A Promise that resolves with an array of FlairTemplate objects.
     */
    getPostFlairTemplates(subredditName: string): Promise<FlairTemplate[]>;
    /**
     * Get the list of user flair templates for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the user flair templates for.
     * @returns A Promise that resolves with an array of FlairTemplate objects.
     */
    getUserFlairTemplates(subredditName: string): Promise<FlairTemplate[]>;
    /**
     * Create a post flair template for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Whether or not this flair template is only available to mods.
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Whether or not users can edit the flair template when selecting a flair.
     * @returns The created FlairTemplate object.
     */
    createPostFlairTemplate(options: CreateFlairTemplateOptions): Promise<FlairTemplate>;
    /**
     * Create a user flair template for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Whether or not this flair template is only available to mods.
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Whether or not users can edit the flair template when selecting a flair.
     * @returns The created FlairTemplate object.
     */
    createUserFlairTemplate(options: CreateFlairTemplateOptions): Promise<FlairTemplate>;
    /**
     * Edit a flair template for a subreddit. This can be either a post or user flair template.
     * Note: If you leave any of the options fields as undefined, they will reset to their default values.
     *
     * @param options - Options for the request
     * @param options.id - The ID of the flair template to edit.
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Is this flair template only available to mods?
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Can users can edit the flair template when selecting a flair?
     * @returns The edited FlairTemplate object.
     */
    editFlairTemplate(options: EditFlairTemplateOptions): Promise<FlairTemplate>;
    /**
     * Delete a flair template from a subreddit.
     *
     * @param subredditName - The name of the subreddit to delete the flair template from.
     * @param flairTemplateId - The ID of the flair template to delete.
     */
    deleteFlairTemplate(subredditName: string, flairTemplateId: string): Promise<void>;
    /**
     * Set the flair for a user in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to set the flair for.
     * @param options.username - The username of the user to set the flair for.
     * @param options.flairTemplateId - The ID of the flair template to use.
     * @param options.text - The text of the flair.
     * @param options.cssClass - The CSS class of the flair.
     * @param options.backgroundColor - The background color of the flair.
     * @param options.textColor - The text color of the flair.
     */
    setUserFlair(options: SetUserFlairOptions): Promise<void>;
    /**
     * Remove the flair for a user in a subreddit.
     *
     * @param subredditName - The name of the subreddit to remove the flair from.
     * @param username - The username of the user to remove the flair from.
     */
    removeUserFlair(subredditName: string, username: string): Promise<void>;
    /**
     * Set the flair for a post in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to set the flair for.
     * @param options.postId - The ID of the post to set the flair for.
     * @param options.flairTemplateId - The ID of the flair template to use.
     * @param options.text - The text of the flair.
     * @param options.cssClass - The CSS class of the flair.
     * @param options.backgroundColor - The background color of the flair.
     * @param options.textColor - The text color of the flair.
     */
    setPostFlair(options: SetPostFlairOptions): Promise<void>;
    /**
     * Remove the flair for a post in a subreddit.
     *
     * @param subredditName - The name of the subreddit to remove the flair from.
     * @param postId - The ID of the post to remove the flair from.
     */
    removePostFlair(subredditName: string, postId: string): Promise<void>;
    /**
     * Get the widgets for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the widgets for.
     * @returns - An array of Widget objects.
     */
    getWidgets(subredditName: string): Promise<Widget[]>;
    /**
     * Delete a widget from a subreddit.
     *
     * @param subredditName - The name of the subreddit to delete the widget from.
     * @param widgetId - The ID of the widget to delete.
     */
    deleteWidget(subredditName: string, widgetId: string): Promise<void>;
    /**
     * Add a widget to a subreddit.
     *
     * @param widgetData - The data for the widget to add.
     * @returns - The added Widget object.
     */
    addWidget(widgetData: AddWidgetData): Promise<Widget>;
    /**
     * Reorder the widgets for a subreddit.
     *
     * @param subredditName - The name of the subreddit to reorder the widgets for.
     * @param orderByIds - An array of widget IDs in the order that they should be displayed.
     */
    reorderWidgets(subredditName: string, orderByIds: string[]): Promise<void>;
    /**
     * Get a wiki page from a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the wiki page from.
     * @param page - The name of the wiki page to get.
     * @returns The requested WikiPage object.
     */
    getWikiPage(subredditName: string, page: string): Promise<WikiPage>;
    /**
     * Get the wiki pages for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the wiki pages from.
     * @returns A list of the wiki page names for the subreddit.
     */
    getWikiPages(subredditName: string): Promise<string[]>;
    /**
     * Create a new wiki page for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to create.
     * @param options.content - The Markdown content of the wiki page.
     * @param options.reason - The reason for creating the wiki page.
     * @returns - The created WikiPage object.
     */
    createWikiPage(options: CreateWikiPageOptions): Promise<WikiPage>;
    /**
     * Update a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to update.
     * @param options.content - The Markdown content of the wiki page.
     * @param options.reason - The reason for updating the wiki page.
     * @returns The updated WikiPage object.
     */
    updateWikiPage(options: UpdateWikiPageOptions): Promise<WikiPage>;
    /**
     * Get the revisions for a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to get the revisions for.
     * @param options.limit - The maximum number of revisions to return.
     * @param options.after - The ID of the revision to start after.
     * @returns A Listing of WikiPageRevision objects.
     */
    getWikiPageRevisions(options: GetPageRevisionsOptions): Listing<WikiPageRevision>;
    /**
     * Revert a wiki page to a previous revision.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to revert.
     * @param revisionId - The ID of the revision to revert to.
     */
    revertWikiPage(subredditName: string, page: string, revisionId: string): Promise<void>;
    /**
     * Get the settings for a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to get the settings for.
     * @returns A WikiPageSettings object.
     */
    getWikiPageSettings(subredditName: string, page: string): Promise<WikiPageSettings>;
    /**
     * Update the settings for a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to update the settings for.
     * @param options.listed - Whether the wiki page should be listed in the wiki index.
     * @param options.permLevel - The permission level required to edit the wiki page.
     * @returns A WikiPageSettings object.
     */
    updateWikiPageSettings(options: UpdatePageSettingsOptions): Promise<WikiPageSettings>;
    /**
     * Add an editor to a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to add the editor to.
     * @param username - The username of the user to add as an editor.
     */
    addEditorToWikiPage(subredditName: string, page: string, username: string): Promise<void>;
    /**
     * Remove an editor from a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to remove the editor from.
     * @param username - The username of the user to remove as an editor.
     */
    removeEditorFromWikiPage(subredditName: string, page: string, username: string): Promise<void>;
    /**
     * Get private messages sent to the currently authenticated user.
     *
     * @param options - Options for the request
     * @param options.type - The type of messages to get.
     */
    getMessages(options: GetPrivateMessagesOptions): Promise<Listing<PrivateMessage>>;
    /**
     * Mark all private messages as read.
     */
    markAllMessagesAsRead(): Promise<void>;
    /**
     * Report a Post or Comment
     *
     * The report is sent to the moderators of the subreddit for review.
     *
     * @param thing Post or Comment
     * @param options Options
     * @param options.reason Why the thing is reported
     *
     * @example
     * ```ts
     * await reddit.report(post, {
     *  reason: 'This is spam!',
     * })
     * ```
     */
    report(thing: Post | Comment, options: {
        reason: string;
    }): Promise<JsonStatus>;
    /**
     * Return a listing of things requiring moderator review, such as reported things and items.
     *
     * @param options
     *
     * @example
     * ```ts
     * const subreddit = await reddit.getSubredditByName("mysubreddit")
     * let listing = await subreddit.getModQueue();
     * console.log("Posts and Comments: ",  await listing.all())
     * listing = await subreddit.getModQueue({ type: "post"});
     * console.log("Posts: ", await listing.all())
     * ```
     */
    getModQueue(options: ModLogOptions<'comment'>): Listing<Comment>;
    getModQueue(options: ModLogOptions<'post'>): Listing<Post>;
    getModQueue(options: ModLogOptions<'all'>): Listing<Post | Comment>;
    /**
     * Return a listing of things that have been reported.
     *
     * @param options
     *
     * @example
     * ```ts
     * const subreddit = await reddit.getSubredditByName("mysubreddit")
     * let listing = await subreddit.getReports();
     * console.log("Posts and Comments: ", await listing.all())
     * listing = await subreddit.getReports({ type: "post"});
     * console.log("Posts: ", await listing.all())
     * ```
     */
    getReports(options: ModLogOptions<'comment'>): Listing<Comment>;
    getReports(options: ModLogOptions<'post'>): Listing<Post>;
    getReports(options: ModLogOptions<'all'>): Listing<Post | Comment>;
    /**
     * Return a listing of things that have been marked as spam or otherwise removed.
     *
     * @param options
     *
     * @example
     * ```ts
     * const subreddit = await reddit.getSubredditByName("mysubreddit")
     * let listing = await subreddit.getSpam();
     * console.log("Posts and Comments: ", await listing.all())
     * listing = await subreddit.getSpam({ type: "post"});
     * console.log("Posts: ", await listing.all())
     * ```
     */
    getSpam(options: ModLogOptions<'comment'>): Listing<Comment>;
    getSpam(options: ModLogOptions<'post'>): Listing<Post>;
    getSpam(options: ModLogOptions<'all'>): Listing<Post | Comment>;
    /**
     * Return a listing of things that have yet to be approved/removed by a mod.
     *
     * @param options
     *
     * @example
     * ```ts
     * const subreddit = await reddit.getSubredditByName("mysubreddit")
     * let listing = await subreddit.getUnmoderated();
     * console.log("Posts and Comments: ", await listing.all())
     * listing = await subreddit.getUnmoderated({ type: "post"});
     * console.log("Posts: ", await listing.all())
     * ```
     */
    getUnmoderated(options: ModLogOptions<'comment'>): Listing<Comment>;
    getUnmoderated(options: ModLogOptions<'post'>): Listing<Post>;
    getUnmoderated(options: ModLogOptions<'all'>): Listing<Post | Comment>;
    /**
     * Return a listing of things that have been edited recently.
     *
     * @param options
     *
     * @example
     * ```ts
     * const subreddit = await reddit.getSubredditByName("mysubreddit")
     * let listing = await subreddit.getEdited();
     * console.log("Posts and Comments: ", await listing.all())
     * listing = await subreddit.getEdited({ type: "post"});
     * console.log("Posts: ", await listing.all())
     * ```
     */
    getEdited(options: ModLogOptions<'comment'>): Listing<Comment>;
    getEdited(options: ModLogOptions<'post'>): Listing<Post>;
    getEdited(options: ModLogOptions<'all'>): Listing<Post | Comment>;
}
export {};
//# sourceMappingURL=RedditAPIClient.d.ts.map
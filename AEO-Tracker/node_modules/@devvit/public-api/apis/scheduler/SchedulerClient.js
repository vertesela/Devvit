var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SchedulerClient_metadata;
import { assertNonNull } from '@devvit/shared-types/NonNull.js';
import { Devvit } from '../../devvit/Devvit.js';
export class SchedulerClient {
    constructor(metadata) {
        _SchedulerClient_metadata.set(this, void 0);
        __classPrivateFieldSet(this, _SchedulerClient_metadata, metadata, "f");
    }
    async runJob(job) {
        const response = await Devvit.schedulerPlugin.Schedule({
            action: {
                type: job.name,
                data: job.data,
            },
            cron: 'cron' in job ? job.cron : undefined,
            when: 'runAt' in job ? job.runAt : undefined,
        }, __classPrivateFieldGet(this, _SchedulerClient_metadata, "f"));
        return response.id;
    }
    async cancelJob(jobId) {
        await Devvit.schedulerPlugin.Cancel({
            id: jobId,
        }, __classPrivateFieldGet(this, _SchedulerClient_metadata, "f"));
    }
    async listJobs() {
        const response = await Devvit.schedulerPlugin.List(
        /**
         * after and before are required for this API to work
         * so we hardcode after to Unix epoch and before to 10 years from now
         * https://reddit.atlassian.net/browse/DX-3060
         */
        {
            after: new Date(0),
            before: new Date(Date.now() + 10 * 365 * 86400 * 1000),
        }, __classPrivateFieldGet(this, _SchedulerClient_metadata, "f"));
        return response.actions.map((action) => {
            assertNonNull(action.request?.action, 'Scheduled job is malformed');
            if ('when' in action.request && action.request.when != null) {
                return {
                    id: action.id,
                    name: action.request.action.type,
                    runAt: action.request.when,
                    data: action.request.action.data,
                };
            }
            return {
                id: action.id,
                name: action.request.action.type,
                cron: action.request.cron ?? '',
                data: action.request.action,
            };
        });
    }
}
_SchedulerClient_metadata = new WeakMap();

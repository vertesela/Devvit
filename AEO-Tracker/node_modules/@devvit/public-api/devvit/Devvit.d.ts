import { Actor } from '@devvit/runtimes/api/Actor.js';
import type { AppInstallDefinition, AppUpgradeDefinition, BaseContext, CommentCreateDefinition, CommentDeleteDefinition, CommentReportDefinition, CommentSubmitDefinition, CommentUpdateDefinition, Configuration, ContextAPIClients, CustomPostType, Data, Form, FormFunction, FormKey, FormOnSubmitEventHandler, IconName, MenuItem, ModActionDefinition, ModMailDefinition, MultiTriggerDefinition, PostCreateDefinition, PostDeleteDefinition, PostFlairUpdateDefinition, PostReportDefinition, PostSubmitDefinition, PostUpdateDefinition, ScheduledJobType, SettingsFormField, TriggerEvent } from '../types/index.js';
export declare class Devvit extends Actor {
    #private;
    /**
     * Home for debug flags, settings, and other information.
     */
    static debug: {
        /**
         * Should debug block rendering in console.log according to the reified JSX/XML output.  Example:
         *
         *     <hstack><text>hi world</text></hstack>
         *
         */
        emitSnapshots: boolean;
        /**
         * Should console.log the state of the app after every event.
         *
         */
        emitState: boolean;
    };
    /**
     * To use certain APIs and features of Devvit, you must enable them using this function.
     *
     * @param config - The configuration object.
     * @param config.http - Enables the HTTP API.
     * @param config.redditAPI - Enables the Reddit API.
     * @param config.kvStore - Enables the Key Value Storage API.
     * @example
     * ```ts
     * Devvit.configure({
     *   http: true,
     *   redditAPI: true,
     *   kvStore: true,
     *   media: true
     * });
     * ```
     */
    static configure(config: Configuration): void;
    /**
     * Add a menu item to the Reddit UI.
     * @param menuItem - The menu item to add.
     * @param menuItem.label - The label of the menu item.
     * @example
     * ```ts
     * Devvit.addMenuItem({
     *   label: 'My Menu Item',
     *   location: 'subreddit',
     *   onPress: (event, context) => {
     *     const location = event.location;
     *     const targetId = event.targetId;
     *     context.ui.showToast(`You clicked on ${location} ${targetId}`);
     *   }
     * });
     * ```
     */
    static addMenuItem(menuItem: MenuItem): void;
    /**
     * Add a custom post type for your app.
     * @param customPostType - The custom post type to add.
     * @param customPostType.name - The name of the custom post type.
     * @param customPostType.description - An optional description.
     * @param customPostType.height - An optional parameter to set post height, defaults to 'regular'.
     * @param customPostType.render - A function or `Devvit.CustomPostComponent` that returns the UI for the custom post.
     * @example
     * ```ts
     * Devvit.addCustomPostType({
     *   name: 'Counter',
     *   description: 'A simple click counter post.',
     *   render: (context) => {
     *     const [counter, setCounter] = context.useState();
     *
     *     return (
     *       <vstack>
     *         <text>{counter}</text>
     *         <button onPress={() => setCounter(counter => counter + 1)}>Click me!</button>
     *       </vstack>
     *     );
     *   }
     * });
     * ```
     */
    static addCustomPostType(customPostType: CustomPostType): void;
    /**
     * Create a form that can be opened from menu items and custom posts.
     * @param form - The form or a function that returns the form.
     * @param onSubmit - The function to call when the form is submitted.
     * @returns A unique key for the form that can used with `ui.showForm`.
     */
    static createForm(form: Form | FormFunction, onSubmit: FormOnSubmitEventHandler): FormKey;
    /**
     * Add a scheduled job type for your app. This will allow you to schedule jobs using the `scheduler` API.
     * @param job - The scheduled job type to add.
     * @param job.name - The name of the scheduled job type.
     * @param job.onRun - The function to call when the scheduled job is run.
     * @example
     * ```ts
     * Devvit.addSchedulerJob({
     *   name: 'checkNewPosts',
     *   onRun: async (event, context) => {
     *     const newPosts = await context.reddit.getNewPosts({ limit: 5 }).all();
     *     for (const post of newPosts) {
     *       if (post.title.includes('bad word')) {
     *         await post.remove();
     *       }
     *     }
     *   }
     * });
     *
     * Devvit.addMenuItem({
     *   label: 'Check for new posts',
     *   location: 'location',
     *   onPress: (event, context) => {
     *     const { scheduler } = context;
     *     const = await scheduler.runJob({
     *       name: 'checkNewPosts',
     *       when: new Date(Date.now() + 5000) // in 5 seconds
     *     });
     *   }
     * });
     * ```
     */
    static addSchedulerJob(job: ScheduledJobType): void;
    /**
     * Add settings that can be configured to customize the behavior of your app. There are two levels of settings: App settings (scope: 'app') and
     * install settings (scope: 'installation' or unspecified scope). Install settings are meant to be configured by the user that installs your app.
     * This is a good place to add anything that a user might want to change to personalize the app (e.g. the default city to show the weather for or a
     * specific sport team that a subreddit follows). Note that these are good for subreddit level customization but not necessarily good for things
     * that might be different for two users in a subreddit (e.g. setting the default city to show the weather for is only useful at a sub level if
     * the sub is for a specific city or region). Install settings can be viewed and configured here: https://developers.reddit.com/r/subreddit-name/apps/app-name.
     * App settings can be accessed and consumed by all installations of the app. This is mainly useful for developer secrets/API keys that your
     * app needs to function. They can only be changed/viewed by you via the CLI (devvit settings set and devvit settings list). This ensures secrets
     * are persisted in an encrypted store and don't get committed in the source code. You should never paste your actual key into any fields passed into
     * Devvit.addSettings - this is merely where you state what your API key's name and description are. You will be able to set the actual value of the key via CLI.
     * Note: setting names must be unique across all settings.
     * @param fields - Fields for the app and installation settings.
     * @example
     * ```ts
     * Devvit.addSettings([
     *   {
     *     type: 'string',
     *     name: 'weather-api-key',
     *     label: 'My weather.com API key',
     *     scope: SettingScope.App,
     *     isSecret: true
     *   },
     *   {
     *     type: 'string',
     *     name: 'Default City',
     *     label: 'Default city to show the weather for by default',
     *     scope: SettingScope.Installation,
     *     onValidate: ({ value }) => {
     *       if (isValidCity(value)) {
     *         return 'You must ender a valid city: ${validCities.join(", ")}';
     *       }
     *     }
     *   },
     *   {
     *     type: 'number',
     *     name: 'Default Forecast Window (in days)',
     *     label: 'The number of days to show for forecast for by default',
     *     scope: SettingScope.Installation,
     *     onValidate: ({ value }) => {
     *       if (value < 10 || value < 1) {
     *         return 'Forecast window must be from 1 to 10 days';
     *       }
     *     }
     *   },
     * ]);
     * ```
     */
    static addSettings(fields: SettingsFormField[]): void;
    /**
     * Add a trigger handler that will be invoked when the given event
     * occurs in a subreddit where the app is installed.
     *
     * @param triggerDefinition - The trigger definition.
     * @param triggerDefinition.event - The event to listen for.
     * @param triggerDefinition.events - The events to listen for.
     * @param triggerDefinition.onEvent - The function to call when the event happens.
     * @example
     * ```ts
     * Devvit.addTrigger({
     *   event: 'PostSubmit',
     *   async onEvent(event, context) {
     *     console.log("a new post was created!")
     *   }
     * });
     *
     * Devvit.addTrigger({
     *   events: ['PostSubmit', 'PostReport'],
     *   async onEvent(event, context){
     *     if (event.type === 'PostSubmit') {
     *       console.log("a new post was created!")
     *     } else if (event.type === 'PostReport') {
     *       console.log("a post was reported!")
     *     }
     *   }
     * });
     * ```
     */
    static addTrigger(triggerDefinition: PostDeleteDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: PostSubmitDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: PostUpdateDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: PostReportDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: PostCreateDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: PostFlairUpdateDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: CommentDeleteDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: CommentSubmitDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: CommentUpdateDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: CommentCreateDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: CommentReportDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: AppInstallDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: AppUpgradeDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: ModActionDefinition): typeof Devvit;
    static addTrigger(triggerDefinition: ModMailDefinition): typeof Devvit;
    static addTrigger<Event extends TriggerEvent>(triggerDefinition: MultiTriggerDefinition<Event>): typeof Devvit;
}
export declare namespace Devvit {
    type Fragment = JSX.Fragment;
    type ElementChildren = JSX.Element | JSX.Children | undefined;
    type StringChild = Fragment | string | number;
    type StringChildren = StringChild | (StringChild | StringChild[])[] | undefined;
    function createElement(type: Blocks.IntrinsicElementsType, props: {} | undefined, ...children: JSX.Children[]): BlockElement;
    /** The current app context of the event or render. */
    type Context = ContextAPIClients & BaseContext;
    type BlockComponentProps<P = {}> = P & {
        children?: JSX.Children;
    };
    type BlockComponent<P = {}> = (props: BlockComponentProps<P>, context: Context) => JSX.Element;
    type CustomPostComponent = (context: Context) => JSX.Element;
    namespace Blocks {
        interface IntrinsicElements {
            blocks: Devvit.Blocks.RootProps;
            hstack: Devvit.Blocks.StackProps;
            vstack: Devvit.Blocks.StackProps;
            zstack: Devvit.Blocks.StackProps;
            text: Devvit.Blocks.TextProps;
            button: Devvit.Blocks.ButtonProps;
            image: Devvit.Blocks.ImageProps;
            spacer: Devvit.Blocks.SpacerProps;
            icon: Devvit.Blocks.IconProps;
            avatar: Devvit.Blocks.AvatarProps;
            fullsnoo: Devvit.Blocks.FullSnooProps;
            animation: Devvit.Blocks.AnimationProps;
            webview: Devvit.Blocks.WebViewProps;
        }
        type IntrinsicElementsType = keyof IntrinsicElements;
        type SizePixels = `${number}px`;
        type SizePercent = `${number}%`;
        type SizeString = SizePixels | SizePercent | number;
        type Alignment = `${VerticalAlignment}` | `${HorizontalAlignment}` | `${VerticalAlignment} ${HorizontalAlignment}` | `${HorizontalAlignment} ${VerticalAlignment}`;
        type AnimationDirection = 'forward' | 'backward';
        type AnimationLoop = 'repeat' | 'bounce';
        type AnimationType = 'lottie';
        type AvatarBackground = 'light' | 'dark';
        type AvatarFacing = 'left' | 'right';
        type AvatarSize = 'xxsmall' | 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'xxxlarge';
        type ButtonAppearance = 'secondary' | 'primary' | 'plain' | 'bordered' | 'media' | 'destructive' | 'caution' | 'success';
        type ButtonSize = 'small' | 'medium' | 'large';
        type ColorString = string;
        type ContainerBorderWidth = Thickness;
        type ContainerCornerRadius = 'none' | 'small' | 'medium' | 'large' | 'full';
        type ContainerGap = 'none' | 'small' | 'medium' | 'large';
        type ContainerPadding = 'none' | 'xsmall' | 'small' | 'medium' | 'large';
        type FullSnooSize = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge';
        type HorizontalAlignment = 'start' | 'center' | 'end';
        type IconSize = 'xsmall' | 'small' | 'medium' | 'large';
        type ImageResizeMode = 'none' | 'fit' | 'fill' | 'cover' | 'scale-down';
        type SpacerSize = 'xsmall' | 'small' | 'medium' | 'large';
        type SpacerShape = 'invisible' | 'thin' | 'square';
        type TextOutline = Thickness;
        type TextSize = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge';
        type TextStyle = 'body' | 'metadata' | 'heading';
        type TextWeight = 'regular' | 'bold';
        type TextOverflow = 'clip' | 'ellipsis';
        type Thickness = 'none' | 'thin' | 'thick';
        type VerticalAlignment = 'top' | 'middle' | 'bottom';
        type RootHeight = 'regular' | 'tall';
        type BaseProps = {
            width?: SizeString;
            height?: SizeString;
            minWidth?: SizeString;
            minHeight?: SizeString;
            maxWidth?: SizeString;
            maxHeight?: SizeString;
            grow?: boolean;
        };
        type OnPressEvent = {
            state?: Data;
        };
        type OnPressEventHandler = (event: OnPressEvent) => void | Promise<void>;
        type Actionable = {
            onPress?: OnPressEventHandler | undefined;
        };
        type HasElementChildren = {
            children?: Devvit.ElementChildren;
        };
        type HasStringChildren = {
            children?: Devvit.StringChildren;
        };
        type RootProps = HasElementChildren & {
            height?: Devvit.Blocks.RootHeight | undefined;
        };
        type StackProps = BaseProps & HasElementChildren & Actionable & {
            reverse?: boolean | undefined;
            alignment?: Alignment;
            padding?: ContainerPadding | undefined;
            gap?: ContainerGap | undefined;
            border?: ContainerBorderWidth | undefined;
            borderColor?: ColorString | undefined;
            lightBorderColor?: ColorString | undefined;
            darkBorderColor?: ColorString | undefined;
            cornerRadius?: ContainerCornerRadius | undefined;
            backgroundColor?: ColorString | undefined;
            lightBackgroundColor?: ColorString | undefined;
            darkBackgroundColor?: ColorString | undefined;
        };
        type TextProps = BaseProps & HasStringChildren & Actionable & {
            size?: TextSize | undefined;
            weight?: TextWeight | undefined;
            color?: ColorString | undefined;
            lightColor?: ColorString | undefined;
            darkColor?: ColorString | undefined;
            alignment?: Alignment | undefined;
            outline?: TextOutline | undefined;
            style?: TextStyle | undefined;
            selectable?: boolean | undefined;
            wrap?: boolean | undefined;
            overflow?: TextOverflow | undefined;
        };
        type ButtonProps = BaseProps & HasStringChildren & Actionable & {
            icon?: IconName | undefined;
            size?: ButtonSize | undefined;
            appearance?: ButtonAppearance | undefined;
            textColor?: ColorString | undefined;
            lightTextColor?: ColorString | undefined;
            darkTextColor?: ColorString | undefined;
            disabled?: boolean | undefined;
        };
        type ImageProps = BaseProps & Actionable & {
            url: string;
            imageWidth: SizePixels | number;
            imageHeight: SizePixels | number;
            description?: string | undefined;
            resizeMode?: ImageResizeMode | undefined;
        };
        type SpacerProps = BaseProps & {
            size?: SpacerSize | undefined;
            shape?: SpacerShape | undefined;
        };
        type IconProps = BaseProps & HasStringChildren & Actionable & {
            name: IconName;
            color?: ColorString | undefined;
            lightColor?: ColorString | undefined;
            darkColor?: ColorString | undefined;
            size?: IconSize | undefined;
        };
        type AvatarProps = BaseProps & Actionable & {
            thingId: string;
            facing?: AvatarFacing | undefined;
            size?: AvatarSize | undefined;
            background?: AvatarBackground | undefined;
        };
        type FullSnooProps = BaseProps & Actionable & {
            userId: string;
            facing?: AvatarFacing | undefined;
            size?: FullSnooSize | undefined;
        };
        type AnimationProps = BaseProps & Actionable & {
            url: string;
            imageWidth: SizePixels | number;
            imageHeight: SizePixels | number;
            type?: AnimationType | undefined;
            loop?: boolean | undefined;
            loopMode?: AnimationLoop | undefined;
            autoplay?: boolean | undefined;
            speed?: number | undefined;
            direction?: AnimationDirection | undefined;
        };
        type WebViewProps = BaseProps & {
            url: string;
        };
    }
}
export type BlockElement = {
    type: JSX.ComponentFunction | Devvit.BlockComponent | Devvit.CustomPostComponent | string | undefined;
    props: {} | undefined;
    children: JSX.Children[];
};
declare global {
    namespace JSX {
        interface IntrinsicElements extends Devvit.Blocks.IntrinsicElements {
        }
        type Fragment = Iterable<JSX.Element>;
        type SyncElement = BlockElement | JSX.Fragment | string | number | boolean | null;
        type Element = SyncElement | Promise<SyncElement>;
        type ElementChildrenAttribute = {
            children: {};
        };
        type Children = JSX.Element | JSX.Element[];
        type Props<T extends {} = {}> = T & {
            children?: Devvit.ElementChildren;
        };
        type ComponentFunction = (props: JSX.Props | undefined) => JSX.Element;
    }
}
//# sourceMappingURL=Devvit.d.ts.map
import type { Block, BlockAction, BlockAlignment, BlockBorder, BlockColor, BlockConfig, BlockSize, BlockSizes, BlockSizes_Dimension_Value } from '@devvit/protos';
import { BlockAnimationDirection, BlockAnimationLoopMode, BlockAnimationType, BlockAvatarBackground, BlockAvatarFacing, BlockAvatarSize, BlockButtonAppearance, BlockButtonSize, BlockFullSnooSize, BlockGap, BlockIconSize, BlockImageResizeMode, BlockPadding, BlockRadius, BlockSpacerShape, BlockSpacerSize, BlockStackDirection, BlockTextOutline, BlockTextOverflow, BlockTextSize, BlockTextStyle, BlockTextWeight, BlockType } from '@devvit/protos';
import { Devvit } from '../../Devvit.js';
import type { ReifiedBlockElement, ReifiedBlockElementOrLiteral } from './BlocksReconciler.js';
type DataSet = Record<string, unknown>;
export declare class BlocksTransformer {
    createBlocksElementOrThrow({ type, props, children }: ReifiedBlockElement): Promise<Block>;
    createBlocksElement({ type, props, children, }: ReifiedBlockElement): Promise<Block | undefined>;
    makeRootHeight(height: Devvit.Blocks.RootHeight): number;
    makeBlockPadding(padding: Devvit.Blocks.ContainerPadding | undefined): BlockPadding | undefined;
    makeBlockRadius(radius: Devvit.Blocks.ContainerCornerRadius | undefined): BlockRadius | undefined;
    makeBlockGap(gap: Devvit.Blocks.ContainerGap | undefined): BlockGap | undefined;
    makeBlockAlignment(alignment: Devvit.Blocks.Alignment | undefined): BlockAlignment | undefined;
    makeBlockBorder(borderWidth: Devvit.Blocks.ContainerBorderWidth | undefined, color: string | undefined, lightColor: string | undefined, darkColor: string | undefined): BlockBorder | undefined;
    makeBlockTextSize(textSize: Devvit.Blocks.TextSize | undefined): BlockTextSize | undefined;
    makeBlockTextStyle(style: Devvit.Blocks.TextStyle | undefined): BlockTextStyle | undefined;
    makeBlockTextOutline(outline: Devvit.Blocks.TextOutline | undefined): BlockTextOutline | undefined;
    makeBlockTextWeight(weight: Devvit.Blocks.TextWeight | undefined): BlockTextWeight | undefined;
    makeBlockTextOverflow(overflow: Devvit.Blocks.TextOverflow | undefined): BlockTextOverflow | undefined;
    makeBlockButtonAppearance(appearance: Devvit.Blocks.ButtonAppearance | undefined): BlockButtonAppearance | undefined;
    makeBlockButtonSize(size: Devvit.Blocks.ButtonSize | undefined): BlockButtonSize | undefined;
    makeBlockImageResizeMode(resize: Devvit.Blocks.ImageResizeMode | undefined): BlockImageResizeMode | undefined;
    makeBlockSpacerSize(size: Devvit.Blocks.SpacerSize | undefined): BlockSpacerSize | undefined;
    makeBlockSpacerShape(size: Devvit.Blocks.SpacerShape | undefined): BlockSpacerShape | undefined;
    makeBlockIconSize(size: Devvit.Blocks.IconSize | undefined): BlockIconSize | undefined;
    makeBlockAvatarSize(size: Devvit.Blocks.AvatarSize | undefined): BlockAvatarSize | undefined;
    makeBlockAvatarFacing(facing: Devvit.Blocks.AvatarFacing | undefined): BlockAvatarFacing | undefined;
    makeBlockFullSnooSize(size: Devvit.Blocks.FullSnooSize | undefined): BlockFullSnooSize | undefined;
    makeBlockAvatarBackground(background: Devvit.Blocks.AvatarBackground | undefined): BlockAvatarBackground | undefined;
    makeBlockAnimationType(type: Devvit.Blocks.AnimationType | undefined): BlockAnimationType;
    makeBlockAnimationDirection(type: Devvit.Blocks.AnimationDirection | undefined): BlockAnimationDirection | undefined;
    makeBlockLoopMode(mode: Devvit.Blocks.AnimationLoop | undefined): BlockAnimationLoopMode | undefined;
    makeBlockSize(props: Devvit.Blocks.BaseProps | undefined): BlockSize | undefined;
    makeBlockSizes(props: Devvit.Blocks.BaseProps | undefined): BlockSizes | undefined;
    parseSize(size: Devvit.Blocks.SizeString | undefined): BlockSizes_Dimension_Value | undefined;
    getDataSet(props: DataSet): DataSet;
    makeActions(_type: BlockType, props: {
        [key: string]: unknown;
    }): BlockAction[];
    blockColorToHex(color: Devvit.Blocks.ColorString | undefined, theme?: 'light' | 'dark'): Devvit.Blocks.ColorString | undefined;
    childrenToBlocks(children: ReifiedBlockElementOrLiteral[]): Promise<Block[]>;
    getThemedColors(color: Devvit.Blocks.ColorString | undefined, light?: Devvit.Blocks.ColorString | undefined, dark?: Devvit.Blocks.ColorString | undefined): BlockColor | undefined;
    parsePixels(input: Devvit.Blocks.SizePixels | number): number;
    childrenToString(children: ReifiedBlockElementOrLiteral[]): string;
    makeRoot(props: Devvit.Blocks.BaseProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Promise<Block>;
    wrapRoot(props: Devvit.Blocks.BaseProps | undefined, children: Block[]): Promise<Block>;
    makeStackBlock(direction: BlockStackDirection, props: Devvit.Blocks.StackProps | undefined, children: ReifiedBlockElementOrLiteral[]): Promise<Block>;
    makeHStack(props: Devvit.Blocks.StackProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Promise<Block>;
    makeVStack(props: Devvit.Blocks.StackProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Promise<Block>;
    makeZStack(props: Devvit.Blocks.StackProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Promise<Block>;
    makeText(props: Devvit.Blocks.TextProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Block;
    makeButton(props: Devvit.Blocks.ButtonProps | undefined, ...children: ReifiedBlockElementOrLiteral[]): Block;
    makeImage(props: Devvit.Blocks.ImageProps | undefined): Promise<Block | undefined>;
    makeSpacer(props: Devvit.Blocks.SpacerProps | undefined): Block;
    makeIcon(props: Devvit.Blocks.IconProps | undefined): Block | undefined;
    makeAvatar(props: Devvit.Blocks.AvatarProps | undefined): Block | undefined;
    makeFullSnoo(props: Devvit.Blocks.FullSnooProps | undefined): Block | undefined;
    makeAnimation(props: Devvit.Blocks.AnimationProps | undefined): Promise<Block | undefined>;
    makeWebView(props: Devvit.Blocks.WebViewProps | undefined): Block | undefined;
    makeBlock(type: BlockType, props: Devvit.Blocks.BaseProps | undefined, config?: BlockConfig | undefined): Block;
    ensureRootBlock(b: Block): Promise<Block>;
}
export {};
//# sourceMappingURL=BlocksTransformer.d.ts.map
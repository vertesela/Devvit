export function makeUseStateHook(reconciler) {
    function useState(initialState) {
        const hookIndex = reconciler.currentHookIndex;
        const currentState = reconciler.getCurrentComponentState();
        const previousState = reconciler.getPreviousComponentState();
        if (hookIndex in currentState) {
            reconciler.currentHookIndex++;
            return [currentState[hookIndex], stateSetter];
        }
        if (reconciler.isInitialRender || !(hookIndex in previousState)) {
            const value = initialState instanceof Function ? initialState() : initialState;
            if (value instanceof Promise) {
                const asyncResolver = async () => {
                    currentState[hookIndex] = await value;
                    reconciler.currentHookIndex = 0;
                };
                throw asyncResolver();
            }
            currentState[hookIndex] = value;
        }
        else {
            currentState[hookIndex] = previousState[hookIndex];
        }
        function stateSetter(valueOrFunction) {
            if (reconciler.isRendering) {
                throw new Error('Cannot call setState while rendering.');
            }
            currentState[hookIndex] =
                valueOrFunction instanceof Function
                    ? valueOrFunction(currentState[hookIndex])
                    : valueOrFunction;
        }
        reconciler.currentHookIndex++;
        return [currentState[hookIndex], stateSetter];
    }
    return useState;
}

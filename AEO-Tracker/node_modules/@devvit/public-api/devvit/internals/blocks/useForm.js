import { getFormValues } from '../../../apis/ui/helpers/getFormValues.js';
import { Hook } from '../../../types/hooks.js';
export function makeUseFormHook(reconciler) {
    function useForm(form, onSubmit) {
        const hookIndex = reconciler.currentHookIndex;
        const componentKey = reconciler.getCurrentComponentKey();
        const currentState = reconciler.getCurrentComponentState();
        const previousState = reconciler.getPreviousComponentState();
        const formKey = `form.hook.${componentKey}.${hookIndex}`;
        let hookState = {
            formKey,
            preventSubmit: false,
            type: Hook.FORM,
        };
        if (hookIndex in currentState) {
            hookState = currentState[hookIndex];
        }
        else if (hookIndex in previousState) {
            hookState = previousState[hookIndex];
        }
        currentState[hookIndex] = hookState;
        reconciler.forms.set(formKey, form);
        const formSubmittedEvent = reconciler.formSubmittedEvent;
        if (formSubmittedEvent && !hookState.preventSubmit) {
            if (formSubmittedEvent.formId === formKey) {
                reconciler.runHook(async () => {
                    const response = onSubmit(getFormValues(formSubmittedEvent.results));
                    if (response && response instanceof Promise) {
                        await response;
                    }
                    reconciler.rerenderIn(0);
                });
            }
        }
        currentState[hookIndex].preventSubmit = false;
        reconciler.currentHookIndex++;
        return formKey;
    }
    return useForm;
}

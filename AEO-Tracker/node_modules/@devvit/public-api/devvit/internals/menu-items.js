import { ContextActionDefinition, ContextActionDescription, ContextActionResponse, } from '@devvit/protos';
import { assertNonNull } from '@devvit/shared-types/NonNull.js';
import { makeAPIClients } from '../../apis/makeAPIClients.js';
import { getEffectsFromUIClient } from '../../apis/ui/helpers/getEffectsFromUIClient.js';
import { Devvit } from '../Devvit.js';
import { getContextFromMetadata } from './context.js';
import { extendDevvitPrototype } from './helpers/extendDevvitPrototype.js';
const getActionId = (index) => {
    return `menuItem.${index}`;
};
export function getMenuItemById(id) {
    return Devvit.menuItems.find((_, index) => getActionId(index) === id);
}
async function getActions(_, _metadata) {
    const menuItems = Devvit.menuItems;
    if (!menuItems.length) {
        throw new Error('No menu items registered.');
    }
    const actions = menuItems.map((item, index) => {
        return ContextActionDescription.fromPartial({
            actionId: getActionId(index),
            name: item.label,
            description: item.description,
            contexts: {
                subreddit: item.location.includes('subreddit'),
                post: item.location.includes('post'),
                comment: item.location.includes('comment'),
            },
            users: {
                loggedOut: item.forUserType?.includes('loggedOut'),
                member: item.forUserType?.includes('member'),
                moderator: item.forUserType?.includes('moderator'),
            },
        });
    });
    return { actions };
}
async function onAction(req, metadata) {
    const menuItem = getMenuItemById(req.actionId);
    if (!menuItem) {
        throw new Error(`MenuItem ${req.actionId} not found`);
    }
    const commentId = req.comment?.id && `t1_${req.comment.id}`;
    const postId = req.post?.id && `t3_${req.post.id}`;
    const subredditId = req.subreddit?.id && `t5_${req.subreddit.id}`;
    const targetId = commentId || postId || subredditId;
    assertNonNull(targetId, 'targetId is missing from ContextActionRequest');
    const event = {
        targetId,
        location: req.comment ? 'comment' : req.post ? 'post' : 'subreddit',
    };
    const context = Object.assign(makeAPIClients({
        ui: true,
        metadata,
    }), getContextFromMetadata(metadata, postId, commentId));
    await menuItem.onPress(event, context);
    return ContextActionResponse.fromPartial({
        effects: getEffectsFromUIClient(context.ui),
    });
}
export function registerMenuItems(config) {
    config.provides(ContextActionDefinition);
    extendDevvitPrototype('GetActions', getActions);
    extendDevvitPrototype('OnAction', onAction);
}

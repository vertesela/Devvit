import type { Context } from './context.js';
import type { Form, FormFunction, FormKey, FormValues } from './form.js';
import type { ChannelOptions, ChannelStatus } from './realtime.js';
import type { Data } from './data.js';
export type Dispatch<A> = (value: A) => void;
export type SetStateAction<S> = S | ((prevState: S) => S);
export type StateSetter<S> = Dispatch<SetStateAction<S>>;
/** A tuple containing the current state and a function to update it */
export type UseStateResult<S> = [S, StateSetter<S>];
export type UseStateHook = Context['useState'];
/** A hook that returns a form key that can be used in the `ui.showForm` */
export type UseFormHook = (form: Form | FormFunction, onSubmit: (values: FormValues) => void | Promise<void>) => FormKey;
/** An object that contains functions to start and stop the interval created by the `useInterval` hook */
export type UseIntervalResult = {
    /** Start the interval */
    start: () => void;
    /** Stop the interval */
    stop: () => void;
};
/** A hook that can used to run a callback on an interval between Block renders. Only one useInterval hook may be running at a time. */
export type UseIntervalHook = (
/** The callback to run on an interval */
callback: () => void | Promise<void>, 
/** The delay between each callback run in milliseconds. Delay must be at least 1000ms. */
delay: number) => UseIntervalResult;
export type UseChannelHook = (options: ChannelOptions) => UseChannelResult;
export type UseChannelResult = {
    /** Subscribe to the channel */
    subscribe: () => void;
    /** Unsubscribe from the channel */
    unsubscribe: () => void;
    /** Publish a message to the channel */
    send: (data: Data) => Promise<void>;
    /** Current subscription status */
    status: ChannelStatus;
};
//# sourceMappingURL=hooks.d.ts.map
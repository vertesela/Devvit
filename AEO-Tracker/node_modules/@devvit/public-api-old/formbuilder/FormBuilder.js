var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _FormFieldsBuilder_instances, _FormFieldsBuilder_addField, _FormFieldsBuilder_isSet, _FormBuilder_config, _GroupBuilder_parent, _GroupBuilder_onBuild;
import { FieldConfig, FormFieldType, FormFieldValue, } from '@devvit/protos';
class FormFieldsBuilder {
    constructor() {
        _FormFieldsBuilder_instances.add(this);
        this.fields = [];
        _FormFieldsBuilder_isSet.set(this, (...values) => values.some((v) => v != null));
    }
    string(fieldId, label, options = {}) {
        const fieldConfig = __classPrivateFieldGet(this, _FormFieldsBuilder_isSet, "f").call(this, options.minLength, options.maxLength, options.placeholder)
            ? FieldConfig.fromPartial({
                stringConfig: {
                    minLength: options.minLength,
                    maxLength: options.maxLength,
                    placeholder: options.placeholder,
                },
            })
            : undefined;
        const defaultValue = options.defaultValue
            ? FormFieldValue.fromPartial({ stringValue: options.defaultValue })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.STRING, fieldId, label, options, fieldConfig, defaultValue);
        return this;
    }
    paragraph(fieldId, label, options = {}) {
        const fieldConfig = __classPrivateFieldGet(this, _FormFieldsBuilder_isSet, "f").call(this, options.maxCharacters, options.lineHeight, options.placeholder)
            ? FieldConfig.fromPartial({
                paragraphConfig: {
                    maxCharacters: options.maxCharacters,
                    lineHeight: options.lineHeight,
                    placeholder: options.placeholder,
                },
            })
            : undefined;
        const defaultValue = options.defaultValue
            ? FormFieldValue.fromPartial({ stringValue: options.defaultValue })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.PARAGRAPH, fieldId, label, options, fieldConfig, defaultValue);
        return this;
    }
    number(fieldId, label, options = {}) {
        const fieldConfig = __classPrivateFieldGet(this, _FormFieldsBuilder_isSet, "f").call(this, options.min, options.max, options.step)
            ? FieldConfig.fromPartial({
                numberConfig: {
                    min: options.min,
                    max: options.max,
                    step: options.step,
                },
            })
            : undefined;
        const defaultValue = options.defaultValue
            ? FormFieldValue.fromPartial({ numberValue: options.defaultValue })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.NUMBER, fieldId, label, options, fieldConfig, defaultValue);
        return this;
    }
    boolean(fieldId, label, options = {}) {
        const defaultValue = __classPrivateFieldGet(this, _FormFieldsBuilder_isSet, "f").call(this, options.defaultValue)
            ? FormFieldValue.fromPartial({ boolValue: options.defaultValue })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.BOOLEAN, fieldId, label, options, undefined, defaultValue);
        return this;
    }
    selection(fieldId, label, choices, options = {}) {
        const fieldConfig = FieldConfig.fromPartial({
            selectionConfig: {
                choices: Object.entries(choices).map((e) => ({ value: e[0], label: e[1] })),
                multiSelect: options.multiSelect,
                minSelections: options.minSelections,
                maxSelections: options.maxSelections,
                renderAsList: options.renderAsList,
            },
        });
        const defaultValue = options.defaultValue
            ? FormFieldValue.fromPartial({ selectionValue: { values: options.defaultValue } })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.SELECTION, fieldId, label, options, fieldConfig, defaultValue);
        return this;
    }
    list(fieldId, label, itemType, options = {}) {
        const fieldConfig = FieldConfig.fromPartial({
            listConfig: {
                itemType,
                entryLabel: options.entryLabel,
                itemConfig: options.itemConfig,
                minEntries: options.minEntries,
                maxEntries: options.minEntries,
            },
        });
        const defaultValue = options.defaultValue
            ? FormFieldValue.fromPartial({
                listValue: {
                    itemType,
                    items: options.defaultValue.map((item) => FormFieldValue.fromPartial({
                        stringValue: itemType === FormFieldType.STRING ? item : undefined,
                        numberValue: itemType === FormFieldType.NUMBER ? item : undefined,
                    })),
                },
            })
            : undefined;
        __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.LIST, fieldId, label, options, fieldConfig, defaultValue);
        return this;
    }
    groupBuilder(label, helpText) {
        return new GroupBuilder(this, (fields) => {
            const config = FieldConfig.fromPartial({ groupConfig: { fields } });
            __classPrivateFieldGet(this, _FormFieldsBuilder_instances, "m", _FormFieldsBuilder_addField).call(this, FormFieldType.GROUP, '', label, { helpText: helpText }, config, undefined);
            return this;
        });
    }
}
_FormFieldsBuilder_isSet = new WeakMap(), _FormFieldsBuilder_instances = new WeakSet(), _FormFieldsBuilder_addField = function _FormFieldsBuilder_addField(fieldType, fieldId, label, sharedOptions, fieldConfig, defaultValue) {
    this.fields.push({
        fieldType,
        fieldId,
        label,
        fieldConfig,
        defaultValue: defaultValue
            ? FormFieldValue.fromPartial({ fieldType, ...defaultValue })
            : undefined,
        helpText: sharedOptions.helpText,
        required: sharedOptions.required,
        disabled: sharedOptions.disabled,
    });
};
export class FormBuilder extends FormFieldsBuilder {
    constructor(options) {
        super();
        _FormBuilder_config.set(this, void 0);
        __classPrivateFieldSet(this, _FormBuilder_config, options, "f");
    }
    build() {
        return {
            fields: this.fields,
            ...__classPrivateFieldGet(this, _FormBuilder_config, "f"),
        };
    }
}
_FormBuilder_config = new WeakMap();
class GroupBuilder extends FormFieldsBuilder {
    constructor(parent, onBuild) {
        super();
        _GroupBuilder_parent.set(this, void 0);
        _GroupBuilder_onBuild.set(this, void 0);
        __classPrivateFieldSet(this, _GroupBuilder_parent, parent, "f");
        __classPrivateFieldSet(this, _GroupBuilder_onBuild, onBuild, "f");
    }
    build() {
        __classPrivateFieldGet(this, _GroupBuilder_onBuild, "f").call(this, this.fields);
        return __classPrivateFieldGet(this, _GroupBuilder_parent, "f");
    }
}
_GroupBuilder_parent = new WeakMap(), _GroupBuilder_onBuild = new WeakMap();

import { Devvit } from '../abstractions/Devvit.js';
import { Severity } from '@devvit/protos';
const logger = Devvit.use(Devvit.Types.Logger);
export class Log {
    static async d(message, metadata, tags) {
        await Log.log(Severity.DEBUG, message, metadata, tags);
    }
    static async debug(message, metadata, tags) {
        await Log.d(message, metadata, tags);
    }
    static async i(message, metadata, tags) {
        await Log.log(Severity.DEBUG, message, metadata, tags);
    }
    static async info(message, metadata, tags) {
        await Log.i(message, metadata, tags);
    }
    static async w(message, metadata, tags) {
        await Log.log(Severity.DEBUG, message, metadata, tags);
    }
    static async warn(message, metadata, tags) {
        await Log.w(message, metadata, tags);
    }
    static async e(message, metadata, tags) {
        await Log.log(Severity.DEBUG, message, metadata, tags);
    }
    static async error(message, metadata, tags) {
        await Log.e(message, metadata, tags);
    }
    static async v(message, metadata, tags) {
        await Log.log(Severity.DEBUG, message, metadata, tags);
    }
    static async verbose(message, metadata, tags) {
        await Log.v(message, metadata, tags);
    }
    static async log(severity, message, metadata, tags) {
        await logger.Log({
            severity,
            tags: tags ?? [],
            message,
        }, metadata);
    }
}

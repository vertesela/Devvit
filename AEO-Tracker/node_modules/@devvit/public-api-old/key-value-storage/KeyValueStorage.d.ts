import { KVStore, Metadata } from '@devvit/protos';
import { JSONValue } from '@devvit/shared-types/json.js';
/**
 * Simplified wrapper around KVStore which stores all data as serialized JSON objects
 */
export declare class KeyValueStorage {
    #private;
    constructor(storage?: KVStore);
    /**
     * Retrieves a value from the store at the given key or defaultValue if not found or falsy
     *
     * to-do: remove defaultValue and use builtin nullish coalescing at call
     *   sites.
     * to-do: change falsy comparison to an undefined check since undefineds are
     *   stripped by JSON parsing. This will allow KV to represent sets with any
     *   values and be less surprising.
     */
    get<T extends JSONValue>(key: string, metadata?: Metadata, defaultValue?: T): Promise<T | undefined>;
    /**
     * Assigns a value to a key in the store
     */
    put(key: string, value: JSONValue, metadata?: Metadata): Promise<void>;
    /**
     * Deletes a key from the store if present
     */
    delete(key: string, metadata?: Metadata): Promise<void>;
    /**
     * Returns a list of keys in the store
     */
    list(metadata?: Metadata): Promise<string[]>;
}
//# sourceMappingURL=KeyValueStorage.d.ts.map
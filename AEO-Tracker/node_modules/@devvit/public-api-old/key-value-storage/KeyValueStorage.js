var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _KeyValueStorage_storage;
import { Devvit } from '../abstractions/Devvit.js';
/**
 * Simplified wrapper around KVStore which stores all data as serialized JSON objects
 */
export class KeyValueStorage {
    constructor(storage = Devvit.use(Devvit.Types.KVStore)) {
        _KeyValueStorage_storage.set(this, void 0);
        __classPrivateFieldSet(this, _KeyValueStorage_storage, storage, "f");
    }
    /**
     * Retrieves a value from the store at the given key or defaultValue if not found or falsy
     *
     * to-do: remove defaultValue and use builtin nullish coalescing at call
     *   sites.
     * to-do: change falsy comparison to an undefined check since undefineds are
     *   stripped by JSON parsing. This will allow KV to represent sets with any
     *   values and be less surprising.
     */
    async get(key, metadata, defaultValue) {
        const { messages } = await __classPrivateFieldGet(this, _KeyValueStorage_storage, "f").Get({ keys: [key] }, metadata);
        if (messages[key]) {
            return JSON.parse(messages[key]);
        }
        return defaultValue;
    }
    /**
     * Assigns a value to a key in the store
     */
    async put(key, value, metadata) {
        const messages = {};
        messages[key] = JSON.stringify(value);
        await __classPrivateFieldGet(this, _KeyValueStorage_storage, "f").Put({ messages }, metadata);
    }
    /**
     * Deletes a key from the store if present
     */
    async delete(key, metadata) {
        await __classPrivateFieldGet(this, _KeyValueStorage_storage, "f").Del({ keys: [key] }, metadata);
    }
    /**
     * Returns a list of keys in the store
     */
    async list(metadata) {
        const { keys } = await __classPrivateFieldGet(this, _KeyValueStorage_storage, "f").List({ filter: '*' }, metadata);
        return keys;
    }
}
_KeyValueStorage_storage = new WeakMap();

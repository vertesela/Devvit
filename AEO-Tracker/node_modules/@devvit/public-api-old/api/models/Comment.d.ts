import { Metadata, RedditObject, Comment as CommentProto } from '@devvit/protos';
import { Listing } from './Listing.js';
import { T1ID, T3ID } from '@devvit/shared-types/tid.js';
import { RichTextBuilder } from '../../richtext/RichTextBuilder.js';
import { User } from './User.js';
export type CommentSort = 'confidence' | 'top' | 'new' | 'controversial' | 'old' | 'random' | 'qa' | 'live';
export interface GetCommentsOptions {
    postId: string;
    commentId?: string | undefined;
    depth?: number;
    pageSize?: number;
    limit?: number;
    sort?: CommentSort;
}
export type CommentSubmissionOptions = {
    text: string;
} | {
    richtext: object | RichTextBuilder;
};
export type EditCommentOptions = CommentSubmissionOptions;
export type ReplyToCommentOptions = CommentSubmissionOptions;
export interface GetCommentsByUserOptions {
    username: string;
    sort?: 'hot' | 'new' | 'top' | 'controversial';
    timeframe?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';
    pageSize?: number;
    limit?: number;
    after?: string;
    before?: string;
}
export declare class Comment {
    #private;
    constructor(data: RedditObject | CommentProto, metadata?: Metadata);
    get id(): `t1_${string}`;
    get authorId(): `t2_${string}` | undefined;
    get authorName(): string;
    get body(): string;
    get createdAt(): Date;
    get parentId(): `t1_${string}` | `t3_${string}`;
    get postId(): `t3_${string}`;
    get replies(): Listing<Comment>;
    get distinguishedBy(): string | undefined;
    get locked(): boolean;
    get stickied(): boolean;
    get removed(): boolean;
    get approved(): boolean;
    get spam(): boolean;
    get edited(): boolean;
    get numReports(): number;
    get collapsedBecauseCrowdControl(): boolean;
    get score(): number;
    get permalink(): string;
    toJSON(): {
        id: `t1_${string}`;
        authorName: string;
        body: string;
        createdAt: Date;
        parentId: `t1_${string}` | `t3_${string}`;
        postId: `t3_${string}`;
        replies: Listing<Comment>;
        approved: boolean;
        locked: boolean;
        removed: boolean;
        stickied: boolean;
        spam: boolean;
        edited: boolean;
        distinguishedBy: string | undefined;
        numReports: number;
        collapsedBecauseCrowdControl: boolean;
        score: number;
        permalink: string;
    };
    isLocked(): boolean;
    isApproved(): boolean;
    isRemoved(): boolean;
    isSpam(): boolean;
    isStickied(): boolean;
    isDistinguished(): boolean;
    isEdited(): boolean;
    delete(): Promise<void>;
    edit(options: EditCommentOptions): Promise<this>;
    approve(): Promise<void>;
    remove(isSpam?: boolean): Promise<void>;
    lock(): Promise<void>;
    unlock(): Promise<void>;
    reply(options: ReplyToCommentOptions): Promise<Comment>;
    getAuthor(): Promise<User>;
    distinguish(makeSticky?: boolean): Promise<void>;
    distinguishAsAdmin(makeSticky?: boolean): Promise<void>;
    undistinguish(): Promise<void>;
    static getById(id: T1ID, metadata?: Metadata): Promise<Comment>;
    static getComments(options: GetCommentsOptions, metadata?: Metadata): Listing<Comment>;
    static edit(options: CommentSubmissionOptions & {
        id: T1ID;
    }, metadata?: Metadata): Promise<Comment>;
    static delete(id: T1ID, metadata?: Metadata): Promise<void>;
    static approve(id: T1ID, metadata?: Metadata): Promise<void>;
    static remove(id: T1ID, isSpam?: boolean, metadata?: Metadata): Promise<void>;
    static lock(id: T1ID, metadata?: Metadata): Promise<void>;
    static unlock(id: T1ID, metadata?: Metadata): Promise<void>;
    static submit(options: CommentSubmissionOptions & {
        id: T1ID | T3ID;
    }, metadata?: Metadata): Promise<Comment>;
    static distinguish(id: T1ID, sticky: boolean, asAdmin: boolean, metadata?: Metadata): Promise<{
        distinguishedBy: string | undefined;
        stickied: boolean;
    }>;
    static undistinguish(id: T1ID, metadata?: Metadata): Promise<{
        distinguishedBy: string | undefined;
        stickied: boolean;
    }>;
    static getCommentsByUser(options: GetCommentsByUserOptions, metadata?: Metadata): Listing<Comment>;
}
//# sourceMappingURL=Comment.d.ts.map
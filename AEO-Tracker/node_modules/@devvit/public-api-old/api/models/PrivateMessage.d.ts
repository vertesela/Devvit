import { Metadata, RedditObject } from '@devvit/protos';
import { Prettify } from '@devvit/shared-types/Prettify.js';
import { T2ID, T5ID, TID } from '@devvit/shared-types/tid.js';
import { Listing, ListingFetchOptions } from './Listing.js';
import { Subreddit } from './Subreddit.js';
import { User } from './User.js';
export interface SendPrivateMessageOptions {
    /** The username of the recipient of the message. (without the leading u/) */
    to: string;
    /** The subject of the message. */
    subject: string;
    /** The body of the message in markdown text format. */
    text: string;
}
export interface SendPrivateMessageAsSubredditOptions extends SendPrivateMessageOptions {
    /** The name of the subreddit the message is being sent from (without the leading r/) */
    fromSubredditName: string;
}
export type GetPrivateMessagesOptions = Prettify<{
    type?: 'inbox' | 'unread' | 'sent';
} & ListingFetchOptions>;
type PrivateMessageAuthor = (Pick<User, 'username'> & {
    type: 'user';
    id?: T2ID;
}) | (Pick<Subreddit, 'name'> & {
    type: 'subreddit';
    id?: T5ID;
});
export declare class PrivateMessage {
    #private;
    static getMessages(options: GetPrivateMessagesOptions, metadata?: Metadata): Promise<Listing<PrivateMessage>>;
    static send({ to, subject, text }: SendPrivateMessageOptions, metadata?: Metadata): Promise<void>;
    static sendAsSubreddit({ to, fromSubredditName, subject, text }: SendPrivateMessageAsSubredditOptions, metadata?: Metadata): Promise<void>;
    static markAllAsRead(metadata?: Metadata): Promise<void>;
    constructor(data: RedditObject, metadata?: Metadata);
    get id(): TID;
    get from(): PrivateMessageAuthor;
    get body(): string;
    get bodyHtml(): string;
    get created(): Date;
    markAsRead(): Promise<void>;
}
export {};
//# sourceMappingURL=PrivateMessage.d.ts.map
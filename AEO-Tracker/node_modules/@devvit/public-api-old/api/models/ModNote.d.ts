import { DeleteNotesRequest, GetNotesRequest, Metadata, PostNotesRequest } from '@devvit/protos';
import { Prettify } from '@devvit/shared-types/Prettify.js';
import { ModAction } from './ModAction.js';
import { T1ID, T2ID, T3ID, T5ID } from '@devvit/shared-types/tid.js';
import { Listing, ListingFetchOptions } from './Listing.js';
export type ModNoteType = 'NOTE' | 'APPROVAL' | 'REMOVAL' | 'BAN' | 'MUTE' | 'INVITE' | 'SPAM' | 'CONTENT_CHANGE' | 'MOD_ACTION' | 'ALL';
export type UserNoteLabel = 'BOT_BAN' | 'PERMA_BAN' | 'BAN' | 'ABUSE_WARNING' | 'SPAM_WARNING' | 'SPAM_WATCH' | 'SOLID_CONTRIBUTOR' | 'HELPFUL_USER';
export interface UserNote {
    note?: string;
    redditId: T1ID | T3ID | T5ID;
    label?: UserNoteLabel;
}
export interface ModNote {
    id: string;
    operator: {
        id?: T2ID | undefined;
        name?: string | undefined;
    };
    user: {
        id?: T2ID | undefined;
        name?: string | undefined;
    };
    subreddit: {
        id?: T5ID | undefined;
        name?: string | undefined;
    };
    type: ModNoteType;
    createdAt: Date;
    userNote?: UserNote;
    modAction?: ModAction;
}
export type GetModNotesOptions = Prettify<Pick<GetNotesRequest, 'subreddit' | 'user'> & {
    filter?: ModNoteType;
} & Pick<ListingFetchOptions, 'limit' | 'before'>>;
export type CreateModNoteOptions = Prettify<PostNotesRequest & {
    redditId: T1ID | T3ID;
    label: UserNoteLabel;
}>;
export declare class ModNote {
    #private;
    private constructor();
    static get(options: GetModNotesOptions, metadata?: Metadata): Listing<ModNote>;
    static delete(options: DeleteNotesRequest, metadata?: Metadata): Promise<boolean>;
    static add(options: CreateModNoteOptions, metadata?: Metadata): Promise<ModNote>;
}
//# sourceMappingURL=ModNote.d.ts.map
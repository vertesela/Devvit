import { Metadata, RedditObject, Block } from '@devvit/protos';
import { Listing, ListingFetchOptions } from './Listing.js';
import { User } from './User.js';
import { T3ID } from '@devvit/shared-types/tid.js';
import { Comment, CommentSubmissionOptions } from './Comment.js';
import { RichTextBuilder } from '../../richtext/RichTextBuilder.js';
import { SetFlairOptions } from './Flair.js';
export interface GetPostsOptions extends ListingFetchOptions {
    subredditName?: string;
}
export interface GetPostsOptionsWithTimeframe extends GetPostsOptions {
    timeframe?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';
}
export interface GetSortedPostsOptions extends GetPostsOptionsWithTimeframe {
    sort: 'top' | 'controversial';
}
export interface GetHotPostsOptions extends GetPostsOptions {
    location?: 'GLOBAL' | 'US' | 'AR' | 'AU' | 'BG' | 'CA' | 'CL' | 'CO' | 'HR' | 'CZ' | 'FI' | 'FR' | 'DE' | 'GR' | 'HU' | 'IS' | 'IN' | 'IE' | 'IT' | 'JP' | 'MY' | 'MX' | 'NZ' | 'PH' | 'PL' | 'PT' | 'PR' | 'RO' | 'RS' | 'SG' | 'ES' | 'SE' | 'TW' | 'TH' | 'TR' | 'GB' | 'US_WA' | 'US_DE' | 'US_DC' | 'US_WI' | 'US_WV' | 'US_HI' | 'US_FL' | 'US_WY' | 'US_NH' | 'US_NJ' | 'US_NM' | 'US_TX' | 'US_LA' | 'US_NC' | 'US_ND' | 'US_NE' | 'US_TN' | 'US_NY' | 'US_PA' | 'US_CA' | 'US_NV' | 'US_VA' | 'US_CO' | 'US_AK' | 'US_AL' | 'US_AR' | 'US_VT' | 'US_IL' | 'US_GA' | 'US_IN' | 'US_IA' | 'US_OK' | 'US_AZ' | 'US_ID' | 'US_CT' | 'US_ME' | 'US_MD' | 'US_MA' | 'US_OH' | 'US_UT' | 'US_MO' | 'US_MN' | 'US_MI' | 'US_RI' | 'US_KS' | 'US_MT' | 'US_MS' | 'US_SC' | 'US_KY' | 'US_OR' | 'US_SD';
}
export interface GetPostsByUserOptions {
    username: string;
    sort?: 'hot' | 'new' | 'top' | 'controversial';
    timeframe?: 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';
    pageSize?: number;
    limit?: number;
    after?: string;
    before?: string;
}
export type PostTextOptions = {
    text: string;
} | {
    richtext: object | RichTextBuilder;
};
export interface SubmitLinkOptions extends CommonSubmitPostOptions {
    url: string;
    resubmit?: boolean;
}
export type SubmitSelfPostOptions = PostTextOptions & CommonSubmitPostOptions;
export type SubmitCustomPostOptions = CommonSubmitPostOptions & {
    preview: Block;
};
export type CommonSubmitPostOptions = {
    title: string;
    sendreplies?: boolean;
    nsfw?: boolean;
    spoiler?: boolean;
    flairId?: string;
    flairText?: string;
};
export type SubmitPostOptions = (SubmitLinkOptions | SubmitSelfPostOptions | SubmitCustomPostOptions) & {
    subredditName: string;
};
export interface CrosspostOptions extends CommonSubmitPostOptions {
    subredditName: string;
    postId: string;
}
export declare class Post {
    #private;
    constructor(data: RedditObject, metadata?: Metadata);
    get id(): `t3_${string}`;
    get authorId(): `t2_${string}` | undefined;
    get authorName(): string;
    get subredditId(): `t5_${string}`;
    get subredditName(): string;
    get permalink(): string;
    get title(): string;
    get body(): string | undefined;
    get url(): string;
    get thumbnail(): {
        url: string;
        height: number;
        width: number;
    } | undefined;
    get createdAt(): Date;
    get score(): number;
    get numberOfComments(): number;
    get numberOfReports(): number;
    get approved(): boolean;
    get spam(): boolean;
    get stickied(): boolean;
    get removed(): boolean;
    get archived(): boolean;
    get edited(): boolean;
    get locked(): boolean;
    get nsfw(): boolean;
    get quarantined(): boolean;
    get spoiler(): boolean;
    get hidden(): boolean;
    get ignoringReports(): boolean;
    get distinguishedBy(): string | undefined;
    get comments(): Listing<Comment>;
    toJSON(): {
        id: `t3_${string}`;
        authorId: `t2_${string}` | undefined;
        authorName: string;
        subredditId: `t5_${string}`;
        subredditName: string;
        permalink: string;
        title: string;
        body: string | undefined;
        url: string;
        thumbnail: {
            url: string;
            height: number;
            width: number;
        } | undefined;
        score: number;
        numberOfComments: number;
        numberOfReports: number;
        createdAt: Date;
        approved: boolean;
        spam: boolean;
        stickied: boolean;
        removed: boolean;
        archived: boolean;
        edited: boolean;
        locked: boolean;
        nsfw: boolean;
        quarantined: boolean;
        spoiler: boolean;
        hidden: boolean;
        ignoringReports: boolean;
        distinguishedBy: string | undefined;
    };
    isApproved(): boolean;
    isSpam(): boolean;
    isStickied(): boolean;
    isRemoved(): boolean;
    isArchived(): boolean;
    isEdited(): boolean;
    isLocked(): boolean;
    isNsfw(): boolean;
    isQuarantined(): boolean;
    isSpoiler(): boolean;
    isHidden(): boolean;
    isIgnoringReports(): boolean;
    isDistinguishedBy(): string | undefined;
    edit(options: PostTextOptions): Promise<void>;
    addComment(options: CommentSubmissionOptions): Promise<Comment>;
    delete(): Promise<void>;
    approve(): Promise<void>;
    remove(isSpam?: boolean): Promise<void>;
    lock(): Promise<void>;
    unlock(): Promise<void>;
    hide(): Promise<void>;
    unhide(): Promise<void>;
    markAsNsfw(): Promise<void>;
    unmarkAsNsfw(): Promise<void>;
    markAsSpoiler(): Promise<void>;
    unmarkAsSpoiler(): Promise<void>;
    sticky(position?: 1 | 2 | 3 | 4): Promise<void>;
    unsticky(): Promise<void>;
    distinguish(): Promise<void>;
    distinguishAsAdmin(): Promise<void>;
    undistinguish(): Promise<void>;
    ignoreReports(): Promise<void>;
    unignoreReports(): Promise<void>;
    getAuthor(): Promise<User>;
    crosspost(options: Omit<CrosspostOptions, 'postId'>): Promise<Post>;
    setFlair(options: SetFlairOptions, metadata?: Metadata): Promise<void>;
    removeFlair(metadata?: Metadata): Promise<void>;
    static getById(id: T3ID, metadata?: Metadata): Promise<Post>;
    static submit(options: SubmitPostOptions, metadata?: Metadata): Promise<Post>;
    static crosspost(options: CrosspostOptions, metadata?: Metadata): Promise<Post>;
    static edit(options: PostTextOptions & {
        id: T3ID;
    }, metadata?: Metadata): Promise<Post>;
    static delete(id: T3ID, metadata?: Metadata): Promise<void>;
    static approve(id: T3ID, metadata?: Metadata): Promise<void>;
    static remove(id: T3ID, isSpam?: boolean, metadata?: Metadata): Promise<void>;
    static hide(id: T3ID, metadata?: Metadata): Promise<void>;
    static unhide(id: T3ID, metadata?: Metadata): Promise<void>;
    static markAsNsfw(id: T3ID, metadata?: Metadata): Promise<void>;
    static unmarkAsNsfw(id: T3ID, metadata?: Metadata): Promise<void>;
    static markAsSpoiler(id: T3ID, metadata?: Metadata): Promise<void>;
    static unmarkAsSpoiler(id: T3ID, metadata?: Metadata): Promise<void>;
    static sticky(id: T3ID, position?: 1 | 2 | 3 | 4, metadata?: Metadata): Promise<void>;
    static unsticky(id: T3ID, metadata?: Metadata): Promise<void>;
    static lock(id: T3ID, metadata?: Metadata): Promise<void>;
    static unlock(id: T3ID, metadata?: Metadata): Promise<void>;
    static distinguish(id: T3ID, asAdmin: boolean, metadata?: Metadata): Promise<{
        distinguishedBy: string | undefined;
    }>;
    static undistinguish(id: T3ID, metadata?: Metadata): Promise<{
        distinguishedBy: string | undefined;
    }>;
    static ignoreReports(id: T3ID, metadata?: Metadata): Promise<void>;
    static unignoreReports(id: T3ID, metadata?: Metadata): Promise<void>;
    static getControversialPosts(options?: GetPostsOptionsWithTimeframe, metadata?: Metadata): Listing<Post>;
    static getTopPosts(options?: GetPostsOptionsWithTimeframe, metadata?: Metadata): Listing<Post>;
    static getSortedPosts(options: GetSortedPostsOptions, metadata?: Metadata): Listing<Post>;
    static getHotPosts(options?: GetHotPostsOptions, metadata?: Metadata): Listing<Post>;
    static getNewPosts(options: GetPostsOptions, metadata?: Metadata): Listing<Post>;
    static getRisingPosts(options: GetPostsOptions, metadata?: Metadata): Listing<Post>;
    static getPostsByUser(options: GetPostsByUserOptions, metadata?: Metadata): Listing<Post>;
}
//# sourceMappingURL=Post.d.ts.map
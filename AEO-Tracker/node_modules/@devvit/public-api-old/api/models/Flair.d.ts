import { FlairObject, Metadata } from '@devvit/protos';
import { T3ID } from '@devvit/shared-types/tid.js';
export declare enum FlairType {
    User = "USER_FLAIR",
    Post = "LINK_FLAIR"
}
export type AllowableFlairContent = 'all' | 'emoji' | 'text';
export type FlairTextColor = 'light' | 'dark';
export type FlairBackgroundColor = `#${string}` | 'transparent';
export interface CreateFlairTemplateOptions {
    /** The name of the subreddit to create the flair template in. */
    subredditName: string;
    /** The flair template's allowable content. Either 'all', 'emoji', or 'text'. */
    allowableContent?: AllowableFlairContent;
    /** The background color of the flair. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    backgroundColor?: string;
    maxEmojis?: number;
    /** Whether or not this flair template is only available to moderators. */
    modOnly?: boolean;
    /** The text to display in the flair. */
    text: string;
    /** Either 'dark' or 'light'. */
    textColor?: FlairTextColor;
    /** Whether or not users are allowed to edit this flair template before using it. */
    allowUserEdits?: boolean;
}
export interface EditFlairTemplateOptions extends CreateFlairTemplateOptions {
    id: string;
}
export declare class FlairTemplate {
    #private;
    /** @hidden */
    constructor(data: FlairObject, subredditName: string, metadata?: Metadata);
    /** The flair template's ID */
    get id(): string;
    /** The flair template's text */
    get text(): string;
    /** The flair template's text color. Either 'dark' or 'light'. */
    get textColor(): FlairTextColor;
    /** The flair template's background color. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    get backgroundColor(): FlairBackgroundColor;
    /** The flair template's allowable content. Either 'all', 'emoji', or 'text'. */
    get allowableContent(): AllowableFlairContent;
    /** Whether or not the flair template is only available to moderators. */
    get modOnly(): boolean;
    /** The flair template's maximum number of emojis. */
    get maxEmojis(): number;
    /** Whether or not the flair template allows users to edit their flair. */
    get allowUserEdits(): boolean;
    /** Delete this flair template */
    delete(): Promise<void>;
    /** Edit this flair template */
    edit(options: Partial<Omit<EditFlairTemplateOptions, 'id' | 'subredditName'>>): Promise<FlairTemplate>;
    static createPostFlairTemplate(options: CreateFlairTemplateOptions, metadata?: Metadata): Promise<FlairTemplate>;
    static createUserFlairTemplate(options: CreateFlairTemplateOptions, metadata?: Metadata): Promise<FlairTemplate>;
    static editFlairTemplate(editOptions: EditFlairTemplateOptions, metadata?: Metadata): Promise<FlairTemplate>;
    static getPostFlairTemplates(subredditName: string, metadata?: Metadata): Promise<FlairTemplate[]>;
    static getUserFlairTemplates(subredditName: string, metadata?: Metadata): Promise<FlairTemplate[]>;
    static deleteFlairTemplate(subredditName: string, flairTemplateId: string, metadata?: Metadata): Promise<void>;
}
export interface SetFlairOptions {
    /** The name of the subreddit of the item to set the flair on */
    subredditName: string;
    /** The flair template's ID */
    flairTemplateId?: string;
    /** The flair text */
    text?: string;
    /** The flair CSS class */
    cssClass?: string;
    /** The flair text color. Either 'dark' or 'light'. */
    textColor?: FlairTextColor;
    /** The flair background color. Either 'transparent' or a hex color code. e.g. #FFC0CB */
    backgroundColor?: string;
}
export interface SetUserFlairOptions extends SetFlairOptions {
    /** The username of the user to set the flair on */
    username: string;
}
export interface SetPostFlairOptions extends SetFlairOptions {
    /** The ID of the post to set the flair on */
    postId: string;
}
export interface InternalSetPostFlairOptions extends SetFlairOptions {
    postId: T3ID;
}
export declare class Flair {
    #private;
    static setUserFlair(options: SetUserFlairOptions, metadata?: Metadata): Promise<void>;
    static setPostFlair(options: SetPostFlairOptions, metadata?: Metadata): Promise<void>;
    static removePostFlair(subredditName: string, postId: T3ID, metadata?: Metadata): Promise<void>;
    static removeUserFlair(subredditName: string, username: string, metadata?: Metadata): Promise<void>;
}
//# sourceMappingURL=Flair.d.ts.map
import { Metadata, User as UserProto } from '@devvit/protos';
import { Listing, ListingFetchOptions } from './Listing.js';
import { T2ID } from '@devvit/shared-types/tid.js';
import { GetPostsByUserOptions, Post } from './Post.js';
import { Comment, GetCommentsByUserOptions } from './Comment.js';
export interface GetSubredditUsersByTypeOptions extends ListingFetchOptions {
    subredditName: string;
    type: 'banned' | 'muted' | 'wikibanned' | 'contributors' | 'wikicontributors' | 'moderators';
    username?: string;
}
export type RelationshipType = 'moderator_invite' | 'contributor' | 'banned' | 'muted' | 'wikibanned' | 'wikicontributor';
export type ModeratorPermission = 'all' | 'wiki' | 'posts' | 'access' | 'mail' | 'config' | 'flair' | 'chat_operator' | 'chat_config';
export interface CreateRelationshipOptions {
    subredditName: string;
    username: string;
    type: RelationshipType;
    banContext?: string;
    banMessage?: string;
    banReason?: string;
    duration?: number;
    note?: string;
    permissions?: ModeratorPermission[];
}
export interface RemoveRelationshipOptions {
    subredditName: string;
    username: string;
    type: RelationshipType | 'moderator';
}
export interface BanUserOptions {
    username: string;
    subredditName: string;
    context?: string;
    message?: string;
    reason?: string;
    duration?: number;
    note?: string;
}
export interface BanWikiContributorOptions {
    username: string;
    subredditName: string;
    reason?: string;
    duration?: number;
    note?: string;
}
/**
 * A class representing a user.
 */
export declare class User {
    #private;
    /**
     * @hidden
     */
    constructor(data: UserProto & {
        modPermissions?: {
            [subredditName: string]: string[];
        };
    }, metadata?: Metadata);
    /**
     * The ID (starting with t2_) of the user to retrieve.
     * @example 't2_1w72'
     */
    get id(): `t2_${string}`;
    /**
     * The username of the user omitting the u/.
     * @example 'spez'
     */
    get username(): string;
    /**
     * The date the user was created.
     */
    get createdAt(): Date;
    /**
     * The amount of link karma the user has.
     */
    get linkKarma(): number;
    /**
     * The amount of comment karma the user has.
     */
    get commentKarma(): number;
    /**
     * Whether the user's profile is marked as NSFW (Not Safe For Work).
     */
    get nsfw(): boolean;
    /**
     * The permissions the user has on the subreddit.
     */
    get modPermissions(): Map<string, ModeratorPermission[]>;
    toJSON(): {
        id: `t2_${string}`;
        username: string;
        createdAt: Date;
        linkKarma: number;
        commentKarma: number;
        nsfw: boolean;
        modPermissionsBySubreddit: {
            [k: string]: ModeratorPermission[];
        };
    };
    /**
     * Get the mod permissions the user has on the subreddit if they are a moderator.
     *
     * @param subredditName - name of the subreddit
     * @returns the moderator permissions the user has on the subreddit
     */
    getModPermissionsForSubreddit(subredditName: string): Promise<ModeratorPermission[]>;
    /**
     * Get the user's comments.
     *
     * @param options - Options for the request
     * @param options.sort - The sort order of the comments. e.g. 'new'
     * @param options.timeframe - The timeframe of the comments. e.g. 'all'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @returns A Listing of Comment objects.
     */
    getComments(options: Omit<GetCommentsByUserOptions, 'username'>): Listing<Comment>;
    /**
     * Get the user's posts.
     *
     * @param options - Options for the request
     * @param options.sort - The sort order of the posts. e.g. 'new'
     * @param options.timeframe - The timeframe of the posts. e.g. 'all'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @returns A Listing of Post objects.
     */
    getPosts(options: Omit<GetPostsByUserOptions, 'username'>): Listing<Post>;
    static getById(id: T2ID, metadata?: Metadata): Promise<User>;
    static getByUsername(username: string, metadata?: Metadata): Promise<User>;
    static getFromMetadata(key: string, metadata?: Metadata): Promise<User>;
    static getSubredditUsersByType(options: GetSubredditUsersByTypeOptions, metadata?: Metadata): Listing<User>;
    static createRelationship(options: CreateRelationshipOptions, metadata?: Metadata): Promise<void>;
    static removeRelationship(options: RemoveRelationshipOptions, metadata?: Metadata): Promise<void>;
    static setModeratorPermissions(username: string, subredditName: string, permissions: ModeratorPermission[], metadata?: Metadata): Promise<void>;
}
//# sourceMappingURL=User.d.ts.map
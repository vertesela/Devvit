import { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, CalendarWidgetConfiguration, CommunityListWidget_CommunityData as CommunityData, GetWidgetsResponse_WidgetItem as WidgetItem, GetWidgetsResponse_WidgetItem_PostFlairTemplate as PostFlairTemplateData, Metadata, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest, WidgetButton, WidgetImage, WidgetStyles } from '@devvit/protos';
export type AddWidgetData = (AddImageWidgetRequest & {
    type: 'image';
}) | (AddCalendarWidgetRequest & {
    type: 'calendar';
}) | (AddTextAreaWidgetRequest & {
    type: 'textarea';
}) | (AddButtonWidgetRequest & {
    type: 'button';
}) | (AddCommunityListWidgetRequest & {
    type: 'community-list';
}) | (AddPostFlairWidgetRequest & {
    type: 'post-flair';
}) | (AddCustomWidgetRequest & {
    type: 'custom';
});
export declare class Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get id(): string;
    get name(): string;
    get subredditName(): string;
    toJSON(): {
        id: string;
        name: string;
        subredditName: string;
    };
    delete(): Promise<void>;
    static getWidgets(subredditName: string, metadata?: Metadata): Promise<(ImageWidget | CalendarWidget | TextAreaWidget | ButtonWidget | CommunityListWidget | PostFlairWidget | CustomWidget)[]>;
    static delete(subredditName: string, id: string, metadata?: Metadata): Promise<void>;
    static reorder(subredditName: string, orderByIds: string[], metadata?: Metadata): Promise<void>;
    static add(widgetData: AddWidgetData, metadata: Metadata | undefined): Promise<ImageWidget | CalendarWidget | TextAreaWidget | ButtonWidget | CommunityListWidget | PostFlairWidget | CustomWidget>;
}
export declare class ImageWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get images(): WidgetImage[];
    toJSON(): {
        images: WidgetImage[];
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddImageWidgetRequest, metadata: Metadata | undefined): Promise<ImageWidget>;
    static update(options: UpdateImageWidgetRequest, metadata: Metadata | undefined): Promise<ImageWidget>;
}
export declare class CalendarWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get googleCalendarId(): string;
    get configuration(): CalendarWidgetConfiguration;
    get styles(): WidgetStyles;
    toJSON(): {
        googleCalendarId: string;
        configuration: CalendarWidgetConfiguration;
        styles: WidgetStyles;
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddCalendarWidgetRequest, metadata: Metadata | undefined): Promise<CalendarWidget>;
    static update(options: UpdateCalendarWidgetRequest, metadata: Metadata | undefined): Promise<CalendarWidget>;
}
export declare class TextAreaWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get text(): string;
    get styles(): WidgetStyles;
    toJSON(): {
        text: string;
        styles: WidgetStyles;
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddTextAreaWidgetRequest, metadata: Metadata | undefined): Promise<TextAreaWidget>;
    static update(options: UpdateTextAreaWidgetRequest, metadata: Metadata | undefined): Promise<TextAreaWidget>;
}
export declare class ButtonWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get buttons(): WidgetButton[];
    get description(): string;
    get styles(): WidgetStyles;
    toJSON(): {
        buttons: WidgetButton[];
        description: string;
        styles: WidgetStyles;
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddButtonWidgetRequest, metadata: Metadata | undefined): Promise<ButtonWidget>;
    static update(options: UpdateButtonWidgetRequest, metadata: Metadata | undefined): Promise<ButtonWidget>;
}
export declare class CommunityListWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get communities(): CommunityData[];
    get styles(): WidgetStyles;
    toJSON(): {
        communities: CommunityData[];
        styles: WidgetStyles;
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddCommunityListWidgetRequest, metadata: Metadata | undefined): Promise<CommunityListWidget>;
    static update(options: UpdateCommunityListWidgetRequest, metadata: Metadata | undefined): Promise<CommunityListWidget>;
}
export declare class PostFlairWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get styles(): WidgetStyles;
    get templates(): PostFlairTemplateData[];
    get display(): "list" | "cloud";
    toJSON(): {
        styles: WidgetStyles;
        templates: PostFlairTemplateData[];
        display: "list" | "cloud";
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddPostFlairWidgetRequest, metadata: Metadata | undefined): Promise<PostFlairWidget>;
    static update(options: UpdatePostFlairWidgetRequest, metadata: Metadata | undefined): Promise<PostFlairWidget>;
}
export declare class CustomWidget extends Widget {
    #private;
    constructor(widgetData: WidgetItem, subredditName: string, metadata?: Metadata);
    get images(): WidgetImage[];
    get text(): string;
    get stylesheetUrl(): string;
    get height(): number;
    get css(): string;
    toJSON(): {
        images: WidgetImage[];
        text: string;
        stylesheetUrl: string;
        height: number;
        css: string;
        id: string;
        name: string;
        subredditName: string;
    };
    static create(options: AddCustomWidgetRequest, metadata: Metadata | undefined): Promise<CustomWidget>;
    static update(options: UpdateCustomWidgetRequest, metadata: Metadata | undefined): Promise<CustomWidget>;
}
//# sourceMappingURL=Widget.d.ts.map
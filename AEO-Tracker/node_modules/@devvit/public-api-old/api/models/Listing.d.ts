import { T1ID, T3ID } from '@devvit/shared-types/tid.js';
export interface MoreObject {
    parentId: T1ID | T3ID;
    children: T1ID[];
    depth: number;
}
export interface ListingFetchOptions {
    after?: string;
    before?: string;
    limit?: number;
    pageSize?: number;
    more?: MoreObject;
}
export interface ListingFetchResponse<T> {
    children: T[];
    before?: string;
    after?: string;
    more?: MoreObject;
}
export interface Listing<T> {
}
interface ListingOptions<T> {
    hasMore?: boolean;
    after?: string;
    before?: string;
    pageSize?: number;
    limit?: number;
    children?: T[];
    more?: MoreObject;
    fetch: (options: ListingFetchOptions) => Promise<ListingFetchResponse<T>>;
}
export declare class Listing<T> {
    #private;
    pageSize: number;
    limit: number;
    children: T[];
    constructor(options: ListingOptions<T>);
    get hasMore(): boolean;
    [Symbol.asyncIterator](): AsyncIterator<T>;
    setMore(more: MoreObject | undefined): void;
    preventInitialFetch(): void;
    all(): Promise<T[]>;
    get(count: number): Promise<T[]>;
}
export {};
//# sourceMappingURL=Listing.d.ts.map
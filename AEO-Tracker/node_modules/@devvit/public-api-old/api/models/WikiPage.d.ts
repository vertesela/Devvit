import { WikiPage as WikiPageProto, Metadata, WikiPageRevision as WikiPageRevisionProto, WikiPageSettings_Data } from '@devvit/protos';
import { User } from './User.js';
import { Listing } from './Listing.js';
export interface CreateWikiPageOptions {
    /** The name of the subreddit to create the page in. */
    subredditName: string;
    /** The name of the page to create. */
    page: string;
    /** The content of the page. */
    content: string;
    /** The reason for creating the page. */
    reason?: string;
}
export interface UpdateWikiPageOptions {
    /** The name of the subreddit the page is in. */
    subredditName: string;
    /** The name of the page to update. */
    page: string;
    /** The new content of the page. */
    content: string;
    /** The reason for updating the page. */
    reason?: string;
}
export interface GetPageRevisionsOptions {
    /** The name of the subreddit the page is in. */
    subredditName: string;
    /** The name of the page to get revisions for. */
    page: string;
    /** The number of revisions to get per request. */
    pageSize?: number;
    /** The maximum number of revisions to get. */
    limit?: number;
    /** The ID of the revision to start at. */
    after?: string;
}
export declare enum WikiPagePermissionLevel {
    /** Use subreddit wiki permissions */
    SUBREDDIT_PERMISSIONS = 0,
    /** Only approved wiki contributors for this page may edit */
    APPROVED_CONTRIBUTORS_ONLY = 1,
    /** Only mods may edit and view */
    MODS_ONLY = 2
}
export interface UpdatePageSettingsOptions {
    /** The name of the subreddit the page is in. */
    subredditName: string;
    /** The name of the page to update settings for. */
    page: string;
    /** Whether the page should be listed in the wiki index. */
    listed: boolean;
    /** The permission level for the page. */
    permLevel: WikiPagePermissionLevel;
}
export declare class WikiPage {
    #private;
    constructor(name: string, subredditName: string, data: WikiPageProto, metadata: Metadata | undefined);
    /** The name of the page. */
    get name(): string;
    /** The name of the subreddit the page is in. */
    get subredditName(): string;
    /** The Markdown content of the page. */
    get content(): string;
    /** The ID of the revision. */
    get revisionId(): string;
    /** The date of the revision. */
    get revisionDate(): Date;
    /** The reason for the revision. */
    get revisionReason(): string;
    /** The author of this revision. */
    get revisionAuthor(): User;
    toJSON(): {
        name: string;
        subredditName: string;
        content: string;
        revisionId: string;
        revisionDate: Date;
        revisionReason: string;
        revisionAuthor: {
            id: `t2_${string}`;
            username: string;
            createdAt: Date;
            linkKarma: number; /** Revert this page to a previous revision. */
            commentKarma: number;
            nsfw: boolean;
            modPermissionsBySubreddit: {
                [k: string]: import("./User.js").ModeratorPermission[];
            };
        };
    };
    /** Update this page. */
    update(content: string, reason?: string): Promise<WikiPage>;
    /** Get the revisions for this page. */
    getRevisions(options: Omit<GetPageRevisionsOptions, 'subredditName' | 'page'>): Promise<Listing<WikiPageRevision>>;
    /** Revert this page to a previous revision. */
    revertTo(revisionId: string): Promise<void>;
    /** Get the settings for this page. */
    getSettings(): Promise<WikiPageSettings>;
    /** Update the settings for this page. */
    updateSettings(options: Omit<UpdatePageSettingsOptions, 'subredditName' | 'page'>): Promise<WikiPageSettings>;
    /** Add an editor to this page. */
    addEditor(username: string): Promise<void>;
    /** Remove an editor from this page. */
    removeEditor(username: string): Promise<void>;
    static getPage(subredditName: string, page: string, metadata: Metadata | undefined): Promise<WikiPage>;
    static getPages(subredditName: string, metadata: Metadata | undefined): Promise<string[]>;
    static createPage(options: CreateWikiPageOptions, metadata: Metadata | undefined): Promise<WikiPage>;
    static updatePage(options: UpdateWikiPageOptions, metadata: Metadata | undefined): Promise<WikiPage>;
    static getPageRevisions(options: GetPageRevisionsOptions, metadata: Metadata | undefined): Listing<WikiPageRevision>;
    static revertPage(subredditName: string, page: string, revisionId: string, metadata: Metadata | undefined): Promise<void>;
    static getPageSettings(subredditName: string, page: string, metadata: Metadata | undefined): Promise<WikiPageSettings>;
    static updatePageSettings(options: UpdatePageSettingsOptions, metadata: Metadata | undefined): Promise<WikiPageSettings>;
    static addEditor(subredditName: string, page: string, username: string, metadata: Metadata | undefined): Promise<void>;
    static removeEditor(subredditName: string, page: string, username: string, metadata: Metadata | undefined): Promise<void>;
}
export declare class WikiPageRevision {
    #private;
    constructor(data: WikiPageRevisionProto, metadata: Metadata | undefined);
    get id(): string;
    get page(): string;
    get date(): Date;
    get author(): User;
    get reason(): string;
    get hidden(): boolean;
    toJSON(): {
        id: string;
        page: string;
        date: Date;
        author: {
            id: `t2_${string}`;
            username: string;
            createdAt: Date;
            linkKarma: number; /** Revert this page to a previous revision. */
            commentKarma: number;
            nsfw: boolean;
            modPermissionsBySubreddit: {
                [k: string]: import("./User.js").ModeratorPermission[];
            };
        };
        reason: string;
        hidden: boolean;
    };
}
export declare class WikiPageSettings {
    #private;
    constructor(data: WikiPageSettings_Data, metadata: Metadata | undefined);
    get listed(): boolean;
    get permLevel(): WikiPagePermissionLevel;
    get editors(): User[];
    toJSON(): {
        listed: boolean;
        permLevel: WikiPagePermissionLevel;
        editors: {
            id: `t2_${string}`;
            username: string;
            createdAt: Date;
            linkKarma: number; /** Revert this page to a previous revision. */
            commentKarma: number;
            nsfw: boolean;
            modPermissionsBySubreddit: {
                [k: string]: import("./User.js").ModeratorPermission[];
            };
        }[];
    };
}
//# sourceMappingURL=WikiPage.d.ts.map
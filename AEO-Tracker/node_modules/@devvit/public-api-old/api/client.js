import { Devvit } from '../abstractions/Devvit.js';
import { Subreddit } from './models/Subreddit.js';
import { Post, } from './models/Post.js';
import { User, } from './models/User.js';
import { Comment, } from './models/Comment.js';
import { getModerationLog } from './models/ModAction.js';
import { ModNote } from './models/ModNote.js';
import { asT3ID, asTID, isT1ID, isT3ID } from '@devvit/shared-types/tid.js';
import { PrivateMessage, } from './models/PrivateMessage.js';
import { Flair, FlairTemplate, } from './models/Flair.js';
import { Header } from '@devvit/runtimes/lib/Header.js';
import { Widget } from './models/Widget.js';
import { WikiPage, } from './models/WikiPage.js';
/**
 * The Reddit API Client
 *
 * Make sure you initialize this with `new RedditAPIClient()` at the top of your `main.ts` file before using it.
 *
 * @example
 * ```ts
 * const reddit = new RedditAPIClient();
 *
 * const memes = await reddit.getSubredditByName('memes', metadata);
 * const posts = await memes.getHotPosts(metadata).all();
 * const hottestPost = posts[0];
 * const comments = await hottestPost.comments().all();
 * ```
 */
export class RedditAPIClient {
    /** @hidden */
    constructor() {
        // TODO: we can remove this once we have static analysis and code transformations
        // to automatically manage depedencies [DX-1414]
        for (const redditApiSection of Object.values(Devvit.Types.RedditAPI)) {
            Devvit.use(redditApiSection);
        }
    }
    /**
     * Gets a {@link Subreddit} object by ID
     *
     * @param {string} id - The ID (starting with t5_) of the subreddit to retrieve. e.g. t5_2qjpg
     * @param {Metadata} metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const memes = await reddit.getSubredditById('t5_2qjpg', metadata);
     * ```
     */
    getSubredditById(id, metadata) {
        return Subreddit.getById(asTID(id), metadata);
    }
    /**
     * Gets a {@link Subreddit} object by name
     *
     * @param {string} name The name of a subreddit omitting the r/. This is case insensitive.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const askReddit = await reddit.getSubredditByName('askReddit', metadata);
     * ```
     */
    getSubredditByName(name, metadata) {
        return Subreddit.getByName(name, metadata);
    }
    /**
     * Retrieves the current subreddit based on the provided metadata.
     *
     * @param {Metadata} metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns {Promise<Subreddit>} A Promise that resolves a Subreddit object.
     * @example
     * ```ts
     * const currentSubreddit = await reddit.getCurrentSubreddit(metadata);
     * ```
     */
    getCurrentSubreddit(metadata) {
        return Subreddit.getFromMetadata(metadata);
    }
    /**
     * Gets a {@link Post} object by ID
     *
     * @param id
     * @param metadata
     * @returns A Promise that resolves to a Post object.
     */
    getPostById(id, metadata) {
        return Post.getById(asTID(id), metadata);
    }
    /**
     * Submits a new post to a subreddit.
     *
     * @param options - Either a self post or a link post.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a Post object.
     * @example
     * ```ts
     * const post = await reddit.submitPost({
     *   subredditName: 'devvit',
     *   title: 'Hello World',
     *   richtext: new RichTextBuilder()
     *     .heading({ level: 1 }, (h) => {
     *       h.rawText('Hello world');
     *     })
     *     .codeBlock({}, (cb) => cb.rawText('This post was created via the Devvit API'))
     *     .build()
     * }, metadata);
     * ```
     */
    submitPost(options, metadata) {
        return Post.submit(options, metadata);
    }
    /**
     * Crossposts a post to a subreddit.
     *
     * @param options - Options for crossposting a post
     * @param options.subredditName - The name of the subreddit to crosspost to
     * @param options.postId - The ID of the post to crosspost
     * @param options.title - The title of the crosspost
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns - A Promise that resolves to a Post object.
     */
    crosspost(options, metadata) {
        return Post.crosspost(options, metadata);
    }
    /**
     * Gets a {@link User} object by ID
     *
     * @param id - The ID (starting with t2_) of the user to retrieve. e.g. t2_1qjpg
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getUserById('t2_1qjpg', metadata);
     * ```
     */
    getUserById(id, metadata) {
        return User.getById(asTID(id), metadata);
    }
    /**
     * Gets a {@link User} object by username
     *
     * @param username - The username of the user omitting the u/. e.g. 'devvit'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getUserByUsername('devvit', metadata);
     * ```
     */
    getUserByUsername(username, metadata) {
        return User.getByUsername(username, metadata);
    }
    /**
     * Get the current calling user based on the provided metadata.
     *
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getCurrentUser(metadata);
     * ```
     */
    getCurrentUser(metadata) {
        return User.getFromMetadata(Header.User, metadata);
    }
    /**
     * Get the user that the app runs as on the provided metadata.
     *
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a User object.
     * @example
     * ```ts
     * const user = await reddit.getAppUser(metadata);
     * ```
     */
    getAppUser(metadata) {
        return User.getFromMetadata(Header.AppUser, metadata);
    }
    /**
     * Get a {@link Comment} object by ID
     *
     * @param id - The ID (starting with t1_) of the comment to retrieve. e.g. t1_1qjpg
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a Comment object.
     * @example
     * ```ts
     * const comment = await reddit.getCommentById('t1_1qjpg', metadata);
     * ```
     */
    getCommentById(id, metadata) {
        return Comment.getById(asTID(id), metadata);
    }
    /**
     * Get a list of comments from a specific post or comment.
     *
     * @param options - Options for the request
     * @param options.postId - The ID of the post e.g. 't3_1qjpg'
     * @param options.commentId - The ID of the comment e.g. 't1_1qjpg'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Comment objects.
     * @example
     * ```ts
     * const comments = await reddit.getComments({
     *   postId: 't3_1qjpg',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getComments(options, metadata) {
        return Comment.getComments(options, metadata);
    }
    /**
     * Get a list of comments by a specific user.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user omitting the u/. e.g. 'spez'
     * @param options.sort - The sort order of the comments. e.g. 'new'
     * @param options.timeframe - The timeframe of the comments. e.g. 'all'
     * @param options.limit - The maximum number of comments to return. e.g. 1000
     * @param options.pageSize - The number of comments to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Comment objects.
     */
    getCommentsByUser(options, metadata) {
        return Comment.getCommentsByUser(options, metadata);
    }
    /**
     * Submit a new comment to a post or comment.
     *
     * @param options - You must provide either `options.text` or `options.richtext` but not both.
     * @param options.id - The ID of the post or comment to comment on. e.g. 't3_1qjpg' for post and 't1_1qgif' for comment
     * @param options.text - The text of the comment
     * @param options.richtext - The rich text of the comment
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves to a Comment object.
     */
    submitComment(options, metadata) {
        return Comment.submit({
            ...options,
            id: asTID(options.id),
        }, metadata);
    }
    /**
     * Get a list of controversial posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getControversialPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getControversialPosts(options, metadata) {
        return Post.getControversialPosts(options, metadata);
    }
    /**
     * Get a list of controversial posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getControversialPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getTopPosts(options, metadata) {
        return Post.getTopPosts(options, metadata);
    }
    /**
     * Get a list of hot posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getHotPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getHotPosts(options, metadata) {
        return Post.getHotPosts(options, metadata);
    }
    /**
     * Get a list of new posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getNewPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getNewPosts(options, metadata) {
        return Post.getNewPosts(options, metadata);
    }
    /**
     * Get a list of hot posts from a specific subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get posts from. e.g. 'memes'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     * @example
     * ```ts
     * const posts = await reddit.getRisingPosts({
     *   subredditName: 'memes',
     *   timeframe: 'day',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getRisingPosts(options, metadata) {
        return Post.getRisingPosts(options, metadata);
    }
    /**
     * Get a list of posts from a specific user.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user omitting the u/. e.g. 'spez'
     * @param options.sort - The sort method to use. e.g. 'new'
     * @param options.timeframe - The timeframe to get posts from. e.g. 'day'
     * @param options.limit - The maximum number of posts to return. e.g. 1000
     * @param options.pageSize - The number of posts to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of Post objects.
     */
    getPostsByUser(options, metadata) {
        return Post.getPostsByUser(options, metadata);
    }
    /**
     * Get the moderation log for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the moderation log from. e.g. 'memes'
     * @param options.limit - The maximum number of ModActions to return. e.g. 1000
     * @param options.pageSize - The number of ModActions to return per request. e.g. 100
     * @param metadata - Additional metadata to attach to the request
     * @returns A Listing of ModAction objects.
     * @example
     * ```ts
     * const modActions = await reddit.getModerationLog({
     *   subredditName: 'memes',
     *   limit: 1000,
     *   pageSize: 100
     * }, metadata).all();
     * ```
     */
    getModerationLog(options, metadata) {
        return getModerationLog(options, metadata);
    }
    /**
     * Get a list of users who have been approved to post in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the approved users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is approved to post in the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of User objects.
     */
    getApprovedUsers(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'contributors',
            ...options,
        }, metadata);
    }
    /**
     * Approve a user to post in a subreddit.
     *
     * @param username - The username of the user to approve. e.g. 'spez'
     * @param subredditName - The name of the subreddit to approve the user in. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    approveUser(username, subredditName, metadata) {
        return User.createRelationship({
            username,
            subredditName,
            type: 'contributor',
        }, metadata);
    }
    /**
     * Remove a user's approval to post in a subreddit.
     *
     * @param username - The username of the user to remove approval from. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user's approval from. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    removeUser(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'contributor',
        }, metadata);
    }
    /**
     * Get a list of users who are wiki contributors of a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the wiki contributors from. e.g. 'memes'
     * @param options.username - Use this to see if a user is a wiki contributor for the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of User objects.
     */
    getWikiContributors(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'wikicontributors',
            ...options,
        }, metadata);
    }
    /**
     * Add a user as a wiki contributor for a subreddit.
     *
     * @param username - The username of the user to add as a wiki contributor. e.g. 'spez'
     * @param subredditName - The name of the subreddit to add the user as a wiki contributor. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    addWikiContributor(username, subredditName, metadata) {
        return User.createRelationship({
            username,
            subredditName,
            type: 'wikicontributor',
        }, metadata);
    }
    /**
     * Remove a user's wiki contributor status for a subreddit.
     *
     * @param username - The username of the user to remove wiki contributor status from. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user's wiki contributor status from. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    removeWikiContributor(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'wikicontributor',
        }, metadata);
    }
    /**
     * Get a list of users who are banned from a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the banned users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is banned from the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of User objects.
     */
    getBannedUsers(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'banned',
            ...options,
        }, metadata);
    }
    /**
     * Ban a user from a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to ban. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to ban the user from. e.g. 'memes'
     * @param options.note - A mod note for the ban. (optional)
     * @param options.duration - The number of days the user should be banned for. (optional)
     * @param options.message - A message to send to the user when they are banned. (optional)
     * @param options.context - The ID of the post or comment that caused the ban. (optional)
     * @param options.reason - The reason for the ban. (optional)
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    banUser(options, metadata) {
        return User.createRelationship({
            username: options.username,
            subredditName: options.subredditName,
            type: 'banned',
            banReason: options.reason,
            banMessage: options.message,
            note: options.note,
            duration: options.duration,
        }, metadata);
    }
    /**
     * Unban a user from a subreddit.
     *
     * @param username - The username of the user to unban. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unban the user from. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    unbanUser(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'banned',
        }, metadata);
    }
    /**
     * Get a list of users who are banned from contributing to the wiki on a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the banned wiki contributors from. e.g. 'memes'
     * @param options.username - Use this to see if a user is banned from contributing to the wiki on a subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of User objects.
     */
    getBannedWikiContributors(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'wikibanned',
            ...options,
        }, metadata);
    }
    /**
     * Ban a user from contributing to the wiki on a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to ban. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to ban the user from contributing to the wiki on. e.g. 'memes'
     * @param options.reason - The reason for the ban. (optional)
     * @param options.duration - The number of days the user should be banned for. (optional)
     * @param options.note - A mod note for the ban. (optional)
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    banWikiContributor(options, metadata) {
        return User.createRelationship({
            ...options,
            type: 'wikibanned',
        }, metadata);
    }
    /**
     *
     * @param username - The username of the user to unban. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unban the user from contributing to the wiki on. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    unbanWikiContributor(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'wikibanned',
        }, metadata);
    }
    /**
     * Get a list of users who are moderators for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the moderators from. e.g. 'memes'
     * @param options.username - Use this to see if a user is a moderator of the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of User objects.
     */
    getModerators(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'moderators',
            ...options,
        }, metadata);
    }
    /**
     * Invite a user to become a moderator of a subreddit.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to invite. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to invite the user to moderate. e.g. 'memes'
     * @param options.permissions - The permissions to give the user. (optional) Defaults to 'all'.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    inviteModerator(options, metadata) {
        return User.createRelationship({
            type: 'moderator_invite',
            subredditName: options.subredditName,
            username: options.subredditName,
            permissions: options.permissions ?? [],
        }, metadata);
    }
    /**
     * Revoke a moderator invite for a user to a subreddit.
     *
     * @param username - The username of the user to revoke the invite for. e.g. 'spez'
     * @param subredditName - The name of the subreddit to revoke the invite for. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    revokeModeratorInvite(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'moderator_invite',
        }, metadata);
    }
    /**
     * Remove a user as a moderator of a subreddit.
     *
     * @param username - The username of the user to remove as a moderator. e.g. 'spez'
     * @param subredditName - The name of the subreddit to remove the user as a moderator from. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    removeModerator(username, subredditName, metadata) {
        return User.removeRelationship({
            type: 'moderator',
            subredditName,
            username,
        }, metadata);
    }
    /**
     * Update the permissions of a moderator of a subreddit.
     *
     * @param username - The username of the user to update the permissions for. e.g. 'spez'
     * @param subredditName - The name of the subreddit. e.g. 'memes'
     * @param permissions - The permissions to give the user. e.g ['posts', 'wiki']
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    setModeratorPermissions(username, subredditName, permissions, metadata) {
        return User.setModeratorPermissions(username, subredditName, permissions, metadata);
    }
    /**
     * Get a list of users who are muted in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the muted users from. e.g. 'memes'
     * @param options.username - Use this to see if a user is muted in the subreddit.
     * @param options.limit - The maximum number of users to return. e.g. 1000
     * @param options.pageSize - The number of users to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A listing of User objects.
     */
    getMutedUsers(options, metadata) {
        return User.getSubredditUsersByType({
            type: 'muted',
            ...options,
        }, metadata);
    }
    /**
     * Mute a user in a subreddit. Muting a user prevents them from sending modmail.
     *
     * @param options - Options for the request
     * @param options.username - The username of the user to mute. e.g. 'spez'
     * @param options.subredditName - The name of the subreddit to mute the user in. e.g. 'memes'
     * @param options.note - A mod note on why the user was muted. (optional)
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    muteUser(options, metadata) {
        return User.createRelationship({
            ...options,
            type: 'muted',
        }, metadata);
    }
    /**
     * Unmute a user in a subreddit. Unmuting a user allows them to send modmail.
     *
     * @param username - The username of the user to unmute. e.g. 'spez'
     * @param subredditName - The name of the subreddit to unmute the user in. e.g. 'memes'
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    unmuteUser(username, subredditName, metadata) {
        return User.removeRelationship({
            username,
            subredditName,
            type: 'muted',
        }, metadata);
    }
    /**
     * Get a list of mod notes related to a user in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to get the mod notes from. e.g. 'memes'
     * @param options.username - The username of the user to get the mod notes for. e.g. 'spez'
     * @param options.filter - Filter the mod notes by type. e.g. 'NOTE', 'BAN', 'APPROVAL'
     * @param options.limit - The maximum number of mod notes to return. e.g. 1000
     * @param options.pageSize - The number of mod notes to return per request. e.g. 100
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A listing of ModNote objects.
     */
    getModNotes(options, metadata) {
        return ModNote.get(options, metadata);
    }
    /**
     * Delete a mod note.
     *
     * @param options - Options for the request
     * @param options.subreddit - The name of the subreddit to delete the mod note from. e.g. 'memes'
     * @param options.noteId - The ID of the mod note to delete (should have a ModNote_ prefix).
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    deleteModNote(options, metadata) {
        return ModNote.delete(options, metadata);
    }
    /**
     * Add a mod note.
     *
     * @param options - Options for the request
     * @param options.subreddit - The name of the subreddit to add the mod note to. e.g. 'memes'
     * @param options.user - The username of the user to add the mod note to. e.g. 'spez'
     * @param options.redditId - The ID of the comment or post to add the mod note to. e.g. 't3_1234'
     * @param options.label - The label of the mod note. e.g. 'SPAM_WARNING'
     * @param options.note - The text of the mod note.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves if the mod note was successfully added.
     */
    addModNote(options, metadata) {
        const req = {
            ...options,
            redditId: asTID(options.redditId),
        };
        return ModNote.add(req, metadata);
    }
    /**
     * Sends a private message to a user.
     *
     * @param options - The options for sending the message.
     * @param metadata - Metadata from the orignating handler.
     * @returns A Promise that resolves if the private message was successfully sent.
     */
    async sendPrivateMessage(options, metadata) {
        return PrivateMessage.send(options, metadata);
    }
    /**
     * Sends a private message to a user on behalf of a subreddit.
     *
     * @param options - The options for sending the message as a subreddit.
     * @param metadata - Metadata from the orignating handler.
     * @returns A Promise that resolves if the private message was successfully sent.
     */
    async sendPrivateMessageAsSubreddit(options, metadata) {
        return PrivateMessage.sendAsSubreddit(options, metadata);
    }
    /**
     * Approve a post or comment.
     *
     * @param id - The id of the post (t3_) or comment (t1_) to approve.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @example
     * ```ts
     * await reddit.approve('t3_123456', metadata);
     * await reddit.approve('t1_123456', metadata);
     * ```
     */
    async approve(id, metadata) {
        if (isT1ID(id)) {
            return Comment.approve(id, metadata);
        }
        else if (isT3ID(id)) {
            return Post.approve(id, metadata);
        }
        throw new Error('id must start with either t1_ or t3_');
    }
    /**
     * Remove a post or comment.
     *
     * @param id - The id of the post (t3_) or comment (t1_) to remove.
     * @param isSpam - Whether or not the post/comment is spam.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @example
     * ```ts
     * await reddit.remove('t3_123456', false, metadata);
     * await reddit.remove('t1_123456', true, metadata);
     * ```
     */
    async remove(id, isSpam, metadata) {
        if (isT1ID(id)) {
            return Comment.remove(id, isSpam, metadata);
        }
        else if (isT3ID(id)) {
            return Post.remove(id, isSpam, metadata);
        }
        throw new Error('id must start with either t1_ or t3_');
    }
    /**
     * Get the list of post flair templates for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the post flair templates for.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves with an array of FlairTemplate objects.
     */
    async getPostFlairTemplates(subredditName, metadata) {
        return FlairTemplate.getPostFlairTemplates(subredditName, metadata);
    }
    /**
     * Get the list of user flair templates for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the user flair templates for.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Promise that resolves with an array of FlairTemplate objects.
     */
    async getUserFlairTemplates(subredditName, metadata) {
        return FlairTemplate.getUserFlairTemplates(subredditName, metadata);
    }
    /**
     * Create a post flair template for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Whether or not this flair template is only available to mods.
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Whether or not users can edit the flair template when selecting a flair.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns The created FlairTemplate object.
     */
    async createPostFlairTemplate(options, metadata) {
        return FlairTemplate.createPostFlairTemplate(options, metadata);
    }
    /**
     * Create a user flair template for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Whether or not this flair template is only available to mods.
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Whether or not users can edit the flair template when selecting a flair.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns The created FlairTemplate object.
     */
    async createUserFlairTemplate(options, metadata) {
        return FlairTemplate.createUserFlairTemplate(options, metadata);
    }
    /**
     * Edit a flair template for a subreddit. This can be either a post or user flair template.
     * Note: If you leave any of the options fields as undefined, they will reset to their default values.
     *
     * @param options - Options for the request
     * @param options.id - The ID of the flair template to edit.
     * @param options.subredditName - The name of the subreddit to create the flair template for.
     * @param options.allowableContent - The content that is allowed to be used with this flair template. e.g. 'all' or 'text' or 'emoji'
     * @param options.backgroundColor - The background color of the flair template. e.g. '#ff0000' or 'transparent'
     * @param options.maxEmojis - The maximum number of emojis that can be used with this flair template.
     * @param options.modOnly - Whether or not this flair template is only available to mods.
     * @param options.text - The text of the flair template.
     * @param options.textColor - The text color of the flair template. Either 'dark' or 'light'.
     * @param options.allowUserEdits - Whether or not users can edit the flair template when selecting a flair.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns The edited FlairTemplate object.
     */
    async editFlairTemplate(options, metadata) {
        return FlairTemplate.editFlairTemplate(options, metadata);
    }
    /**
     * Delete a flair template from a subreddit.
     *
     * @param subredditName - The name of the subreddit to delete the flair template from.
     * @param flairTemplateId - The ID of the flair template to delete.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async deleteFlairTemplate(subredditName, flairTemplateId, metadata) {
        return FlairTemplate.deleteFlairTemplate(subredditName, flairTemplateId, metadata);
    }
    /**
     * Set the flair for a user in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to set the flair for.
     * @param options.username - The username of the user to set the flair for.
     * @param options.flairTemplateId - The ID of the flair template to use.
     * @param options.text - The text of the flair.
     * @param options.cssClass - The CSS class of the flair.
     * @param options.backgroundColor - The background color of the flair.
     * @param options.textColor - The text color of the flair.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async setUserFlair(options, metadata) {
        return Flair.setUserFlair(options, metadata);
    }
    /**
     * Remove the flair for a user in a subreddit.
     *
     * @param subredditName - The name of the subreddit to remove the flair from.
     * @param username - The username of the user to remove the flair from.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async removeUserFlair(subredditName, username, metadata) {
        return Flair.removeUserFlair(subredditName, username, metadata);
    }
    /**
     * Set the flair for a post in a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit to set the flair for.
     * @param options.postId - The ID of the post to set the flair for.
     * @param options.flairTemplateId - The ID of the flair template to use.
     * @param options.text - The text of the flair.
     * @param options.cssClass - The CSS class of the flair.
     * @param options.backgroundColor - The background color of the flair.
     * @param options.textColor - The text color of the flair.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async setPostFlair(options, metadata) {
        return Flair.setPostFlair(options, metadata);
    }
    /**
     * Remove the flair for a post in a subreddit.
     *
     * @param subredditName - The name of the subreddit to remove the flair from.
     * @param postId - The ID of the post to remove the flair from.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async removePostFlair(subredditName, postId, metadata) {
        return Flair.removePostFlair(subredditName, asT3ID(postId), metadata);
    }
    /**
     * Get the widgets for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the widgets for.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns - An array of Widget objects.
     */
    async getWidgets(subredditName, metadata) {
        return Widget.getWidgets(subredditName, metadata);
    }
    /**
     * Delete a widget from a subreddit.
     *
     * @param subredditName - The name of the subreddit to delete the widget from.
     * @param widgetId - The ID of the widget to delete.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async deleteWidget(subredditName, widgetId, metadata) {
        return Widget.delete(subredditName, widgetId, metadata);
    }
    /**
     * Add a widget to a subreddit.
     *
     * @param widgetData - The data for the widget to add.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns - The added Widget object.
     */
    async addWidget(widgetData, metadata) {
        return Widget.add(widgetData, metadata);
    }
    /**
     * Reorder the widgets for a subreddit.
     *
     * @param subredditName - The name of the subreddit to reorder the widgets for.
     * @param orderByIds - An array of widget IDs in the order that they should be displayed.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async reorderWidgets(subredditName, orderByIds, metadata) {
        return Widget.reorder(subredditName, orderByIds, metadata);
    }
    /**
     * Get a wiki page from a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the wiki page from.
     * @param page - The name of the wiki page to get.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns The requested WikiPage object.
     */
    async getWikiPage(subredditName, page, metadata) {
        return WikiPage.getPage(subredditName, page, metadata);
    }
    /**
     * Get the wiki pages for a subreddit.
     *
     * @param subredditName - The name of the subreddit to get the wiki pages from.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A list of the wiki page names for the subreddit.
     */
    async getWikiPages(subredditName, metadata) {
        return WikiPage.getPages(subredditName, metadata);
    }
    /**
     * Create a new wiki page for a subreddit.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to create.
     * @param options.content - The Markdown content of the wiki page.
     * @param options.reason - The reason for creating the wiki page.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns - The created WikiPage object.
     */
    async createWikiPage(options, metadata) {
        return WikiPage.createPage(options, metadata);
    }
    /**
     * Update a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to update.
     * @param options.content - The Markdown content of the wiki page.
     * @param options.reason - The reason for updating the wiki page.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns The updated WikiPage object.
     */
    async updateWikiPage(options, metadata) {
        return WikiPage.updatePage(options, metadata);
    }
    /**
     * Get the revisions for a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to get the revisions for.
     * @param options.limit - The maximum number of revisions to return.
     * @param options.after - The ID of the revision to start after.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A Listing of WikiPageRevision objects.
     */
    getWikiPageRevisions(options, metadata) {
        return WikiPage.getPageRevisions(options, metadata);
    }
    /**
     * Revert a wiki page to a previous revision.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to revert.
     * @param revisionId - The ID of the revision to revert to.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async revertWikiPage(subredditName, page, revisionId, metadata) {
        return WikiPage.revertPage(subredditName, page, revisionId, metadata);
    }
    /**
     * Get the settings for a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to get the settings for.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A WikiPageSettings object.
     */
    async getWikiPageSettings(subredditName, page, metadata) {
        return WikiPage.getPageSettings(subredditName, page, metadata);
    }
    /**
     * Update the settings for a wiki page.
     *
     * @param options - Options for the request
     * @param options.subredditName - The name of the subreddit the wiki is in.
     * @param options.page - The name of the wiki page to update the settings for.
     * @param options.listed - Whether the wiki page should be listed in the wiki index.
     * @param options.permLevel - The permission level required to edit the wiki page.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     * @returns A WikiPageSettings object.
     */
    async updateWikiPageSettings(options, metadata) {
        return WikiPage.updatePageSettings(options, metadata);
    }
    /**
     * Add an editor to a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to add the editor to.
     * @param username - The username of the user to add as an editor.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async addEditorToWikiPage(subredditName, page, username, metadata) {
        return WikiPage.addEditor(subredditName, page, username, metadata);
    }
    /**
     * Remove an editor from a wiki page.
     *
     * @param subredditName - The name of the subreddit the wiki is in.
     * @param page - The name of the wiki page to remove the editor from.
     * @param username - The username of the user to remove as an editor.
     * @param metadata - Metadata from the originating handler. Make sure to always include this.
     */
    async removeEditorFromWikiPage(subredditName, page, username, metadata) {
        return WikiPage.removeEditor(subredditName, page, username, metadata);
    }
    /**
     * Get private messages sent to the currently authenticated user.
     *
     * @param type - The type of messages to get.
     */
    getMessages(options, metadata) {
        return PrivateMessage.getMessages(options, metadata);
    }
    /**
     * Mark all private messages as read.
     */
    markAllMessagesAsRead(metadata) {
        return PrivateMessage.markAllAsRead(metadata);
    }
}
export * from './models/index.js';

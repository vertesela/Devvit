/**
 * GENERATED FILE - DO NOT EDIT
 * See generateDevvitShim.js.
 */
import * as types from '@devvit/protos';
import { ContextActionResponse, Empty, Metadata, PackageQuery, SerializableServiceDefinition, PostSubmit, PostCreate, PostUpdate, PostReport, PostDelete, PostFlairUpdate, CommentSubmit, CommentCreate, CommentUpdate, CommentReport, CommentDelete, AppInstall, AppUpgrade, ModAction, ModMail, HandlerResult } from '@devvit/protos';
import { DeepPartial } from '@devvit/shared-types/BuiltinTypes.js';
import { Config } from '@devvit/runtimes/api/Config.js';
import { Actor } from '@devvit/runtimes/api/Actor.js';
import type { ContextAction, MultiContextAction } from '../context-actions/types.js';
import type { SchedulerHandler } from '../scheduler/types.js';
import { SettingsFormField } from '../settings/types.js';
/**
 * Provides a binding between a SerializableServiceDefinition and its interface to allow automatic
 * casting with the generic use
 */
declare class BoundType<_T extends ActorType> {
    ssd: SerializableServiceDefinition;
    constructor(ssd: SerializableServiceDefinition);
}
type ActorType = types.HTTP | types.Logger | types.Scheduler | types.Settings | types.Timer | types.MediaService | types.AssetResolver | types.ContextAction | types.KVStore | types.RedisAPI | types.InstallationSettings | types.InstanceSettings | types.SchedulerHandler | types.UserConfigurable | types.OnPostSubmit | types.OnPostCreate | types.OnPostUpdate | types.OnPostReport | types.OnPostDelete | types.OnPostFlairUpdate | types.OnCommentSubmit | types.OnCommentCreate | types.OnCommentUpdate | types.OnCommentReport | types.OnCommentDelete | types.OnAppInstall | types.OnAppUpgrade | types.OnModAction | types.OnModMail | types.Flair | types.LinksAndComments | types.Listings | types.Moderation | types.ModNote | types.NewModmail | types.PrivateMessages | types.Subreddits | types.Users | types.Widgets | types.Wiki;
/**
 * Devvit's non-class-based API for Bundle programs. Bundles are expected to
 * reexport their Devvit singleton. Config state is retained statically so that
 * when a Bundle exports their static instance of Devvit, its constructor can
 * populate the passed in Config with that static state.
 *
 * For the class API, see Actor.
 */
export declare class Devvit extends Actor {
    #private;
    static Types: Readonly<{
        HTTP: BoundType<types.HTTP>;
        Logger: BoundType<types.Logger>;
        Scheduler: BoundType<types.Scheduler>;
        Settings: BoundType<types.Settings>;
        Timer: BoundType<types.Timer>;
        MediaService: BoundType<types.MediaService>;
        AssetResolver: BoundType<types.AssetResolver>;
        ContextAction: BoundType<types.ContextAction>;
        KVStore: BoundType<types.KVStore>;
        RedisAPI: BoundType<types.RedisAPI>;
        InstallationSettings: BoundType<types.InstallationSettings>;
        InstanceSettings: BoundType<types.InstanceSettings>;
        SchedulerHandler: BoundType<types.SchedulerHandler>;
        UserConfigurable: BoundType<types.UserConfigurable>;
        OnPostSubmit: BoundType<types.OnPostSubmit>;
        OnPostCreate: BoundType<types.OnPostCreate>;
        OnPostUpdate: BoundType<types.OnPostUpdate>;
        OnPostReport: BoundType<types.OnPostReport>;
        OnPostDelete: BoundType<types.OnPostDelete>;
        OnPostFlairUpdate: BoundType<types.OnPostFlairUpdate>;
        OnCommentSubmit: BoundType<types.OnCommentSubmit>;
        OnCommentCreate: BoundType<types.OnCommentCreate>;
        OnCommentUpdate: BoundType<types.OnCommentUpdate>;
        OnCommentReport: BoundType<types.OnCommentReport>;
        OnCommentDelete: BoundType<types.OnCommentDelete>;
        OnAppInstall: BoundType<types.OnAppInstall>;
        OnAppUpgrade: BoundType<types.OnAppUpgrade>;
        OnModAction: BoundType<types.OnModAction>;
        OnModMail: BoundType<types.OnModMail>;
        RedditAPI: {
            Flair: BoundType<types.Flair>;
            LinksAndComments: BoundType<types.LinksAndComments>;
            Listings: BoundType<types.Listings>;
            Moderation: BoundType<types.Moderation>;
            ModNote: BoundType<types.ModNote>;
            NewModmail: BoundType<types.NewModmail>;
            PrivateMessages: BoundType<types.PrivateMessages>;
            Subreddits: BoundType<types.Subreddits>;
            Users: BoundType<types.Users>;
            Widgets: BoundType<types.Widgets>;
            Wiki: BoundType<types.Wiki>;
        };
    }>;
    /**
     * Add a trigger handler that will be invoked when the given event
     * happens in subreddit the in which the app is installed.
     *
     * @param config {Devvit.TriggerConfig} the configuration of the added trigger
     * @param config.event {Devvit.Trigger} event type to listen for
     * @param config.events {Devvit.Trigger[]} an array of event types to listen for. Use
     * either `config.event` or `config.events`, not both.
     * @param config.handler the handler to be called each time the event occurs
     *
     * @example
     * import Devvit from '@devvit/public-api'
     * Devvit.addTrigger({
     *     event: Devvit.Trigger.PostSubmit,
     *     handler(postSubmitEvent){
     *         console.log("a new post was created!")
     *     }
     * })
     *
     * import Devvit from '@devvit/public-api'
     * Devvit.addTrigger({
     *     events: [Devvit.Trigger.PostSubmit, Devvit.Trigger.PostReport],
     *     handler(event){
     *         if (event.type === Devvit.Trigger.PostSubmit){
     *             console.log("a new post was created!")
     *         } else if (event.type === Devvit.Trigger.PostReport){
     *             console.log("a post was reported!")
     *         }
     *     }
     * })
     */
    static addTrigger(config: Devvit.PostSubmitConfig): typeof Devvit;
    static addTrigger(config: Devvit.PostCreateConfig): typeof Devvit;
    static addTrigger(config: Devvit.PostUpdateConfig): typeof Devvit;
    static addTrigger(config: Devvit.PostReportConfig): typeof Devvit;
    static addTrigger(config: Devvit.PostDeleteConfig): typeof Devvit;
    static addTrigger(config: Devvit.PostFlairUpdateConfig): typeof Devvit;
    static addTrigger(config: Devvit.CommentSubmitConfig): typeof Devvit;
    static addTrigger(config: Devvit.CommentCreateConfig): typeof Devvit;
    static addTrigger(config: Devvit.CommentUpdateConfig): typeof Devvit;
    static addTrigger(config: Devvit.CommentReportConfig): typeof Devvit;
    static addTrigger(config: Devvit.CommentDeleteConfig): typeof Devvit;
    static addTrigger(config: Devvit.AppInstallConfig): typeof Devvit;
    static addTrigger(config: Devvit.AppUpgradeConfig): typeof Devvit;
    static addTrigger(config: Devvit.ModActionConfig): typeof Devvit;
    static addTrigger(config: Devvit.ModMailConfig): typeof Devvit;
    static addTrigger(config: Devvit.MultiTriggerConfig): typeof Devvit;
    static use<T extends ActorType>(type: BoundType<T>, opts?: DeepPartial<PackageQuery>): T;
    static getApiClient<T extends ActorType>(type: BoundType<T>): T;
    static ContextAction: {
        onGetActions(cb: (_?: Empty, metadata?: Metadata) => Promise<DeepPartial<types.ContextActionList>>): void;
        onAction(cb: (args: types.ContextActionRequest, metadata?: Metadata) => Promise<DeepPartial<types.ContextActionResponse>>): void;
    };
    static KVStore: {
        onPut(cb: (args: types.MessageSet, metadata?: Metadata) => Promise<void>): void;
        onGet(cb: (args: types.KeySet, metadata?: Metadata) => Promise<DeepPartial<types.MessageSet>>): void;
        onDel(cb: (args: types.KeySet, metadata?: Metadata) => Promise<void>): void;
        onList(cb: (args: types.ListFilter, metadata?: Metadata) => Promise<DeepPartial<types.KeySet>>): void;
    };
    static RedisAPI: {
        onGet(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.StringValue>>): void;
        onSet(cb: (args: types.SetRequest, metadata?: Metadata) => Promise<DeepPartial<types.StringValue>>): void;
        onDel(cb: (args: types.KeysRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onType(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.StringValue>>): void;
        onIncrBy(cb: (args: types.IncrByRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onHSet(cb: (args: types.HSetRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onHGet(cb: (args: types.HGetRequest, metadata?: Metadata) => Promise<DeepPartial<types.StringValue>>): void;
        onHGetAll(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.RedisFieldValues>>): void;
        onHDel(cb: (args: types.HDelRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onHScan(cb: (args: types.HScanRequest, metadata?: Metadata) => Promise<DeepPartial<types.HScanResponse>>): void;
        onHKeys(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.KeysResponse>>): void;
        onMulti(cb: (args: types.TransactionId, metadata?: Metadata) => Promise<void>): void;
        onExec(cb: (args: types.TransactionId, metadata?: Metadata) => Promise<DeepPartial<types.TransactionResponses>>): void;
        onDiscard(cb: (args: types.TransactionId, metadata?: Metadata) => Promise<void>): void;
        onWatch(cb: (args: types.WatchRequest, metadata?: Metadata) => Promise<DeepPartial<types.TransactionId>>): void;
        onUnwatch(cb: (args: types.TransactionId, metadata?: Metadata) => Promise<void>): void;
        onGetRange(cb: (args: types.KeyRangeRequest, metadata?: Metadata) => Promise<DeepPartial<types.StringValue>>): void;
        onSetRange(cb: (args: types.SetRangeRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onStrlen(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onMGet(cb: (args: types.KeysRequest, metadata?: Metadata) => Promise<DeepPartial<types.RedisValues>>): void;
        onMSet(cb: (args: types.KeyValuesRequest, metadata?: Metadata) => Promise<void>): void;
        onExpire(cb: (args: types.ExpireRequest, metadata?: Metadata) => Promise<void>): void;
        onExpireTime(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZAdd(cb: (args: types.ZAddRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZCard(cb: (args: types.KeyRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZRange(cb: (args: types.ZRangeRequest, metadata?: Metadata) => Promise<DeepPartial<types.ZMembers>>): void;
        onZRem(cb: (args: types.ZRemRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZRemRangeByLex(cb: (args: types.ZRemRangeByLexRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZRemRangeByRank(cb: (args: types.ZRemRangeByRankRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZRemRangeByScore(cb: (args: types.ZRemRangeByScoreRequest, metadata?: Metadata) => Promise<DeepPartial<types.Int64Value>>): void;
        onZScore(cb: (args: types.ZScoreRequest, metadata?: Metadata) => Promise<DeepPartial<types.DoubleValue>>): void;
    };
    static InstallationSettings: {
        onGetSettingsFields(cb: (args: types.GetFieldsRequest, metadata?: Metadata) => Promise<DeepPartial<types.GetFieldsResponse>>): void;
        onValidateForm(cb: (args: types.ValidateFormRequest, metadata?: Metadata) => Promise<DeepPartial<types.ValidateFormResponse>>): void;
    };
    static InstanceSettings: {
        onGetSettingsFields(cb: (args: types.GetFieldsRequest, metadata?: Metadata) => Promise<DeepPartial<types.GetFieldsResponse>>): void;
        onValidateForm(cb: (args: types.ValidateFormRequest, metadata?: Metadata) => Promise<DeepPartial<types.ValidateFormResponse>>): void;
    };
    static SchedulerHandler: {
        onHandleScheduledAction(cb: (args: types.ScheduledAction, metadata?: Metadata) => Promise<void>): void;
    };
    static UserConfigurable: {
        onRenderForm(cb: (_?: Empty, metadata?: Metadata) => Promise<DeepPartial<types.ConfigForm>>): void;
        onHandleFormResponse(cb: (args: types.ConfigForm, metadata?: Metadata) => Promise<DeepPartial<types.FormResponse>>): void;
    };
    static onPostSubmit(cb: (args: types.PostSubmit, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onPostCreate(cb: (args: types.PostCreate, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onPostUpdate(cb: (args: types.PostUpdate, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onPostReport(cb: (args: types.PostReport, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onPostDelete(cb: (args: types.PostDelete, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onPostFlairUpdate(cb: (args: types.PostFlairUpdate, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onCommentSubmit(cb: (args: types.CommentSubmit, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onCommentCreate(cb: (args: types.CommentCreate, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onCommentUpdate(cb: (args: types.CommentUpdate, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onCommentReport(cb: (args: types.CommentReport, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onCommentDelete(cb: (args: types.CommentDelete, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onAppInstall(cb: (args: types.AppInstall, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onAppUpgrade(cb: (args: types.AppUpgrade, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onModAction(cb: (args: types.ModAction, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static onModMail(cb: (args: types.ModMail, metadata?: Metadata) => Promise<DeepPartial<types.HandlerResult>>): void;
    static addAction(contextAction: ContextAction): typeof Devvit;
    static addAction(contextAction: MultiContextAction): typeof Devvit;
    static addActions(contextActions: (ContextAction | MultiContextAction)[]): typeof Devvit;
    static addSchedulerHandler(schedulerHandler: SchedulerHandler): typeof Devvit;
    /**
     * Add fields to the app installation settings. These fields will appear in the subreddit app settings page
     * in the Developer Portal.
     *
     * @param {SettingsFormField[]} settings - The form fields to add to the app installation settings.
     *
     * @example
     * ```ts
     * import { Devvit } from '@devvit/public-api-old';
     *
     * Devvit.addSettings([
     *   {
     *     type: 'string',
     *     name: 'apiKey',
     *     label: 'API Key',
     *     required: true
     *   },
     *   {
     *     type: 'boolean',
     *     name: 'enabled',
     *     label: 'Feature Enabled',
     *     required: true
     *   },
     * ]);
     * ```
     */
    static addSettings(settings: SettingsFormField[]): void;
    constructor(cfg: Config);
}
export declare namespace Devvit {
    /**
     * The type of a trigger
     */
    export enum Trigger {
        PostSubmit = "PostSubmit",
        PostCreate = "PostCreate",
        PostUpdate = "PostUpdate",
        PostReport = "PostReport",
        PostDelete = "PostDelete",
        PostFlairUpdate = "PostFlairUpdate",
        CommentSubmit = "CommentSubmit",
        CommentCreate = "CommentCreate",
        CommentUpdate = "CommentUpdate",
        CommentReport = "CommentReport",
        CommentDelete = "CommentDelete",
        AppInstall = "AppInstall",
        AppUpgrade = "AppUpgrade",
        ModAction = "ModAction",
        ModMail = "ModMail"
    }
    type TriggerResult = Promise<HandlerResult | void> | void;
    type Handler<RequestType> = (request: RequestType, metadata?: Metadata | undefined) => TriggerResult;
    export type PostSubmitConfig = {
        event: Trigger.PostSubmit;
        handler: Handler<PostSubmit>;
    };
    export type PostCreateConfig = {
        event: Trigger.PostCreate;
        handler: Handler<PostCreate>;
    };
    export type PostUpdateConfig = {
        event: Trigger.PostUpdate;
        handler: Handler<PostUpdate>;
    };
    export type PostReportConfig = {
        event: Trigger.PostReport;
        handler: Handler<PostReport>;
    };
    export type PostDeleteConfig = {
        event: Trigger.PostDelete;
        handler: Handler<PostDelete>;
    };
    export type PostFlairUpdateConfig = {
        event: Trigger.PostFlairUpdate;
        handler: Handler<PostFlairUpdate>;
    };
    export type CommentSubmitConfig = {
        event: Trigger.CommentSubmit;
        handler: Handler<CommentSubmit>;
    };
    export type CommentCreateConfig = {
        event: Trigger.CommentCreate;
        handler: Handler<CommentCreate>;
    };
    export type CommentUpdateConfig = {
        event: Trigger.CommentUpdate;
        handler: Handler<CommentUpdate>;
    };
    export type CommentReportConfig = {
        event: Trigger.CommentReport;
        handler: Handler<CommentReport>;
    };
    export type CommentDeleteConfig = {
        event: Trigger.CommentDelete;
        handler: Handler<CommentDelete>;
    };
    export type AppInstallConfig = {
        event: Trigger.AppInstall;
        handler: Handler<AppInstall>;
    };
    export type AppUpgradeConfig = {
        event: Trigger.AppUpgrade;
        handler: Handler<AppUpgrade>;
    };
    export type ModActionConfig = {
        event: Trigger.ModAction;
        handler: Handler<ModAction>;
    };
    export type ModMailConfig = {
        event: Trigger.ModMail;
        handler: Handler<ModMail>;
    };
    export type MultiTriggerEvent = {
        type: Trigger.PostSubmit;
        event: PostSubmit;
    } | {
        type: Trigger.PostCreate;
        event: PostCreate;
    } | {
        type: Trigger.PostUpdate;
        event: PostUpdate;
    } | {
        type: Trigger.PostReport;
        event: PostReport;
    } | {
        type: Trigger.PostDelete;
        event: PostDelete;
    } | {
        type: Trigger.PostFlairUpdate;
        event: PostFlairUpdate;
    } | {
        type: Trigger.CommentSubmit;
        event: CommentSubmit;
    } | {
        type: Trigger.CommentCreate;
        event: CommentCreate;
    } | {
        type: Trigger.CommentUpdate;
        event: CommentUpdate;
    } | {
        type: Trigger.CommentReport;
        event: CommentReport;
    } | {
        type: Trigger.CommentDelete;
        event: CommentDelete;
    } | {
        type: Trigger.AppInstall;
        event: AppInstall;
    } | {
        type: Trigger.AppUpgrade;
        event: AppUpgrade;
    } | {
        type: Trigger.ModAction;
        event: ModAction;
    } | {
        type: Trigger.ModMail;
        event: ModMail;
    };
    export type MultiTriggerConfig = {
        events: Trigger[];
        handler: Handler<MultiTriggerEvent>;
    };
    export type TriggerConfig = PostSubmitConfig | PostCreateConfig | PostUpdateConfig | PostReportConfig | PostDeleteConfig | PostFlairUpdateConfig | CommentSubmitConfig | CommentCreateConfig | CommentUpdateConfig | CommentReportConfig | CommentDeleteConfig | AppInstallConfig | AppUpgradeConfig;
    export {};
}
export {};
//# sourceMappingURL=Devvit.d.ts.map
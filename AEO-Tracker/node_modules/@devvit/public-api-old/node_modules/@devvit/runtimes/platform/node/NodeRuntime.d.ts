import '../../lib/getRandomValues.polyfill.js';
import { WebSocket } from 'ws';
import { CentralDispatcher } from '../../common/envelope/dispatcher/CentralDispatcher.js';
import { CommonRuntime, WorkerErrorLogger } from '../../common/runtime/CommonRuntime.js';
import { GCPolicyFactory } from '../../common/runtime/GCPolicy.js';
export declare class NodeRuntime extends CommonRuntime {
    #private;
    constructor(namespace?: string, gcPolicy?: GCPolicyFactory, workerErrorLogger?: WorkerErrorLogger);
    pathForName(workerNameOrModuleFile: string): string;
    makeWebSocket(url: string): WebSocket;
    loadPlugins(dispatcher: CentralDispatcher): Promise<void>;
    dispose(): Promise<void>;
    /**
     * Start a WebSocket server to accept connections from other remotes
     */
    listen(port?: number): void;
    /**
     * Add a WebSocket connection acquired from an external server instead of one hosted by calling
     * listen()
     */
    addConnection(ws: WebSocket): Promise<void>;
}
export declare class NodeRuntimeNoPlugins extends NodeRuntime {
    loadPlugins(): Promise<void>;
}
//# sourceMappingURL=NodeRuntime.d.ts.map
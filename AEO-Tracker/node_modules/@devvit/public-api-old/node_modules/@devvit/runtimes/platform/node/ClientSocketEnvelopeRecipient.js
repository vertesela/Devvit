var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ClientSocketEnvelopeRecipient_suffix;
import { SocketEnvelopeRecipient } from '../../common/websocket/SocketEnvelopeRecipient.js';
import { isDescendantHostname } from '../../lib/HostnameUtil.js';
import { NonNull } from '@devvit/shared-types/NonNull.js';
export class ClientSocketEnvelopeRecipient extends SocketEnvelopeRecipient {
    constructor(namespace) {
        const hostname = NonNull(namespace.hostname, 'Namespace unbound.');
        super('client', hostname);
        _ClientSocketEnvelopeRecipient_suffix.set(this, void 0);
        __classPrivateFieldSet(this, _ClientSocketEnvelopeRecipient_suffix, `.${hostname}`, "f");
    }
    post(caller, envelope) {
        if (!isDescendantHostname(envelope.dst, this.hostname))
            throw Error(`Envelope had unknown destination namespace ${envelope.dst} but only *.${this.hostname} hostnames expected.`);
        envelope.dst = envelope.dst.slice(0, -__classPrivateFieldGet(this, _ClientSocketEnvelopeRecipient_suffix, "f").length);
        super.post(caller, envelope);
    }
    onMessage(event) {
        const envelope = event.data;
        envelope.src += __classPrivateFieldGet(this, _ClientSocketEnvelopeRecipient_suffix, "f");
        super.onMessage(event);
    }
}
_ClientSocketEnvelopeRecipient_suffix = new WeakMap();

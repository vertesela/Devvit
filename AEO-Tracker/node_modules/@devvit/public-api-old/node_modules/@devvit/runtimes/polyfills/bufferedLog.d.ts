import { LogType } from './LogType.js';
export type LogFunction = (type: LogType, msg: string) => void;
/**
 * creates a logging function that writes into the given buffer with the following format:
 *
 * struct LogBuffer {
 *   uint32_t used_bytes;
 *   LogEntry entries[];
 * };
 *
 * struct LogEntry {
 *   LogType type;
 *   uint32_t entry_bytes;
 *   uint8_t utf8_bytes[];
 * };
 *
 * If the buffer is ever full, the log function calls the given "flush" function, which
 * is expected to process each entry in the buffer. After flush the buffer will be reset/reused
 *
 * If a single log message is too large for the entire buffer, the message will be truncated
 * to the largest size that the buffer can support.
 *
 * The function expects the flush function to be the rare case and optimizes for the non-flush
 * case.
 */
export declare const makeBufferedLogFunction: (buffer: SharedArrayBuffer, flush: () => void) => LogFunction;
//# sourceMappingURL=bufferedLog.d.ts.map
import { Metadata } from '@devvit/protos';
import { Namespace } from '../common/envelope/Namespace.js';
/**
 * Metadata header key. Every system header should start with "devvit-".
 *
 * Synchronize to headers.md.
 */
export declare const Header: Readonly<{
    Actor: "devvit-actor";
    App: "devvit-app";
    AppUser: "devvit-app-user";
    Caller: "devvit-caller";
    CallerPortID: "devvit-caller-port-id";
    Canary: "devvit-canary";
    Installation: "devvit-installation";
    ModPermissions: "devvit-mod-permissions";
    R2Auth: "devvit-sec-authorization";
    R2Host: "devvit-r2-host";
    RemoteHostname: "devvit-remote-hostname";
    StreamID: "devvit-stream-id";
    Subreddit: "devvit-subreddit";
    TraceID: "devvit-trace-id";
    User: "devvit-user";
    Version: "devvit-version";
    SettingsUri: "devvit-sec-settings-uri";
    GQLHost: "devvit-gql-host";
    AppViewerAuthToken: "devvit-app-viewer-authorization";
}>;
export type Header = (typeof Header)[keyof typeof Header];
/** Returns true for any header starting with "devvit-". */
export declare function isSystemHeader(header: string): boolean;
export declare const allowlistedReadHeaders: readonly Header[];
/**
 * Return a new shallow copy of metadata with restricted headers filtered out.
 *
 * Don't care about the origin of the request. System destinations have access
 * to all headers regardless of the sender.
 */
export declare function filterHeadersForDestination(namespace: Readonly<Namespace>, metadata: Readonly<Metadata>, destination: string): Metadata;
export declare function isTrustedLocation(namespace: Readonly<Namespace>, location: string): boolean;
//# sourceMappingURL=Header.d.ts.map
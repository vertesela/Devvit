import { NonNull } from '@devvit/shared-types/NonNull.js';
/** Actor in the platform, not in a user Bundle. */
export const PLUGIN_NAME = 'default';
/** Actor in the platform, not in a user Bundle. */
export const PLUGIN_OWNER = 'devvit';
export const LOCAL_HOSTNAME = 'local';
export const NODE_HOSTNAME = 'node';
export const ECHO_CNAME = 'echo';
export const INSPECTOR_CNAME = 'inspector';
export const RUNTIME_CNAME = 'runtime';
export const SUPERVISOR_CNAME = 'supervisor';
export const SCHEDULER_CNAME = 'scheduler';
export const REDDIT_API_CNAME = 'redditapi';
export function resolveActorHostname(name, namespace) {
    return childHostname(name, namespace);
}
export function resolvePluginHostname(name, namespace) {
    return childHostname(name, Hostname.getPluginNamespace(namespace));
}
export function resolveSystemHostname(name, namespace) {
    return childHostname(name, Hostname.getSystemNamespace(namespace));
}
export function resolveActorDefinitionHostname(definition, namespace) {
    return resolveActorHostname(definition.name, namespace);
}
export function resolvePluginDefinitionHostname(definition, namespace) {
    return resolvePluginHostname(definition.name, namespace);
}
export function resolveSystemDefinitionHostname(definition, namespace) {
    return resolveSystemHostname(definition.name, namespace);
}
/**
 * Forms a hostname under namespace. Eg:
 *
 *   123, abc.local → 123.abc.local
 *   123, local → 123.local
 */
export function childHostname(name, namespace) {
    if (namespace.hostname == null)
        throw Error('Unbound namespace.');
    return `${name}.${namespace.hostname}`.toLocaleLowerCase();
}
/**
 * Forms a hostname with the same parent as namespace. Eg:
 *
 *   123, abc.def.local → 123.def.local
 *   123, def.local → 123.local
 *   123, local → 123
 */
export function siblingHostname(name, namespace) {
    if (namespace.hostname == null)
        throw Error('Unbound namespace.');
    if (parentHostname(namespace) === name)
        return name.toLocaleLowerCase();
    return `${name.toLocaleLowerCase()}.${parentHostname(namespace)}`;
}
export function parentHostname(hostnameOrNamespace) {
    const hostname = typeof hostnameOrNamespace === 'string' ? hostnameOrNamespace : hostnameOrNamespace.hostname;
    if (hostname == null)
        throw Error('Unbound namespace.');
    return hostname.split('.').slice(1).join('.').toLocaleLowerCase();
}
/**
 * Returns true if left-hand-side is or descends from right-hand-side. Ex:
 *
 * | LHS     | RHS   | Output |
 * | ------- | ----- | ------ |
 * | local   | local | true   |
 * | a.local | local | true   |
 * | a.node  | local | false  |
 */
export function isDescendantHostname(lhs, rhs) {
    const suffix = `.${rhs}`;
    return lhs === rhs || (lhs.length > suffix.length && lhs.endsWith(suffix));
}
// to-do: Move other methods under namespace,
// `import {Hostname} from 'Hostname.js'` wherever used, and use like:
// - `Hostname.getParent('about.reddit.com')`,
// - `Hostname.getChild('about.reddit.com')`,
// - `Hostname.addChild('about', 'reddit.com')`
export var Hostname;
(function (Hostname) {
    /**
     * Returns the leaf subdomain of hostname. Ex:
     *
     * | Hostname | Output |
     * | -------- | ------ |
     * | local    | local  |
     * | a.local  | a      |
     * | a.node   | a      |
     * | a.b.node | a      |
     */
    function getChild(hostname) {
        return hostname.split('.')[0];
    }
    Hostname.getChild = getChild;
    /**
     * Returns the leaf subdomain of hostname. Ex:
     *
     * | Hostname | Output |
     * | -------- | ------ |
     * | local    | local  |
     * | a.local  | local  |
     * | a.node   | node   |
     * | a.b.node | local  |
     */
    function getRoot(hostname) {
        return NonNull(hostname.split('.').at(-1));
    }
    Hostname.getRoot = getRoot;
    function getPluginNamespace(namespace) {
        return { hostname: childHostname('plugins', namespace) };
    }
    Hostname.getPluginNamespace = getPluginNamespace;
    function getSystemNamespace(namespace) {
        return { hostname: childHostname('system', namespace) };
    }
    Hostname.getSystemNamespace = getSystemNamespace;
    function isPlugin(hostname, namespace) {
        return isDescendantHostname(hostname, NonNull(getPluginNamespace(namespace).hostname));
    }
    Hostname.isPlugin = isPlugin;
    function isSystem(hostname, namespace) {
        return isDescendantHostname(hostname, NonNull(getSystemNamespace(namespace).hostname));
    }
    Hostname.isSystem = isSystem;
})(Hostname || (Hostname = {}));

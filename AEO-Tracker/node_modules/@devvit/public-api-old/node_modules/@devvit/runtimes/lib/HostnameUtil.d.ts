import { Definition, SerializableServiceDefinition } from '@devvit/protos';
import { Namespace as Namespace } from '../common/envelope/Namespace.js';
/** Actor in the platform, not in a user Bundle. */
export declare const PLUGIN_NAME: string;
/** Actor in the platform, not in a user Bundle. */
export declare const PLUGIN_OWNER: string;
export declare const LOCAL_HOSTNAME: string;
export declare const NODE_HOSTNAME = "node";
export declare const ECHO_CNAME = "echo";
export declare const INSPECTOR_CNAME = "inspector";
export declare const RUNTIME_CNAME = "runtime";
export declare const SUPERVISOR_CNAME = "supervisor";
export declare const SCHEDULER_CNAME = "scheduler";
export declare const REDDIT_API_CNAME = "redditapi";
export declare function resolveActorHostname(name: string, namespace: Readonly<Namespace>): string;
export declare function resolvePluginHostname(name: string, namespace: Readonly<Namespace>): string;
export declare function resolveSystemHostname(name: string, namespace: Readonly<Namespace>): string;
export declare function resolveActorDefinitionHostname(definition: Readonly<Definition | SerializableServiceDefinition>, namespace: Readonly<Namespace>): string;
export declare function resolvePluginDefinitionHostname(definition: Readonly<Definition | SerializableServiceDefinition>, namespace: Readonly<Namespace>): string;
export declare function resolveSystemDefinitionHostname(definition: Readonly<Definition | SerializableServiceDefinition>, namespace: Readonly<Namespace>): string;
/**
 * Forms a hostname under namespace. Eg:
 *
 *   123, abc.local → 123.abc.local
 *   123, local → 123.local
 */
export declare function childHostname(name: string, namespace: Readonly<Namespace>): string;
/**
 * Forms a hostname with the same parent as namespace. Eg:
 *
 *   123, abc.def.local → 123.def.local
 *   123, def.local → 123.local
 *   123, local → 123
 */
export declare function siblingHostname(name: string, namespace: Readonly<Namespace>): string;
/**
 * Returns the next level up of hostname. Eg:
 *
 *   123.abc.local → abc.local
 *   abc.local → local
 *   local → ''
 */
export declare function parentHostname(hostname: string): string;
export declare function parentHostname(namespace: Namespace): string;
/**
 * Returns true if left-hand-side is or descends from right-hand-side. Ex:
 *
 * | LHS     | RHS   | Output |
 * | ------- | ----- | ------ |
 * | local   | local | true   |
 * | a.local | local | true   |
 * | a.node  | local | false  |
 */
export declare function isDescendantHostname(lhs: string, rhs: string): boolean;
export declare namespace Hostname {
    /**
     * Returns the leaf subdomain of hostname. Ex:
     *
     * | Hostname | Output |
     * | -------- | ------ |
     * | local    | local  |
     * | a.local  | a      |
     * | a.node   | a      |
     * | a.b.node | a      |
     */
    function getChild(hostname: string): string;
    /**
     * Returns the leaf subdomain of hostname. Ex:
     *
     * | Hostname | Output |
     * | -------- | ------ |
     * | local    | local  |
     * | a.local  | local  |
     * | a.node   | node   |
     * | a.b.node | local  |
     */
    function getRoot(hostname: string): string;
    function getPluginNamespace(namespace: Readonly<Namespace>): Namespace;
    function getSystemNamespace(namespace: Readonly<Namespace>): Namespace;
    function isPlugin(hostname: string, namespace: Readonly<Namespace>): boolean;
    function isSystem(hostname: string, namespace: Readonly<Namespace>): boolean;
}
//# sourceMappingURL=HostnameUtil.d.ts.map
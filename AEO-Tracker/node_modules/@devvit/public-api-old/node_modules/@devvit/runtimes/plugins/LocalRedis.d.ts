import { ExpireRequest, IncrByRequest, Int64Value, DoubleValue, KeyValuesRequest, KeysRequest, Metadata, RedisValues, RedisFieldValues, SetRangeRequest, StringValue, TransactionId, TransactionResponses } from '@devvit/protos';
import { Empty } from '@devvit/protos';
import { RedisAPI } from '@devvit/protos';
import { RedisClientType, RedisDefaultModules } from 'redis';
import { KeyRequest, SetRequest, HGetRequest, HSetRequest, ZAddRequest, ZRemRequest, KeyRangeRequest, ZRangeRequest, HDelRequest, ZScoreRequest, ZRemRangeByLexRequest, ZRemRangeByRankRequest, ZRemRangeByScoreRequest, ZMembers, HScanRequest, HScanResponse, KeysResponse } from '@devvit/protos';
type RedisClient = RedisClientType<RedisDefaultModules, Record<string, never>, Record<string, never>>;
export declare class LocalRedis implements RedisAPI {
    #private;
    static create(url?: string): Promise<LocalRedis>;
    constructor(redis: RedisClient);
    Del(request: KeysRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    Type(request: KeyRequest, metadata: Metadata | undefined): Promise<StringValue>;
    Multi(request: TransactionId, _metadata: Metadata | undefined): Promise<Empty>;
    Exec(request: TransactionId, _metadata: Metadata | undefined): Promise<TransactionResponses>;
    Discard(request: TransactionId, _metadata: Metadata | undefined): Promise<Empty>;
    Unwatch(request: TransactionId, _metadata: Metadata | undefined): Promise<Empty>;
    Watch(request: KeysRequest, metadata: Metadata | undefined): Promise<TransactionId>;
    GetRange(request: KeyRangeRequest, metadata: Metadata | undefined): Promise<StringValue>;
    IncrBy(request: IncrByRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    SetRange(request: SetRangeRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    Strlen(request: KeyRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    MGet(request: KeysRequest, metadata: Metadata | undefined): Promise<RedisValues>;
    MSet(request: KeyValuesRequest, metadata: Metadata | undefined): Promise<Empty>;
    Get(request: KeyRequest, metadata: Metadata | undefined): Promise<StringValue>;
    Set(request: SetRequest, metadata: Metadata | undefined): Promise<StringValue>;
    Expire(request: ExpireRequest, metadata: Metadata | undefined): Promise<Empty>;
    ExpireTime(request: KeyRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZCard(request: KeyRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZAdd(request: ZAddRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZRem(request: ZRemRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZRange(request: ZRangeRequest, metadata: Metadata | undefined): Promise<ZMembers>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest, metadata: Metadata | undefined): Promise<Int64Value>;
    HGet(_request: HGetRequest, _metadata: Metadata | undefined): Promise<StringValue>;
    HSet(_request: HSetRequest, _metadata: Metadata | undefined): Promise<Int64Value>;
    HGetAll(_request: KeyRequest, _metadata: Metadata | undefined): Promise<RedisFieldValues>;
    HDel(_request: HDelRequest, _metadata: Metadata | undefined): Promise<Int64Value>;
    ZScore(_request: ZScoreRequest, _metadata: Metadata | undefined): Promise<DoubleValue>;
    HKeys(_request: KeyRequest, _metadata?: Metadata): Promise<KeysResponse>;
    HScan(_request: HScanRequest, _metadata?: Metadata): Promise<HScanResponse>;
}
export {};
//# sourceMappingURL=LocalRedis.d.ts.map
import { CollectionResponse, JsonStatus, SubredditCollectionsResponse, } from '@devvit/protos';
import { findAndThrowRedditAPIError } from './errors.js';
import { RedditAPI } from './RedditAPI.js';
import { deepSnakeToCamel } from './snakeToCamel.js';
import { Buffer } from '../../lib/Buffer.js';
export class PostCollections extends RedditAPI {
    async Collection(request, metadata) {
        const response = await this._fetch('Collection', request, metadata);
        return CollectionResponse.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async SubredditCollections(request, metadata) {
        const response = await this._fetch('SubredditCollections', request, metadata);
        // Must wrap response.body in Buffer.from
        const body = JSON.parse(new TextDecoder().decode(Buffer.from(response.body)));
        findAndThrowRedditAPIError(response.status, body);
        return SubredditCollectionsResponse.fromJSON({ collections: deepSnakeToCamel(body) });
    }
    async Create(request, metadata) {
        const response = await this._fetch('CreateCollection', request, metadata);
        return CollectionResponse.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AddPost(request, metadata) {
        const response = await this._fetch('AddPostToCollection', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async Delete(request, metadata) {
        const response = await this._fetch('DeleteCollection', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async Follow(request, metadata) {
        const response = await this._fetch('FollowCollection', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async RemovePost(request, metadata) {
        const response = await this._fetch('RemovePostInCollection', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async Reorder(request, metadata) {
        const response = await this._fetch('ReorderCollection', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async UpdateDescription(request, metadata) {
        const response = await this._fetch('UpdateCollectionDescription', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async UpdateDisplayLayout(request, metadata) {
        const response = await this._fetch('UpdateCollectionDisplayLayout', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async UpdateTitle(request, metadata) {
        const response = await this._fetch('UpdateCollectionTitle', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
}

import { RedditAPI } from './RedditAPI.js';
import { AboutLogResponse, Empty, JsonStatus, JsonRedditObjects, Listing, StringValue, } from '@devvit/protos';
export class Moderation extends RedditAPI {
    async AboutLog(request, metadata) {
        const response = await this._fetch('AboutLog', request, metadata);
        return AboutLogResponse.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutLocation(request, metadata) {
        const response = await this._fetch('AboutLocation', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutReports(request, metadata) {
        const response = await this._fetch('AboutReports', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutSpam(request, metadata) {
        const response = await this._fetch('AboutSpam', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutModqueue(request, metadata) {
        const response = await this._fetch('AboutModqueue', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutUnmoderated(request, metadata) {
        const response = await this._fetch('AboutUnmoderated', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AboutEdited(request, metadata) {
        const response = await this._fetch('AboutEdited', request, metadata);
        return Listing.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async AcceptModeratorInvite(request, metadata) {
        const response = await this._fetch('AcceptModeratorInvite', request, metadata);
        return JsonStatus.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async Approve(request, metadata) {
        await this._fetch('Approve', request, metadata);
        return Empty.fromPartial({});
    }
    async Distinguish(request, metadata) {
        const response = await this._fetch('Distinguish', request, metadata);
        return JsonRedditObjects.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
    async IgnoreReports(request, metadata) {
        await this._fetch('IgnoreReports', request, metadata);
        return Empty.fromPartial({});
    }
    async LeaveContributor(request, metadata) {
        await this._fetch('LeaveContributor', request, metadata);
        return Empty.fromPartial({});
    }
    async LeaveModerator(request, metadata) {
        await this._fetch('LeaveModerator', request, metadata);
        return Empty.fromPartial({});
    }
    async MuteMessageAuthor(request, metadata) {
        await this._fetch('MuteMessageAuthor', request, metadata);
        return Empty.fromPartial({});
    }
    async Remove(request, metadata) {
        await this._fetch('Remove', request, metadata);
        return Empty.fromPartial({});
    }
    async ShowComment(request, metadata) {
        await this._fetch('ShowComment', request, metadata);
        return Empty.fromPartial({});
    }
    async SnoozeReports(request, metadata) {
        await this._fetch('SnoozeReports', request, metadata);
        return Empty.fromPartial({});
    }
    async UnignoreReports(request, metadata) {
        await this._fetch('UnignoreReports', request, metadata);
        return Empty.fromPartial({});
    }
    async UnmuteMessageAuthor(request, metadata) {
        await this._fetch('UnmuteMessageAuthor', request, metadata);
        return Empty.fromPartial({});
    }
    async UnsnoozeReports(request, metadata) {
        await this._fetch('UnsnoozeReports', request, metadata);
        return Empty.fromPartial({});
    }
    async UpdateCrowdControlLevel(request, metadata) {
        await this._fetch('UpdateCrowdControlLevel', request, metadata);
        return Empty.fromPartial({});
    }
    async Stylesheet(request, metadata) {
        const response = await this._fetch('UpdateCrowdControlLevel', request, metadata);
        return StringValue.fromJSON(this._decodeAndValidateResponseJSON(response));
    }
}

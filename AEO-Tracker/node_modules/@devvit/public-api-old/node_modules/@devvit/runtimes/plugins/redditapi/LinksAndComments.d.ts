import { RedditAPI } from './RedditAPI.js';
import { BasicIdRequest, CommentRequest, Empty, FollowPostRequest, InfoRequest, JsonStatus, JsonWrappedComment, LinksAndComments as _LinksAndComments, Listing, Metadata, MoreChildrenRequest, ReportRequest, ReportAwardRequest, SaveRequest, SendRepliesRequest, SetContestModeRequest, SetSubredditStickyRequest, SetSuggestedSortRequest, SubmitRequest, SubmitResponse, VoteRequest } from '@devvit/protos';
export declare class LinksAndComments extends RedditAPI implements _LinksAndComments {
    Comment(request: CommentRequest, metadata: Metadata): Promise<JsonWrappedComment>;
    Del(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    EditUserText(request: CommentRequest, metadata: Metadata): Promise<JsonWrappedComment>;
    FollowPost(request: FollowPostRequest, metadata: Metadata): Promise<Empty>;
    Hide(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Info(request: InfoRequest, metadata: Metadata): Promise<Listing>;
    Lock(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    MarkNSFW(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    MoreChildren(request: MoreChildrenRequest, metadata: Metadata): Promise<JsonWrappedComment>;
    Report(request: ReportRequest, metadata: Metadata): Promise<JsonStatus>;
    ReportAward(request: ReportAwardRequest, metadata: Metadata): Promise<Empty>;
    Save(request: SaveRequest, metadata: Metadata): Promise<Empty>;
    SendReplies(request: SendRepliesRequest, metadata: Metadata): Promise<Empty>;
    SetContestMode(request: SetContestModeRequest, metadata: Metadata): Promise<JsonStatus>;
    SetSubredditSticky(request: SetSubredditStickyRequest, metadata: Metadata): Promise<JsonStatus>;
    SetSuggestedSort(request: SetSuggestedSortRequest, metadata: Metadata): Promise<JsonStatus>;
    Spoiler(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Submit(request: SubmitRequest, metadata: Metadata): Promise<SubmitResponse>;
    SubmitCustomPost(request: SubmitRequest, metadata: Metadata): Promise<SubmitResponse>;
    Unhide(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Unlock(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    UnmarkNSFW(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Unsave(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Unspoiler(request: BasicIdRequest, metadata: Metadata): Promise<Empty>;
    Vote(request: VoteRequest, metadata: Metadata): Promise<Empty>;
    protected _getSubredditNameFromMetadata(metadata: Metadata): Promise<string>;
}
//# sourceMappingURL=LinksAndComments.d.ts.map
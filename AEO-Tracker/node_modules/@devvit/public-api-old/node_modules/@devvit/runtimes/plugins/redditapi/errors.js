import { isObject } from '@devvit/shared-types/isObject.js';
/**
 * findAndThrowRedditAPIError detects the presence of known error patterns
 * @throws a standard error to be posted
 */
export function findAndThrowRedditAPIError(status, body) {
    // Detect and throw know error types
    if (isJsonArrayError(body))
        throw new Error(formatJsonArrayError(body));
    if (isStatusMessageInBodyError(body))
        throw new Error(formatStatusMessageInBodyError(body));
    if (isBadRequestError(body))
        throw new Error(formatBadRequestError(body));
    // Throw on status code based errors
    if (status === 404) {
        throw new Error('404 Not Found');
    }
    if (status === 403) {
        throw new Error('403 Forbidden');
    }
    if (status === 500) {
        throw new Error('500 Internal Server Error');
    }
    if (status >= 400) {
        throw new Error(`HTTP ${status}`);
    }
}
function isStatusMessageInBodyError(body) {
    return isObject(body) && 'error' in body;
}
function formatStatusMessageInBodyError(body) {
    let err = body.error.toString();
    if (body.message) {
        err += ` ${body.message}`;
    }
    if (body.reason) {
        err += `: ${body.reason}`;
    }
    return err;
}
function isJsonArrayError(body) {
    return (isObject(body) &&
        isObject(body.json) &&
        Array.isArray(body.json.errors) &&
        body.json.errors.length > 0);
}
function formatJsonArrayError(body) {
    let err = 'Errors:';
    for (let i = 0; i < body.json.errors.length; i++) {
        if (Array.isArray(body.json.errors[i])) {
            err += `\n${body.json.errors[i].join(': ')}`;
        }
        else {
            err += `\n${body.json.errors[i]}`;
        }
    }
    return err;
}
function isBadRequestError(body) {
    return isObject(body) && 'explanation' in body;
}
function formatBadRequestError(body) {
    let err = `Bad request: ${body.explanation}`;
    if (body.fields.length > 0) {
        err += `\nError in field${body.fields.length !== 1 ? 's' : ''}: ${body.fields.join(', ')}`;
    }
    return err;
}

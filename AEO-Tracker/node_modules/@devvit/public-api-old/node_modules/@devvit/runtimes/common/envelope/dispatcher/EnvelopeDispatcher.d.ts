import { EnvelopeRecipient } from '../EnvelopeRecipient.js';
/**
 * Envelope router.
 *
 * Processes can communicate (IPC) through a dispatcher, usually via a client or
 * server: client ⇄ dispatcher ⇄ server.
 *
 * The dispatcher is technically a recipient but doesn't provide a service
 * itself and doesn't bind itself to subscribe to envelopes. It can only route
 * envelopes. For workers, the dispatcher's hostname is expected to match the
 * hostname of the worker's service. For the global runtime, the equivalent is
 * the "primary server" is the runtime actor but this has a distinct hostname.
 *
 * Most dispatchers only know EnvelopeRecipients, not EnvelopePorts.
 */
export interface EnvelopeDispatcher extends EnvelopeRecipient {
    bind(recipient: Readonly<EnvelopeRecipient>): void;
    /** Whether a recipient is bound to the dispatcher. */
    isBound(recipient: Readonly<EnvelopeRecipient>): boolean;
    /**
     * unbind() and dispose(). You mostly want release() as an unbound recipient
     * isn't very useful.
     */
    release(recipient: Readonly<EnvelopeRecipient>): Promise<void>;
    /** Unbind but don't dispose. You probably want release() instead. */
    unbind(recipient: Readonly<EnvelopeRecipient>): void;
}
//# sourceMappingURL=EnvelopeDispatcher.d.ts.map
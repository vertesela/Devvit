var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SequenceEnvelopeFilter_filters;
/**
 * Concatenates filters. When any filter throws, any remaining filters are not
 * invoked.
 */
export class SequenceEnvelopeFilter {
    constructor(filters) {
        _SequenceEnvelopeFilter_filters.set(this, void 0);
        __classPrivateFieldSet(this, _SequenceEnvelopeFilter_filters, filters, "f");
    }
    async filter(envelope) {
        for (const filter of __classPrivateFieldGet(this, _SequenceEnvelopeFilter_filters, "f")) {
            envelope = await filter.filter(envelope);
        }
        return envelope;
    }
}
_SequenceEnvelopeFilter_filters = new WeakMap();

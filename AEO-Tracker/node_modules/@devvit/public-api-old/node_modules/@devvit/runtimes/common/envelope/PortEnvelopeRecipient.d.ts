import { Envelope } from '@devvit/protos';
import { EnvelopeDispatcher } from './dispatcher/EnvelopeDispatcher.js';
import { EnvelopeEvent, EnvelopePort } from './EnvelopePort.js';
import { EnvelopeRecipient } from './EnvelopeRecipient.js';
/** Integrates with and names an EnvelopePort. */
export declare class PortEnvelopeRecipient implements EnvelopeRecipient {
    #private;
    readonly hostname: string;
    constructor(hostname: string, port: EnvelopePort);
    post(_caller: Readonly<EnvelopeRecipient>, envelope: Envelope): void;
    dispose(): Promise<void>;
    onBind(dispatcher: Readonly<EnvelopeDispatcher>): void;
    onUnbind(_dispatcher: Readonly<EnvelopeDispatcher>): void;
    protected onMessage(event: EnvelopeEvent): void;
}
//# sourceMappingURL=PortEnvelopeRecipient.d.ts.map
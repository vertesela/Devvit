var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RepeatEnvelopeFilter_max, _RepeatEnvelopeFilter_counters;
import { NonNull } from '@devvit/shared-types/NonNull.js';
import LRU from 'lru-cache';
import { EnvelopeUtil } from '../EnvelopeUtil.js';
import { isIDish } from '../IDFactory.js';
class Counter {
    constructor() {
        this.count = 0;
    }
    incrAndGet() {
        return ++this.count;
    }
}
// TODO: account for messages which may be allowed to be byte-for-byte repeats
//  (same event data being sent down twice on the same stream)
export class RepeatEnvelopeFilter {
    constructor(max) {
        _RepeatEnvelopeFilter_max.set(this, void 0);
        _RepeatEnvelopeFilter_counters.set(this, new LRU({
            max: 100,
            fetchMethod: async (key, _staleValue) => {
                return __classPrivateFieldGet(this, _RepeatEnvelopeFilter_counters, "f").get(key) || new Counter();
            },
        }));
        __classPrivateFieldSet(this, _RepeatEnvelopeFilter_max, max, "f");
    }
    async filter(envelope) {
        if (!isIDish(envelope.id))
            throw Error(`Missing ID on ${EnvelopeUtil.toLogString(envelope)}.`);
        const counter = NonNull(await __classPrivateFieldGet(this, _RepeatEnvelopeFilter_counters, "f").fetch(envelope.id), `Missing counter for ${EnvelopeUtil.toLogString(envelope)}.`);
        const count = counter.incrAndGet();
        if (count >= __classPrivateFieldGet(this, _RepeatEnvelopeFilter_max, "f")) {
            // NOTE: The error envelopes sent as a result may _themselves_ be repeats
            throw Error(`Envelope repeated ${count} times: ${EnvelopeUtil.toLogString(envelope)}.`);
        }
        return envelope;
    }
}
_RepeatEnvelopeFilter_max = new WeakMap(), _RepeatEnvelopeFilter_counters = new WeakMap();

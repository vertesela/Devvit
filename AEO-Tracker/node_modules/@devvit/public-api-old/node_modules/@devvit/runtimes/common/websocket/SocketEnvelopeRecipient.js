var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _SocketEnvelopeRecipient_port;
import { PortEnvelopeRecipient } from '../envelope/PortEnvelopeRecipient.js';
import { SocketEnvelopePort } from './SocketEnvelopePort.js';
// TODO: Reconnect?
export class SocketEnvelopeRecipient extends PortEnvelopeRecipient {
    get id() {
        return __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").id;
    }
    constructor(type, hostname, port = new SocketEnvelopePort()) {
        super(hostname, port);
        _SocketEnvelopeRecipient_port.set(this, void 0);
        if (type != null)
            this.type = type;
        __classPrivateFieldSet(this, _SocketEnvelopeRecipient_port, port, "f");
    }
    async bindSocket(socket) {
        await __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").bindSocket(socket);
    }
    unbindSocket() {
        __classPrivateFieldGet(this, _SocketEnvelopeRecipient_port, "f").unbindSocket();
    }
    async dispose() {
        await super.dispose();
        this.unbindSocket();
    }
}
_SocketEnvelopeRecipient_port = new WeakMap();

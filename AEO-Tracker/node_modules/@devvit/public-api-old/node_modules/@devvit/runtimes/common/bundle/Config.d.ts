import { ClientFactory } from '../../lib/Types.js';
import { Definition } from '@devvit/protos';
import { ActorSpec, DependencySpec, PackageQuery } from '@devvit/protos';
import { DeepPartial } from '@devvit/shared-types/BuiltinTypes.js';
import type { Config as ConfigInterface } from '../../api/Config.js';
import { Namespace } from '../envelope/Namespace.js';
import { AssetMap } from '@devvit/shared-types/Assets.js';
export declare class Config implements ConfigInterface {
    #private;
    get assets(): Readonly<AssetMap>;
    constructor(factory: ClientFactory, actorSpec: ActorSpec, assets: AssetMap);
    export(namespace: Readonly<Namespace>): DependencySpec;
    provides(definition: Readonly<Definition>): void;
    use<T>(definition: Readonly<Definition>, options?: Readonly<DeepPartial<PackageQuery>>): T;
    uses(definition: Readonly<Definition>): boolean;
}
//# sourceMappingURL=Config.d.ts.map
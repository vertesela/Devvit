syntax = "proto3";

package devvit.plugin.redditapi.users;

import "devvit/plugin/redditapi/common/common_msg.proto";
import "devvit/plugin/redditapi/users/users_msg.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi";
option java_package = "com.reddit.devvit.plugin.redditapi.users";

// USERS - https://www.reddit.com/dev/api#section_users
// Note: all endpoints require oauth
service Users {
  // https://www.reddit.com/dev/api#POST_api_block_user
  rpc BlockUser(BlockUserRequest) returns (BlockUserResponse);

  // https://www.reddit.com/dev/api#POST_api_friend
  rpc Friend(FriendRequest) returns (devvit.plugin.redditapi.common.JsonStatus);

  // https://www.reddit.com/dev/api#POST_api_report_user
  rpc ReportUser(ReportUserRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_setpermissions
  rpc SetPermissions(SetPermissionsRequest) returns (devvit.plugin.redditapi.common.JsonStatus);

  // https://www.reddit.com/dev/api#POST_api_unfriend
  rpc Unfriend(UnfriendRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#GET_api_user_data_by_account_ids
  rpc UserDataByAccountIds(UserDataByAccountIdsRequest) returns (UserDataByAccountIdsResponse);

  // https://www.reddit.com/dev/api#GET_api_username_available
  rpc UsernameAvailable(UsernameAvailableRequest) returns (google.protobuf.BoolValue);

  // https://www.reddit.com/dev/api#DELETE_api_v1_me_friends_username
  rpc UnfriendUser(GenericUsersRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#GET_api_v1_me_friends_username
  rpc GetFriendInformation(GenericUsersRequest) returns (GeneralFriendResponse);

  // https://www.reddit.com/dev/api#PUT_api_v1_me_friends_username
  rpc UpdateFriendRelationship(UpdateFriendRelationshipRequest) returns (GeneralFriendResponse);

  // https://www.reddit.com/dev/api#GET_api_v1_user_username_trophies
  rpc UserTrophies(GenericUsersRequest) returns (UserTrophiesResponse);

  // https://www.reddit.com/dev/api#GET_user_username_about
  rpc UserAbout(UserAboutRequest) returns (UserAboutResponse);

  // https://www.reddit.com/dev/api#GET_user_username_where
  rpc UserWhere(UserWhereRequest) returns (devvit.plugin.redditapi.common.Listing);
}

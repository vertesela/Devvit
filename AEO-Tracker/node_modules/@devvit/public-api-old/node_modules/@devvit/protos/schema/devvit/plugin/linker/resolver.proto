syntax = "proto3";

package devvit.plugin.linker;

import "devvit/plugin/buildpack/buildpack_common.proto";
import "devvit/plugin/inspector/inspector.proto";
import "devvit/runtime/bundle.proto";
import "google/protobuf/empty.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/linker";

// A PackageQuery resolves to a package backed by a Bundle or a plugin.
message Resolution {
  oneof result {
    devvit.plugin.buildpack.Bundle bundle = 1;
    ResolutionError error = 2;
    devvit.plugin.inspector.InspectorDescription plugin = 3;
  }
}

message ResolutionError {
  // Failing query.
  devvit.runtime.PackageQuery query = 1;

  // Human readable error message.
  string text = 2;
}

// A Resolver tells the Linker what bundles exist, and helps the Linker know
// which bundle is the best bundle to match a given request or PackageQuery.
service Resolver {
  // What plugins are available to the Resolver?
  rpc RegisterPlugins(devvit.plugin.inspector.InspectorDescriptions) returns (google.protobuf.Empty);

  // What Bundle is best to satisfy the given request?
  rpc Resolve(devvit.runtime.PackageQuery) returns (Resolution);

  // Notify the resolver that a bundle exists. Newer Bundles can overwrite older bundles.
  rpc RegisterBundle(devvit.plugin.buildpack.Bundle) returns (google.protobuf.Empty);
}

syntax = "proto3";

package devvit.plugin.devserver;

import "devvit/plugin/buildpack/buildpack_common.proto";
import "devvit/plugin/buildpack/filesystem.proto";
import "devvit/plugin/devserver/testcases.proto";
import "devvit/runtime/bundle.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/devserver";

// Right now the DevServer Client and Backend assume that the `devvit server`
// is run for only one project at a time and that it is pointed at one project.
//
// But for a bit of future proofing we always pass around the project root
// directory
//
// Right now this is re-using the `File` and `FileSystem` messages
// from the build pack interfaces. DevServer's UI only conceptually cares about
// things on the actor (and next plugin) level. But since the build pack
// services talk about Files and FileSystems seems like a starting point.

message ProjectListRequest {
  string project_root_directory = 1;
}

message ProjectBuildProblems {
  repeated devvit.plugin.buildpack.CompileLog warnings = 1;
  repeated devvit.plugin.buildpack.CompileLog errors = 2;
}

message ProjectListingResponse {
  string project_root_directory = 1;

  devvit.plugin.buildpack.FileSystem project_file_system = 2;

  map<string, ProjectBuildProblems> build_problems = 3;
}

message ProjectUpdatesRequest {
  string project_root_directory = 1;
}

message ProjectUpdateResponse {
  string project_root_directory = 1;

  // deleting a file results in a change update of the parent directory
  devvit.plugin.buildpack.File file = 2;

  // provide a semi-linked bundle
  // it does not fully provide `bundle.uses` because it assumes
  // that the devserver client will be loading all actors within
  // the system. Should revisit.
  //
  // TODO download and link non-native actors from some source
  devvit.runtime.LinkedBundle linked_bundle = 3;

  // Provides the project-relative path to the actor (i.e.: actors/foo)
  // Note that the path separator here is OS-dependent - '\\' on Windows,
  // '/' everywhere else - so if you want to split this up, you'll want to
  // use `path.sep` if available, or `PATH_SEPARATOR_REGEX` if it isn't.
  string actor_path = 4;

  map<string, ProjectBuildProblems> build_problems = 5;
}

// Specifies which actor you'd like the test cases for
message TestCasesRequest {
  string actor_name = 1;
}

service DevServer {
  // Used when the client connects initially to populate the sidebar.
  // This could be updated to take in target project root directory
  // if we support one server powering multiple projects
  rpc ListProject(ProjectListRequest) returns (ProjectListingResponse);

  // For now the webUI will request linked bundles over http request caching
  rpc NotifyBundleUpdates(ProjectUpdatesRequest) returns (stream ProjectUpdateResponse);

  // Get the list of test cases saved with a given actor
  rpc GetTestCases(TestCasesRequest) returns (TestCasesList);

  // Update the list of test cases saved with a given actor
  rpc UpdateTestCases(TestCasesList) returns (google.protobuf.Empty);
}

service OAuthProvider {
  rpc Authenticate(AuthenticationRequest) returns (AuthenticationResponse);
  rpc Validate(ValidationRequest) returns (AuthenticationResponse);
  rpc NotifyAuthenticationUpdates(google.protobuf.Empty) returns (stream AuthenticationResponse);
  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message AuthenticationRequest {}

message AuthenticationResponse {
  StoredToken stored_token = 1;
}

message ValidationRequest {}

message StoredToken {
  string refresh_token = 1;
  string access_token = 2;
  // Milliseconds to expiry.
  google.protobuf.Timestamp expires_at = 3;
  string scope = 4;
  string token_type = 5;
}

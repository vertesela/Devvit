syntax = "proto3";

package devvit.data.api.v1alpha;

import "buf/validate/validate.proto";
import "devvit/events/v1alpha/events.proto";
import "devvit/options/options.proto";
import "devvit/reddit/v2alpha/modaction.proto";
import "devvit/reddit/v2alpha/subredditv2.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/data/api/v1alpha";

// Enum for vote thing types.
enum VoteType {
  UNKNOWN = 0;
  POST = 1;
  COMMENT = 2;
}

// Post create event
message PostCreateFirehose {
  // Provides information about the post, including the post id, author, and time it was created.
  PostFirehose post = 1 [(buf.validate.field).required = true];
  // Identifies the user who created the post and includes the user’s account age, karma, and url.
  UserFirehose author = 2 [(buf.validate.field).required = true];
  // Lists the subreddit associated with the post by name and subreddit id.
  SubredditFirehose subreddit = 10 [(buf.validate.field).required = true];
}

// Comment create event
message CommentCreateFirehose {
  // Provides information about the comment, including the comment id, content, and time it was created.
  CommentFirehose comment = 1;
  // Identifies the user who created the comment and includes the user’s account age, karma, and url.
  UserFirehose author = 2;
  // Provides information about the post associated with the comment, including the post id, author, and time it was created.
  PostFirehose post = 3;
  // Lists the subreddit associated with the post by name and subreddit id.
  SubredditFirehose subreddit = 10;
}

// Delete post/comment event
message DeletionFirehose {
  // Lists the id of the post or comment object that was deleted.
  string id = 1;
  // Shows the timestamp indicating when the object was deleted.
  google.protobuf.Timestamp deleted_at = 2;
  // Timestamp of the time when the object was created at
  google.protobuf.Timestamp created_at = 3;
  // Shows the post id associated with the deleted comment (for commentDelete only).
  string post_id = 4;
  // Permalink to deleted object
  string permalink = 5;
  // Who initiated the deletion.
  devvit.events.v1alpha.EventSource source = 6;
}

// Post edit event
message PostEditFirehose {
  // Provides information about the post, including the post id, author, and time it was created.
  PostFirehose post = 1;
  // Identifies the user who edited the post and includes the user’s account age, karma, and url.
  UserFirehose author = 2;
  // Contains the original content before the post was edited.
  string previous_body = 3 [(devvit.options.trigger_evt_path) = "previous_body"];
  // Lists the subreddit associated with the post by name and subreddit id.
  SubredditFirehose subreddit = 10;
}

// Comment edit event
message CommentEditFirehose {
  // Provides information about the comment, including the comment id, author, and time it was created.
  CommentFirehose comment = 1;
  // Identifies the user who edited the post and includes the user’s account age, karma, and url.
  UserFirehose author = 2;
  // Contains the original content before the post was edited.
  PostFirehose post = 3;
  // Contains the original content before the comment was edited.
  string previous_body = 4 [(devvit.options.trigger_evt_path) = "previous_body"];
  // Lists the subreddit associated with the comment by name and subreddit id.
  SubredditFirehose subreddit = 10;
}

// Vote event
message VoteFirehose {
  // Lists the id of the comment or post receiving the vote event.
  string id = 1;
  // Specifies the object (comment or post).
  VoteType type = 5;
  // Populated when COMMENT, postid associated with the comment
  string post_id = 6;
  // Populated when COMMENT, timestamp of when post was created
  google.protobuf.Timestamp post_created_at = 7;
  // Provides the timestamp when the most recent votes were calculated.
  google.protobuf.Timestamp updated_at = 4;
  // Permalink to the deleted object
  string permalink = 8;
  // Upvote ratio i.e u / (u + d) where u = upvotes and d = downvotes
  float upvote_ratio = 9;
  // Score is the number of upvotes minus the number of downvotes on a post/comment. The score is 0 when there are no votes or an equal number of upvotes and downvotes. A negative score indicates more downvotes than upvotes, while a positive score reflects more upvotes than downvotes.
  google.protobuf.Int32Value score = 10; // Int32Value allows us to send '0' value
  // Populated when COMMENT, timestamp of when comment was created
  google.protobuf.Timestamp comment_created_at = 11;

  // removed fields
  reserved 2, 3;
  reserved "upvotes", "downvotes";
}

// Mod action event
message ModActionFirehose {
  // Provides the id of the mod action type (like removing content or banning a user)
  string id = 1;
  // Action_type is deprecated.
  devvit.reddit.v2alpha.ModActionType action_type = 2 [(google.api.field_behavior) = INPUT_ONLY];
  // Describes the mod action (like editing settings or creating a rule).
  string action = 4;
  // Provides the timestamp when the action occurred.
  google.protobuf.Timestamp actioned_at = 3;
  // Lists the subreddit associated with the action.
  SubredditFirehose subreddit = 10;
}

// Info about Post
message PostFirehose {
  // Unique post id
  string id = 1 [
    (devvit.options.trigger_evt_path) = "post.id",
    (buf.validate.field).string.prefix = "t3_"
  ];
  // Title of the post
  string title = 2 [
    (devvit.options.trigger_evt_path) = "post.title",
    (buf.validate.field).required = true
  ];
  // Post body
  string body = 3 [
    (devvit.options.trigger_evt_path) = "post.selftext",
    (buf.validate.field).required = true
  ];
  // Url link to the post
  string url = 4 [
    (devvit.options.trigger_evt_path) = "post.url",
    (buf.validate.field).string.uri = true
  ];
  // Timestamp for when post was created
  google.protobuf.Timestamp created_at = 5 [
    (devvit.options.trigger_evt_path) = "post.created_at",
    (buf.validate.field).required = true
  ];
  // Flair
  optional PostFlairFirehose flair = 6;
  // Language
  string language_code = 9 [(devvit.options.trigger_evt_path) = "post.language_code"];
  // When the post was last updated
  google.protobuf.Timestamp updated_at = 10 [(devvit.options.trigger_evt_path) = "post.updated_at"];
  // Gildings
  int32 gildings = 11 [(devvit.options.trigger_evt_path) = "post.gildings"];
  // Post score // Do not send
  int32 score = 12 [
    (devvit.options.trigger_evt_path) = "post.score",
    (google.api.field_behavior) = INPUT_ONLY
  ];
  // Number of comments on the post
  int32 num_comments = 13 [
    (devvit.options.trigger_evt_path) = "post.num_comments",
    (buf.validate.field).required = true
  ];
  // Thumbnail associated with the post
  string thumbnail = 14 [(devvit.options.trigger_evt_path) = "post.thumbnail"];
  // Crosspost_parent_id
  string crosspost_parent_id = 15 [(devvit.options.trigger_evt_path) = "post.crosspost_parent_id"];
  // Media object associated with post
  optional PostMediaObjectFirehose media = 16;
  // Permalink of the post
  string permalink = 17 [
    (devvit.options.trigger_evt_path) = "post.permalink",
    (buf.validate.field).required = true
  ];

  // removed fields
  reserved 7, 8;
  reserved "trending_score", "toxicity_score";
}

// PostFlairFirehose struct
message PostFlairFirehose {
  // Text associated with post flair
  string text = 1 [(devvit.options.trigger_evt_path) = "post.link_flair.text"];
}

// PostMediaObjectFirehose struct
message PostMediaObjectFirehose {
  // Post media type
  string type = 1 [(devvit.options.trigger_evt_path) = "post.media.type"];
  // Media object
  optional MediaObjectOembedFirehose oembed = 2;
  // Media object video
  optional MediaObjectRedditVideoFirehose reddit_video = 3;
}

// Media object
message MediaObjectOembedFirehose {
  // Media object type
  string type = 1 [(devvit.options.trigger_evt_path) = "post.media.oembed.type"];
  // Object version
  string version = 2 [(devvit.options.trigger_evt_path) = "post.media.oembed.version"];
  // Title associated with the object
  string title = 3 [(devvit.options.trigger_evt_path) = "post.media.oembed.title"];
  // Object description
  string description = 4 [(devvit.options.trigger_evt_path) = "post.media.oembed.description"];
  // Author name
  string author_name = 5 [(devvit.options.trigger_evt_path) = "post.media.oembed.author_name"];
  // Url to author's profile
  string author_url = 6 [(devvit.options.trigger_evt_path) = "post.media.oembed.author_url"];
  // Provider name
  string provider_name = 7 [(devvit.options.trigger_evt_path) = "post.media.oembed.provider_name"];
  // Provider url
  string provider_url = 8 [(devvit.options.trigger_evt_path) = "post.media.oembed.provider_url"];
  // Url to the thumbnail
  string thumbnail_url = 9 [(devvit.options.trigger_evt_path) = "post.media.oembed.thumbnail_url"];
  // Width of the thumbnail
  int32 thumbnail_width = 10 [(devvit.options.trigger_evt_path) = "post.media.oembed.thumbnail_width"];
  // Height of the thumbnail
  int32 thumbnail_height = 11 [(devvit.options.trigger_evt_path) = "post.media.oembed.thumbnail_height"];
  // Html associated with the object
  string html = 12 [(devvit.options.trigger_evt_path) = "post.media.oembed.html"];
  // Width of the object
  int32 width = 13 [(devvit.options.trigger_evt_path) = "post.media.oembed.width"];
  // Height of the object
  int32 height = 14 [(devvit.options.trigger_evt_path) = "post.media.oembed.height"];
}

// MediaObjectRedditVideoFirehose
message MediaObjectRedditVideoFirehose {
  // Bitrate of the video in kbps
  int32 bitrate_kbps = 1 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.bitrate_kbps"];
  // Url to fallback on
  string fallback_url = 2 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.fallback_url"];
  // Height of the object
  int32 height = 3 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.height"];
  // Width of the object
  int32 width = 4 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.width"];
  // Media url
  string scrubber_media_url = 5 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.scrubber_media_url"];
  // Dash url
  string dash_url = 6 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.dash_url"];
  // Duration of the video
  int64 duration = 7 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.duration"];
  // Hls url
  string hls_url = 8 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.hls_url"];
  // Boolean is this a gif
  bool is_gif = 9 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.is_gif"];
  // Transcoding score
  string transcoding_status = 10 [(devvit.options.trigger_evt_path) = "post.media.reddit_video.transcoding_status"];
}

// Comment Firehose
message CommentFirehose {
  // Id associated with the comment
  string id = 1 [(devvit.options.trigger_evt_path) = "comment.id"];
  // Body of the comment
  string body = 2 [(devvit.options.trigger_evt_path) = "comment.body"];
  // Comment's parent id
  string parent_id = 3 [(devvit.options.trigger_evt_path) = "comment.parent_id"];
  // Comment was created at
  google.protobuf.Timestamp created_at = 4 [(devvit.options.trigger_evt_path) = "comment.created_at"];
  // Language code
  string language_code = 7 [(devvit.options.trigger_evt_path) = "comment.language_code"];
  // Last modified at
  google.protobuf.Timestamp last_modified_at = 8 [(devvit.options.trigger_evt_path) = "comment.last_modified_at"];
  // Gilded
  bool gilded = 9 [(devvit.options.trigger_evt_path) = "comment.gilded"];
  // Do not send
  int32 score = 10 [
    (devvit.options.trigger_evt_path) = "comment.score",
    (google.api.field_behavior) = INPUT_ONLY
  ];
  // Permalink of the comment
  string permalink = 11 [(devvit.options.trigger_evt_path) = "comment.permalink"];

  // removed fields
  reserved 5, 6;
  reserved "trending_score", "toxicity_score";
}

// Subreddit info
message SubredditFirehose {
  // Id of the subreddit
  string id = 1 [
    (devvit.options.trigger_evt_path) = "subreddit.id",
    (buf.validate.field).string.prefix = "t5_"
  ];
  // Name of the subreddit
  string name = 2 [
    (devvit.options.trigger_evt_path) = "subreddit.name",
    (buf.validate.field).required = true
  ];
  // Topics associated with the subreddit
  repeated string topics = 3 [
    (devvit.options.trigger_evt_path) = "subreddit.topics",
    (buf.validate.field).required = true
  ];
  // Do not send
  devvit.reddit.v2alpha.SubredditRating rating = 5 [
    (devvit.options.trigger_evt_path) = "subreddit.rating",
    (google.api.field_behavior) = INPUT_ONLY
  ];
  // Subscribers count on the subreddit
  int32 subscribers_count = 6 [
    (devvit.options.trigger_evt_path) = "subreddit.subscribers_count",
    (buf.validate.field).required = true
  ];
  // Permalink of the subreddit
  string permalink = 7 [
    (devvit.options.trigger_evt_path) = "subreddit.permalink",
    (buf.validate.field).required = true
  ];

  // removed fields
  reserved 4;
  reserved "trending_score";
}

// User's info
message UserFirehose {
  // Id of the user
  string id = 1 [
    (devvit.options.trigger_evt_path) = "author.id",
    (buf.validate.field).string.prefix = "t2_"
  ];
  // Name of the user
  string name = 2 [
    (devvit.options.trigger_evt_path) = "author.name",
    (buf.validate.field).required = true
  ];
  // Age of the user's account
  int32 account_age = 3 [(devvit.options.trigger_evt_path) = "author.account_age"];
  // User's karma score
  int32 karma = 4 [(devvit.options.trigger_evt_path) = "author.karma"];
  // Url to the user's profile
  string url = 7 [
    (devvit.options.trigger_evt_path) = "author.url",
    (buf.validate.field).string.uri = true
  ];
  // Avatar image associated with the user
  string snoovatar_image = 8 [(devvit.options.trigger_evt_path) = "author.snoovatar_image"];

  // removed fields
  reserved 5, 6;
  reserved "community_karma", "reputation_score";
}

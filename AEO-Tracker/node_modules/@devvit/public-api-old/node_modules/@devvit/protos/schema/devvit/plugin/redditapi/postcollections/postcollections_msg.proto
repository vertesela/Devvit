syntax = "proto3";

package devvit.plugin.redditapi.postcollections;

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi";
option java_package = "com.reddit.devvit.plugin.redditapi.postcollections";

// requests
message CollectionRequest {
  // The id of the collection to fetch.
  google.protobuf.StringValue collection_id = 1;
  // The id of the collection to fetch.
  google.protobuf.BoolValue include_links = 2;
}

message CreateCollectionRequest {
  // The title of the collection.
  google.protobuf.StringValue title = 1;
  // The t5_ id of the subreddit in which this collection will be created.
  google.protobuf.StringValue sr_fullname = 2;
  // The description of the collection.
  google.protobuf.StringValue description = 3;
  // One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui.
  google.protobuf.StringValue display_layout = 4;
}

message AddPostToCollectionRequest {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
  // The t3_ id of post which should be added to the collection.
  google.protobuf.StringValue link_fullname = 2;
}

message DeleteCollectionRequest {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
}

message FollowCollectionRequest {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
  // One of: true | false. Indicating whether the collection should be followed or unfollowed. 
  google.protobuf.BoolValue follow = 2;
}

message RemovePostInCollectionRequest {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
  // The t3_ id of post which should be removed to the collection.
  google.protobuf.StringValue link_fullname = 2;
}

message ReorderCollectionRequest {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
  // A comma separated list of post ids e.g. "t3_abc,t3_def", which will determine the order of posts in the collection.
  google.protobuf.StringValue link_ids = 2;
}

message SubredditCollectionsRequest {
  // The subreddit id of the subreddit for which to fetch a list of the collections
  google.protobuf.StringValue sr_fullname = 1;
}

message UpdateCollectionDescriptionRequest {
  // The id of the collection to update.
  google.protobuf.StringValue collection_id = 1;
  // The new description of the collection
  google.protobuf.StringValue description = 2;
}

message UpdateCollectionTitleRequest {
  // The id of the collection to update.
  google.protobuf.StringValue collection_id = 1;
  // The new title of the collection
  google.protobuf.StringValue title = 2;
}

message UpdateCollectionDisplayLayoutRequest {
  // The id of the collection to update.
  google.protobuf.StringValue collection_id = 1;
  // One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui.
  google.protobuf.StringValue display_layout = 2;
}

// responses
message CollectionResponse {
  // The id of the collection.
  google.protobuf.StringValue collection_id = 1;
  // The subreddit id of subreddit that owns the collection.
  google.protobuf.StringValue subreddit_id = 2;
  // The title of the collection.
  google.protobuf.StringValue title = 3;
  // The description of the collection.
  google.protobuf.StringValue description = 4;
  // The t2_ id of the user that created the collection.
  google.protobuf.StringValue author_id = 5;
  // The username of the user that created the collection.
  google.protobuf.StringValue author_name = 6;
  // A deep link to the collection.
  google.protobuf.StringValue permalink = 7;
  repeated google.protobuf.StringValue link_ids = 8;
  google.protobuf.StringValue primary_link_id = 9;
  // One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui.
  google.protobuf.StringValue display_layout = 10;
  google.protobuf.Timestamp created_at_utc = 11;
  google.protobuf.Timestamp last_update_utc = 12;
}

message SubredditCollectionsResponse {
  // A list of collections.
  repeated CollectionResponse collections = 1;
}
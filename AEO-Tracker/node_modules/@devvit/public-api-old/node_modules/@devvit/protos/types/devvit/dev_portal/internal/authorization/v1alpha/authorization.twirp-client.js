import { DevPortalAuthCanViewLogsRequest, DevPortalAuthorizationResponse, } from './authorization.js';
export class DevPortalAuthorizationClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.CanViewLogs.bind(this);
    }
    CanViewLogs(request) {
        const data = DevPortalAuthCanViewLogsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorization', 'CanViewLogs', 'application/json', data);
        return promise.then((data) => DevPortalAuthorizationResponse.fromJSON(data));
    }
}
export class DevPortalAuthorizationClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.CanViewLogs.bind(this);
    }
    CanViewLogs(request) {
        const data = DevPortalAuthCanViewLogsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorization', 'CanViewLogs', 'application/protobuf', data);
        return promise.then((data) => DevPortalAuthorizationResponse.decode(data));
    }
}

/**
 * #handler.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { ScheduledAction } from './action.js';
/**
 * Actors must implement this interface to use the Scheduler.
 * HandleScheduledAction will be called by the Scheduler at the specified time.
 */
export interface SchedulerHandler {
    HandleScheduledAction(request: ScheduledAction, metadata?: Metadata): Promise<Empty>;
}
export declare class SchedulerHandlerClientImpl implements SchedulerHandler {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    HandleScheduledAction(request: ScheduledAction): Promise<Empty>;
}
/**
 * Actors must implement this interface to use the Scheduler.
 * HandleScheduledAction will be called by the Scheduler at the specified time.
 */
export type SchedulerHandlerDefinition = typeof SchedulerHandlerDefinition;
export declare const SchedulerHandlerDefinition: {
    readonly name: "SchedulerHandler";
    readonly fullName: "devvit.actor.scheduler.SchedulerHandler";
    readonly methods: {
        readonly handleScheduledAction: {
            readonly name: "HandleScheduledAction";
            readonly requestType: {
                $type: "devvit.actor.scheduler.ScheduledAction";
                encode(message: ScheduledAction, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ScheduledAction;
                fromJSON(object: any): ScheduledAction;
                toJSON(message: ScheduledAction): unknown;
                fromPartial<I extends {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } & {
                    type?: string | undefined;
                    data?: ({
                        [x: string]: any;
                    } & {
                        [x: string]: any;
                    } & { [K in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof ScheduledAction>]: never; }>(object: I): ScheduledAction;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K_2 in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=handler.d.ts.map
/**
 * #filter.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { FirehoseEvent } from '../../../options/options.js';
import { SubredditRating } from '../../../reddit/v2alpha/subredditv2.js';
export interface FirehoseFilterData {
    event: FirehoseEvent;
    subredditId: string;
    subredditRating: SubredditRating;
}
export declare const FirehoseFilterData: {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData";
    encode(message: FirehoseFilterData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FirehoseFilterData;
    fromJSON(object: any): FirehoseFilterData;
    toJSON(message: FirehoseFilterData): unknown;
    fromPartial<I extends {
        event?: FirehoseEvent | undefined;
        subredditId?: string | undefined;
        subredditRating?: SubredditRating | undefined;
    } & {
        event?: FirehoseEvent | undefined;
        subredditId?: string | undefined;
        subredditRating?: SubredditRating | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof FirehoseFilterData>]: never; }>(object: I): FirehoseFilterData;
};
//# sourceMappingURL=filter.d.ts.map
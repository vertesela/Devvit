/**
 * #logger.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export declare enum Severity {
    /**
     * DEBUG - Debug logs should never be committed.
     *
     * These logs are always enabled in development builds but disabled in
     * production.
     */
    DEBUG = 0,
    /**
     * INFO - Informational logs should be used to mark significant non-erroneous events.
     * Little information is significant.
     *
     * These logs are enabled by default in development builds but may be
     * disabled in production.
     */
    INFO = 1,
    /**
     * WARN - Warnings should be reported as long as they do not contain sensitive data.
     *
     * These logs are always enabled.
     */
    WARN = 2,
    /** ERROR - Errors should always be reported as long as they do not contain sensitive data. */
    ERROR = 3,
    /**
     * VERBOSE - Verbose logs are useful for tracing but usually a hindrance for others not
     * working where the log is placed. Keep our logs clean and add with care.
     *
     * These logs are disabled by default in all environments but can be enabled.
     */
    VERBOSE = 4,
    UNRECOGNIZED = -1
}
export declare function severityFromJSON(object: any): Severity;
export declare function severityToJSON(object: Severity): number;
export interface LogErrorMessage {
    message: string;
    name: string;
    fileName?: string;
    lineNumber?: number;
    columnNumber?: number;
    stack?: string;
    timestamp?: Date;
    /**
     * to-do: add labels like LogEventMessage.
     * Deprecated 2023-01-25: Use labels instead.
     *
     * @deprecated
     */
    tags: string[];
}
/**
 * A notable event or historical record for analytics and security.
 *
 * Do not record sensitive data.
 */
export interface LogEventMessage {
    /**
     * The event kind. Events with the same type are considered instances of that
     * event. Eg, 'AppLoad' or 'AppHTTPRequest'.
     *
     * Unexpected event types may not be logged.
     */
    type: string;
    /** The occurence time. */
    timestamp?: Date;
    /**
     * Optional additional indexed information. Eg, 'direction' → 'Up' or
     * 'appName' → 'com.example.test'.
     *
     * Unexpected label keys may be stripped.
     *
     * Labels and data are the same except that labels are indexed.
     */
    labels: {
        [key: string]: string;
    };
    /**
     * Optional additional non-indexed information. Eg, 'dynamicString' → 'abc'
     * 'verboseDetail' -> '123'.
     *
     * Any key-value may safely be included without coordination.
     *
     * Labels and data are the same except that labels are indexed.
     */
    data: {
        [key: string]: string;
    };
}
export interface LogEventMessage_LabelsEntry {
    key: string;
    value: string;
}
export interface LogEventMessage_DataEntry {
    key: string;
    value: string;
}
export interface LogMessage {
    severity: Severity;
    message: string;
    /**
     * Most service implementations default to call time if a timestamp is not
     * provided.
     */
    timestamp?: Date;
    /**
     * to-do: add labels like LogEventMessage.
     * Deprecated 2023-01-25: Use labels instead.
     *
     * @deprecated
     */
    tags: string[];
}
export interface LogErrorResponse {
}
export interface LogEventResponse {
}
export interface LogResponse {
}
export declare const LogErrorMessage: {
    $type: "devvit.plugin.logger.LogErrorMessage";
    encode(message: LogErrorMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogErrorMessage;
    fromJSON(object: any): LogErrorMessage;
    toJSON(message: LogErrorMessage): unknown;
    fromPartial<I extends {
        message?: string | undefined;
        name?: string | undefined;
        fileName?: string | undefined;
        lineNumber?: number | undefined;
        columnNumber?: number | undefined;
        stack?: string | undefined;
        timestamp?: Date | undefined;
        tags?: string[] | undefined;
    } & {
        message?: string | undefined;
        name?: string | undefined;
        fileName?: string | undefined;
        lineNumber?: number | undefined;
        columnNumber?: number | undefined;
        stack?: string | undefined;
        timestamp?: Date | undefined;
        tags?: (string[] & string[] & { [K in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof LogErrorMessage>]: never; }>(object: I): LogErrorMessage;
};
export declare const LogEventMessage: {
    $type: "devvit.plugin.logger.LogEventMessage";
    encode(message: LogEventMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogEventMessage;
    fromJSON(object: any): LogEventMessage;
    toJSON(message: LogEventMessage): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        timestamp?: Date | undefined;
        labels?: {
            [x: string]: string | undefined;
        } | undefined;
        data?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        type?: string | undefined;
        timestamp?: Date | undefined;
        labels?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["labels"], string | number>]: never; }) | undefined;
        data?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K_1 in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof LogEventMessage>]: never; }>(object: I): LogEventMessage;
};
export declare const LogEventMessage_LabelsEntry: {
    $type: "devvit.plugin.logger.LogEventMessage.LabelsEntry";
    encode(message: LogEventMessage_LabelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogEventMessage_LabelsEntry;
    fromJSON(object: any): LogEventMessage_LabelsEntry;
    toJSON(message: LogEventMessage_LabelsEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof LogEventMessage_LabelsEntry>]: never; }>(object: I): LogEventMessage_LabelsEntry;
};
export declare const LogEventMessage_DataEntry: {
    $type: "devvit.plugin.logger.LogEventMessage.DataEntry";
    encode(message: LogEventMessage_DataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogEventMessage_DataEntry;
    fromJSON(object: any): LogEventMessage_DataEntry;
    toJSON(message: LogEventMessage_DataEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof LogEventMessage_DataEntry>]: never; }>(object: I): LogEventMessage_DataEntry;
};
export declare const LogMessage: {
    $type: "devvit.plugin.logger.LogMessage";
    encode(message: LogMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogMessage;
    fromJSON(object: any): LogMessage;
    toJSON(message: LogMessage): unknown;
    fromPartial<I extends {
        severity?: Severity | undefined;
        message?: string | undefined;
        timestamp?: Date | undefined;
        tags?: string[] | undefined;
    } & {
        severity?: Severity | undefined;
        message?: string | undefined;
        timestamp?: Date | undefined;
        tags?: (string[] & string[] & { [K in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof LogMessage>]: never; }>(object: I): LogMessage;
};
export declare const LogErrorResponse: {
    $type: "devvit.plugin.logger.LogErrorResponse";
    encode(_: LogErrorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogErrorResponse;
    fromJSON(_: any): LogErrorResponse;
    toJSON(_: LogErrorResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): LogErrorResponse;
};
export declare const LogEventResponse: {
    $type: "devvit.plugin.logger.LogEventResponse";
    encode(_: LogEventResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogEventResponse;
    fromJSON(_: any): LogEventResponse;
    toJSON(_: LogEventResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): LogEventResponse;
};
export declare const LogResponse: {
    $type: "devvit.plugin.logger.LogResponse";
    encode(_: LogResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogResponse;
    fromJSON(_: any): LogResponse;
    toJSON(_: LogResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): LogResponse;
};
export interface Logger {
    Error(request: LogErrorMessage, metadata?: Metadata): Promise<LogErrorResponse>;
    /**
     * Record a notable event or historical record for analytics and security.
     *
     * @internal
     */
    Event(request: LogEventMessage, metadata?: Metadata): Promise<LogEventResponse>;
    Log(request: LogMessage, metadata?: Metadata): Promise<LogResponse>;
}
export declare class LoggerClientImpl implements Logger {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Error(request: LogErrorMessage): Promise<LogErrorResponse>;
    Event(request: LogEventMessage): Promise<LogEventResponse>;
    Log(request: LogMessage): Promise<LogResponse>;
}
export type LoggerDefinition = typeof LoggerDefinition;
export declare const LoggerDefinition: {
    readonly name: "Logger";
    readonly fullName: "devvit.plugin.logger.Logger";
    readonly methods: {
        readonly error: {
            readonly name: "Error";
            readonly requestType: {
                $type: "devvit.plugin.logger.LogErrorMessage";
                encode(message: LogErrorMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogErrorMessage;
                fromJSON(object: any): LogErrorMessage;
                toJSON(message: LogErrorMessage): unknown;
                fromPartial<I extends {
                    message?: string | undefined;
                    name?: string | undefined;
                    fileName?: string | undefined;
                    lineNumber?: number | undefined;
                    columnNumber?: number | undefined;
                    stack?: string | undefined;
                    timestamp?: Date | undefined;
                    tags?: string[] | undefined;
                } & {
                    message?: string | undefined;
                    name?: string | undefined;
                    fileName?: string | undefined;
                    lineNumber?: number | undefined;
                    columnNumber?: number | undefined;
                    stack?: string | undefined;
                    timestamp?: Date | undefined;
                    tags?: (string[] & string[] & { [K in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof LogErrorMessage>]: never; }>(object: I): LogErrorMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.logger.LogErrorResponse";
                encode(_: LogErrorResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogErrorResponse;
                fromJSON(_: any): LogErrorResponse;
                toJSON(_: LogErrorResponse): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): LogErrorResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Record a notable event or historical record for analytics and security.
         *
         * @internal
         */
        readonly event: {
            readonly name: "Event";
            readonly requestType: {
                $type: "devvit.plugin.logger.LogEventMessage";
                encode(message: LogEventMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogEventMessage;
                fromJSON(object: any): LogEventMessage;
                toJSON(message: LogEventMessage): unknown;
                fromPartial<I_2 extends {
                    type?: string | undefined;
                    timestamp?: Date | undefined;
                    labels?: {
                        [x: string]: string | undefined;
                    } | undefined;
                    data?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } & {
                    type?: string | undefined;
                    timestamp?: Date | undefined;
                    labels?: ({
                        [x: string]: string | undefined;
                    } & {
                        [x: string]: string | undefined;
                    } & { [K in Exclude<keyof I["labels"], string | number>]: never; }) | undefined;
                    data?: ({
                        [x: string]: string | undefined;
                    } & {
                        [x: string]: string | undefined;
                    } & { [K_1 in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | keyof LogEventMessage>]: never; }>(object: I_2): LogEventMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.logger.LogEventResponse";
                encode(_: LogEventResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogEventResponse;
                fromJSON(_: any): LogEventResponse;
                toJSON(_: LogEventResponse): unknown;
                fromPartial<I_3 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_3): LogEventResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly log: {
            readonly name: "Log";
            readonly requestType: {
                $type: "devvit.plugin.logger.LogMessage";
                encode(message: LogMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogMessage;
                fromJSON(object: any): LogMessage;
                toJSON(message: LogMessage): unknown;
                fromPartial<I_4 extends {
                    severity?: Severity | undefined;
                    message?: string | undefined;
                    timestamp?: Date | undefined;
                    tags?: string[] | undefined;
                } & {
                    severity?: Severity | undefined;
                    message?: string | undefined;
                    timestamp?: Date | undefined;
                    tags?: (string[] & string[] & { [K in Exclude<keyof I["tags"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof LogMessage>]: never; }>(object: I_4): LogMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.logger.LogResponse";
                encode(_: LogResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LogResponse;
                fromJSON(_: any): LogResponse;
                toJSON(_: LogResponse): unknown;
                fromPartial<I_5 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_5): LogResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=logger.d.ts.map
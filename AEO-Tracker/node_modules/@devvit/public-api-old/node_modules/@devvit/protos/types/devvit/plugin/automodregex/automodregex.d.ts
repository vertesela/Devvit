/**
 * #automodregex.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface AutomodRegexInput {
    pattern: string;
    input: string;
    caseInsensitive: boolean;
}
export interface AutomodRegexMatchOutput {
    groups: string[];
}
export interface AutomodRegexTestOutput {
    match: boolean;
}
export declare const AutomodRegexInput: {
    $type: "devvit.plugin.automodregex.AutomodRegexInput";
    encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
    fromJSON(object: any): AutomodRegexInput;
    toJSON(message: AutomodRegexInput): unknown;
    fromPartial<I extends {
        pattern?: string | undefined;
        input?: string | undefined;
        caseInsensitive?: boolean | undefined;
    } & {
        pattern?: string | undefined;
        input?: string | undefined;
        caseInsensitive?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AutomodRegexInput>]: never; }>(object: I): AutomodRegexInput;
};
export declare const AutomodRegexMatchOutput: {
    $type: "devvit.plugin.automodregex.AutomodRegexMatchOutput";
    encode(message: AutomodRegexMatchOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexMatchOutput;
    fromJSON(object: any): AutomodRegexMatchOutput;
    toJSON(message: AutomodRegexMatchOutput): unknown;
    fromPartial<I extends {
        groups?: string[] | undefined;
    } & {
        groups?: (string[] & string[] & { [K in Exclude<keyof I["groups"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "groups">]: never; }>(object: I): AutomodRegexMatchOutput;
};
export declare const AutomodRegexTestOutput: {
    $type: "devvit.plugin.automodregex.AutomodRegexTestOutput";
    encode(message: AutomodRegexTestOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexTestOutput;
    fromJSON(object: any): AutomodRegexTestOutput;
    toJSON(message: AutomodRegexTestOutput): unknown;
    fromPartial<I extends {
        match?: boolean | undefined;
    } & {
        match?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | "match">]: never; }>(object: I): AutomodRegexTestOutput;
};
/**
 * This interface is for regex evaluation for Automod
 * There are special cases in Automod regexes that JS can't
 * handle, so we execute them in golang instead.
 *
 * NOTE: These methods do attempt to emulate full regex
 * functionality. It is only fulfilling the cases required by Automod
 */
export interface AutomodRegex {
    AutomodRegexMatch(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexMatchOutput>;
    AutomodRegexTest(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexTestOutput>;
}
export declare class AutomodRegexClientImpl implements AutomodRegex {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AutomodRegexMatch(request: AutomodRegexInput): Promise<AutomodRegexMatchOutput>;
    AutomodRegexTest(request: AutomodRegexInput): Promise<AutomodRegexTestOutput>;
}
/**
 * This interface is for regex evaluation for Automod
 * There are special cases in Automod regexes that JS can't
 * handle, so we execute them in golang instead.
 *
 * NOTE: These methods do attempt to emulate full regex
 * functionality. It is only fulfilling the cases required by Automod
 */
export type AutomodRegexDefinition = typeof AutomodRegexDefinition;
export declare const AutomodRegexDefinition: {
    readonly name: "AutomodRegex";
    readonly fullName: "devvit.plugin.automodregex.AutomodRegex";
    readonly methods: {
        readonly automodRegexMatch: {
            readonly name: "AutomodRegexMatch";
            readonly requestType: {
                $type: "devvit.plugin.automodregex.AutomodRegexInput";
                encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
                fromJSON(object: any): AutomodRegexInput;
                toJSON(message: AutomodRegexInput): unknown;
                fromPartial<I extends {
                    pattern?: string | undefined;
                    input?: string | undefined;
                    caseInsensitive?: boolean | undefined;
                } & {
                    pattern?: string | undefined;
                    input?: string | undefined;
                    caseInsensitive?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof AutomodRegexInput>]: never; }>(object: I): AutomodRegexInput;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.automodregex.AutomodRegexMatchOutput";
                encode(message: AutomodRegexMatchOutput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexMatchOutput;
                fromJSON(object: any): AutomodRegexMatchOutput;
                toJSON(message: AutomodRegexMatchOutput): unknown;
                fromPartial<I_1 extends {
                    groups?: string[] | undefined;
                } & {
                    groups?: (string[] & string[] & { [K in Exclude<keyof I["groups"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | "groups">]: never; }>(object: I_1): AutomodRegexMatchOutput;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly automodRegexTest: {
            readonly name: "AutomodRegexTest";
            readonly requestType: {
                $type: "devvit.plugin.automodregex.AutomodRegexInput";
                encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
                fromJSON(object: any): AutomodRegexInput;
                toJSON(message: AutomodRegexInput): unknown;
                fromPartial<I extends {
                    pattern?: string | undefined;
                    input?: string | undefined;
                    caseInsensitive?: boolean | undefined;
                } & {
                    pattern?: string | undefined;
                    input?: string | undefined;
                    caseInsensitive?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof AutomodRegexInput>]: never; }>(object: I): AutomodRegexInput;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.automodregex.AutomodRegexTestOutput";
                encode(message: AutomodRegexTestOutput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexTestOutput;
                fromJSON(object: any): AutomodRegexTestOutput;
                toJSON(message: AutomodRegexTestOutput): unknown;
                fromPartial<I_2 extends {
                    match?: boolean | undefined;
                } & {
                    match?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | "match">]: never; }>(object: I_2): AutomodRegexTestOutput;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=automodregex.d.ts.map
/**
 * #serializable.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** A Definition subset representable as JSON. */
export interface SerializableServiceDefinition {
    /** No slashes. Eg, "devvit.plugin.logger.Logger". */
    fullName: string;
    methods: SerializableMethodDefinition[];
    /** Eg, "Logger". */
    name: string;
    version: string;
}
/** A MethodDefinition subset representable as JSON. */
export interface SerializableMethodDefinition {
    /** Leading slash. Eg, "/devvit.plugin.logger.Logger/Log". */
    fullName: string;
    /** Eg, "Log". */
    name: string;
    requestStream: boolean;
    responseStream: boolean;
    requestType: string;
    responseType: string;
}
export declare const SerializableServiceDefinition: {
    $type: "devvit.runtime.SerializableServiceDefinition";
    encode(message: SerializableServiceDefinition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SerializableServiceDefinition;
    fromJSON(object: any): SerializableServiceDefinition;
    toJSON(message: SerializableServiceDefinition): unknown;
    fromPartial<I extends {
        fullName?: string | undefined;
        methods?: {
            fullName?: string | undefined;
            name?: string | undefined;
            requestStream?: boolean | undefined;
            responseStream?: boolean | undefined;
            requestType?: string | undefined;
            responseType?: string | undefined;
        }[] | undefined;
        name?: string | undefined;
        version?: string | undefined;
    } & {
        fullName?: string | undefined;
        methods?: ({
            fullName?: string | undefined;
            name?: string | undefined;
            requestStream?: boolean | undefined;
            responseStream?: boolean | undefined;
            requestType?: string | undefined;
            responseType?: string | undefined;
        }[] & ({
            fullName?: string | undefined;
            name?: string | undefined;
            requestStream?: boolean | undefined;
            responseStream?: boolean | undefined;
            requestType?: string | undefined;
            responseType?: string | undefined;
        } & {
            fullName?: string | undefined;
            name?: string | undefined;
            requestStream?: boolean | undefined;
            responseStream?: boolean | undefined;
            requestType?: string | undefined;
            responseType?: string | undefined;
        } & { [K in Exclude<keyof I["methods"][number], "$type" | keyof SerializableMethodDefinition>]: never; })[] & { [K_1 in Exclude<keyof I["methods"], "$type" | keyof {
            fullName?: string | undefined;
            name?: string | undefined;
            requestStream?: boolean | undefined;
            responseStream?: boolean | undefined;
            requestType?: string | undefined;
            responseType?: string | undefined;
        }[]>]: never; }) | undefined;
        name?: string | undefined;
        version?: string | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof SerializableServiceDefinition>]: never; }>(object: I): SerializableServiceDefinition;
};
export declare const SerializableMethodDefinition: {
    $type: "devvit.runtime.SerializableMethodDefinition";
    encode(message: SerializableMethodDefinition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SerializableMethodDefinition;
    fromJSON(object: any): SerializableMethodDefinition;
    toJSON(message: SerializableMethodDefinition): unknown;
    fromPartial<I extends {
        fullName?: string | undefined;
        name?: string | undefined;
        requestStream?: boolean | undefined;
        responseStream?: boolean | undefined;
        requestType?: string | undefined;
        responseType?: string | undefined;
    } & {
        fullName?: string | undefined;
        name?: string | undefined;
        requestStream?: boolean | undefined;
        responseStream?: boolean | undefined;
        requestType?: string | undefined;
        responseType?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SerializableMethodDefinition>]: never; }>(object: I): SerializableMethodDefinition;
};
//# sourceMappingURL=serializable.d.ts.map
/**
 * #comment.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { AuthorFlairRichText, Awarding, BanInfo, Gildings } from './common.js';
export interface Comment {
    allAwardings: Awarding[];
    approved?: boolean;
    approvedAtUtc?: number;
    approvedBy?: string;
    archived?: boolean;
    associatedAward?: string;
    author?: string;
    authorFlairBackgroundColor?: string;
    authorFlairCssClass?: string;
    authorFlairRichtext: AuthorFlairRichText[];
    authorFlairTemplateId?: string;
    authorFlairText?: string;
    authorFlairTextColor?: string;
    authorFlairType?: string;
    authorFullname?: string;
    authorIsBlocked?: boolean;
    authorPatreonFlair?: boolean;
    authorPremium?: boolean;
    awarders: string[];
    bannedAtUtc?: number;
    bannedBy?: string;
    body?: string;
    bodyHtml?: string;
    canGild?: boolean;
    canModPost?: boolean;
    collapsed?: boolean;
    collapsedBecauseCrowdControl?: boolean;
    collapsedReason?: string;
    collapsedReasonCode?: string;
    commentType?: string;
    controversiality?: number;
    created?: number;
    createdUtc?: number;
    depth?: number;
    distinguished?: string;
    downs?: number;
    edited?: boolean;
    gilded?: number;
    gildings?: Gildings;
    id?: string;
    ignoreReports?: boolean;
    isSubmitter?: boolean;
    likes?: boolean;
    linkId?: string;
    locked?: boolean;
    modNote?: string;
    modReasonBy?: string;
    modReasonTitle?: string;
    /** array of array of strings :-/ */
    modReports: Array<any>[];
    name?: string;
    noFollow?: boolean;
    numReports?: number;
    parentId?: string;
    permalink?: string;
    removalReason?: string;
    removed?: boolean;
    replies?: string;
    reportReasons: string[];
    rteMode?: string;
    saved?: boolean;
    score?: number;
    scoreHidden?: boolean;
    sendReplies?: boolean;
    spam?: boolean;
    stickied?: boolean;
    subreddit?: string;
    subredditId?: string;
    subredditNamePrefixed?: string;
    subredditType?: string;
    topAwardedType?: string;
    totalAwardsReceived?: number;
    treatmentTags: string[];
    unrepliableReason?: string;
    ups?: number;
    /** array of array of strings :-/ */
    userReports: Array<any>[];
    /** more type - for getting more comments */
    count?: number;
    /**
     * name: predefined at 50
     * id: predefined at 40
     * parent_id: predefined at 53
     * depth: predefined at 34
     */
    children: string[];
    /** needed for automod tap/compare */
    banInfo?: BanInfo;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean;
    verdict?: string;
}
export declare const Comment: {
    $type: "devvit.reddit.Comment";
    encode(message: Comment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Comment;
    fromJSON(object: any): Comment;
    toJSON(message: Comment): unknown;
    fromPartial<I extends {
        allAwardings?: {
            awardSubType?: string | undefined;
            awardType?: string | undefined;
            awardingsRequiredToGrantBenefits?: number | undefined;
            coinPrice?: number | undefined;
            coinReward?: number | undefined;
            count?: number | undefined;
            daysOfDripExtension?: number | undefined;
            daysOfPremium?: number | undefined;
            description?: string | undefined;
            endDate?: string | undefined;
            giverCoinReward?: number | undefined;
            iconFormat?: string | undefined;
            iconHeight?: number | undefined;
            iconUrl?: string | undefined;
            iconWidth?: number | undefined;
            id?: string | undefined;
            isEnabled?: boolean | undefined;
            isNew?: boolean | undefined;
            name?: string | undefined;
            pennyDonate?: number | undefined;
            pennyPrice?: number | undefined;
            resizedIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            resizedStaticIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            startDate?: string | undefined;
            staticIconHeight?: number | undefined;
            staticIconUrl?: string | undefined;
            staticIconWidth?: number | undefined;
            stickyDurationSeconds?: number | undefined;
            subredditCoinReward?: number | undefined;
            subredditId?: string | undefined;
            tiersByRequiredAwardings?: string | undefined;
        }[] | undefined;
        approved?: boolean | undefined;
        approvedAtUtc?: number | undefined;
        approvedBy?: string | undefined;
        archived?: boolean | undefined;
        associatedAward?: string | undefined;
        author?: string | undefined;
        authorFlairBackgroundColor?: string | undefined;
        authorFlairCssClass?: string | undefined;
        authorFlairRichtext?: {
            e?: string | undefined;
            t?: string | undefined;
        }[] | undefined;
        authorFlairTemplateId?: string | undefined;
        authorFlairText?: string | undefined;
        authorFlairTextColor?: string | undefined;
        authorFlairType?: string | undefined;
        authorFullname?: string | undefined;
        authorIsBlocked?: boolean | undefined;
        authorPatreonFlair?: boolean | undefined;
        authorPremium?: boolean | undefined;
        awarders?: string[] | undefined;
        bannedAtUtc?: number | undefined;
        bannedBy?: string | undefined;
        body?: string | undefined;
        bodyHtml?: string | undefined;
        canGild?: boolean | undefined;
        canModPost?: boolean | undefined;
        collapsed?: boolean | undefined;
        collapsedBecauseCrowdControl?: boolean | undefined;
        collapsedReason?: string | undefined;
        collapsedReasonCode?: string | undefined;
        commentType?: string | undefined;
        controversiality?: number | undefined;
        created?: number | undefined;
        createdUtc?: number | undefined;
        depth?: number | undefined;
        distinguished?: string | undefined;
        downs?: number | undefined;
        edited?: boolean | undefined;
        gilded?: number | undefined;
        gildings?: {
            gid1?: number | undefined;
            gid2?: number | undefined;
            gid3?: number | undefined;
        } | undefined;
        id?: string | undefined;
        ignoreReports?: boolean | undefined;
        isSubmitter?: boolean | undefined;
        likes?: boolean | undefined;
        linkId?: string | undefined;
        locked?: boolean | undefined;
        modNote?: string | undefined;
        modReasonBy?: string | undefined;
        modReasonTitle?: string | undefined;
        modReports?: any[][] | undefined;
        name?: string | undefined;
        noFollow?: boolean | undefined;
        numReports?: number | undefined;
        parentId?: string | undefined;
        permalink?: string | undefined;
        removalReason?: string | undefined;
        removed?: boolean | undefined;
        replies?: string | undefined;
        reportReasons?: string[] | undefined;
        rteMode?: string | undefined;
        saved?: boolean | undefined;
        score?: number | undefined;
        scoreHidden?: boolean | undefined;
        sendReplies?: boolean | undefined;
        spam?: boolean | undefined;
        stickied?: boolean | undefined;
        subreddit?: string | undefined;
        subredditId?: string | undefined;
        subredditNamePrefixed?: string | undefined;
        subredditType?: string | undefined;
        topAwardedType?: string | undefined;
        totalAwardsReceived?: number | undefined;
        treatmentTags?: string[] | undefined;
        unrepliableReason?: string | undefined;
        ups?: number | undefined;
        userReports?: any[][] | undefined;
        count?: number | undefined;
        children?: string[] | undefined;
        banInfo?: {
            auto?: boolean | undefined;
            bannedAt?: number | undefined;
            banner?: string | undefined;
            moderatorBanned?: boolean | undefined;
            note?: string | undefined;
            unbanner?: string | undefined;
            unbannedAt?: number | undefined;
            resetUsed?: boolean | undefined;
            reasonId?: string | undefined;
            reasonTitle?: string | undefined;
            reasonMessage?: string | undefined;
            reasonBy?: string | undefined;
            modNote?: string | undefined;
            banAllTriggered?: boolean | undefined;
            subredditMessage?: string | undefined;
            removeAction?: import("./common.js").BanInfo_BanInfoAction | undefined;
        } | undefined;
        markedSpam?: boolean | undefined;
        verdict?: string | undefined;
    } & {
        allAwardings?: ({
            awardSubType?: string | undefined;
            awardType?: string | undefined;
            awardingsRequiredToGrantBenefits?: number | undefined;
            coinPrice?: number | undefined;
            coinReward?: number | undefined;
            count?: number | undefined;
            daysOfDripExtension?: number | undefined;
            daysOfPremium?: number | undefined;
            description?: string | undefined;
            endDate?: string | undefined;
            giverCoinReward?: number | undefined;
            iconFormat?: string | undefined;
            iconHeight?: number | undefined;
            iconUrl?: string | undefined;
            iconWidth?: number | undefined;
            id?: string | undefined;
            isEnabled?: boolean | undefined;
            isNew?: boolean | undefined;
            name?: string | undefined;
            pennyDonate?: number | undefined;
            pennyPrice?: number | undefined;
            resizedIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            resizedStaticIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            startDate?: string | undefined;
            staticIconHeight?: number | undefined;
            staticIconUrl?: string | undefined;
            staticIconWidth?: number | undefined;
            stickyDurationSeconds?: number | undefined;
            subredditCoinReward?: number | undefined;
            subredditId?: string | undefined;
            tiersByRequiredAwardings?: string | undefined;
        }[] & ({
            awardSubType?: string | undefined;
            awardType?: string | undefined;
            awardingsRequiredToGrantBenefits?: number | undefined;
            coinPrice?: number | undefined;
            coinReward?: number | undefined;
            count?: number | undefined;
            daysOfDripExtension?: number | undefined;
            daysOfPremium?: number | undefined;
            description?: string | undefined;
            endDate?: string | undefined;
            giverCoinReward?: number | undefined;
            iconFormat?: string | undefined;
            iconHeight?: number | undefined;
            iconUrl?: string | undefined;
            iconWidth?: number | undefined;
            id?: string | undefined;
            isEnabled?: boolean | undefined;
            isNew?: boolean | undefined;
            name?: string | undefined;
            pennyDonate?: number | undefined;
            pennyPrice?: number | undefined;
            resizedIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            resizedStaticIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            startDate?: string | undefined;
            staticIconHeight?: number | undefined;
            staticIconUrl?: string | undefined;
            staticIconWidth?: number | undefined;
            stickyDurationSeconds?: number | undefined;
            subredditCoinReward?: number | undefined;
            subredditId?: string | undefined;
            tiersByRequiredAwardings?: string | undefined;
        } & {
            awardSubType?: string | undefined;
            awardType?: string | undefined;
            awardingsRequiredToGrantBenefits?: number | undefined;
            coinPrice?: number | undefined;
            coinReward?: number | undefined;
            count?: number | undefined;
            daysOfDripExtension?: number | undefined;
            daysOfPremium?: number | undefined;
            description?: string | undefined;
            endDate?: string | undefined;
            giverCoinReward?: number | undefined;
            iconFormat?: string | undefined;
            iconHeight?: number | undefined;
            iconUrl?: string | undefined;
            iconWidth?: number | undefined;
            id?: string | undefined;
            isEnabled?: boolean | undefined;
            isNew?: boolean | undefined;
            name?: string | undefined;
            pennyDonate?: number | undefined;
            pennyPrice?: number | undefined;
            resizedIcons?: ({
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] & ({
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            } & {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            } & { [K in Exclude<keyof I["allAwardings"][number]["resizedIcons"][number], "$type" | keyof import("./common.js").Awarding_Icon>]: never; })[] & { [K_1 in Exclude<keyof I["allAwardings"][number]["resizedIcons"], "$type" | keyof {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[]>]: never; }) | undefined;
            resizedStaticIcons?: ({
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] & ({
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            } & {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            } & { [K_2 in Exclude<keyof I["allAwardings"][number]["resizedStaticIcons"][number], "$type" | keyof import("./common.js").Awarding_Icon>]: never; })[] & { [K_3 in Exclude<keyof I["allAwardings"][number]["resizedStaticIcons"], "$type" | keyof {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[]>]: never; }) | undefined;
            startDate?: string | undefined;
            staticIconHeight?: number | undefined;
            staticIconUrl?: string | undefined;
            staticIconWidth?: number | undefined;
            stickyDurationSeconds?: number | undefined;
            subredditCoinReward?: number | undefined;
            subredditId?: string | undefined;
            tiersByRequiredAwardings?: string | undefined;
        } & { [K_4 in Exclude<keyof I["allAwardings"][number], "$type" | keyof Awarding>]: never; })[] & { [K_5 in Exclude<keyof I["allAwardings"], "$type" | keyof {
            awardSubType?: string | undefined;
            awardType?: string | undefined;
            awardingsRequiredToGrantBenefits?: number | undefined;
            coinPrice?: number | undefined;
            coinReward?: number | undefined;
            count?: number | undefined;
            daysOfDripExtension?: number | undefined;
            daysOfPremium?: number | undefined;
            description?: string | undefined;
            endDate?: string | undefined;
            giverCoinReward?: number | undefined;
            iconFormat?: string | undefined;
            iconHeight?: number | undefined;
            iconUrl?: string | undefined;
            iconWidth?: number | undefined;
            id?: string | undefined;
            isEnabled?: boolean | undefined;
            isNew?: boolean | undefined;
            name?: string | undefined;
            pennyDonate?: number | undefined;
            pennyPrice?: number | undefined;
            resizedIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            resizedStaticIcons?: {
                height?: number | undefined;
                url?: string | undefined;
                width?: number | undefined;
            }[] | undefined;
            startDate?: string | undefined;
            staticIconHeight?: number | undefined;
            staticIconUrl?: string | undefined;
            staticIconWidth?: number | undefined;
            stickyDurationSeconds?: number | undefined;
            subredditCoinReward?: number | undefined;
            subredditId?: string | undefined;
            tiersByRequiredAwardings?: string | undefined;
        }[]>]: never; }) | undefined;
        approved?: boolean | undefined;
        approvedAtUtc?: number | undefined;
        approvedBy?: string | undefined;
        archived?: boolean | undefined;
        associatedAward?: string | undefined;
        author?: string | undefined;
        authorFlairBackgroundColor?: string | undefined;
        authorFlairCssClass?: string | undefined;
        authorFlairRichtext?: ({
            e?: string | undefined;
            t?: string | undefined;
        }[] & ({
            e?: string | undefined;
            t?: string | undefined;
        } & {
            e?: string | undefined;
            t?: string | undefined;
        } & { [K_6 in Exclude<keyof I["authorFlairRichtext"][number], "$type" | keyof AuthorFlairRichText>]: never; })[] & { [K_7 in Exclude<keyof I["authorFlairRichtext"], "$type" | keyof {
            e?: string | undefined;
            t?: string | undefined;
        }[]>]: never; }) | undefined;
        authorFlairTemplateId?: string | undefined;
        authorFlairText?: string | undefined;
        authorFlairTextColor?: string | undefined;
        authorFlairType?: string | undefined;
        authorFullname?: string | undefined;
        authorIsBlocked?: boolean | undefined;
        authorPatreonFlair?: boolean | undefined;
        authorPremium?: boolean | undefined;
        awarders?: (string[] & string[] & { [K_8 in Exclude<keyof I["awarders"], "$type" | keyof string[]>]: never; }) | undefined;
        bannedAtUtc?: number | undefined;
        bannedBy?: string | undefined;
        body?: string | undefined;
        bodyHtml?: string | undefined;
        canGild?: boolean | undefined;
        canModPost?: boolean | undefined;
        collapsed?: boolean | undefined;
        collapsedBecauseCrowdControl?: boolean | undefined;
        collapsedReason?: string | undefined;
        collapsedReasonCode?: string | undefined;
        commentType?: string | undefined;
        controversiality?: number | undefined;
        created?: number | undefined;
        createdUtc?: number | undefined;
        depth?: number | undefined;
        distinguished?: string | undefined;
        downs?: number | undefined;
        edited?: boolean | undefined;
        gilded?: number | undefined;
        gildings?: ({
            gid1?: number | undefined;
            gid2?: number | undefined;
            gid3?: number | undefined;
        } & {
            gid1?: number | undefined;
            gid2?: number | undefined;
            gid3?: number | undefined;
        } & { [K_9 in Exclude<keyof I["gildings"], "$type" | keyof Gildings>]: never; }) | undefined;
        id?: string | undefined;
        ignoreReports?: boolean | undefined;
        isSubmitter?: boolean | undefined;
        likes?: boolean | undefined;
        linkId?: string | undefined;
        locked?: boolean | undefined;
        modNote?: string | undefined;
        modReasonBy?: string | undefined;
        modReasonTitle?: string | undefined;
        modReports?: (any[][] & (any[] & any[] & { [K_10 in Exclude<keyof I["modReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_11 in Exclude<keyof I["modReports"], "$type" | keyof any[][]>]: never; }) | undefined;
        name?: string | undefined;
        noFollow?: boolean | undefined;
        numReports?: number | undefined;
        parentId?: string | undefined;
        permalink?: string | undefined;
        removalReason?: string | undefined;
        removed?: boolean | undefined;
        replies?: string | undefined;
        reportReasons?: (string[] & string[] & { [K_12 in Exclude<keyof I["reportReasons"], "$type" | keyof string[]>]: never; }) | undefined;
        rteMode?: string | undefined;
        saved?: boolean | undefined;
        score?: number | undefined;
        scoreHidden?: boolean | undefined;
        sendReplies?: boolean | undefined;
        spam?: boolean | undefined;
        stickied?: boolean | undefined;
        subreddit?: string | undefined;
        subredditId?: string | undefined;
        subredditNamePrefixed?: string | undefined;
        subredditType?: string | undefined;
        topAwardedType?: string | undefined;
        totalAwardsReceived?: number | undefined;
        treatmentTags?: (string[] & string[] & { [K_13 in Exclude<keyof I["treatmentTags"], "$type" | keyof string[]>]: never; }) | undefined;
        unrepliableReason?: string | undefined;
        ups?: number | undefined;
        userReports?: (any[][] & (any[] & any[] & { [K_14 in Exclude<keyof I["userReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_15 in Exclude<keyof I["userReports"], "$type" | keyof any[][]>]: never; }) | undefined;
        count?: number | undefined;
        children?: (string[] & string[] & { [K_16 in Exclude<keyof I["children"], "$type" | keyof string[]>]: never; }) | undefined;
        banInfo?: ({
            auto?: boolean | undefined;
            bannedAt?: number | undefined;
            banner?: string | undefined;
            moderatorBanned?: boolean | undefined;
            note?: string | undefined;
            unbanner?: string | undefined;
            unbannedAt?: number | undefined;
            resetUsed?: boolean | undefined;
            reasonId?: string | undefined;
            reasonTitle?: string | undefined;
            reasonMessage?: string | undefined;
            reasonBy?: string | undefined;
            modNote?: string | undefined;
            banAllTriggered?: boolean | undefined;
            subredditMessage?: string | undefined;
            removeAction?: import("./common.js").BanInfo_BanInfoAction | undefined;
        } & {
            auto?: boolean | undefined;
            bannedAt?: number | undefined;
            banner?: string | undefined;
            moderatorBanned?: boolean | undefined;
            note?: string | undefined;
            unbanner?: string | undefined;
            unbannedAt?: number | undefined;
            resetUsed?: boolean | undefined;
            reasonId?: string | undefined;
            reasonTitle?: string | undefined;
            reasonMessage?: string | undefined;
            reasonBy?: string | undefined;
            modNote?: string | undefined;
            banAllTriggered?: boolean | undefined;
            subredditMessage?: string | undefined;
            removeAction?: import("./common.js").BanInfo_BanInfoAction | undefined;
        } & { [K_17 in Exclude<keyof I["banInfo"], "$type" | keyof BanInfo>]: never; }) | undefined;
        markedSpam?: boolean | undefined;
        verdict?: string | undefined;
    } & { [K_18 in Exclude<keyof I, "$type" | keyof Comment>]: never; }>(object: I): Comment;
};
//# sourceMappingURL=comment.d.ts.map
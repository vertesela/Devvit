/**
 * #clock.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { Timestamp } from '../../../google/protobuf/timestamp.js';
export interface Clock {
    Now(request: Empty, metadata?: Metadata): Promise<Timestamp>;
}
export declare class ClockClientImpl implements Clock {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Now(request: Empty): Promise<Timestamp>;
}
export type ClockDefinition = typeof ClockDefinition;
export declare const ClockDefinition: {
    readonly name: "Clock";
    readonly fullName: "devvit.plugin.clock.Clock";
    readonly methods: {
        readonly now: {
            readonly name: "Now";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Timestamp";
                encode(message: Timestamp, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Timestamp;
                fromJSON(object: any): Timestamp;
                toJSON(message: Timestamp): unknown;
                fromPartial<I_1 extends {
                    seconds?: number | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: number | undefined;
                    nanos?: number | undefined;
                } & { [K_1 in Exclude<keyof I_1, "$type" | keyof Timestamp>]: never; }>(object: I_1): Timestamp;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=clock.d.ts.map
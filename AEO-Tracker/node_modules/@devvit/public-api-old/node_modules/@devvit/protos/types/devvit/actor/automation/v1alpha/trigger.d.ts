/**
 * #trigger.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/**
 * The type of data the trigger will produce
 * This is the type of data that will serve as the input
 */
export declare enum TriggerType {
    /** POST - Trigger will result in a Post */
    POST = 0,
    /** COMMENT - Trigger will result in a Comment */
    COMMENT = 1,
    /** USER - Trigger will result in a User */
    USER = 2,
    UNRECOGNIZED = -1
}
export declare function triggerTypeFromJSON(object: any): TriggerType;
export declare function triggerTypeToJSON(object: TriggerType): number;
/**
 * An event that kicks off an automation. Examples include Post/Comment Created, User Joined Community
 * Each Automation has one Trigger that invokes it
 */
export interface Trigger {
    /** uuid of the trigger */
    id: string;
    /** a short human readable name for the trigger */
    name: string;
    /** description for the trigger */
    label: string;
    /** the type of data this trigger will produce */
    type: TriggerType;
}
export declare const Trigger: {
    $type: "devvit.actor.automation.v1alpha.Trigger";
    encode(message: Trigger, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Trigger;
    fromJSON(object: any): Trigger;
    toJSON(message: Trigger): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        name?: string | undefined;
        label?: string | undefined;
        type?: TriggerType | undefined;
    } & {
        id?: string | undefined;
        name?: string | undefined;
        label?: string | undefined;
        type?: TriggerType | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Trigger>]: never; }>(object: I): Trigger;
};
//# sourceMappingURL=trigger.d.ts.map
/**
 * #show_toast.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { Toast } from '../../toast/toast.js';
function createBaseShowToastEffect() {
    return { toast: undefined };
}
export const ShowToastEffect = {
    $type: "devvit.ui.effects.v1alpha.ShowToastEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.toast !== undefined) {
            Toast.encode(message.toast, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShowToastEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.toast = Toast.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { toast: isSet(object.toast) ? Toast.fromJSON(object.toast) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.toast !== undefined && (obj.toast = message.toast ? Toast.toJSON(message.toast) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseShowToastEffect();
        message.toast = (object.toast !== undefined && object.toast !== null) ? Toast.fromPartial(object.toast) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.ShowToastEffect", ShowToastEffect);
function createBaseToastActionEvent() {
    return {};
}
export const ToastActionEvent = {
    $type: "devvit.ui.effects.v1alpha.ToastActionEvent",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToastActionEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseToastActionEvent();
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.ToastActionEvent", ToastActionEvent);
function isSet(value) {
    return value !== null && value !== undefined;
}

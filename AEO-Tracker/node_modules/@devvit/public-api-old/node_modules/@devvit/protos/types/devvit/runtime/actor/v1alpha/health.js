/**
 * #health.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Timestamp } from '../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
function createBaseHealthStatus() {
    return { start: undefined, end: undefined };
}
export const HealthStatus = {
    $type: "devvit.runtime.actor.v1alpha.HealthStatus",
    encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Timestamp.encode(toTimestamp(message.start), writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Timestamp.encode(toTimestamp(message.end), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.start = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.end = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
            end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = message.start.toISOString());
        message.end !== undefined && (obj.end = message.end.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHealthStatus();
        message.start = object.start ?? undefined;
        message.end = object.end ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.actor.v1alpha.HealthStatus", HealthStatus);
export class HealthClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.runtime.actor.v1alpha.Health";
        this.rpc = rpc;
        this.Check = this.Check.bind(this);
    }
    Check(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Check", data);
        return promise.then((data) => HealthStatus.decode(new _m0.Reader(data)));
    }
}
export const HealthDefinition = {
    name: "Health",
    fullName: "devvit.runtime.actor.v1alpha.Health",
    methods: {
        check: {
            name: "Check",
            requestType: Empty,
            requestStream: false,
            responseType: HealthStatus,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

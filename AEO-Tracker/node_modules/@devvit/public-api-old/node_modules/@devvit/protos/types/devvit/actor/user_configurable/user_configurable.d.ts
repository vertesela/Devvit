/**
 * #user_configurable.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
export declare enum ConfigFieldType {
    /** STRING - Single-line string */
    STRING = 0,
    /** PARAGRAPH - Multi-line string */
    PARAGRAPH = 1,
    /** NUMBER - Number input (i.e.: spinner) */
    NUMBER = 2,
    /** BOOLEAN - Checkbox, switch */
    BOOLEAN = 3,
    UNRECOGNIZED = -1
}
export declare function configFieldTypeFromJSON(object: any): ConfigFieldType;
export declare function configFieldTypeToJSON(object: ConfigFieldType): number;
export interface ConfigForm {
    fields: ConfigField[];
}
/** Defines a configuration field with a specific type */
export interface ConfigField {
    /** Determines what kind of user input to generate for this field */
    fieldType: ConfigFieldType;
    /** Unique identifier for the setting */
    key: string;
    /** Message to display to the user for this setting */
    prompt: string;
    /**
     * The value of the field.
     * When calling RenderForm provide the existing value of the field
     * When calling HandleFormResponse read this property to get the user's response
     */
    response: string;
}
export interface FormResponse {
    success: boolean;
    messages: string[];
}
export declare const ConfigForm: {
    $type: "devvit.actor.user_configurable.ConfigForm";
    encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
    fromJSON(object: any): ConfigForm;
    toJSON(message: ConfigForm): unknown;
    fromPartial<I extends {
        fields?: {
            fieldType?: ConfigFieldType | undefined;
            key?: string | undefined;
            prompt?: string | undefined;
            response?: string | undefined;
        }[] | undefined;
    } & {
        fields?: ({
            fieldType?: ConfigFieldType | undefined;
            key?: string | undefined;
            prompt?: string | undefined;
            response?: string | undefined;
        }[] & ({
            fieldType?: ConfigFieldType | undefined;
            key?: string | undefined;
            prompt?: string | undefined;
            response?: string | undefined;
        } & {
            fieldType?: ConfigFieldType | undefined;
            key?: string | undefined;
            prompt?: string | undefined;
            response?: string | undefined;
        } & { [K in Exclude<keyof I["fields"][number], "$type" | keyof ConfigField>]: never; })[] & { [K_1 in Exclude<keyof I["fields"], "$type" | keyof {
            fieldType?: ConfigFieldType | undefined;
            key?: string | undefined;
            prompt?: string | undefined;
            response?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "fields" | "$type">]: never; }>(object: I): ConfigForm;
};
export declare const ConfigField: {
    $type: "devvit.actor.user_configurable.ConfigField";
    encode(message: ConfigField, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigField;
    fromJSON(object: any): ConfigField;
    toJSON(message: ConfigField): unknown;
    fromPartial<I extends {
        fieldType?: ConfigFieldType | undefined;
        key?: string | undefined;
        prompt?: string | undefined;
        response?: string | undefined;
    } & {
        fieldType?: ConfigFieldType | undefined;
        key?: string | undefined;
        prompt?: string | undefined;
        response?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ConfigField>]: never; }>(object: I): ConfigField;
};
export declare const FormResponse: {
    $type: "devvit.actor.user_configurable.FormResponse";
    encode(message: FormResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormResponse;
    fromJSON(object: any): FormResponse;
    toJSON(message: FormResponse): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        messages?: string[] | undefined;
    } & {
        success?: boolean | undefined;
        messages?: (string[] & string[] & { [K in Exclude<keyof I["messages"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof FormResponse>]: never; }>(object: I): FormResponse;
};
/** Enables an actor to be configurable after installation */
export interface UserConfigurable {
    /** Get a list of inputs to present to the user */
    RenderForm(request: Empty, metadata?: Metadata): Promise<ConfigForm>;
    /**
     * Parse the user input.
     * The original ConfigForm is provided with the response fields updated from the user's input.
     */
    HandleFormResponse(request: ConfigForm, metadata?: Metadata): Promise<FormResponse>;
}
export declare class UserConfigurableClientImpl implements UserConfigurable {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RenderForm(request: Empty): Promise<ConfigForm>;
    HandleFormResponse(request: ConfigForm): Promise<FormResponse>;
}
/** Enables an actor to be configurable after installation */
export type UserConfigurableDefinition = typeof UserConfigurableDefinition;
export declare const UserConfigurableDefinition: {
    readonly name: "UserConfigurable";
    readonly fullName: "devvit.actor.user_configurable.UserConfigurable";
    readonly methods: {
        /** Get a list of inputs to present to the user */
        readonly renderForm: {
            readonly name: "RenderForm";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                fromPartial<I_1 extends {
                    fields?: {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] | undefined;
                } & {
                    fields?: ({
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] & ({
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & { [K in Exclude<keyof I["fields"][number], "$type" | keyof ConfigField>]: never; })[] & { [K_1 in Exclude<keyof I["fields"], "$type" | keyof {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "fields" | "$type">]: never; }>(object: I_1): ConfigForm;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Parse the user input.
         * The original ConfigForm is provided with the response fields updated from the user's input.
         */
        readonly handleFormResponse: {
            readonly name: "HandleFormResponse";
            readonly requestType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                fromPartial<I_1 extends {
                    fields?: {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] | undefined;
                } & {
                    fields?: ({
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] & ({
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & { [K in Exclude<keyof I["fields"][number], "$type" | keyof ConfigField>]: never; })[] & { [K_1 in Exclude<keyof I["fields"], "$type" | keyof {
                        fieldType?: ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "fields" | "$type">]: never; }>(object: I_1): ConfigForm;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.FormResponse";
                encode(message: FormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FormResponse;
                fromJSON(object: any): FormResponse;
                toJSON(message: FormResponse): unknown;
                fromPartial<I_2 extends {
                    success?: boolean | undefined;
                    messages?: string[] | undefined;
                } & {
                    success?: boolean | undefined;
                    messages?: (string[] & string[] & { [K in Exclude<keyof I["messages"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof FormResponse>]: never; }>(object: I_2): FormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=user_configurable.d.ts.map
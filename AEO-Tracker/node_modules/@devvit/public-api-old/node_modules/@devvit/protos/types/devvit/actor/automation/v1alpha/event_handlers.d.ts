/**
 * #event_handlers.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { AccountDelete, AppInstall, AppUpgrade, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostCreate, PostDelete, PostFlairUpdate, PostReport, PostSubmit, PostUpdate, SubredditSubscribe } from '../../../events/v1alpha/events.js';
import { ModAction } from '../../../reddit/v2alpha/modaction.js';
import { ModMail } from '../../../reddit/v2alpha/modmail.js';
/** This needs to rectified with StepResult at some point */
export interface HandlerResult {
}
export declare const HandlerResult: {
    $type: "devvit.actor.automation.v1alpha.HandlerResult";
    encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
    fromJSON(_: any): HandlerResult;
    toJSON(_: HandlerResult): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): HandlerResult;
};
export interface OnPostSubmit {
    OnPostSubmit(request: PostSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostSubmitClientImpl implements OnPostSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostSubmit(request: PostSubmit): Promise<HandlerResult>;
}
export type OnPostSubmitDefinition = typeof OnPostSubmitDefinition;
export declare const OnPostSubmitDefinition: {
    readonly name: "OnPostSubmit";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostSubmit";
    readonly methods: {
        readonly onPostSubmit: {
            readonly name: "OnPostSubmit";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostSubmit";
                encode(message: PostSubmit, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostSubmit;
                fromJSON(object: any): PostSubmit;
                toJSON(message: PostSubmit): unknown;
                fromPartial<I extends {
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_2 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_3 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_6 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_7 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_8 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I, "$type" | keyof PostSubmit>]: never; }>(object: I): PostSubmit;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostCreate {
    OnPostCreate(request: PostCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostCreateClientImpl implements OnPostCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostCreate(request: PostCreate): Promise<HandlerResult>;
}
export type OnPostCreateDefinition = typeof OnPostCreateDefinition;
export declare const OnPostCreateDefinition: {
    readonly name: "OnPostCreate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostCreate";
    readonly methods: {
        readonly onPostCreate: {
            readonly name: "OnPostCreate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostCreate";
                encode(message: PostCreate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostCreate;
                fromJSON(object: any): PostCreate;
                toJSON(message: PostCreate): unknown;
                fromPartial<I extends {
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_2 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_3 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_6 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_7 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_8 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I, "$type" | keyof PostCreate>]: never; }>(object: I): PostCreate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostUpdate {
    OnPostUpdate(request: PostUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostUpdateClientImpl implements OnPostUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostUpdate(request: PostUpdate): Promise<HandlerResult>;
}
export type OnPostUpdateDefinition = typeof OnPostUpdateDefinition;
export declare const OnPostUpdateDefinition: {
    readonly name: "OnPostUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostUpdate";
    readonly methods: {
        readonly onPostUpdate: {
            readonly name: "OnPostUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostUpdate";
                encode(message: PostUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostUpdate;
                fromJSON(object: any): PostUpdate;
                toJSON(message: PostUpdate): unknown;
                fromPartial<I extends {
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    previousBody?: string | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_2 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_3 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_6 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    previousBody?: string | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_7 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_8 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I, "$type" | keyof PostUpdate>]: never; }>(object: I): PostUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostReport {
    OnPostReport(request: PostReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostReportClientImpl implements OnPostReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostReport(request: PostReport): Promise<HandlerResult>;
}
export type OnPostReportDefinition = typeof OnPostReportDefinition;
export declare const OnPostReportDefinition: {
    readonly name: "OnPostReport";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostReport";
    readonly methods: {
        readonly onPostReport: {
            readonly name: "OnPostReport";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostReport";
                encode(message: PostReport, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostReport;
                fromJSON(object: any): PostReport;
                toJSON(message: PostReport): unknown;
                fromPartial<I extends {
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    reason?: string | undefined;
                } & {
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_2 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_3 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_6 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_7 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    reason?: string | undefined;
                } & { [K_8 in Exclude<keyof I, "$type" | keyof PostReport>]: never; }>(object: I): PostReport;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostFlairUpdate {
    OnPostFlairUpdate(request: PostFlairUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostFlairUpdateClientImpl implements OnPostFlairUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostFlairUpdate(request: PostFlairUpdate): Promise<HandlerResult>;
}
export type OnPostFlairUpdateDefinition = typeof OnPostFlairUpdateDefinition;
export declare const OnPostFlairUpdateDefinition: {
    readonly name: "OnPostFlairUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostFlairUpdate";
    readonly methods: {
        readonly onPostFlairUpdate: {
            readonly name: "OnPostFlairUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostFlairUpdate";
                encode(message: PostFlairUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostFlairUpdate;
                fromJSON(object: any): PostFlairUpdate;
                toJSON(message: PostFlairUpdate): unknown;
                fromPartial<I extends {
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_1 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_2 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_3 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_4 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_5 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_6 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_7 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_8 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I, "$type" | keyof PostFlairUpdate>]: never; }>(object: I): PostFlairUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostDelete {
    OnPostDelete(request: PostDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostDeleteClientImpl implements OnPostDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostDelete(request: PostDelete): Promise<HandlerResult>;
}
export type OnPostDeleteDefinition = typeof OnPostDeleteDefinition;
export declare const OnPostDeleteDefinition: {
    readonly name: "OnPostDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostDelete";
    readonly methods: {
        readonly onPostDelete: {
            readonly name: "OnPostDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostDelete";
                encode(message: PostDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostDelete;
                fromJSON(object: any): PostDelete;
                toJSON(message: PostDelete): unknown;
                fromPartial<I extends {
                    postId?: string | undefined;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    postId?: string | undefined;
                    deletedAt?: Date | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof PostDelete>]: never; }>(object: I): PostDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentSubmit {
    OnCommentSubmit(request: CommentSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentSubmitClientImpl implements OnCommentSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentSubmit(request: CommentSubmit): Promise<HandlerResult>;
}
export type OnCommentSubmitDefinition = typeof OnCommentSubmitDefinition;
export declare const OnCommentSubmitDefinition: {
    readonly name: "OnCommentSubmit";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentSubmit";
    readonly methods: {
        readonly onCommentSubmit: {
            readonly name: "OnCommentSubmit";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentSubmit";
                encode(message: CommentSubmit, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentSubmit;
                fromJSON(object: any): CommentSubmit;
                toJSON(message: CommentSubmit): unknown;
                fromPartial<I extends {
                    comment?: {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    comment?: ({
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K in Exclude<keyof I["comment"], "$type" | keyof import("../../../reddit/v2alpha/commentv2.js").CommentV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K_2 in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_3 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_4 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_5 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_6 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_7 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_8 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_9 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_10 in Exclude<keyof I, "$type" | keyof CommentSubmit>]: never; }>(object: I): CommentSubmit;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentCreate {
    OnCommentCreate(request: CommentCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentCreateClientImpl implements OnCommentCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentCreate(request: CommentCreate): Promise<HandlerResult>;
}
export type OnCommentCreateDefinition = typeof OnCommentCreateDefinition;
export declare const OnCommentCreateDefinition: {
    readonly name: "OnCommentCreate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentCreate";
    readonly methods: {
        readonly onCommentCreate: {
            readonly name: "OnCommentCreate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentCreate";
                encode(message: CommentCreate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentCreate;
                fromJSON(object: any): CommentCreate;
                toJSON(message: CommentCreate): unknown;
                fromPartial<I extends {
                    comment?: {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    comment?: ({
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K in Exclude<keyof I["comment"], "$type" | keyof import("../../../reddit/v2alpha/commentv2.js").CommentV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K_2 in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_3 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_4 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_5 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_6 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_7 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_8 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_9 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_10 in Exclude<keyof I, "$type" | keyof CommentCreate>]: never; }>(object: I): CommentCreate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentUpdate {
    OnCommentUpdate(request: CommentUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentUpdateClientImpl implements OnCommentUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentUpdate(request: CommentUpdate): Promise<HandlerResult>;
}
export type OnCommentUpdateDefinition = typeof OnCommentUpdateDefinition;
export declare const OnCommentUpdateDefinition: {
    readonly name: "OnCommentUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentUpdate";
    readonly methods: {
        readonly onCommentUpdate: {
            readonly name: "OnCommentUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentUpdate";
                encode(message: CommentUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentUpdate;
                fromJSON(object: any): CommentUpdate;
                toJSON(message: CommentUpdate): unknown;
                fromPartial<I extends {
                    comment?: {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    post?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                    previousBody?: string | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    comment?: ({
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K in Exclude<keyof I["comment"], "$type" | keyof import("../../../reddit/v2alpha/commentv2.js").CommentV2>]: never; }) | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    post?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K_2 in Exclude<keyof I["post"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_3 in Exclude<keyof I["post"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_4 in Exclude<keyof I["post"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_5 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_6 in Exclude<keyof I["post"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_7 in Exclude<keyof I["post"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                    previousBody?: string | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_8 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_9 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_10 in Exclude<keyof I, "$type" | keyof CommentUpdate>]: never; }>(object: I): CommentUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentReport {
    OnCommentReport(request: CommentReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentReportClientImpl implements OnCommentReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentReport(request: CommentReport): Promise<HandlerResult>;
}
export type OnCommentReportDefinition = typeof OnCommentReportDefinition;
export declare const OnCommentReportDefinition: {
    readonly name: "OnCommentReport";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentReport";
    readonly methods: {
        readonly onCommentReport: {
            readonly name: "OnCommentReport";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentReport";
                encode(message: CommentReport, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentReport;
                fromJSON(object: any): CommentReport;
                toJSON(message: CommentReport): unknown;
                fromPartial<I extends {
                    comment?: {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    reason?: string | undefined;
                } & {
                    comment?: ({
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K in Exclude<keyof I["comment"], "$type" | keyof import("../../../reddit/v2alpha/commentv2.js").CommentV2>]: never; }) | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    reason?: string | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof CommentReport>]: never; }>(object: I): CommentReport;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentDelete {
    OnCommentDelete(request: CommentDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentDeleteClientImpl implements OnCommentDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentDelete(request: CommentDelete): Promise<HandlerResult>;
}
export type OnCommentDeleteDefinition = typeof OnCommentDeleteDefinition;
export declare const OnCommentDeleteDefinition: {
    readonly name: "OnCommentDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentDelete";
    readonly methods: {
        readonly onCommentDelete: {
            readonly name: "OnCommentDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentDelete";
                encode(message: CommentDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentDelete;
                fromJSON(object: any): CommentDelete;
                toJSON(message: CommentDelete): unknown;
                fromPartial<I extends {
                    commentId?: string | undefined;
                    postId?: string | undefined;
                    parentId?: string | undefined;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                } & {
                    commentId?: string | undefined;
                    postId?: string | undefined;
                    parentId?: string | undefined;
                    deletedAt?: Date | undefined;
                    author?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K in Exclude<keyof I["author"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof CommentDelete>]: never; }>(object: I): CommentDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnSubredditSubscribe {
    OnSubredditSubscribe(request: SubredditSubscribe, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnSubredditSubscribeClientImpl implements OnSubredditSubscribe {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnSubredditSubscribe(request: SubredditSubscribe): Promise<HandlerResult>;
}
export type OnSubredditSubscribeDefinition = typeof OnSubredditSubscribeDefinition;
export declare const OnSubredditSubscribeDefinition: {
    readonly name: "OnSubredditSubscribe";
    readonly fullName: "devvit.actor.automation.v1alpha.OnSubredditSubscribe";
    readonly methods: {
        readonly onSubredditSubscribe: {
            readonly name: "OnSubredditSubscribe";
            readonly requestType: {
                $type: "devvit.events.v1alpha.SubredditSubscribe";
                encode(message: SubredditSubscribe, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditSubscribe;
                fromJSON(object: any): SubredditSubscribe;
                toJSON(message: SubredditSubscribe): unknown;
                fromPartial<I extends {
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    subscriber?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    subscriber?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["subscriber"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof SubredditSubscribe>]: never; }>(object: I): SubredditSubscribe;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAppInstall {
    OnAppInstall(request: AppInstall, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAppInstallClientImpl implements OnAppInstall {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppInstall(request: AppInstall): Promise<HandlerResult>;
}
export type OnAppInstallDefinition = typeof OnAppInstallDefinition;
export declare const OnAppInstallDefinition: {
    readonly name: "OnAppInstall";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAppInstall";
    readonly methods: {
        readonly onAppInstall: {
            readonly name: "OnAppInstall";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AppInstall";
                encode(message: AppInstall, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppInstall;
                fromJSON(object: any): AppInstall;
                toJSON(message: AppInstall): unknown;
                fromPartial<I extends {
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    installer?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    installer?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["installer"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof AppInstall>]: never; }>(object: I): AppInstall;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAppUpgrade {
    OnAppUpgrade(request: AppUpgrade, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAppUpgradeClientImpl implements OnAppUpgrade {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppUpgrade(request: AppUpgrade): Promise<HandlerResult>;
}
export type OnAppUpgradeDefinition = typeof OnAppUpgradeDefinition;
export declare const OnAppUpgradeDefinition: {
    readonly name: "OnAppUpgrade";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAppUpgrade";
    readonly methods: {
        readonly onAppUpgrade: {
            readonly name: "OnAppUpgrade";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AppUpgrade";
                encode(message: AppUpgrade, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppUpgrade;
                fromJSON(object: any): AppUpgrade;
                toJSON(message: AppUpgrade): unknown;
                fromPartial<I extends {
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    installer?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    installer?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["installer"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof AppUpgrade>]: never; }>(object: I): AppUpgrade;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnModAction {
    OnModAction(request: ModAction, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnModActionClientImpl implements OnModAction {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModAction(request: ModAction): Promise<HandlerResult>;
}
export type OnModActionDefinition = typeof OnModActionDefinition;
export declare const OnModActionDefinition: {
    readonly name: "OnModAction";
    readonly fullName: "devvit.actor.automation.v1alpha.OnModAction";
    readonly methods: {
        readonly onModAction: {
            readonly name: "OnModAction";
            readonly requestType: {
                $type: "devvit.reddit.v2alpha.ModAction";
                encode(message: ModAction, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModAction;
                fromJSON(object: any): ModAction;
                toJSON(message: ModAction): unknown;
                fromPartial<I extends {
                    action?: string | undefined;
                    actionedAt?: Date | undefined;
                    subreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    moderator?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    targetUser?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    targetComment?: {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    targetPost?: {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } | undefined;
                } & {
                    action?: string | undefined;
                    actionedAt?: Date | undefined;
                    subreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["subreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    moderator?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["moderator"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    targetUser?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K_3 in Exclude<keyof I["targetUser"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    targetComment?: ({
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        parentId?: string | undefined;
                        body?: string | undefined;
                        author?: string | undefined;
                        numReports?: number | undefined;
                        collapsedBecauseCrowdControl?: boolean | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        createdAt?: number | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        languageCode?: string | undefined;
                        lastModifiedAt?: number | undefined;
                        gilded?: boolean | undefined;
                        score?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_4 in Exclude<keyof I["targetComment"], "$type" | keyof import("../../../reddit/v2alpha/commentv2.js").CommentV2>]: never; }) | undefined;
                    targetPost?: ({
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } | undefined;
                        authorFlair?: {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: {
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        title?: string | undefined;
                        selftext?: string | undefined;
                        nsfw?: boolean | undefined;
                        authorId?: string | undefined;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel | undefined;
                        numReports?: number | undefined;
                        isGallery?: boolean | undefined;
                        isMeta?: boolean | undefined;
                        createdAt?: number | undefined;
                        isApproved?: boolean | undefined;
                        isArchived?: boolean | undefined;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType | undefined;
                        ignoreReports?: boolean | undefined;
                        isSelf?: boolean | undefined;
                        isVideo?: boolean | undefined;
                        isLocked?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        subredditId?: string | undefined;
                        upvotes?: number | undefined;
                        downvotes?: number | undefined;
                        url?: string | undefined;
                        isSticky?: boolean | undefined;
                        linkFlair?: ({
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & {
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            backgroundColor?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                        } & { [K_5 in Exclude<keyof I["targetPost"]["linkFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").LinkFlairV2>]: never; }) | undefined;
                        authorFlair?: ({
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & {
                            userId?: string | undefined;
                            subredditId?: string | undefined;
                            text?: string | undefined;
                            cssClass?: string | undefined;
                            templateId?: string | undefined;
                            textColor?: string | undefined;
                            backgroundColor?: string | undefined;
                            enabled?: boolean | undefined;
                        } & { [K_6 in Exclude<keyof I["targetPost"]["authorFlair"], "$type" | keyof import("../../../reddit/v2alpha/flair.js").UserFlairV2>]: never; }) | undefined;
                        spam?: boolean | undefined;
                        deleted?: boolean | undefined;
                        languageCode?: string | undefined;
                        updatedAt?: number | undefined;
                        gildings?: number | undefined;
                        score?: number | undefined;
                        numComments?: number | undefined;
                        thumbnail?: string | undefined;
                        media?: ({
                            type?: string | undefined;
                            oembed?: {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } | undefined;
                        } & {
                            type?: string | undefined;
                            oembed?: ({
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & {
                                type?: string | undefined;
                                version?: string | undefined;
                                title?: string | undefined;
                                description?: string | undefined;
                                authorName?: string | undefined;
                                authorUrl?: string | undefined;
                                providerName?: string | undefined;
                                providerUrl?: string | undefined;
                                thumbnailUrl?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                html?: string | undefined;
                                width?: number | undefined;
                                height?: number | undefined;
                            } & { [K_7 in Exclude<keyof I["targetPost"]["media"]["oembed"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").Oembed>]: never; }) | undefined;
                            redditVideo?: ({
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & {
                                bitrateKbps?: number | undefined;
                                fallbackUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                scrubberMediaUrl?: string | undefined;
                                dashUrl?: string | undefined;
                                duration?: number | undefined;
                                hlsUrl?: string | undefined;
                                isGif?: boolean | undefined;
                                transcodingStatus?: string | undefined;
                            } & { [K_8 in Exclude<keyof I["targetPost"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").RedditVideo>]: never; }) | undefined;
                        } & { [K_9 in Exclude<keyof I["targetPost"]["media"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").MediaObject>]: never; }) | undefined;
                        crosspostParentId?: string | undefined;
                        permalink?: string | undefined;
                        isPoll?: boolean | undefined;
                        isPromoted?: boolean | undefined;
                        isMultiMedia?: boolean | undefined;
                    } & { [K_10 in Exclude<keyof I["targetPost"], "$type" | keyof import("../../../reddit/v2alpha/postv2.js").PostV2>]: never; }) | undefined;
                } & { [K_11 in Exclude<keyof I, "$type" | keyof ModAction>]: never; }>(object: I): ModAction;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnModMail {
    OnModMail(request: ModMail, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnModMailClientImpl implements OnModMail {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModMail(request: ModMail): Promise<HandlerResult>;
}
export type OnModMailDefinition = typeof OnModMailDefinition;
export declare const OnModMailDefinition: {
    readonly name: "OnModMail";
    readonly fullName: "devvit.actor.automation.v1alpha.OnModMail";
    readonly methods: {
        readonly onModMail: {
            readonly name: "OnModMail";
            readonly requestType: {
                $type: "devvit.reddit.v2alpha.ModMail";
                encode(message: ModMail, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModMail;
                fromJSON(object: any): ModMail;
                toJSON(message: ModMail): unknown;
                fromPartial<I extends {
                    messageAuthor?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                    createdAt?: Date | undefined;
                    messageAuthorType?: string | undefined;
                    conversationState?: string | undefined;
                    conversationType?: string | undefined;
                    isAutoGenerated?: boolean | undefined;
                    conversationSubreddit?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } | undefined;
                    conversationId?: string | undefined;
                    messageId?: string | undefined;
                } & {
                    messageAuthor?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K in Exclude<keyof I["messageAuthor"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                    createdAt?: Date | undefined;
                    messageAuthorType?: string | undefined;
                    conversationState?: string | undefined;
                    conversationType?: string | undefined;
                    isAutoGenerated?: boolean | undefined;
                    conversationSubreddit?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: string[] | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        nsfw?: boolean | undefined;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType | undefined;
                        spam?: boolean | undefined;
                        quarantined?: boolean | undefined;
                        topics?: (string[] & string[] & { [K_1 in Exclude<keyof I["conversationSubreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating | undefined;
                        subscribersCount?: number | undefined;
                        permalink?: string | undefined;
                    } & { [K_2 in Exclude<keyof I["conversationSubreddit"], "$type" | keyof import("../../../reddit/v2alpha/subredditv2.js").SubredditV2>]: never; }) | undefined;
                    conversationId?: string | undefined;
                    messageId?: string | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof ModMail>]: never; }>(object: I): ModMail;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAccountDelete {
    OnAccountDelete(request: AccountDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAccountDeleteClientImpl implements OnAccountDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAccountDelete(request: AccountDelete): Promise<HandlerResult>;
}
export type OnAccountDeleteDefinition = typeof OnAccountDeleteDefinition;
export declare const OnAccountDeleteDefinition: {
    readonly name: "OnAccountDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAccountDelete";
    readonly methods: {
        readonly onAccountDelete: {
            readonly name: "OnAccountDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AccountDelete";
                encode(message: AccountDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AccountDelete;
                fromJSON(object: any): AccountDelete;
                toJSON(message: AccountDelete): unknown;
                fromPartial<I extends {
                    userId?: string | undefined;
                    deletedAt?: Date | undefined;
                    user?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } | undefined;
                } & {
                    userId?: string | undefined;
                    deletedAt?: Date | undefined;
                    user?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        isGold?: boolean | undefined;
                        snoovatarImage?: string | undefined;
                        url?: string | undefined;
                    } & { [K in Exclude<keyof I["user"], "$type" | keyof import("../../../reddit/v2alpha/userv2.js").UserV2>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof AccountDelete>]: never; }>(object: I): AccountDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=event_handlers.d.ts.map
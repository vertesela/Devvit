/**
 * #redditor.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseRedditor() {
    return { id: "", displayName: "", snoovatarIconUrl: "" };
}
export const Redditor = {
    $type: "devvit.dev_portal.reddit.Redditor",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.displayName !== "") {
            writer.uint32(18).string(message.displayName);
        }
        if (message.snoovatarIconUrl !== "") {
            writer.uint32(26).string(message.snoovatarIconUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRedditor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.displayName = reader.string();
                    break;
                case 3:
                    message.snoovatarIconUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            displayName: isSet(object.displayName) ? String(object.displayName) : "",
            snoovatarIconUrl: isSet(object.snoovatarIconUrl) ? String(object.snoovatarIconUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.displayName !== undefined && (obj.displayName = message.displayName);
        message.snoovatarIconUrl !== undefined && (obj.snoovatarIconUrl = message.snoovatarIconUrl);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRedditor();
        message.id = object.id ?? "";
        message.displayName = object.displayName ?? "";
        message.snoovatarIconUrl = object.snoovatarIconUrl ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.reddit.Redditor", Redditor);
function isSet(value) {
    return value !== null && value !== undefined;
}

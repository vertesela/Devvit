/**
 * #app_settings.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { SettingsValues } from '../../plugin/settings/v1alpha/settings.js';
import { Form } from '../../ui/form_builder/v1alpha/form.js';
function createBaseGetAppSettingsRequest() {
    return { appId: "" };
}
export const GetAppSettingsRequest = {
    $type: "devvit.dev_portal.app_settings.GetAppSettingsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { appId: isSet(object.appId) ? String(object.appId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.appId !== undefined && (obj.appId = message.appId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetAppSettingsRequest();
        message.appId = object.appId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.GetAppSettingsRequest", GetAppSettingsRequest);
function createBaseGetAppSettingsResponse() {
    return { settings: undefined };
}
export const GetAppSettingsResponse = {
    $type: "devvit.dev_portal.app_settings.GetAppSettingsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetAppSettingsResponse();
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.GetAppSettingsResponse", GetAppSettingsResponse);
function createBaseUpdateAppSettingsRequest() {
    return { appId: "", settings: undefined };
}
export const UpdateAppSettingsRequest = {
    $type: "devvit.dev_portal.app_settings.UpdateAppSettingsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appId = reader.string();
                    break;
                case 2:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? String(object.appId) : "",
            settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.appId !== undefined && (obj.appId = message.appId);
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateAppSettingsRequest();
        message.appId = object.appId ?? "";
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.UpdateAppSettingsRequest", UpdateAppSettingsRequest);
function createBaseUpdateAppSettingsResponse() {
    return { success: false, errors: {} };
}
export const UpdateAppSettingsResponse = {
    $type: "devvit.dev_portal.app_settings.UpdateAppSettingsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            UpdateAppSettingsResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    const entry2 = UpdateAppSettingsResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.errors[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        obj.errors = {};
        if (message.errors) {
            Object.entries(message.errors).forEach(([k, v]) => {
                obj.errors[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateAppSettingsResponse();
        message.success = object.success ?? false;
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.UpdateAppSettingsResponse", UpdateAppSettingsResponse);
function createBaseUpdateAppSettingsResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const UpdateAppSettingsResponse_ErrorsEntry = {
    $type: "devvit.dev_portal.app_settings.UpdateAppSettingsResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppSettingsResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateAppSettingsResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.UpdateAppSettingsResponse.ErrorsEntry", UpdateAppSettingsResponse_ErrorsEntry);
function createBaseGetAppSettingsFormRequest() {
    return { appId: "" };
}
export const GetAppSettingsFormRequest = {
    $type: "devvit.dev_portal.app_settings.GetAppSettingsFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppSettingsFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { appId: isSet(object.appId) ? String(object.appId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.appId !== undefined && (obj.appId = message.appId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetAppSettingsFormRequest();
        message.appId = object.appId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.GetAppSettingsFormRequest", GetAppSettingsFormRequest);
function createBaseGetAppSettingsFormResponse() {
    return { form: {} };
}
export const GetAppSettingsFormResponse = {
    $type: "devvit.dev_portal.app_settings.GetAppSettingsFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.form).forEach(([key, value]) => {
            GetAppSettingsFormResponse_FormEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppSettingsFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = GetAppSettingsFormResponse_FormEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.form[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            form: isObject(object.form)
                ? Object.entries(object.form).reduce((acc, [key, value]) => {
                    acc[key] = Form.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.form = {};
        if (message.form) {
            Object.entries(message.form).forEach(([k, v]) => {
                obj.form[k] = Form.toJSON(v);
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetAppSettingsFormResponse();
        message.form = Object.entries(object.form ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Form.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.GetAppSettingsFormResponse", GetAppSettingsFormResponse);
function createBaseGetAppSettingsFormResponse_FormEntry() {
    return { key: "", value: undefined };
}
export const GetAppSettingsFormResponse_FormEntry = {
    $type: "devvit.dev_portal.app_settings.GetAppSettingsFormResponse.FormEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Form.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppSettingsFormResponse_FormEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = Form.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? Form.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? Form.toJSON(message.value) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetAppSettingsFormResponse_FormEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null) ? Form.fromPartial(object.value) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.GetAppSettingsFormResponse.FormEntry", GetAppSettingsFormResponse_FormEntry);
function createBaseValidateAppSettingsFormRequest() {
    return { appId: "", settings: undefined };
}
export const ValidateAppSettingsFormRequest = {
    $type: "devvit.dev_portal.app_settings.ValidateAppSettingsFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateAppSettingsFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appId = reader.string();
                    break;
                case 2:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? String(object.appId) : "",
            settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.appId !== undefined && (obj.appId = message.appId);
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateAppSettingsFormRequest();
        message.appId = object.appId ?? "";
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.ValidateAppSettingsFormRequest", ValidateAppSettingsFormRequest);
function createBaseValidateAppSettingsFormResponse() {
    return { success: false, errors: {} };
}
export const ValidateAppSettingsFormResponse = {
    $type: "devvit.dev_portal.app_settings.ValidateAppSettingsFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            ValidateAppSettingsFormResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateAppSettingsFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    const entry2 = ValidateAppSettingsFormResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.errors[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        obj.errors = {};
        if (message.errors) {
            Object.entries(message.errors).forEach(([k, v]) => {
                obj.errors[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateAppSettingsFormResponse();
        message.success = object.success ?? false;
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.ValidateAppSettingsFormResponse", ValidateAppSettingsFormResponse);
function createBaseValidateAppSettingsFormResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const ValidateAppSettingsFormResponse_ErrorsEntry = {
    $type: "devvit.dev_portal.app_settings.ValidateAppSettingsFormResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateAppSettingsFormResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateAppSettingsFormResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.app_settings.ValidateAppSettingsFormResponse.ErrorsEntry", ValidateAppSettingsFormResponse_ErrorsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

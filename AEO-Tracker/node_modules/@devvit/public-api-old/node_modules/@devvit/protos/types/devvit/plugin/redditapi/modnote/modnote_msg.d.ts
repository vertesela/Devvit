/**
 * #modnote_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** Requests */
export interface DeleteNotesRequest {
    /** subreddit name without the r/ */
    subreddit: string;
    /** a unique ID for the note to be deleted (should have a ModNote_ prefix) */
    noteId: string;
    /** account username */
    user: string;
}
export interface GetNotesRequest {
    /** subreddit name without the r/ */
    subreddit: string;
    /** (optional) an encoded string used for pagination with mod notes */
    before?: string;
    /**
     * (optional) one of (NOTE, APPROVAL, REMOVAL, BAN, MUTE, INVITE, SPAM, CONTENT_CHANGE,
     * MOD_ACTION, ALL), to be used for querying specific types of mod notes (default: all)
     */
    filter?: string;
    /** (optional) the number of mod notes to return in the response payload (default: 25, max: 100) */
    limit?: number;
    /** account username */
    user: string;
}
export interface PostNotesRequest {
    subreddit: string;
    label: string;
    note: string;
    redditId?: string;
    user: string;
}
export interface RecentNotesRequest {
    /** a comma delimited list of subreddits by name (e.g. 'pics,worldnews') */
    subreddits: string;
    /** a comma delimited list of usernames (e.g. 'foo,bar') */
    users: string;
}
export interface PostRemovalNoteRequest {
    /** list of thing ids */
    itemIds: string[];
    /** id of a Removal Reason - you can leave this as an empty string if you don't have one */
    reasonId: string;
    /** the reason for removal (maximum 100 characters) */
    modNote?: string;
}
/** Responses */
export interface ModNotesResponse {
    modNotes: ModNoteObject[];
    startCursor?: string;
    endCursor?: string;
    hasNextPage?: boolean;
}
export interface DeleteNotesResponse {
    deleted?: boolean;
}
export interface ModNoteObject {
    subredditId?: string;
    operatorId?: string;
    modActionData?: ModNoteObject_ModActionData;
    userNoteData?: ModNoteObject_UserNoteData;
    subreddit?: string;
    user?: string;
    operator?: string;
    id?: string;
    userId?: string;
    createdAt?: number;
    cursor?: string;
    type?: string;
}
export interface ModNoteObject_ModActionData {
    action?: string;
    redditId?: string;
    details?: string;
    description?: string;
}
export interface ModNoteObject_UserNoteData {
    note?: string;
    redditId?: string;
    label?: string;
}
export interface PostModNotesResponse {
    created?: ModNoteObject;
}
export declare const DeleteNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.DeleteNotesRequest";
    encode(message: DeleteNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteNotesRequest;
    fromJSON(object: any): DeleteNotesRequest;
    toJSON(message: DeleteNotesRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
        noteId?: string | undefined;
        user?: string | undefined;
    } & {
        subreddit?: string | undefined;
        noteId?: string | undefined;
        user?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DeleteNotesRequest>]: never; }>(object: I): DeleteNotesRequest;
};
export declare const GetNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.GetNotesRequest";
    encode(message: GetNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetNotesRequest;
    fromJSON(object: any): GetNotesRequest;
    toJSON(message: GetNotesRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
        before?: string | undefined;
        filter?: string | undefined;
        limit?: number | undefined;
        user?: string | undefined;
    } & {
        subreddit?: string | undefined;
        before?: string | undefined;
        filter?: string | undefined;
        limit?: number | undefined;
        user?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof GetNotesRequest>]: never; }>(object: I): GetNotesRequest;
};
export declare const PostNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.PostNotesRequest";
    encode(message: PostNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostNotesRequest;
    fromJSON(object: any): PostNotesRequest;
    toJSON(message: PostNotesRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
        label?: string | undefined;
        note?: string | undefined;
        redditId?: string | undefined;
        user?: string | undefined;
    } & {
        subreddit?: string | undefined;
        label?: string | undefined;
        note?: string | undefined;
        redditId?: string | undefined;
        user?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof PostNotesRequest>]: never; }>(object: I): PostNotesRequest;
};
export declare const RecentNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.RecentNotesRequest";
    encode(message: RecentNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RecentNotesRequest;
    fromJSON(object: any): RecentNotesRequest;
    toJSON(message: RecentNotesRequest): unknown;
    fromPartial<I extends {
        subreddits?: string | undefined;
        users?: string | undefined;
    } & {
        subreddits?: string | undefined;
        users?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RecentNotesRequest>]: never; }>(object: I): RecentNotesRequest;
};
export declare const PostRemovalNoteRequest: {
    $type: "devvit.plugin.redditapi.modnote.PostRemovalNoteRequest";
    encode(message: PostRemovalNoteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostRemovalNoteRequest;
    fromJSON(object: any): PostRemovalNoteRequest;
    toJSON(message: PostRemovalNoteRequest): unknown;
    fromPartial<I extends {
        itemIds?: string[] | undefined;
        reasonId?: string | undefined;
        modNote?: string | undefined;
    } & {
        itemIds?: (string[] & string[] & { [K in Exclude<keyof I["itemIds"], "$type" | keyof string[]>]: never; }) | undefined;
        reasonId?: string | undefined;
        modNote?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof PostRemovalNoteRequest>]: never; }>(object: I): PostRemovalNoteRequest;
};
export declare const ModNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
    encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNotesResponse;
    fromJSON(object: any): ModNotesResponse;
    toJSON(message: ModNotesResponse): unknown;
    fromPartial<I extends {
        modNotes?: {
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        }[] | undefined;
        startCursor?: string | undefined;
        endCursor?: string | undefined;
        hasNextPage?: boolean | undefined;
    } & {
        modNotes?: ({
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        }[] & ({
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        } & {
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: ({
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } & {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } & { [K in Exclude<keyof I["modNotes"][number]["modActionData"], "$type" | keyof ModNoteObject_ModActionData>]: never; }) | undefined;
            userNoteData?: ({
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } & {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } & { [K_1 in Exclude<keyof I["modNotes"][number]["userNoteData"], "$type" | keyof ModNoteObject_UserNoteData>]: never; }) | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        } & { [K_2 in Exclude<keyof I["modNotes"][number], "$type" | keyof ModNoteObject>]: never; })[] & { [K_3 in Exclude<keyof I["modNotes"], "$type" | keyof {
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        }[]>]: never; }) | undefined;
        startCursor?: string | undefined;
        endCursor?: string | undefined;
        hasNextPage?: boolean | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | keyof ModNotesResponse>]: never; }>(object: I): ModNotesResponse;
};
export declare const DeleteNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.DeleteNotesResponse";
    encode(message: DeleteNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteNotesResponse;
    fromJSON(object: any): DeleteNotesResponse;
    toJSON(message: DeleteNotesResponse): unknown;
    fromPartial<I extends {
        deleted?: boolean | undefined;
    } & {
        deleted?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | "deleted">]: never; }>(object: I): DeleteNotesResponse;
};
export declare const ModNoteObject: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject";
    encode(message: ModNoteObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject;
    fromJSON(object: any): ModNoteObject;
    toJSON(message: ModNoteObject): unknown;
    fromPartial<I extends {
        subredditId?: string | undefined;
        operatorId?: string | undefined;
        modActionData?: {
            action?: string | undefined;
            redditId?: string | undefined;
            details?: string | undefined;
            description?: string | undefined;
        } | undefined;
        userNoteData?: {
            note?: string | undefined;
            redditId?: string | undefined;
            label?: string | undefined;
        } | undefined;
        subreddit?: string | undefined;
        user?: string | undefined;
        operator?: string | undefined;
        id?: string | undefined;
        userId?: string | undefined;
        createdAt?: number | undefined;
        cursor?: string | undefined;
        type?: string | undefined;
    } & {
        subredditId?: string | undefined;
        operatorId?: string | undefined;
        modActionData?: ({
            action?: string | undefined;
            redditId?: string | undefined;
            details?: string | undefined;
            description?: string | undefined;
        } & {
            action?: string | undefined;
            redditId?: string | undefined;
            details?: string | undefined;
            description?: string | undefined;
        } & { [K in Exclude<keyof I["modActionData"], "$type" | keyof ModNoteObject_ModActionData>]: never; }) | undefined;
        userNoteData?: ({
            note?: string | undefined;
            redditId?: string | undefined;
            label?: string | undefined;
        } & {
            note?: string | undefined;
            redditId?: string | undefined;
            label?: string | undefined;
        } & { [K_1 in Exclude<keyof I["userNoteData"], "$type" | keyof ModNoteObject_UserNoteData>]: never; }) | undefined;
        subreddit?: string | undefined;
        user?: string | undefined;
        operator?: string | undefined;
        id?: string | undefined;
        userId?: string | undefined;
        createdAt?: number | undefined;
        cursor?: string | undefined;
        type?: string | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ModNoteObject>]: never; }>(object: I): ModNoteObject;
};
export declare const ModNoteObject_ModActionData: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject.ModActionData";
    encode(message: ModNoteObject_ModActionData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject_ModActionData;
    fromJSON(object: any): ModNoteObject_ModActionData;
    toJSON(message: ModNoteObject_ModActionData): unknown;
    fromPartial<I extends {
        action?: string | undefined;
        redditId?: string | undefined;
        details?: string | undefined;
        description?: string | undefined;
    } & {
        action?: string | undefined;
        redditId?: string | undefined;
        details?: string | undefined;
        description?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ModNoteObject_ModActionData>]: never; }>(object: I): ModNoteObject_ModActionData;
};
export declare const ModNoteObject_UserNoteData: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject.UserNoteData";
    encode(message: ModNoteObject_UserNoteData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject_UserNoteData;
    fromJSON(object: any): ModNoteObject_UserNoteData;
    toJSON(message: ModNoteObject_UserNoteData): unknown;
    fromPartial<I extends {
        note?: string | undefined;
        redditId?: string | undefined;
        label?: string | undefined;
    } & {
        note?: string | undefined;
        redditId?: string | undefined;
        label?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ModNoteObject_UserNoteData>]: never; }>(object: I): ModNoteObject_UserNoteData;
};
export declare const PostModNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.PostModNotesResponse";
    encode(message: PostModNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostModNotesResponse;
    fromJSON(object: any): PostModNotesResponse;
    toJSON(message: PostModNotesResponse): unknown;
    fromPartial<I extends {
        created?: {
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        } | undefined;
    } & {
        created?: ({
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } | undefined;
            userNoteData?: {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        } & {
            subredditId?: string | undefined;
            operatorId?: string | undefined;
            modActionData?: ({
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } & {
                action?: string | undefined;
                redditId?: string | undefined;
                details?: string | undefined;
                description?: string | undefined;
            } & { [K in Exclude<keyof I["created"]["modActionData"], "$type" | keyof ModNoteObject_ModActionData>]: never; }) | undefined;
            userNoteData?: ({
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } & {
                note?: string | undefined;
                redditId?: string | undefined;
                label?: string | undefined;
            } & { [K_1 in Exclude<keyof I["created"]["userNoteData"], "$type" | keyof ModNoteObject_UserNoteData>]: never; }) | undefined;
            subreddit?: string | undefined;
            user?: string | undefined;
            operator?: string | undefined;
            id?: string | undefined;
            userId?: string | undefined;
            createdAt?: number | undefined;
            cursor?: string | undefined;
            type?: string | undefined;
        } & { [K_2 in Exclude<keyof I["created"], "$type" | keyof ModNoteObject>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "created">]: never; }>(object: I): PostModNotesResponse;
};
//# sourceMappingURL=modnote_msg.d.ts.map
/**
 * #post_guidance.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export declare enum DiscussionType {
    NULL_VALUE = 0,
    CHAT = 1,
    UNRECOGNIZED = -1
}
export declare function discussionTypeFromJSON(object: any): DiscussionType;
export declare function discussionTypeToJSON(object: DiscussionType): number;
export declare enum PostType {
    UNKNOWN = 0,
    LINK = 1,
    TEXT = 2,
    LINK_TEXT = 3,
    MEDIA_UPLOAD = 4,
    POLL = 5,
    CROSSPOST = 6,
    GALLERY = 7,
    IMAGE = 9,
    VIDEO = 10,
    UNRECOGNIZED = -1
}
export declare function postTypeFromJSON(object: any): PostType;
export declare function postTypeToJSON(object: PostType): number;
export declare enum MediaType {
    MEDIA_UNKNOWN = 0,
    MEDIA_IMAGE = 1,
    MEDIA_VIDEO = 2,
    MEDIA_VIDEOGIF = 3,
    MEDIA_STREAMING = 4,
    UNRECOGNIZED = -1
}
export declare function mediaTypeFromJSON(object: any): MediaType;
export declare function mediaTypeToJSON(object: MediaType): number;
export interface PostContent {
    url?: string;
    body?: string;
    isRtjson?: boolean;
    crosspostLinkId?: string;
    mediaType: MediaType;
    isUserUpload?: boolean;
    galleryItems: GalleryItem[];
}
export interface PostMetadata {
    title?: string;
    subredditId?: string;
    userId?: string;
    postType: PostType;
    isLocked?: boolean;
    isNsfw?: boolean;
    isOriginalContent?: boolean;
    isReceivingReplies?: boolean;
    isSpoiler?: boolean;
    isUnlisted?: boolean;
    flairId?: string;
    flairText?: string;
    eventStart?: number;
    eventEnd?: number;
    discussionType: DiscussionType;
    collectionId?: string;
    ip?: string;
    isPromoted?: boolean;
}
export interface GalleryItem {
    id?: string;
    mediaId?: string;
    caption?: string;
    outboundUrl?: string;
    isDeleted?: boolean;
    callToAction?: string;
    displayUrl?: string;
    product?: Product;
}
export interface Product {
    title?: string;
    price?: string;
    description?: string;
}
export interface ValidatePostRequirementsRequest {
    postContent?: PostContent;
    postMetadata?: PostMetadata;
}
export interface ValidationError {
    reason?: string;
    field?: string;
    shortName?: string;
}
export interface ValidatePostRequirementsResponse {
    errors: ValidationError[];
}
export declare const PostContent: {
    $type: "devvit.reddit.post_guidance.v1alpha.PostContent";
    encode(message: PostContent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostContent;
    fromJSON(object: any): PostContent;
    toJSON(message: PostContent): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        body?: string | undefined;
        isRtjson?: boolean | undefined;
        crosspostLinkId?: string | undefined;
        mediaType?: MediaType | undefined;
        isUserUpload?: boolean | undefined;
        galleryItems?: {
            id?: string | undefined;
            mediaId?: string | undefined;
            caption?: string | undefined;
            outboundUrl?: string | undefined;
            isDeleted?: boolean | undefined;
            callToAction?: string | undefined;
            displayUrl?: string | undefined;
            product?: {
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        url?: string | undefined;
        body?: string | undefined;
        isRtjson?: boolean | undefined;
        crosspostLinkId?: string | undefined;
        mediaType?: MediaType | undefined;
        isUserUpload?: boolean | undefined;
        galleryItems?: ({
            id?: string | undefined;
            mediaId?: string | undefined;
            caption?: string | undefined;
            outboundUrl?: string | undefined;
            isDeleted?: boolean | undefined;
            callToAction?: string | undefined;
            displayUrl?: string | undefined;
            product?: {
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[] & ({
            id?: string | undefined;
            mediaId?: string | undefined;
            caption?: string | undefined;
            outboundUrl?: string | undefined;
            isDeleted?: boolean | undefined;
            callToAction?: string | undefined;
            displayUrl?: string | undefined;
            product?: {
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } | undefined;
        } & {
            id?: string | undefined;
            mediaId?: string | undefined;
            caption?: string | undefined;
            outboundUrl?: string | undefined;
            isDeleted?: boolean | undefined;
            callToAction?: string | undefined;
            displayUrl?: string | undefined;
            product?: ({
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } & {
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } & { [K in Exclude<keyof I["galleryItems"][number]["product"], "$type" | keyof Product>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["galleryItems"][number], "$type" | keyof GalleryItem>]: never; })[] & { [K_2 in Exclude<keyof I["galleryItems"], "$type" | keyof {
            id?: string | undefined;
            mediaId?: string | undefined;
            caption?: string | undefined;
            outboundUrl?: string | undefined;
            isDeleted?: boolean | undefined;
            callToAction?: string | undefined;
            displayUrl?: string | undefined;
            product?: {
                title?: string | undefined;
                price?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof PostContent>]: never; }>(object: I): PostContent;
};
export declare const PostMetadata: {
    $type: "devvit.reddit.post_guidance.v1alpha.PostMetadata";
    encode(message: PostMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostMetadata;
    fromJSON(object: any): PostMetadata;
    toJSON(message: PostMetadata): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        subredditId?: string | undefined;
        userId?: string | undefined;
        postType?: PostType | undefined;
        isLocked?: boolean | undefined;
        isNsfw?: boolean | undefined;
        isOriginalContent?: boolean | undefined;
        isReceivingReplies?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        isUnlisted?: boolean | undefined;
        flairId?: string | undefined;
        flairText?: string | undefined;
        eventStart?: number | undefined;
        eventEnd?: number | undefined;
        discussionType?: DiscussionType | undefined;
        collectionId?: string | undefined;
        ip?: string | undefined;
        isPromoted?: boolean | undefined;
    } & {
        title?: string | undefined;
        subredditId?: string | undefined;
        userId?: string | undefined;
        postType?: PostType | undefined;
        isLocked?: boolean | undefined;
        isNsfw?: boolean | undefined;
        isOriginalContent?: boolean | undefined;
        isReceivingReplies?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        isUnlisted?: boolean | undefined;
        flairId?: string | undefined;
        flairText?: string | undefined;
        eventStart?: number | undefined;
        eventEnd?: number | undefined;
        discussionType?: DiscussionType | undefined;
        collectionId?: string | undefined;
        ip?: string | undefined;
        isPromoted?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof PostMetadata>]: never; }>(object: I): PostMetadata;
};
export declare const GalleryItem: {
    $type: "devvit.reddit.post_guidance.v1alpha.GalleryItem";
    encode(message: GalleryItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GalleryItem;
    fromJSON(object: any): GalleryItem;
    toJSON(message: GalleryItem): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        mediaId?: string | undefined;
        caption?: string | undefined;
        outboundUrl?: string | undefined;
        isDeleted?: boolean | undefined;
        callToAction?: string | undefined;
        displayUrl?: string | undefined;
        product?: {
            title?: string | undefined;
            price?: string | undefined;
            description?: string | undefined;
        } | undefined;
    } & {
        id?: string | undefined;
        mediaId?: string | undefined;
        caption?: string | undefined;
        outboundUrl?: string | undefined;
        isDeleted?: boolean | undefined;
        callToAction?: string | undefined;
        displayUrl?: string | undefined;
        product?: ({
            title?: string | undefined;
            price?: string | undefined;
            description?: string | undefined;
        } & {
            title?: string | undefined;
            price?: string | undefined;
            description?: string | undefined;
        } & { [K in Exclude<keyof I["product"], "$type" | keyof Product>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof GalleryItem>]: never; }>(object: I): GalleryItem;
};
export declare const Product: {
    $type: "devvit.reddit.post_guidance.v1alpha.Product";
    encode(message: Product, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Product;
    fromJSON(object: any): Product;
    toJSON(message: Product): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        price?: string | undefined;
        description?: string | undefined;
    } & {
        title?: string | undefined;
        price?: string | undefined;
        description?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Product>]: never; }>(object: I): Product;
};
export declare const ValidatePostRequirementsRequest: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsRequest";
    encode(message: ValidatePostRequirementsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsRequest;
    fromJSON(object: any): ValidatePostRequirementsRequest;
    toJSON(message: ValidatePostRequirementsRequest): unknown;
    fromPartial<I extends {
        postContent?: {
            url?: string | undefined;
            body?: string | undefined;
            isRtjson?: boolean | undefined;
            crosspostLinkId?: string | undefined;
            mediaType?: MediaType | undefined;
            isUserUpload?: boolean | undefined;
            galleryItems?: {
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
        postMetadata?: {
            title?: string | undefined;
            subredditId?: string | undefined;
            userId?: string | undefined;
            postType?: PostType | undefined;
            isLocked?: boolean | undefined;
            isNsfw?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isReceivingReplies?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            isUnlisted?: boolean | undefined;
            flairId?: string | undefined;
            flairText?: string | undefined;
            eventStart?: number | undefined;
            eventEnd?: number | undefined;
            discussionType?: DiscussionType | undefined;
            collectionId?: string | undefined;
            ip?: string | undefined;
            isPromoted?: boolean | undefined;
        } | undefined;
    } & {
        postContent?: ({
            url?: string | undefined;
            body?: string | undefined;
            isRtjson?: boolean | undefined;
            crosspostLinkId?: string | undefined;
            mediaType?: MediaType | undefined;
            isUserUpload?: boolean | undefined;
            galleryItems?: {
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            url?: string | undefined;
            body?: string | undefined;
            isRtjson?: boolean | undefined;
            crosspostLinkId?: string | undefined;
            mediaType?: MediaType | undefined;
            isUserUpload?: boolean | undefined;
            galleryItems?: ({
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] & ({
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            } & {
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: ({
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } & {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } & { [K in Exclude<keyof I["postContent"]["galleryItems"][number]["product"], "$type" | keyof Product>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["postContent"]["galleryItems"][number], "$type" | keyof GalleryItem>]: never; })[] & { [K_2 in Exclude<keyof I["postContent"]["galleryItems"], "$type" | keyof {
                id?: string | undefined;
                mediaId?: string | undefined;
                caption?: string | undefined;
                outboundUrl?: string | undefined;
                isDeleted?: boolean | undefined;
                callToAction?: string | undefined;
                displayUrl?: string | undefined;
                product?: {
                    title?: string | undefined;
                    price?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["postContent"], "$type" | keyof PostContent>]: never; }) | undefined;
        postMetadata?: ({
            title?: string | undefined;
            subredditId?: string | undefined;
            userId?: string | undefined;
            postType?: PostType | undefined;
            isLocked?: boolean | undefined;
            isNsfw?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isReceivingReplies?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            isUnlisted?: boolean | undefined;
            flairId?: string | undefined;
            flairText?: string | undefined;
            eventStart?: number | undefined;
            eventEnd?: number | undefined;
            discussionType?: DiscussionType | undefined;
            collectionId?: string | undefined;
            ip?: string | undefined;
            isPromoted?: boolean | undefined;
        } & {
            title?: string | undefined;
            subredditId?: string | undefined;
            userId?: string | undefined;
            postType?: PostType | undefined;
            isLocked?: boolean | undefined;
            isNsfw?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isReceivingReplies?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            isUnlisted?: boolean | undefined;
            flairId?: string | undefined;
            flairText?: string | undefined;
            eventStart?: number | undefined;
            eventEnd?: number | undefined;
            discussionType?: DiscussionType | undefined;
            collectionId?: string | undefined;
            ip?: string | undefined;
            isPromoted?: boolean | undefined;
        } & { [K_4 in Exclude<keyof I["postMetadata"], "$type" | keyof PostMetadata>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof ValidatePostRequirementsRequest>]: never; }>(object: I): ValidatePostRequirementsRequest;
};
export declare const ValidationError: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidationError";
    encode(message: ValidationError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidationError;
    fromJSON(object: any): ValidationError;
    toJSON(message: ValidationError): unknown;
    fromPartial<I extends {
        reason?: string | undefined;
        field?: string | undefined;
        shortName?: string | undefined;
    } & {
        reason?: string | undefined;
        field?: string | undefined;
        shortName?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ValidationError>]: never; }>(object: I): ValidationError;
};
export declare const ValidatePostRequirementsResponse: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsResponse";
    encode(message: ValidatePostRequirementsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsResponse;
    fromJSON(object: any): ValidatePostRequirementsResponse;
    toJSON(message: ValidatePostRequirementsResponse): unknown;
    fromPartial<I extends {
        errors?: {
            reason?: string | undefined;
            field?: string | undefined;
            shortName?: string | undefined;
        }[] | undefined;
    } & {
        errors?: ({
            reason?: string | undefined;
            field?: string | undefined;
            shortName?: string | undefined;
        }[] & ({
            reason?: string | undefined;
            field?: string | undefined;
            shortName?: string | undefined;
        } & {
            reason?: string | undefined;
            field?: string | undefined;
            shortName?: string | undefined;
        } & { [K in Exclude<keyof I["errors"][number], "$type" | keyof ValidationError>]: never; })[] & { [K_1 in Exclude<keyof I["errors"], "$type" | keyof {
            reason?: string | undefined;
            field?: string | undefined;
            shortName?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "errors">]: never; }>(object: I): ValidatePostRequirementsResponse;
};
export interface PostGuidance {
    GetPostGuidance(request: ValidatePostRequirementsRequest, metadata?: Metadata): Promise<ValidatePostRequirementsResponse>;
}
export declare class PostGuidanceClientImpl implements PostGuidance {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetPostGuidance(request: ValidatePostRequirementsRequest): Promise<ValidatePostRequirementsResponse>;
}
export type PostGuidanceDefinition = typeof PostGuidanceDefinition;
export declare const PostGuidanceDefinition: {
    readonly name: "PostGuidance";
    readonly fullName: "devvit.reddit.post_guidance.v1alpha.PostGuidance";
    readonly methods: {
        readonly getPostGuidance: {
            readonly name: "GetPostGuidance";
            readonly requestType: {
                $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsRequest";
                encode(message: ValidatePostRequirementsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsRequest;
                fromJSON(object: any): ValidatePostRequirementsRequest;
                toJSON(message: ValidatePostRequirementsRequest): unknown;
                fromPartial<I extends {
                    postContent?: {
                        url?: string | undefined;
                        body?: string | undefined;
                        isRtjson?: boolean | undefined;
                        crosspostLinkId?: string | undefined;
                        mediaType?: MediaType | undefined;
                        isUserUpload?: boolean | undefined;
                        galleryItems?: {
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                    postMetadata?: {
                        title?: string | undefined;
                        subredditId?: string | undefined;
                        userId?: string | undefined;
                        postType?: PostType | undefined;
                        isLocked?: boolean | undefined;
                        isNsfw?: boolean | undefined;
                        isOriginalContent?: boolean | undefined;
                        isReceivingReplies?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        isUnlisted?: boolean | undefined;
                        flairId?: string | undefined;
                        flairText?: string | undefined;
                        eventStart?: number | undefined;
                        eventEnd?: number | undefined;
                        discussionType?: DiscussionType | undefined;
                        collectionId?: string | undefined;
                        ip?: string | undefined;
                        isPromoted?: boolean | undefined;
                    } | undefined;
                } & {
                    postContent?: ({
                        url?: string | undefined;
                        body?: string | undefined;
                        isRtjson?: boolean | undefined;
                        crosspostLinkId?: string | undefined;
                        mediaType?: MediaType | undefined;
                        isUserUpload?: boolean | undefined;
                        galleryItems?: {
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[] | undefined;
                    } & {
                        url?: string | undefined;
                        body?: string | undefined;
                        isRtjson?: boolean | undefined;
                        crosspostLinkId?: string | undefined;
                        mediaType?: MediaType | undefined;
                        isUserUpload?: boolean | undefined;
                        galleryItems?: ({
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[] & ({
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        } & {
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: ({
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } & {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } & { [K in Exclude<keyof I["postContent"]["galleryItems"][number]["product"], "$type" | keyof Product>]: never; }) | undefined;
                        } & { [K_1 in Exclude<keyof I["postContent"]["galleryItems"][number], "$type" | keyof GalleryItem>]: never; })[] & { [K_2 in Exclude<keyof I["postContent"]["galleryItems"], "$type" | keyof {
                            id?: string | undefined;
                            mediaId?: string | undefined;
                            caption?: string | undefined;
                            outboundUrl?: string | undefined;
                            isDeleted?: boolean | undefined;
                            callToAction?: string | undefined;
                            displayUrl?: string | undefined;
                            product?: {
                                title?: string | undefined;
                                price?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_3 in Exclude<keyof I["postContent"], "$type" | keyof PostContent>]: never; }) | undefined;
                    postMetadata?: ({
                        title?: string | undefined;
                        subredditId?: string | undefined;
                        userId?: string | undefined;
                        postType?: PostType | undefined;
                        isLocked?: boolean | undefined;
                        isNsfw?: boolean | undefined;
                        isOriginalContent?: boolean | undefined;
                        isReceivingReplies?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        isUnlisted?: boolean | undefined;
                        flairId?: string | undefined;
                        flairText?: string | undefined;
                        eventStart?: number | undefined;
                        eventEnd?: number | undefined;
                        discussionType?: DiscussionType | undefined;
                        collectionId?: string | undefined;
                        ip?: string | undefined;
                        isPromoted?: boolean | undefined;
                    } & {
                        title?: string | undefined;
                        subredditId?: string | undefined;
                        userId?: string | undefined;
                        postType?: PostType | undefined;
                        isLocked?: boolean | undefined;
                        isNsfw?: boolean | undefined;
                        isOriginalContent?: boolean | undefined;
                        isReceivingReplies?: boolean | undefined;
                        isSpoiler?: boolean | undefined;
                        isUnlisted?: boolean | undefined;
                        flairId?: string | undefined;
                        flairText?: string | undefined;
                        eventStart?: number | undefined;
                        eventEnd?: number | undefined;
                        discussionType?: DiscussionType | undefined;
                        collectionId?: string | undefined;
                        ip?: string | undefined;
                        isPromoted?: boolean | undefined;
                    } & { [K_4 in Exclude<keyof I["postMetadata"], "$type" | keyof PostMetadata>]: never; }) | undefined;
                } & { [K_5 in Exclude<keyof I, "$type" | keyof ValidatePostRequirementsRequest>]: never; }>(object: I): ValidatePostRequirementsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsResponse";
                encode(message: ValidatePostRequirementsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsResponse;
                fromJSON(object: any): ValidatePostRequirementsResponse;
                toJSON(message: ValidatePostRequirementsResponse): unknown;
                fromPartial<I_1 extends {
                    errors?: {
                        reason?: string | undefined;
                        field?: string | undefined;
                        shortName?: string | undefined;
                    }[] | undefined;
                } & {
                    errors?: ({
                        reason?: string | undefined;
                        field?: string | undefined;
                        shortName?: string | undefined;
                    }[] & ({
                        reason?: string | undefined;
                        field?: string | undefined;
                        shortName?: string | undefined;
                    } & {
                        reason?: string | undefined;
                        field?: string | undefined;
                        shortName?: string | undefined;
                    } & { [K in Exclude<keyof I["errors"][number], "$type" | keyof ValidationError>]: never; })[] & { [K_1 in Exclude<keyof I["errors"], "$type" | keyof {
                        reason?: string | undefined;
                        field?: string | undefined;
                        shortName?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | "errors">]: never; }>(object: I_1): ValidatePostRequirementsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=post_guidance.d.ts.map
/**
 * #toast.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export declare enum ToastAppearance {
    NEUTRAL = 0,
    SUCCESS = 1,
    UNRECOGNIZED = -1
}
export declare function toastAppearanceFromJSON(object: any): ToastAppearance;
export declare function toastAppearanceToJSON(object: ToastAppearance): number;
export interface ToastLeadingElement {
    /** Icon name */
    icon: string | undefined;
    /** Emoji name */
    emoji: string | undefined;
    /** Username */
    avatar: string | undefined;
}
export interface ToastTrailingElement {
    /** Text button */
    label: string | undefined;
    /** Icon button */
    icon: string | undefined;
}
export interface Toast {
    /** Text to display on the toast */
    text: string;
    /** Additional styling based on what this toast represents */
    appearance?: ToastAppearance | undefined;
    /** Content to display before the text */
    leadingElement?: ToastLeadingElement | undefined;
    /** Content to display after the text */
    trailingElement?: ToastTrailingElement | undefined;
}
export declare const ToastLeadingElement: {
    $type: "devvit.ui.toast.ToastLeadingElement";
    encode(message: ToastLeadingElement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastLeadingElement;
    fromJSON(object: any): ToastLeadingElement;
    toJSON(message: ToastLeadingElement): unknown;
    fromPartial<I extends {
        icon?: string | undefined;
        emoji?: string | undefined;
        avatar?: string | undefined;
    } & {
        icon?: string | undefined;
        emoji?: string | undefined;
        avatar?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ToastLeadingElement>]: never; }>(object: I): ToastLeadingElement;
};
export declare const ToastTrailingElement: {
    $type: "devvit.ui.toast.ToastTrailingElement";
    encode(message: ToastTrailingElement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastTrailingElement;
    fromJSON(object: any): ToastTrailingElement;
    toJSON(message: ToastTrailingElement): unknown;
    fromPartial<I extends {
        label?: string | undefined;
        icon?: string | undefined;
    } & {
        label?: string | undefined;
        icon?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ToastTrailingElement>]: never; }>(object: I): ToastTrailingElement;
};
export declare const Toast: {
    $type: "devvit.ui.toast.Toast";
    encode(message: Toast, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Toast;
    fromJSON(object: any): Toast;
    toJSON(message: Toast): unknown;
    fromPartial<I extends {
        text?: string | undefined;
        appearance?: ToastAppearance | undefined;
        leadingElement?: {
            icon?: string | undefined;
            emoji?: string | undefined;
            avatar?: string | undefined;
        } | undefined;
        trailingElement?: {
            label?: string | undefined;
            icon?: string | undefined;
        } | undefined;
    } & {
        text?: string | undefined;
        appearance?: ToastAppearance | undefined;
        leadingElement?: ({
            icon?: string | undefined;
            emoji?: string | undefined;
            avatar?: string | undefined;
        } & {
            icon?: string | undefined;
            emoji?: string | undefined;
            avatar?: string | undefined;
        } & { [K in Exclude<keyof I["leadingElement"], "$type" | keyof ToastLeadingElement>]: never; }) | undefined;
        trailingElement?: ({
            label?: string | undefined;
            icon?: string | undefined;
        } & {
            label?: string | undefined;
            icon?: string | undefined;
        } & { [K_1 in Exclude<keyof I["trailingElement"], "$type" | keyof ToastTrailingElement>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof Toast>]: never; }>(object: I): Toast;
};
//# sourceMappingURL=toast.d.ts.map
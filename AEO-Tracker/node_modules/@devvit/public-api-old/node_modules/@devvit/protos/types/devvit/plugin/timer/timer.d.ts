/**
 * #timer.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface TimerMessage {
    durationMillis: number;
}
export declare const TimerMessage: {
    $type: "devvit.plugin.timer.TimerMessage";
    encode(message: TimerMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimerMessage;
    fromJSON(object: any): TimerMessage;
    toJSON(message: TimerMessage): unknown;
    fromPartial<I extends {
        durationMillis?: number | undefined;
    } & {
        durationMillis?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | "durationMillis">]: never; }>(object: I): TimerMessage;
};
export interface Timer {
    Wait(request: TimerMessage, metadata?: Metadata): Promise<Empty>;
}
export declare class TimerClientImpl implements Timer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Wait(request: TimerMessage): Promise<Empty>;
}
export type TimerDefinition = typeof TimerDefinition;
export declare const TimerDefinition: {
    readonly name: "Timer";
    readonly fullName: "devvit.plugin.timer.Timer";
    readonly methods: {
        readonly wait: {
            readonly name: "Wait";
            readonly requestType: {
                $type: "devvit.plugin.timer.TimerMessage";
                encode(message: TimerMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TimerMessage;
                fromJSON(object: any): TimerMessage;
                toJSON(message: TimerMessage): unknown;
                fromPartial<I extends {
                    durationMillis?: number | undefined;
                } & {
                    durationMillis?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | "durationMillis">]: never; }>(object: I): TimerMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=timer.d.ts.map
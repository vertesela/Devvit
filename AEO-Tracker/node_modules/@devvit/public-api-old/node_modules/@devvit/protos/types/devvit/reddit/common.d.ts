/**
 * #common.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export interface AuthorFlairRichText {
    e?: string;
    t?: string;
}
/** https://github.snooguts.net/reddit/reddit-service-award/blob/f102a254636cd403627cc1125fcccab52972ea6b/award/models/award.py */
export interface Awarding {
    awardSubType?: string;
    awardType?: string;
    awardingsRequiredToGrantBenefits?: number;
    coinPrice?: number;
    coinReward?: number;
    count?: number;
    daysOfDripExtension?: number;
    daysOfPremium?: number;
    description?: string;
    endDate?: string;
    giverCoinReward?: number;
    iconFormat?: string;
    iconHeight?: number;
    iconUrl?: string;
    iconWidth?: number;
    id?: string;
    isEnabled?: boolean;
    isNew?: boolean;
    name?: string;
    pennyDonate?: number;
    pennyPrice?: number;
    resizedIcons: Awarding_Icon[];
    resizedStaticIcons: Awarding_Icon[];
    startDate?: string;
    staticIconHeight?: number;
    staticIconUrl?: string;
    staticIconWidth?: number;
    stickyDurationSeconds?: number;
    subredditCoinReward?: number;
    subredditId?: string;
    tiersByRequiredAwardings?: string;
}
export interface Awarding_Icon {
    height?: number;
    url?: string;
    width?: number;
}
export interface CommentContributionSettings {
    allowedMediaTypes: string[];
}
export interface Gildings {
    gid1?: number;
    gid2?: number;
    gid3?: number;
}
export interface MediaEmbed {
    content?: string;
    width?: number;
    height?: number;
    sandbox?: boolean;
    scrolling?: boolean;
    publicThumbnailUrl?: string;
}
export interface UserFlairRichtext {
    e?: string;
    t?: string;
}
export interface BanInfo {
    auto?: boolean;
    bannedAt?: number;
    banner?: string;
    moderatorBanned?: boolean;
    note?: string;
    unbanner?: string;
    unbannedAt?: number;
    resetUsed?: boolean;
    reasonId?: string;
    reasonTitle?: string;
    reasonMessage?: string;
    reasonBy?: string;
    modNote?: string;
    banAllTriggered?: boolean;
    subredditMessage?: string;
    removeAction: BanInfo_BanInfoAction;
}
export declare enum BanInfo_BanInfoAction {
    UNKNOWN = 0,
    SPAM = 1,
    FILTER = 2,
    REMOVE = 3,
    UNRECOGNIZED = -1
}
export declare function banInfo_BanInfoActionFromJSON(object: any): BanInfo_BanInfoAction;
export declare function banInfo_BanInfoActionToJSON(object: BanInfo_BanInfoAction): number;
export declare const AuthorFlairRichText: {
    $type: "devvit.reddit.AuthorFlairRichText";
    encode(message: AuthorFlairRichText, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthorFlairRichText;
    fromJSON(object: any): AuthorFlairRichText;
    toJSON(message: AuthorFlairRichText): unknown;
    fromPartial<I extends {
        e?: string | undefined;
        t?: string | undefined;
    } & {
        e?: string | undefined;
        t?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AuthorFlairRichText>]: never; }>(object: I): AuthorFlairRichText;
};
export declare const Awarding: {
    $type: "devvit.reddit.Awarding";
    encode(message: Awarding, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Awarding;
    fromJSON(object: any): Awarding;
    toJSON(message: Awarding): unknown;
    fromPartial<I extends {
        awardSubType?: string | undefined;
        awardType?: string | undefined;
        awardingsRequiredToGrantBenefits?: number | undefined;
        coinPrice?: number | undefined;
        coinReward?: number | undefined;
        count?: number | undefined;
        daysOfDripExtension?: number | undefined;
        daysOfPremium?: number | undefined;
        description?: string | undefined;
        endDate?: string | undefined;
        giverCoinReward?: number | undefined;
        iconFormat?: string | undefined;
        iconHeight?: number | undefined;
        iconUrl?: string | undefined;
        iconWidth?: number | undefined;
        id?: string | undefined;
        isEnabled?: boolean | undefined;
        isNew?: boolean | undefined;
        name?: string | undefined;
        pennyDonate?: number | undefined;
        pennyPrice?: number | undefined;
        resizedIcons?: {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[] | undefined;
        resizedStaticIcons?: {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[] | undefined;
        startDate?: string | undefined;
        staticIconHeight?: number | undefined;
        staticIconUrl?: string | undefined;
        staticIconWidth?: number | undefined;
        stickyDurationSeconds?: number | undefined;
        subredditCoinReward?: number | undefined;
        subredditId?: string | undefined;
        tiersByRequiredAwardings?: string | undefined;
    } & {
        awardSubType?: string | undefined;
        awardType?: string | undefined;
        awardingsRequiredToGrantBenefits?: number | undefined;
        coinPrice?: number | undefined;
        coinReward?: number | undefined;
        count?: number | undefined;
        daysOfDripExtension?: number | undefined;
        daysOfPremium?: number | undefined;
        description?: string | undefined;
        endDate?: string | undefined;
        giverCoinReward?: number | undefined;
        iconFormat?: string | undefined;
        iconHeight?: number | undefined;
        iconUrl?: string | undefined;
        iconWidth?: number | undefined;
        id?: string | undefined;
        isEnabled?: boolean | undefined;
        isNew?: boolean | undefined;
        name?: string | undefined;
        pennyDonate?: number | undefined;
        pennyPrice?: number | undefined;
        resizedIcons?: ({
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[] & ({
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        } & {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        } & { [K in Exclude<keyof I["resizedIcons"][number], "$type" | keyof Awarding_Icon>]: never; })[] & { [K_1 in Exclude<keyof I["resizedIcons"], "$type" | keyof {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[]>]: never; }) | undefined;
        resizedStaticIcons?: ({
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[] & ({
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        } & {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        } & { [K_2 in Exclude<keyof I["resizedStaticIcons"][number], "$type" | keyof Awarding_Icon>]: never; })[] & { [K_3 in Exclude<keyof I["resizedStaticIcons"], "$type" | keyof {
            height?: number | undefined;
            url?: string | undefined;
            width?: number | undefined;
        }[]>]: never; }) | undefined;
        startDate?: string | undefined;
        staticIconHeight?: number | undefined;
        staticIconUrl?: string | undefined;
        staticIconWidth?: number | undefined;
        stickyDurationSeconds?: number | undefined;
        subredditCoinReward?: number | undefined;
        subredditId?: string | undefined;
        tiersByRequiredAwardings?: string | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | keyof Awarding>]: never; }>(object: I): Awarding;
};
export declare const Awarding_Icon: {
    $type: "devvit.reddit.Awarding.Icon";
    encode(message: Awarding_Icon, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Awarding_Icon;
    fromJSON(object: any): Awarding_Icon;
    toJSON(message: Awarding_Icon): unknown;
    fromPartial<I extends {
        height?: number | undefined;
        url?: string | undefined;
        width?: number | undefined;
    } & {
        height?: number | undefined;
        url?: string | undefined;
        width?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Awarding_Icon>]: never; }>(object: I): Awarding_Icon;
};
export declare const CommentContributionSettings: {
    $type: "devvit.reddit.CommentContributionSettings";
    encode(message: CommentContributionSettings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentContributionSettings;
    fromJSON(object: any): CommentContributionSettings;
    toJSON(message: CommentContributionSettings): unknown;
    fromPartial<I extends {
        allowedMediaTypes?: string[] | undefined;
    } & {
        allowedMediaTypes?: (string[] & string[] & { [K in Exclude<keyof I["allowedMediaTypes"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "allowedMediaTypes">]: never; }>(object: I): CommentContributionSettings;
};
export declare const Gildings: {
    $type: "devvit.reddit.Gildings";
    encode(message: Gildings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Gildings;
    fromJSON(object: any): Gildings;
    toJSON(message: Gildings): unknown;
    fromPartial<I extends {
        gid1?: number | undefined;
        gid2?: number | undefined;
        gid3?: number | undefined;
    } & {
        gid1?: number | undefined;
        gid2?: number | undefined;
        gid3?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Gildings>]: never; }>(object: I): Gildings;
};
export declare const MediaEmbed: {
    $type: "devvit.reddit.MediaEmbed";
    encode(message: MediaEmbed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaEmbed;
    fromJSON(object: any): MediaEmbed;
    toJSON(message: MediaEmbed): unknown;
    fromPartial<I extends {
        content?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        sandbox?: boolean | undefined;
        scrolling?: boolean | undefined;
        publicThumbnailUrl?: string | undefined;
    } & {
        content?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        sandbox?: boolean | undefined;
        scrolling?: boolean | undefined;
        publicThumbnailUrl?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof MediaEmbed>]: never; }>(object: I): MediaEmbed;
};
export declare const UserFlairRichtext: {
    $type: "devvit.reddit.UserFlairRichtext";
    encode(message: UserFlairRichtext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFlairRichtext;
    fromJSON(object: any): UserFlairRichtext;
    toJSON(message: UserFlairRichtext): unknown;
    fromPartial<I extends {
        e?: string | undefined;
        t?: string | undefined;
    } & {
        e?: string | undefined;
        t?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UserFlairRichtext>]: never; }>(object: I): UserFlairRichtext;
};
export declare const BanInfo: {
    $type: "devvit.reddit.BanInfo";
    encode(message: BanInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BanInfo;
    fromJSON(object: any): BanInfo;
    toJSON(message: BanInfo): unknown;
    fromPartial<I extends {
        auto?: boolean | undefined;
        bannedAt?: number | undefined;
        banner?: string | undefined;
        moderatorBanned?: boolean | undefined;
        note?: string | undefined;
        unbanner?: string | undefined;
        unbannedAt?: number | undefined;
        resetUsed?: boolean | undefined;
        reasonId?: string | undefined;
        reasonTitle?: string | undefined;
        reasonMessage?: string | undefined;
        reasonBy?: string | undefined;
        modNote?: string | undefined;
        banAllTriggered?: boolean | undefined;
        subredditMessage?: string | undefined;
        removeAction?: BanInfo_BanInfoAction | undefined;
    } & {
        auto?: boolean | undefined;
        bannedAt?: number | undefined;
        banner?: string | undefined;
        moderatorBanned?: boolean | undefined;
        note?: string | undefined;
        unbanner?: string | undefined;
        unbannedAt?: number | undefined;
        resetUsed?: boolean | undefined;
        reasonId?: string | undefined;
        reasonTitle?: string | undefined;
        reasonMessage?: string | undefined;
        reasonBy?: string | undefined;
        modNote?: string | undefined;
        banAllTriggered?: boolean | undefined;
        subredditMessage?: string | undefined;
        removeAction?: BanInfo_BanInfoAction | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BanInfo>]: never; }>(object: I): BanInfo;
};
//# sourceMappingURL=common.d.ts.map
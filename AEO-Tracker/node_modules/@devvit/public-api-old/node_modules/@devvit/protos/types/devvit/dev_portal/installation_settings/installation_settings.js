/**
 * #installation_settings.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { SettingsValues } from '../../plugin/settings/v1alpha/settings.js';
import { Form } from '../../ui/form_builder/v1alpha/form.js';
function createBaseGetInstallationSettingsFormRequest() {
    return { installationId: "" };
}
export const GetInstallationSettingsFormRequest = {
    $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInstallationSettingsFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { installationId: isSet(object.installationId) ? String(object.installationId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.installationId !== undefined && (obj.installationId = message.installationId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetInstallationSettingsFormRequest();
        message.installationId = object.installationId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.GetInstallationSettingsFormRequest", GetInstallationSettingsFormRequest);
function createBaseGetInstallationSettingsFormResponse() {
    return { form: {} };
}
export const GetInstallationSettingsFormResponse = {
    $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.form).forEach(([key, value]) => {
            GetInstallationSettingsFormResponse_FormEntry.encode({ key: key, value }, writer.uint32(10).fork())
                .ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInstallationSettingsFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = GetInstallationSettingsFormResponse_FormEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.form[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            form: isObject(object.form)
                ? Object.entries(object.form).reduce((acc, [key, value]) => {
                    acc[key] = Form.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.form = {};
        if (message.form) {
            Object.entries(message.form).forEach(([k, v]) => {
                obj.form[k] = Form.toJSON(v);
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetInstallationSettingsFormResponse();
        message.form = Object.entries(object.form ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Form.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.GetInstallationSettingsFormResponse", GetInstallationSettingsFormResponse);
function createBaseGetInstallationSettingsFormResponse_FormEntry() {
    return { key: "", value: undefined };
}
export const GetInstallationSettingsFormResponse_FormEntry = {
    $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsFormResponse.FormEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Form.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInstallationSettingsFormResponse_FormEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = Form.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? Form.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? Form.toJSON(message.value) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetInstallationSettingsFormResponse_FormEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null) ? Form.fromPartial(object.value) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.GetInstallationSettingsFormResponse.FormEntry", GetInstallationSettingsFormResponse_FormEntry);
function createBaseValidateInstallationSettingsFormRequest() {
    return { installationId: "", settings: undefined };
}
export const ValidateInstallationSettingsFormRequest = {
    $type: "devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateInstallationSettingsFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationId = reader.string();
                    break;
                case 2:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            installationId: isSet(object.installationId) ? String(object.installationId) : "",
            settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.installationId !== undefined && (obj.installationId = message.installationId);
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateInstallationSettingsFormRequest();
        message.installationId = object.installationId ?? "";
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormRequest", ValidateInstallationSettingsFormRequest);
function createBaseValidateInstallationSettingsFormResponse() {
    return { success: false, errors: {} };
}
export const ValidateInstallationSettingsFormResponse = {
    $type: "devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            ValidateInstallationSettingsFormResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(18).fork())
                .ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateInstallationSettingsFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    const entry2 = ValidateInstallationSettingsFormResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.errors[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        obj.errors = {};
        if (message.errors) {
            Object.entries(message.errors).forEach(([k, v]) => {
                obj.errors[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateInstallationSettingsFormResponse();
        message.success = object.success ?? false;
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormResponse", ValidateInstallationSettingsFormResponse);
function createBaseValidateInstallationSettingsFormResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const ValidateInstallationSettingsFormResponse_ErrorsEntry = {
    $type: "devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateInstallationSettingsFormResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseValidateInstallationSettingsFormResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormResponse.ErrorsEntry", ValidateInstallationSettingsFormResponse_ErrorsEntry);
function createBaseGetInstallationSettingsRequest() {
    return { installationId: "" };
}
export const GetInstallationSettingsRequest = {
    $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInstallationSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { installationId: isSet(object.installationId) ? String(object.installationId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.installationId !== undefined && (obj.installationId = message.installationId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetInstallationSettingsRequest();
        message.installationId = object.installationId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.GetInstallationSettingsRequest", GetInstallationSettingsRequest);
function createBaseGetInstallationSettingsResponse() {
    return { settings: undefined };
}
export const GetInstallationSettingsResponse = {
    $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInstallationSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetInstallationSettingsResponse();
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.GetInstallationSettingsResponse", GetInstallationSettingsResponse);
function createBaseUpdateInstallationSettingsRequest() {
    return { installationId: "", settings: undefined };
}
export const UpdateInstallationSettingsRequest = {
    $type: "devvit.dev_portal.installation_settings.UpdateInstallationSettingsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        if (message.settings !== undefined) {
            SettingsValues.encode(message.settings, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateInstallationSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationId = reader.string();
                    break;
                case 2:
                    message.settings = SettingsValues.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            installationId: isSet(object.installationId) ? String(object.installationId) : "",
            settings: isSet(object.settings) ? SettingsValues.fromJSON(object.settings) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.installationId !== undefined && (obj.installationId = message.installationId);
        message.settings !== undefined &&
            (obj.settings = message.settings ? SettingsValues.toJSON(message.settings) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateInstallationSettingsRequest();
        message.installationId = object.installationId ?? "";
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? SettingsValues.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.UpdateInstallationSettingsRequest", UpdateInstallationSettingsRequest);
function createBaseUpdateInstallationSettingsResponse() {
    return { success: false, errors: {} };
}
export const UpdateInstallationSettingsResponse = {
    $type: "devvit.dev_portal.installation_settings.UpdateInstallationSettingsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            UpdateInstallationSettingsResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(18).fork())
                .ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateInstallationSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    const entry2 = UpdateInstallationSettingsResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.errors[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        obj.errors = {};
        if (message.errors) {
            Object.entries(message.errors).forEach(([k, v]) => {
                obj.errors[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateInstallationSettingsResponse();
        message.success = object.success ?? false;
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.UpdateInstallationSettingsResponse", UpdateInstallationSettingsResponse);
function createBaseUpdateInstallationSettingsResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const UpdateInstallationSettingsResponse_ErrorsEntry = {
    $type: "devvit.dev_portal.installation_settings.UpdateInstallationSettingsResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateInstallationSettingsResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateInstallationSettingsResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.installation_settings.UpdateInstallationSettingsResponse.ErrorsEntry", UpdateInstallationSettingsResponse_ErrorsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #postcollections_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddPostToCollectionRequest, CollectionRequest, CollectionResponse, CreateCollectionRequest, DeleteCollectionRequest, FollowCollectionRequest, RemovePostInCollectionRequest, ReorderCollectionRequest, SubredditCollectionsRequest, SubredditCollectionsResponse, UpdateCollectionDescriptionRequest, UpdateCollectionDisplayLayoutRequest, UpdateCollectionTitleRequest } from './postcollections_msg.js';
/** COLLECTIONS - https://www.reddit.com/dev/api#section_collections */
export interface PostCollections {
    /** https://www.reddit.com/dev/api/#GET_api_v1_collections_collection */
    Collection(request: CollectionRequest, metadata?: Metadata): Promise<CollectionResponse>;
    /** https://www.reddit.com/dev/api/#GET_api_v1_collections_subreddit_collections */
    SubredditCollections(request: SubredditCollectionsRequest, metadata?: Metadata): Promise<SubredditCollectionsResponse>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_create_collection */
    Create(request: CreateCollectionRequest, metadata?: Metadata): Promise<CollectionResponse>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_delete_collection */
    Delete(request: DeleteCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_add_post_to_collection */
    AddPost(request: AddPostToCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_remove_post_in_collection */
    RemovePost(request: RemovePostInCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_follow_collection */
    Follow(request: FollowCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_reorder_collection */
    Reorder(request: ReorderCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_title */
    UpdateTitle(request: UpdateCollectionTitleRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_description */
    UpdateDescription(request: UpdateCollectionDescriptionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_display_layout */
    UpdateDisplayLayout(request: UpdateCollectionDisplayLayoutRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class PostCollectionsClientImpl implements PostCollections {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Collection(request: CollectionRequest): Promise<CollectionResponse>;
    SubredditCollections(request: SubredditCollectionsRequest): Promise<SubredditCollectionsResponse>;
    Create(request: CreateCollectionRequest): Promise<CollectionResponse>;
    Delete(request: DeleteCollectionRequest): Promise<Empty>;
    AddPost(request: AddPostToCollectionRequest): Promise<Empty>;
    RemovePost(request: RemovePostInCollectionRequest): Promise<Empty>;
    Follow(request: FollowCollectionRequest): Promise<Empty>;
    Reorder(request: ReorderCollectionRequest): Promise<Empty>;
    UpdateTitle(request: UpdateCollectionTitleRequest): Promise<Empty>;
    UpdateDescription(request: UpdateCollectionDescriptionRequest): Promise<Empty>;
    UpdateDisplayLayout(request: UpdateCollectionDisplayLayoutRequest): Promise<Empty>;
}
/** COLLECTIONS - https://www.reddit.com/dev/api#section_collections */
export type PostCollectionsDefinition = typeof PostCollectionsDefinition;
export declare const PostCollectionsDefinition: {
    readonly name: "PostCollections";
    readonly fullName: "devvit.plugin.redditapi.postcollections.PostCollections";
    readonly methods: {
        /** https://www.reddit.com/dev/api/#GET_api_v1_collections_collection */
        readonly collection: {
            readonly name: "Collection";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.CollectionRequest";
                encode(message: CollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CollectionRequest;
                fromJSON(object: any): CollectionRequest;
                toJSON(message: CollectionRequest): unknown;
                fromPartial<I extends {
                    collectionId?: string | undefined;
                    includeLinks?: boolean | undefined;
                } & {
                    collectionId?: string | undefined;
                    includeLinks?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof CollectionRequest>]: never; }>(object: I): CollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.postcollections.CollectionResponse";
                encode(message: CollectionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CollectionResponse;
                fromJSON(object: any): CollectionResponse;
                toJSON(message: CollectionResponse): unknown;
                fromPartial<I_1 extends {
                    collectionId?: string | undefined;
                    subredditId?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorId?: string | undefined;
                    authorName?: string | undefined;
                    permalink?: string | undefined;
                    linkIds?: string[] | undefined;
                    primaryLinkId?: string | undefined;
                    displayLayout?: string | undefined;
                    createdAtUtc?: Date | undefined;
                    lastUpdateUtc?: Date | undefined;
                } & {
                    collectionId?: string | undefined;
                    subredditId?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorId?: string | undefined;
                    authorName?: string | undefined;
                    permalink?: string | undefined;
                    linkIds?: (string[] & string[] & { [K_1 in Exclude<keyof I_1["linkIds"], "$type" | keyof string[]>]: never; }) | undefined;
                    primaryLinkId?: string | undefined;
                    displayLayout?: string | undefined;
                    createdAtUtc?: Date | undefined;
                    lastUpdateUtc?: Date | undefined;
                } & { [K_2 in Exclude<keyof I_1, "$type" | keyof CollectionResponse>]: never; }>(object: I_1): CollectionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#GET_api_v1_collections_subreddit_collections */
        readonly subredditCollections: {
            readonly name: "SubredditCollections";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsRequest";
                encode(message: SubredditCollectionsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditCollectionsRequest;
                fromJSON(object: any): SubredditCollectionsRequest;
                toJSON(message: SubredditCollectionsRequest): unknown;
                fromPartial<I_2 extends {
                    srFullname?: string | undefined;
                } & {
                    srFullname?: string | undefined;
                } & { [K_3 in Exclude<keyof I_2, "$type" | "srFullname">]: never; }>(object: I_2): SubredditCollectionsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsResponse";
                encode(message: SubredditCollectionsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditCollectionsResponse;
                fromJSON(object: any): SubredditCollectionsResponse;
                toJSON(message: SubredditCollectionsResponse): unknown;
                fromPartial<I_3 extends {
                    collections?: {
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[] | undefined;
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    }[] | undefined;
                } & {
                    collections?: ({
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[] | undefined;
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    }[] & ({
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[] | undefined;
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    } & {
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: (string[] & string[] & { [K_4 in Exclude<keyof I_3["collections"][number]["linkIds"], "$type" | keyof string[]>]: never; }) | undefined;
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    } & { [K_5 in Exclude<keyof I_3["collections"][number], "$type" | keyof CollectionResponse>]: never; })[] & { [K_6 in Exclude<keyof I_3["collections"], "$type" | keyof {
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[] | undefined;
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_7 in Exclude<keyof I_3, "$type" | "collections">]: never; }>(object: I_3): SubredditCollectionsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_create_collection */
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.CreateCollectionRequest";
                encode(message: CreateCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateCollectionRequest;
                fromJSON(object: any): CreateCollectionRequest;
                toJSON(message: CreateCollectionRequest): unknown;
                fromPartial<I_4 extends {
                    title?: string | undefined;
                    srFullname?: string | undefined;
                    description?: string | undefined;
                    displayLayout?: string | undefined;
                } & {
                    title?: string | undefined;
                    srFullname?: string | undefined;
                    description?: string | undefined;
                    displayLayout?: string | undefined;
                } & { [K_8 in Exclude<keyof I_4, "$type" | keyof CreateCollectionRequest>]: never; }>(object: I_4): CreateCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.postcollections.CollectionResponse";
                encode(message: CollectionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CollectionResponse;
                fromJSON(object: any): CollectionResponse;
                toJSON(message: CollectionResponse): unknown;
                fromPartial<I_1 extends {
                    collectionId?: string | undefined;
                    subredditId?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorId?: string | undefined;
                    authorName?: string | undefined;
                    permalink?: string | undefined;
                    linkIds?: string[] | undefined;
                    primaryLinkId?: string | undefined;
                    displayLayout?: string | undefined;
                    createdAtUtc?: Date | undefined;
                    lastUpdateUtc?: Date | undefined;
                } & {
                    collectionId?: string | undefined;
                    subredditId?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorId?: string | undefined;
                    authorName?: string | undefined;
                    permalink?: string | undefined;
                    linkIds?: (string[] & string[] & { [K_1 in Exclude<keyof I_1["linkIds"], "$type" | keyof string[]>]: never; }) | undefined;
                    primaryLinkId?: string | undefined;
                    displayLayout?: string | undefined;
                    createdAtUtc?: Date | undefined;
                    lastUpdateUtc?: Date | undefined;
                } & { [K_2 in Exclude<keyof I_1, "$type" | keyof CollectionResponse>]: never; }>(object: I_1): CollectionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_delete_collection */
        readonly delete: {
            readonly name: "Delete";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.DeleteCollectionRequest";
                encode(message: DeleteCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteCollectionRequest;
                fromJSON(object: any): DeleteCollectionRequest;
                toJSON(message: DeleteCollectionRequest): unknown;
                fromPartial<I_5 extends {
                    collectionId?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                } & { [K_9 in Exclude<keyof I_5, "$type" | "collectionId">]: never; }>(object: I_5): DeleteCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_add_post_to_collection */
        readonly addPost: {
            readonly name: "AddPost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.AddPostToCollectionRequest";
                encode(message: AddPostToCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddPostToCollectionRequest;
                fromJSON(object: any): AddPostToCollectionRequest;
                toJSON(message: AddPostToCollectionRequest): unknown;
                fromPartial<I_7 extends {
                    collectionId?: string | undefined;
                    linkFullname?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    linkFullname?: string | undefined;
                } & { [K_11 in Exclude<keyof I_7, "$type" | keyof AddPostToCollectionRequest>]: never; }>(object: I_7): AddPostToCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_remove_post_in_collection */
        readonly removePost: {
            readonly name: "RemovePost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.RemovePostInCollectionRequest";
                encode(message: RemovePostInCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemovePostInCollectionRequest;
                fromJSON(object: any): RemovePostInCollectionRequest;
                toJSON(message: RemovePostInCollectionRequest): unknown;
                fromPartial<I_8 extends {
                    collectionId?: string | undefined;
                    linkFullname?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    linkFullname?: string | undefined;
                } & { [K_12 in Exclude<keyof I_8, "$type" | keyof RemovePostInCollectionRequest>]: never; }>(object: I_8): RemovePostInCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_follow_collection */
        readonly follow: {
            readonly name: "Follow";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.FollowCollectionRequest";
                encode(message: FollowCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FollowCollectionRequest;
                fromJSON(object: any): FollowCollectionRequest;
                toJSON(message: FollowCollectionRequest): unknown;
                fromPartial<I_9 extends {
                    collectionId?: string | undefined;
                    follow?: boolean | undefined;
                } & {
                    collectionId?: string | undefined;
                    follow?: boolean | undefined;
                } & { [K_13 in Exclude<keyof I_9, "$type" | keyof FollowCollectionRequest>]: never; }>(object: I_9): FollowCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_reorder_collection */
        readonly reorder: {
            readonly name: "Reorder";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.ReorderCollectionRequest";
                encode(message: ReorderCollectionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReorderCollectionRequest;
                fromJSON(object: any): ReorderCollectionRequest;
                toJSON(message: ReorderCollectionRequest): unknown;
                fromPartial<I_10 extends {
                    collectionId?: string | undefined;
                    linkIds?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    linkIds?: string | undefined;
                } & { [K_14 in Exclude<keyof I_10, "$type" | keyof ReorderCollectionRequest>]: never; }>(object: I_10): ReorderCollectionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_title */
        readonly updateTitle: {
            readonly name: "UpdateTitle";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionTitleRequest";
                encode(message: UpdateCollectionTitleRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCollectionTitleRequest;
                fromJSON(object: any): UpdateCollectionTitleRequest;
                toJSON(message: UpdateCollectionTitleRequest): unknown;
                fromPartial<I_11 extends {
                    collectionId?: string | undefined;
                    title?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    title?: string | undefined;
                } & { [K_15 in Exclude<keyof I_11, "$type" | keyof UpdateCollectionTitleRequest>]: never; }>(object: I_11): UpdateCollectionTitleRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_description */
        readonly updateDescription: {
            readonly name: "UpdateDescription";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionDescriptionRequest";
                encode(message: UpdateCollectionDescriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCollectionDescriptionRequest;
                fromJSON(object: any): UpdateCollectionDescriptionRequest;
                toJSON(message: UpdateCollectionDescriptionRequest): unknown;
                fromPartial<I_12 extends {
                    collectionId?: string | undefined;
                    description?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    description?: string | undefined;
                } & { [K_16 in Exclude<keyof I_12, "$type" | keyof UpdateCollectionDescriptionRequest>]: never; }>(object: I_12): UpdateCollectionDescriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_display_layout */
        readonly updateDisplayLayout: {
            readonly name: "UpdateDisplayLayout";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionDisplayLayoutRequest";
                encode(message: UpdateCollectionDisplayLayoutRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCollectionDisplayLayoutRequest;
                fromJSON(object: any): UpdateCollectionDisplayLayoutRequest;
                toJSON(message: UpdateCollectionDisplayLayoutRequest): unknown;
                fromPartial<I_13 extends {
                    collectionId?: string | undefined;
                    displayLayout?: string | undefined;
                } & {
                    collectionId?: string | undefined;
                    displayLayout?: string | undefined;
                } & { [K_17 in Exclude<keyof I_13, "$type" | keyof UpdateCollectionDisplayLayoutRequest>]: never; }>(object: I_13): UpdateCollectionDisplayLayoutRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_6 extends {} & {} & { [K_10 in Exclude<keyof I_6, "$type">]: never; }>(_: I_6): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=postcollections_svc.d.ts.map
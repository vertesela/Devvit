import { DevPortalAuthCanViewLogsRequest, DevPortalAuthorizationResponse } from './authorization.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DevPortalAuthorizationClient {
    CanViewLogs(request: DevPortalAuthCanViewLogsRequest): Promise<DevPortalAuthorizationResponse>;
}
export declare class DevPortalAuthorizationClientJSON implements DevPortalAuthorizationClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CanViewLogs(request: DevPortalAuthCanViewLogsRequest): Promise<DevPortalAuthorizationResponse>;
}
export declare class DevPortalAuthorizationClientProtobuf implements DevPortalAuthorizationClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CanViewLogs(request: DevPortalAuthCanViewLogsRequest): Promise<DevPortalAuthorizationResponse>;
}
export {};
//# sourceMappingURL=authorization.twirp-client.d.ts.map
/**
 * #user.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { BoolValue, Int32Value, StringValue } from '../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
import { Subreddit } from './subreddit.js';
function createBaseUser() {
    return {
        acceptChats: undefined,
        acceptFollowers: undefined,
        acceptPms: undefined,
        awardeeKarma: undefined,
        awarderKarma: undefined,
        canCreateSubreddit: undefined,
        canEditName: undefined,
        coins: undefined,
        commentKarma: undefined,
        created: undefined,
        createdUtc: undefined,
        features: undefined,
        forcePasswordReset: undefined,
        goldCreddits: undefined,
        goldExpiration: undefined,
        hasAndroidSubscription: undefined,
        hasExternalAccount: undefined,
        hasGoldSubscription: undefined,
        hasIosSubscription: undefined,
        hasMail: undefined,
        hasModMail: undefined,
        hasPaypalSubscription: undefined,
        hasStripeSubscription: undefined,
        hasSubscribed: undefined,
        hasSubscribedToPremium: undefined,
        hasVerifiedEmail: undefined,
        hasVisitedNewProfile: undefined,
        hideFromRobots: undefined,
        iconImg: undefined,
        id: undefined,
        inBeta: undefined,
        inChat: undefined,
        inRedesignBeta: undefined,
        inboxCount: undefined,
        isBlocked: undefined,
        isEmployee: undefined,
        isFriend: undefined,
        isGold: undefined,
        isMod: undefined,
        isSponsor: undefined,
        isSuspended: undefined,
        linkKarma: undefined,
        modhash: undefined,
        name: undefined,
        newModmailExists: undefined,
        numFriends: undefined,
        over18: undefined,
        passwordSet: undefined,
        prefAutoplay: undefined,
        prefClickgadget: undefined,
        prefGeopopular: undefined,
        prefNightmode: undefined,
        prefNoProfanity: undefined,
        prefShowPresence: undefined,
        prefShowSnoovatar: undefined,
        prefShowTrending: undefined,
        prefShowTwitter: undefined,
        prefTopKarmaSubreddits: undefined,
        prefVideoAutoplay: undefined,
        snoovatarImg: undefined,
        snoovatarSize: [],
        subreddit: undefined,
        suspensionExpirationUtc: undefined,
        totalKarma: undefined,
        verified: undefined,
        hasPhoneNumber: undefined,
        subredditsModerated: undefined,
        hasMetaSubscription: undefined,
        metaSubscriptionAge: undefined,
        metaPointsBalance: undefined,
        metaLockedPointsBalance: undefined,
        commentSubredditKarma: undefined,
        postSubredditKarma: undefined,
        markedSpam: undefined,
        isSubredditProxyAccount: undefined,
    };
}
export const User = {
    $type: "devvit.reddit.User",
    encode(message, writer = _m0.Writer.create()) {
        if (message.acceptChats !== undefined) {
            BoolValue.encode({ value: message.acceptChats }, writer.uint32(10).fork()).ldelim();
        }
        if (message.acceptFollowers !== undefined) {
            BoolValue.encode({ value: message.acceptFollowers }, writer.uint32(18).fork()).ldelim();
        }
        if (message.acceptPms !== undefined) {
            BoolValue.encode({ value: message.acceptPms }, writer.uint32(26).fork()).ldelim();
        }
        if (message.awardeeKarma !== undefined) {
            Int32Value.encode({ value: message.awardeeKarma }, writer.uint32(34).fork()).ldelim();
        }
        if (message.awarderKarma !== undefined) {
            Int32Value.encode({ value: message.awarderKarma }, writer.uint32(42).fork()).ldelim();
        }
        if (message.canCreateSubreddit !== undefined) {
            BoolValue.encode({ value: message.canCreateSubreddit }, writer.uint32(50).fork()).ldelim();
        }
        if (message.canEditName !== undefined) {
            BoolValue.encode({ value: message.canEditName }, writer.uint32(58).fork()).ldelim();
        }
        if (message.coins !== undefined) {
            Int32Value.encode({ value: message.coins }, writer.uint32(66).fork()).ldelim();
        }
        if (message.commentKarma !== undefined) {
            Int32Value.encode({ value: message.commentKarma }, writer.uint32(74).fork()).ldelim();
        }
        if (message.created !== undefined) {
            Int32Value.encode({ value: message.created }, writer.uint32(82).fork()).ldelim();
        }
        if (message.createdUtc !== undefined) {
            Int32Value.encode({ value: message.createdUtc }, writer.uint32(90).fork()).ldelim();
        }
        if (message.features !== undefined) {
            UserFeatures.encode(message.features, writer.uint32(98).fork()).ldelim();
        }
        if (message.forcePasswordReset !== undefined) {
            BoolValue.encode({ value: message.forcePasswordReset }, writer.uint32(106).fork()).ldelim();
        }
        if (message.goldCreddits !== undefined) {
            Int32Value.encode({ value: message.goldCreddits }, writer.uint32(114).fork()).ldelim();
        }
        if (message.goldExpiration !== undefined) {
            StringValue.encode({ value: message.goldExpiration }, writer.uint32(122).fork()).ldelim();
        }
        if (message.hasAndroidSubscription !== undefined) {
            BoolValue.encode({ value: message.hasAndroidSubscription }, writer.uint32(130).fork()).ldelim();
        }
        if (message.hasExternalAccount !== undefined) {
            BoolValue.encode({ value: message.hasExternalAccount }, writer.uint32(138).fork()).ldelim();
        }
        if (message.hasGoldSubscription !== undefined) {
            BoolValue.encode({ value: message.hasGoldSubscription }, writer.uint32(146).fork()).ldelim();
        }
        if (message.hasIosSubscription !== undefined) {
            BoolValue.encode({ value: message.hasIosSubscription }, writer.uint32(154).fork()).ldelim();
        }
        if (message.hasMail !== undefined) {
            BoolValue.encode({ value: message.hasMail }, writer.uint32(162).fork()).ldelim();
        }
        if (message.hasModMail !== undefined) {
            BoolValue.encode({ value: message.hasModMail }, writer.uint32(170).fork()).ldelim();
        }
        if (message.hasPaypalSubscription !== undefined) {
            BoolValue.encode({ value: message.hasPaypalSubscription }, writer.uint32(178).fork()).ldelim();
        }
        if (message.hasStripeSubscription !== undefined) {
            BoolValue.encode({ value: message.hasStripeSubscription }, writer.uint32(186).fork()).ldelim();
        }
        if (message.hasSubscribed !== undefined) {
            BoolValue.encode({ value: message.hasSubscribed }, writer.uint32(194).fork()).ldelim();
        }
        if (message.hasSubscribedToPremium !== undefined) {
            BoolValue.encode({ value: message.hasSubscribedToPremium }, writer.uint32(202).fork()).ldelim();
        }
        if (message.hasVerifiedEmail !== undefined) {
            BoolValue.encode({ value: message.hasVerifiedEmail }, writer.uint32(210).fork()).ldelim();
        }
        if (message.hasVisitedNewProfile !== undefined) {
            BoolValue.encode({ value: message.hasVisitedNewProfile }, writer.uint32(218).fork()).ldelim();
        }
        if (message.hideFromRobots !== undefined) {
            BoolValue.encode({ value: message.hideFromRobots }, writer.uint32(226).fork()).ldelim();
        }
        if (message.iconImg !== undefined) {
            StringValue.encode({ value: message.iconImg }, writer.uint32(234).fork()).ldelim();
        }
        if (message.id !== undefined) {
            StringValue.encode({ value: message.id }, writer.uint32(242).fork()).ldelim();
        }
        if (message.inBeta !== undefined) {
            BoolValue.encode({ value: message.inBeta }, writer.uint32(250).fork()).ldelim();
        }
        if (message.inChat !== undefined) {
            BoolValue.encode({ value: message.inChat }, writer.uint32(258).fork()).ldelim();
        }
        if (message.inRedesignBeta !== undefined) {
            BoolValue.encode({ value: message.inRedesignBeta }, writer.uint32(266).fork()).ldelim();
        }
        if (message.inboxCount !== undefined) {
            Int32Value.encode({ value: message.inboxCount }, writer.uint32(274).fork()).ldelim();
        }
        if (message.isBlocked !== undefined) {
            BoolValue.encode({ value: message.isBlocked }, writer.uint32(282).fork()).ldelim();
        }
        if (message.isEmployee !== undefined) {
            BoolValue.encode({ value: message.isEmployee }, writer.uint32(290).fork()).ldelim();
        }
        if (message.isFriend !== undefined) {
            BoolValue.encode({ value: message.isFriend }, writer.uint32(298).fork()).ldelim();
        }
        if (message.isGold !== undefined) {
            BoolValue.encode({ value: message.isGold }, writer.uint32(306).fork()).ldelim();
        }
        if (message.isMod !== undefined) {
            BoolValue.encode({ value: message.isMod }, writer.uint32(314).fork()).ldelim();
        }
        if (message.isSponsor !== undefined) {
            BoolValue.encode({ value: message.isSponsor }, writer.uint32(322).fork()).ldelim();
        }
        if (message.isSuspended !== undefined) {
            BoolValue.encode({ value: message.isSuspended }, writer.uint32(330).fork()).ldelim();
        }
        if (message.linkKarma !== undefined) {
            Int32Value.encode({ value: message.linkKarma }, writer.uint32(338).fork()).ldelim();
        }
        if (message.modhash !== undefined) {
            StringValue.encode({ value: message.modhash }, writer.uint32(346).fork()).ldelim();
        }
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(354).fork()).ldelim();
        }
        if (message.newModmailExists !== undefined) {
            BoolValue.encode({ value: message.newModmailExists }, writer.uint32(362).fork()).ldelim();
        }
        if (message.numFriends !== undefined) {
            Int32Value.encode({ value: message.numFriends }, writer.uint32(370).fork()).ldelim();
        }
        if (message.over18 !== undefined) {
            BoolValue.encode({ value: message.over18 }, writer.uint32(378).fork()).ldelim();
        }
        if (message.passwordSet !== undefined) {
            BoolValue.encode({ value: message.passwordSet }, writer.uint32(386).fork()).ldelim();
        }
        if (message.prefAutoplay !== undefined) {
            BoolValue.encode({ value: message.prefAutoplay }, writer.uint32(394).fork()).ldelim();
        }
        if (message.prefClickgadget !== undefined) {
            Int32Value.encode({ value: message.prefClickgadget }, writer.uint32(402).fork()).ldelim();
        }
        if (message.prefGeopopular !== undefined) {
            StringValue.encode({ value: message.prefGeopopular }, writer.uint32(410).fork()).ldelim();
        }
        if (message.prefNightmode !== undefined) {
            BoolValue.encode({ value: message.prefNightmode }, writer.uint32(418).fork()).ldelim();
        }
        if (message.prefNoProfanity !== undefined) {
            BoolValue.encode({ value: message.prefNoProfanity }, writer.uint32(426).fork()).ldelim();
        }
        if (message.prefShowPresence !== undefined) {
            BoolValue.encode({ value: message.prefShowPresence }, writer.uint32(434).fork()).ldelim();
        }
        if (message.prefShowSnoovatar !== undefined) {
            BoolValue.encode({ value: message.prefShowSnoovatar }, writer.uint32(442).fork()).ldelim();
        }
        if (message.prefShowTrending !== undefined) {
            BoolValue.encode({ value: message.prefShowTrending }, writer.uint32(450).fork()).ldelim();
        }
        if (message.prefShowTwitter !== undefined) {
            BoolValue.encode({ value: message.prefShowTwitter }, writer.uint32(458).fork()).ldelim();
        }
        if (message.prefTopKarmaSubreddits !== undefined) {
            BoolValue.encode({ value: message.prefTopKarmaSubreddits }, writer.uint32(466).fork()).ldelim();
        }
        if (message.prefVideoAutoplay !== undefined) {
            BoolValue.encode({ value: message.prefVideoAutoplay }, writer.uint32(474).fork()).ldelim();
        }
        if (message.snoovatarImg !== undefined) {
            StringValue.encode({ value: message.snoovatarImg }, writer.uint32(482).fork()).ldelim();
        }
        for (const v of message.snoovatarSize) {
            Int32Value.encode({ value: v }, writer.uint32(490).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            Subreddit.encode(message.subreddit, writer.uint32(498).fork()).ldelim();
        }
        if (message.suspensionExpirationUtc !== undefined) {
            StringValue.encode({ value: message.suspensionExpirationUtc }, writer.uint32(506).fork()).ldelim();
        }
        if (message.totalKarma !== undefined) {
            Int32Value.encode({ value: message.totalKarma }, writer.uint32(514).fork()).ldelim();
        }
        if (message.verified !== undefined) {
            BoolValue.encode({ value: message.verified }, writer.uint32(522).fork()).ldelim();
        }
        if (message.hasPhoneNumber !== undefined) {
            BoolValue.encode({ value: message.hasPhoneNumber }, writer.uint32(530).fork()).ldelim();
        }
        if (message.subredditsModerated !== undefined) {
            Int32Value.encode({ value: message.subredditsModerated }, writer.uint32(802).fork()).ldelim();
        }
        if (message.hasMetaSubscription !== undefined) {
            BoolValue.encode({ value: message.hasMetaSubscription }, writer.uint32(810).fork()).ldelim();
        }
        if (message.metaSubscriptionAge !== undefined) {
            Int32Value.encode({ value: message.metaSubscriptionAge }, writer.uint32(818).fork()).ldelim();
        }
        if (message.metaPointsBalance !== undefined) {
            StringValue.encode({ value: message.metaPointsBalance }, writer.uint32(826).fork()).ldelim();
        }
        if (message.metaLockedPointsBalance !== undefined) {
            StringValue.encode({ value: message.metaLockedPointsBalance }, writer.uint32(834).fork()).ldelim();
        }
        if (message.commentSubredditKarma !== undefined) {
            Int32Value.encode({ value: message.commentSubredditKarma }, writer.uint32(842).fork()).ldelim();
        }
        if (message.postSubredditKarma !== undefined) {
            Int32Value.encode({ value: message.postSubredditKarma }, writer.uint32(850).fork()).ldelim();
        }
        if (message.markedSpam !== undefined) {
            BoolValue.encode({ value: message.markedSpam }, writer.uint32(858).fork()).ldelim();
        }
        if (message.isSubredditProxyAccount !== undefined) {
            BoolValue.encode({ value: message.isSubredditProxyAccount }, writer.uint32(866).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.acceptChats = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 2:
                    message.acceptFollowers = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.acceptPms = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.awardeeKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 5:
                    message.awarderKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 6:
                    message.canCreateSubreddit = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 7:
                    message.canEditName = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 8:
                    message.coins = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 9:
                    message.commentKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 10:
                    message.created = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 11:
                    message.createdUtc = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 12:
                    message.features = UserFeatures.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.forcePasswordReset = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 14:
                    message.goldCreddits = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 15:
                    message.goldExpiration = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 16:
                    message.hasAndroidSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 17:
                    message.hasExternalAccount = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 18:
                    message.hasGoldSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 19:
                    message.hasIosSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 20:
                    message.hasMail = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 21:
                    message.hasModMail = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 22:
                    message.hasPaypalSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 23:
                    message.hasStripeSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 24:
                    message.hasSubscribed = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 25:
                    message.hasSubscribedToPremium = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 26:
                    message.hasVerifiedEmail = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 27:
                    message.hasVisitedNewProfile = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 28:
                    message.hideFromRobots = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 29:
                    message.iconImg = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 30:
                    message.id = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 31:
                    message.inBeta = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 32:
                    message.inChat = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 33:
                    message.inRedesignBeta = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 34:
                    message.inboxCount = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 35:
                    message.isBlocked = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 36:
                    message.isEmployee = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 37:
                    message.isFriend = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 38:
                    message.isGold = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 39:
                    message.isMod = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 40:
                    message.isSponsor = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 41:
                    message.isSuspended = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 42:
                    message.linkKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 43:
                    message.modhash = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 44:
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 45:
                    message.newModmailExists = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 46:
                    message.numFriends = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 47:
                    message.over18 = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 48:
                    message.passwordSet = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 49:
                    message.prefAutoplay = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 50:
                    message.prefClickgadget = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 51:
                    message.prefGeopopular = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 52:
                    message.prefNightmode = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 53:
                    message.prefNoProfanity = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 54:
                    message.prefShowPresence = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 55:
                    message.prefShowSnoovatar = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 56:
                    message.prefShowTrending = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 57:
                    message.prefShowTwitter = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 58:
                    message.prefTopKarmaSubreddits = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 59:
                    message.prefVideoAutoplay = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 60:
                    message.snoovatarImg = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 61:
                    message.snoovatarSize.push(Int32Value.decode(reader, reader.uint32()).value);
                    break;
                case 62:
                    message.subreddit = Subreddit.decode(reader, reader.uint32());
                    break;
                case 63:
                    message.suspensionExpirationUtc = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 64:
                    message.totalKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 65:
                    message.verified = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 66:
                    message.hasPhoneNumber = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 100:
                    message.subredditsModerated = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 101:
                    message.hasMetaSubscription = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 102:
                    message.metaSubscriptionAge = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 103:
                    message.metaPointsBalance = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 104:
                    message.metaLockedPointsBalance = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 105:
                    message.commentSubredditKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 106:
                    message.postSubredditKarma = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 107:
                    message.markedSpam = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 108:
                    message.isSubredditProxyAccount = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            acceptChats: isSet(object.acceptChats) ? Boolean(object.acceptChats) : undefined,
            acceptFollowers: isSet(object.acceptFollowers) ? Boolean(object.acceptFollowers) : undefined,
            acceptPms: isSet(object.acceptPms) ? Boolean(object.acceptPms) : undefined,
            awardeeKarma: isSet(object.awardeeKarma) ? Number(object.awardeeKarma) : undefined,
            awarderKarma: isSet(object.awarderKarma) ? Number(object.awarderKarma) : undefined,
            canCreateSubreddit: isSet(object.canCreateSubreddit) ? Boolean(object.canCreateSubreddit) : undefined,
            canEditName: isSet(object.canEditName) ? Boolean(object.canEditName) : undefined,
            coins: isSet(object.coins) ? Number(object.coins) : undefined,
            commentKarma: isSet(object.commentKarma) ? Number(object.commentKarma) : undefined,
            created: isSet(object.created) ? Number(object.created) : undefined,
            createdUtc: isSet(object.createdUtc) ? Number(object.createdUtc) : undefined,
            features: isSet(object.features) ? UserFeatures.fromJSON(object.features) : undefined,
            forcePasswordReset: isSet(object.forcePasswordReset) ? Boolean(object.forcePasswordReset) : undefined,
            goldCreddits: isSet(object.goldCreddits) ? Number(object.goldCreddits) : undefined,
            goldExpiration: isSet(object.goldExpiration) ? String(object.goldExpiration) : undefined,
            hasAndroidSubscription: isSet(object.hasAndroidSubscription) ? Boolean(object.hasAndroidSubscription) : undefined,
            hasExternalAccount: isSet(object.hasExternalAccount) ? Boolean(object.hasExternalAccount) : undefined,
            hasGoldSubscription: isSet(object.hasGoldSubscription) ? Boolean(object.hasGoldSubscription) : undefined,
            hasIosSubscription: isSet(object.hasIosSubscription) ? Boolean(object.hasIosSubscription) : undefined,
            hasMail: isSet(object.hasMail) ? Boolean(object.hasMail) : undefined,
            hasModMail: isSet(object.hasModMail) ? Boolean(object.hasModMail) : undefined,
            hasPaypalSubscription: isSet(object.hasPaypalSubscription) ? Boolean(object.hasPaypalSubscription) : undefined,
            hasStripeSubscription: isSet(object.hasStripeSubscription) ? Boolean(object.hasStripeSubscription) : undefined,
            hasSubscribed: isSet(object.hasSubscribed) ? Boolean(object.hasSubscribed) : undefined,
            hasSubscribedToPremium: isSet(object.hasSubscribedToPremium) ? Boolean(object.hasSubscribedToPremium) : undefined,
            hasVerifiedEmail: isSet(object.hasVerifiedEmail) ? Boolean(object.hasVerifiedEmail) : undefined,
            hasVisitedNewProfile: isSet(object.hasVisitedNewProfile) ? Boolean(object.hasVisitedNewProfile) : undefined,
            hideFromRobots: isSet(object.hideFromRobots) ? Boolean(object.hideFromRobots) : undefined,
            iconImg: isSet(object.iconImg) ? String(object.iconImg) : undefined,
            id: isSet(object.id) ? String(object.id) : undefined,
            inBeta: isSet(object.inBeta) ? Boolean(object.inBeta) : undefined,
            inChat: isSet(object.inChat) ? Boolean(object.inChat) : undefined,
            inRedesignBeta: isSet(object.inRedesignBeta) ? Boolean(object.inRedesignBeta) : undefined,
            inboxCount: isSet(object.inboxCount) ? Number(object.inboxCount) : undefined,
            isBlocked: isSet(object.isBlocked) ? Boolean(object.isBlocked) : undefined,
            isEmployee: isSet(object.isEmployee) ? Boolean(object.isEmployee) : undefined,
            isFriend: isSet(object.isFriend) ? Boolean(object.isFriend) : undefined,
            isGold: isSet(object.isGold) ? Boolean(object.isGold) : undefined,
            isMod: isSet(object.isMod) ? Boolean(object.isMod) : undefined,
            isSponsor: isSet(object.isSponsor) ? Boolean(object.isSponsor) : undefined,
            isSuspended: isSet(object.isSuspended) ? Boolean(object.isSuspended) : undefined,
            linkKarma: isSet(object.linkKarma) ? Number(object.linkKarma) : undefined,
            modhash: isSet(object.modhash) ? String(object.modhash) : undefined,
            name: isSet(object.name) ? String(object.name) : undefined,
            newModmailExists: isSet(object.newModmailExists) ? Boolean(object.newModmailExists) : undefined,
            numFriends: isSet(object.numFriends) ? Number(object.numFriends) : undefined,
            over18: isSet(object.over18) ? Boolean(object.over18) : undefined,
            passwordSet: isSet(object.passwordSet) ? Boolean(object.passwordSet) : undefined,
            prefAutoplay: isSet(object.prefAutoplay) ? Boolean(object.prefAutoplay) : undefined,
            prefClickgadget: isSet(object.prefClickgadget) ? Number(object.prefClickgadget) : undefined,
            prefGeopopular: isSet(object.prefGeopopular) ? String(object.prefGeopopular) : undefined,
            prefNightmode: isSet(object.prefNightmode) ? Boolean(object.prefNightmode) : undefined,
            prefNoProfanity: isSet(object.prefNoProfanity) ? Boolean(object.prefNoProfanity) : undefined,
            prefShowPresence: isSet(object.prefShowPresence) ? Boolean(object.prefShowPresence) : undefined,
            prefShowSnoovatar: isSet(object.prefShowSnoovatar) ? Boolean(object.prefShowSnoovatar) : undefined,
            prefShowTrending: isSet(object.prefShowTrending) ? Boolean(object.prefShowTrending) : undefined,
            prefShowTwitter: isSet(object.prefShowTwitter) ? Boolean(object.prefShowTwitter) : undefined,
            prefTopKarmaSubreddits: isSet(object.prefTopKarmaSubreddits) ? Boolean(object.prefTopKarmaSubreddits) : undefined,
            prefVideoAutoplay: isSet(object.prefVideoAutoplay) ? Boolean(object.prefVideoAutoplay) : undefined,
            snoovatarImg: isSet(object.snoovatarImg) ? String(object.snoovatarImg) : undefined,
            snoovatarSize: Array.isArray(object?.snoovatarSize) ? object.snoovatarSize.map((e) => Number(e)) : [],
            subreddit: isSet(object.subreddit) ? Subreddit.fromJSON(object.subreddit) : undefined,
            suspensionExpirationUtc: isSet(object.suspensionExpirationUtc)
                ? String(object.suspensionExpirationUtc)
                : undefined,
            totalKarma: isSet(object.totalKarma) ? Number(object.totalKarma) : undefined,
            verified: isSet(object.verified) ? Boolean(object.verified) : undefined,
            hasPhoneNumber: isSet(object.hasPhoneNumber) ? Boolean(object.hasPhoneNumber) : undefined,
            subredditsModerated: isSet(object.subredditsModerated) ? Number(object.subredditsModerated) : undefined,
            hasMetaSubscription: isSet(object.hasMetaSubscription) ? Boolean(object.hasMetaSubscription) : undefined,
            metaSubscriptionAge: isSet(object.metaSubscriptionAge) ? Number(object.metaSubscriptionAge) : undefined,
            metaPointsBalance: isSet(object.metaPointsBalance) ? String(object.metaPointsBalance) : undefined,
            metaLockedPointsBalance: isSet(object.metaLockedPointsBalance)
                ? String(object.metaLockedPointsBalance)
                : undefined,
            commentSubredditKarma: isSet(object.commentSubredditKarma) ? Number(object.commentSubredditKarma) : undefined,
            postSubredditKarma: isSet(object.postSubredditKarma) ? Number(object.postSubredditKarma) : undefined,
            markedSpam: isSet(object.markedSpam) ? Boolean(object.markedSpam) : undefined,
            isSubredditProxyAccount: isSet(object.isSubredditProxyAccount)
                ? Boolean(object.isSubredditProxyAccount)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.acceptChats !== undefined && (obj.acceptChats = message.acceptChats);
        message.acceptFollowers !== undefined && (obj.acceptFollowers = message.acceptFollowers);
        message.acceptPms !== undefined && (obj.acceptPms = message.acceptPms);
        message.awardeeKarma !== undefined && (obj.awardeeKarma = message.awardeeKarma);
        message.awarderKarma !== undefined && (obj.awarderKarma = message.awarderKarma);
        message.canCreateSubreddit !== undefined && (obj.canCreateSubreddit = message.canCreateSubreddit);
        message.canEditName !== undefined && (obj.canEditName = message.canEditName);
        message.coins !== undefined && (obj.coins = message.coins);
        message.commentKarma !== undefined && (obj.commentKarma = message.commentKarma);
        message.created !== undefined && (obj.created = message.created);
        message.createdUtc !== undefined && (obj.createdUtc = message.createdUtc);
        message.features !== undefined &&
            (obj.features = message.features ? UserFeatures.toJSON(message.features) : undefined);
        message.forcePasswordReset !== undefined && (obj.forcePasswordReset = message.forcePasswordReset);
        message.goldCreddits !== undefined && (obj.goldCreddits = message.goldCreddits);
        message.goldExpiration !== undefined && (obj.goldExpiration = message.goldExpiration);
        message.hasAndroidSubscription !== undefined && (obj.hasAndroidSubscription = message.hasAndroidSubscription);
        message.hasExternalAccount !== undefined && (obj.hasExternalAccount = message.hasExternalAccount);
        message.hasGoldSubscription !== undefined && (obj.hasGoldSubscription = message.hasGoldSubscription);
        message.hasIosSubscription !== undefined && (obj.hasIosSubscription = message.hasIosSubscription);
        message.hasMail !== undefined && (obj.hasMail = message.hasMail);
        message.hasModMail !== undefined && (obj.hasModMail = message.hasModMail);
        message.hasPaypalSubscription !== undefined && (obj.hasPaypalSubscription = message.hasPaypalSubscription);
        message.hasStripeSubscription !== undefined && (obj.hasStripeSubscription = message.hasStripeSubscription);
        message.hasSubscribed !== undefined && (obj.hasSubscribed = message.hasSubscribed);
        message.hasSubscribedToPremium !== undefined && (obj.hasSubscribedToPremium = message.hasSubscribedToPremium);
        message.hasVerifiedEmail !== undefined && (obj.hasVerifiedEmail = message.hasVerifiedEmail);
        message.hasVisitedNewProfile !== undefined && (obj.hasVisitedNewProfile = message.hasVisitedNewProfile);
        message.hideFromRobots !== undefined && (obj.hideFromRobots = message.hideFromRobots);
        message.iconImg !== undefined && (obj.iconImg = message.iconImg);
        message.id !== undefined && (obj.id = message.id);
        message.inBeta !== undefined && (obj.inBeta = message.inBeta);
        message.inChat !== undefined && (obj.inChat = message.inChat);
        message.inRedesignBeta !== undefined && (obj.inRedesignBeta = message.inRedesignBeta);
        message.inboxCount !== undefined && (obj.inboxCount = message.inboxCount);
        message.isBlocked !== undefined && (obj.isBlocked = message.isBlocked);
        message.isEmployee !== undefined && (obj.isEmployee = message.isEmployee);
        message.isFriend !== undefined && (obj.isFriend = message.isFriend);
        message.isGold !== undefined && (obj.isGold = message.isGold);
        message.isMod !== undefined && (obj.isMod = message.isMod);
        message.isSponsor !== undefined && (obj.isSponsor = message.isSponsor);
        message.isSuspended !== undefined && (obj.isSuspended = message.isSuspended);
        message.linkKarma !== undefined && (obj.linkKarma = message.linkKarma);
        message.modhash !== undefined && (obj.modhash = message.modhash);
        message.name !== undefined && (obj.name = message.name);
        message.newModmailExists !== undefined && (obj.newModmailExists = message.newModmailExists);
        message.numFriends !== undefined && (obj.numFriends = message.numFriends);
        message.over18 !== undefined && (obj.over18 = message.over18);
        message.passwordSet !== undefined && (obj.passwordSet = message.passwordSet);
        message.prefAutoplay !== undefined && (obj.prefAutoplay = message.prefAutoplay);
        message.prefClickgadget !== undefined && (obj.prefClickgadget = message.prefClickgadget);
        message.prefGeopopular !== undefined && (obj.prefGeopopular = message.prefGeopopular);
        message.prefNightmode !== undefined && (obj.prefNightmode = message.prefNightmode);
        message.prefNoProfanity !== undefined && (obj.prefNoProfanity = message.prefNoProfanity);
        message.prefShowPresence !== undefined && (obj.prefShowPresence = message.prefShowPresence);
        message.prefShowSnoovatar !== undefined && (obj.prefShowSnoovatar = message.prefShowSnoovatar);
        message.prefShowTrending !== undefined && (obj.prefShowTrending = message.prefShowTrending);
        message.prefShowTwitter !== undefined && (obj.prefShowTwitter = message.prefShowTwitter);
        message.prefTopKarmaSubreddits !== undefined && (obj.prefTopKarmaSubreddits = message.prefTopKarmaSubreddits);
        message.prefVideoAutoplay !== undefined && (obj.prefVideoAutoplay = message.prefVideoAutoplay);
        message.snoovatarImg !== undefined && (obj.snoovatarImg = message.snoovatarImg);
        if (message.snoovatarSize) {
            obj.snoovatarSize = message.snoovatarSize.map((e) => e);
        }
        else {
            obj.snoovatarSize = [];
        }
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? Subreddit.toJSON(message.subreddit) : undefined);
        message.suspensionExpirationUtc !== undefined && (obj.suspensionExpirationUtc = message.suspensionExpirationUtc);
        message.totalKarma !== undefined && (obj.totalKarma = message.totalKarma);
        message.verified !== undefined && (obj.verified = message.verified);
        message.hasPhoneNumber !== undefined && (obj.hasPhoneNumber = message.hasPhoneNumber);
        message.subredditsModerated !== undefined && (obj.subredditsModerated = message.subredditsModerated);
        message.hasMetaSubscription !== undefined && (obj.hasMetaSubscription = message.hasMetaSubscription);
        message.metaSubscriptionAge !== undefined && (obj.metaSubscriptionAge = message.metaSubscriptionAge);
        message.metaPointsBalance !== undefined && (obj.metaPointsBalance = message.metaPointsBalance);
        message.metaLockedPointsBalance !== undefined && (obj.metaLockedPointsBalance = message.metaLockedPointsBalance);
        message.commentSubredditKarma !== undefined && (obj.commentSubredditKarma = message.commentSubredditKarma);
        message.postSubredditKarma !== undefined && (obj.postSubredditKarma = message.postSubredditKarma);
        message.markedSpam !== undefined && (obj.markedSpam = message.markedSpam);
        message.isSubredditProxyAccount !== undefined && (obj.isSubredditProxyAccount = message.isSubredditProxyAccount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.acceptChats = object.acceptChats ?? undefined;
        message.acceptFollowers = object.acceptFollowers ?? undefined;
        message.acceptPms = object.acceptPms ?? undefined;
        message.awardeeKarma = object.awardeeKarma ?? undefined;
        message.awarderKarma = object.awarderKarma ?? undefined;
        message.canCreateSubreddit = object.canCreateSubreddit ?? undefined;
        message.canEditName = object.canEditName ?? undefined;
        message.coins = object.coins ?? undefined;
        message.commentKarma = object.commentKarma ?? undefined;
        message.created = object.created ?? undefined;
        message.createdUtc = object.createdUtc ?? undefined;
        message.features = (object.features !== undefined && object.features !== null)
            ? UserFeatures.fromPartial(object.features)
            : undefined;
        message.forcePasswordReset = object.forcePasswordReset ?? undefined;
        message.goldCreddits = object.goldCreddits ?? undefined;
        message.goldExpiration = object.goldExpiration ?? undefined;
        message.hasAndroidSubscription = object.hasAndroidSubscription ?? undefined;
        message.hasExternalAccount = object.hasExternalAccount ?? undefined;
        message.hasGoldSubscription = object.hasGoldSubscription ?? undefined;
        message.hasIosSubscription = object.hasIosSubscription ?? undefined;
        message.hasMail = object.hasMail ?? undefined;
        message.hasModMail = object.hasModMail ?? undefined;
        message.hasPaypalSubscription = object.hasPaypalSubscription ?? undefined;
        message.hasStripeSubscription = object.hasStripeSubscription ?? undefined;
        message.hasSubscribed = object.hasSubscribed ?? undefined;
        message.hasSubscribedToPremium = object.hasSubscribedToPremium ?? undefined;
        message.hasVerifiedEmail = object.hasVerifiedEmail ?? undefined;
        message.hasVisitedNewProfile = object.hasVisitedNewProfile ?? undefined;
        message.hideFromRobots = object.hideFromRobots ?? undefined;
        message.iconImg = object.iconImg ?? undefined;
        message.id = object.id ?? undefined;
        message.inBeta = object.inBeta ?? undefined;
        message.inChat = object.inChat ?? undefined;
        message.inRedesignBeta = object.inRedesignBeta ?? undefined;
        message.inboxCount = object.inboxCount ?? undefined;
        message.isBlocked = object.isBlocked ?? undefined;
        message.isEmployee = object.isEmployee ?? undefined;
        message.isFriend = object.isFriend ?? undefined;
        message.isGold = object.isGold ?? undefined;
        message.isMod = object.isMod ?? undefined;
        message.isSponsor = object.isSponsor ?? undefined;
        message.isSuspended = object.isSuspended ?? undefined;
        message.linkKarma = object.linkKarma ?? undefined;
        message.modhash = object.modhash ?? undefined;
        message.name = object.name ?? undefined;
        message.newModmailExists = object.newModmailExists ?? undefined;
        message.numFriends = object.numFriends ?? undefined;
        message.over18 = object.over18 ?? undefined;
        message.passwordSet = object.passwordSet ?? undefined;
        message.prefAutoplay = object.prefAutoplay ?? undefined;
        message.prefClickgadget = object.prefClickgadget ?? undefined;
        message.prefGeopopular = object.prefGeopopular ?? undefined;
        message.prefNightmode = object.prefNightmode ?? undefined;
        message.prefNoProfanity = object.prefNoProfanity ?? undefined;
        message.prefShowPresence = object.prefShowPresence ?? undefined;
        message.prefShowSnoovatar = object.prefShowSnoovatar ?? undefined;
        message.prefShowTrending = object.prefShowTrending ?? undefined;
        message.prefShowTwitter = object.prefShowTwitter ?? undefined;
        message.prefTopKarmaSubreddits = object.prefTopKarmaSubreddits ?? undefined;
        message.prefVideoAutoplay = object.prefVideoAutoplay ?? undefined;
        message.snoovatarImg = object.snoovatarImg ?? undefined;
        message.snoovatarSize = object.snoovatarSize?.map((e) => e) || [];
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? Subreddit.fromPartial(object.subreddit)
            : undefined;
        message.suspensionExpirationUtc = object.suspensionExpirationUtc ?? undefined;
        message.totalKarma = object.totalKarma ?? undefined;
        message.verified = object.verified ?? undefined;
        message.hasPhoneNumber = object.hasPhoneNumber ?? undefined;
        message.subredditsModerated = object.subredditsModerated ?? undefined;
        message.hasMetaSubscription = object.hasMetaSubscription ?? undefined;
        message.metaSubscriptionAge = object.metaSubscriptionAge ?? undefined;
        message.metaPointsBalance = object.metaPointsBalance ?? undefined;
        message.metaLockedPointsBalance = object.metaLockedPointsBalance ?? undefined;
        message.commentSubredditKarma = object.commentSubredditKarma ?? undefined;
        message.postSubredditKarma = object.postSubredditKarma ?? undefined;
        message.markedSpam = object.markedSpam ?? undefined;
        message.isSubredditProxyAccount = object.isSubredditProxyAccount ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.User", User);
function createBaseUserFeatures() {
    return {
        awardsOnStreams: undefined,
        canMakeMobileTestBuildPurchases: undefined,
        chatGroupRollout: undefined,
        chatSubreddit: undefined,
        chatUserSettings: undefined,
        chat: undefined,
        cookieConsentBanner: undefined,
        crosspostNotif: undefined,
        crowdControlForPost: undefined,
        customFeedImage: undefined,
        doNotTrack: undefined,
        expensiveCoinsPackage: undefined,
        isEmailPermissionRequired: undefined,
        liveComments: undefined,
        liveOrangereds: undefined,
        modAwards: undefined,
        modServiceMuteReads: undefined,
        modServiceMuteWrites: undefined,
        modlogCopyrightRemoval: undefined,
        mwebNsfwXpromo: undefined,
        mwebXpromoInterstitialCommentsAndroid: undefined,
        mwebXpromoInterstitialCommentsIos: undefined,
        mwebXpromoModalListingClickDailyDismissibleAndroid: undefined,
        mwebXpromoModalListingClickDailyDismissibleIos: undefined,
        mwebXpromoRevampV2: undefined,
        mwebXpromoRevampV3: undefined,
        noreferrerToNoopener: undefined,
        pollsMobile: undefined,
        premiumSubscriptionsTable: undefined,
        promotedTrendBlanks: undefined,
        resizedStylesImages: undefined,
        showAmpLink: undefined,
        showNpsSurvey: undefined,
        spezModal: undefined,
        usePrefAccountDeployment: undefined,
        userFlairMigrationTesting: undefined,
        webhookConfig: undefined,
    };
}
export const UserFeatures = {
    $type: "devvit.reddit.UserFeatures",
    encode(message, writer = _m0.Writer.create()) {
        if (message.awardsOnStreams !== undefined) {
            BoolValue.encode({ value: message.awardsOnStreams }, writer.uint32(10).fork()).ldelim();
        }
        if (message.canMakeMobileTestBuildPurchases !== undefined) {
            BoolValue.encode({ value: message.canMakeMobileTestBuildPurchases }, writer.uint32(18).fork()).ldelim();
        }
        if (message.chatGroupRollout !== undefined) {
            BoolValue.encode({ value: message.chatGroupRollout }, writer.uint32(26).fork()).ldelim();
        }
        if (message.chatSubreddit !== undefined) {
            BoolValue.encode({ value: message.chatSubreddit }, writer.uint32(34).fork()).ldelim();
        }
        if (message.chatUserSettings !== undefined) {
            BoolValue.encode({ value: message.chatUserSettings }, writer.uint32(42).fork()).ldelim();
        }
        if (message.chat !== undefined) {
            BoolValue.encode({ value: message.chat }, writer.uint32(50).fork()).ldelim();
        }
        if (message.cookieConsentBanner !== undefined) {
            BoolValue.encode({ value: message.cookieConsentBanner }, writer.uint32(58).fork()).ldelim();
        }
        if (message.crosspostNotif !== undefined) {
            BoolValue.encode({ value: message.crosspostNotif }, writer.uint32(66).fork()).ldelim();
        }
        if (message.crowdControlForPost !== undefined) {
            BoolValue.encode({ value: message.crowdControlForPost }, writer.uint32(74).fork()).ldelim();
        }
        if (message.customFeedImage !== undefined) {
            BoolValue.encode({ value: message.customFeedImage }, writer.uint32(82).fork()).ldelim();
        }
        if (message.doNotTrack !== undefined) {
            BoolValue.encode({ value: message.doNotTrack }, writer.uint32(90).fork()).ldelim();
        }
        if (message.expensiveCoinsPackage !== undefined) {
            BoolValue.encode({ value: message.expensiveCoinsPackage }, writer.uint32(98).fork()).ldelim();
        }
        if (message.isEmailPermissionRequired !== undefined) {
            BoolValue.encode({ value: message.isEmailPermissionRequired }, writer.uint32(106).fork()).ldelim();
        }
        if (message.liveComments !== undefined) {
            BoolValue.encode({ value: message.liveComments }, writer.uint32(114).fork()).ldelim();
        }
        if (message.liveOrangereds !== undefined) {
            BoolValue.encode({ value: message.liveOrangereds }, writer.uint32(122).fork()).ldelim();
        }
        if (message.modAwards !== undefined) {
            BoolValue.encode({ value: message.modAwards }, writer.uint32(130).fork()).ldelim();
        }
        if (message.modServiceMuteReads !== undefined) {
            BoolValue.encode({ value: message.modServiceMuteReads }, writer.uint32(138).fork()).ldelim();
        }
        if (message.modServiceMuteWrites !== undefined) {
            BoolValue.encode({ value: message.modServiceMuteWrites }, writer.uint32(146).fork()).ldelim();
        }
        if (message.modlogCopyrightRemoval !== undefined) {
            BoolValue.encode({ value: message.modlogCopyrightRemoval }, writer.uint32(154).fork()).ldelim();
        }
        if (message.mwebNsfwXpromo !== undefined) {
            UserFeatures_Experiment.encode(message.mwebNsfwXpromo, writer.uint32(162).fork()).ldelim();
        }
        if (message.mwebXpromoInterstitialCommentsAndroid !== undefined) {
            BoolValue.encode({ value: message.mwebXpromoInterstitialCommentsAndroid }, writer.uint32(170).fork()).ldelim();
        }
        if (message.mwebXpromoInterstitialCommentsIos !== undefined) {
            BoolValue.encode({ value: message.mwebXpromoInterstitialCommentsIos }, writer.uint32(178).fork()).ldelim();
        }
        if (message.mwebXpromoModalListingClickDailyDismissibleAndroid !== undefined) {
            BoolValue.encode({ value: message.mwebXpromoModalListingClickDailyDismissibleAndroid }, writer.uint32(186).fork()).ldelim();
        }
        if (message.mwebXpromoModalListingClickDailyDismissibleIos !== undefined) {
            BoolValue.encode({ value: message.mwebXpromoModalListingClickDailyDismissibleIos }, writer.uint32(194).fork())
                .ldelim();
        }
        if (message.mwebXpromoRevampV2 !== undefined) {
            UserFeatures_Experiment.encode(message.mwebXpromoRevampV2, writer.uint32(202).fork()).ldelim();
        }
        if (message.mwebXpromoRevampV3 !== undefined) {
            UserFeatures_Experiment.encode(message.mwebXpromoRevampV3, writer.uint32(210).fork()).ldelim();
        }
        if (message.noreferrerToNoopener !== undefined) {
            BoolValue.encode({ value: message.noreferrerToNoopener }, writer.uint32(218).fork()).ldelim();
        }
        if (message.pollsMobile !== undefined) {
            BoolValue.encode({ value: message.pollsMobile }, writer.uint32(226).fork()).ldelim();
        }
        if (message.premiumSubscriptionsTable !== undefined) {
            BoolValue.encode({ value: message.premiumSubscriptionsTable }, writer.uint32(234).fork()).ldelim();
        }
        if (message.promotedTrendBlanks !== undefined) {
            BoolValue.encode({ value: message.promotedTrendBlanks }, writer.uint32(242).fork()).ldelim();
        }
        if (message.resizedStylesImages !== undefined) {
            BoolValue.encode({ value: message.resizedStylesImages }, writer.uint32(250).fork()).ldelim();
        }
        if (message.showAmpLink !== undefined) {
            BoolValue.encode({ value: message.showAmpLink }, writer.uint32(258).fork()).ldelim();
        }
        if (message.showNpsSurvey !== undefined) {
            BoolValue.encode({ value: message.showNpsSurvey }, writer.uint32(266).fork()).ldelim();
        }
        if (message.spezModal !== undefined) {
            BoolValue.encode({ value: message.spezModal }, writer.uint32(274).fork()).ldelim();
        }
        if (message.usePrefAccountDeployment !== undefined) {
            BoolValue.encode({ value: message.usePrefAccountDeployment }, writer.uint32(282).fork()).ldelim();
        }
        if (message.userFlairMigrationTesting !== undefined) {
            BoolValue.encode({ value: message.userFlairMigrationTesting }, writer.uint32(290).fork()).ldelim();
        }
        if (message.webhookConfig !== undefined) {
            BoolValue.encode({ value: message.webhookConfig }, writer.uint32(298).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserFeatures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.awardsOnStreams = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 2:
                    message.canMakeMobileTestBuildPurchases = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.chatGroupRollout = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.chatSubreddit = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 5:
                    message.chatUserSettings = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 6:
                    message.chat = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 7:
                    message.cookieConsentBanner = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 8:
                    message.crosspostNotif = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 9:
                    message.crowdControlForPost = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 10:
                    message.customFeedImage = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 11:
                    message.doNotTrack = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 12:
                    message.expensiveCoinsPackage = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 13:
                    message.isEmailPermissionRequired = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 14:
                    message.liveComments = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 15:
                    message.liveOrangereds = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 16:
                    message.modAwards = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 17:
                    message.modServiceMuteReads = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 18:
                    message.modServiceMuteWrites = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 19:
                    message.modlogCopyrightRemoval = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 20:
                    message.mwebNsfwXpromo = UserFeatures_Experiment.decode(reader, reader.uint32());
                    break;
                case 21:
                    message.mwebXpromoInterstitialCommentsAndroid = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 22:
                    message.mwebXpromoInterstitialCommentsIos = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 23:
                    message.mwebXpromoModalListingClickDailyDismissibleAndroid = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 24:
                    message.mwebXpromoModalListingClickDailyDismissibleIos = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 25:
                    message.mwebXpromoRevampV2 = UserFeatures_Experiment.decode(reader, reader.uint32());
                    break;
                case 26:
                    message.mwebXpromoRevampV3 = UserFeatures_Experiment.decode(reader, reader.uint32());
                    break;
                case 27:
                    message.noreferrerToNoopener = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 28:
                    message.pollsMobile = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 29:
                    message.premiumSubscriptionsTable = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 30:
                    message.promotedTrendBlanks = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 31:
                    message.resizedStylesImages = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 32:
                    message.showAmpLink = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 33:
                    message.showNpsSurvey = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 34:
                    message.spezModal = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 35:
                    message.usePrefAccountDeployment = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 36:
                    message.userFlairMigrationTesting = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 37:
                    message.webhookConfig = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            awardsOnStreams: isSet(object.awardsOnStreams) ? Boolean(object.awardsOnStreams) : undefined,
            canMakeMobileTestBuildPurchases: isSet(object.canMakeMobileTestBuildPurchases)
                ? Boolean(object.canMakeMobileTestBuildPurchases)
                : undefined,
            chatGroupRollout: isSet(object.chatGroupRollout) ? Boolean(object.chatGroupRollout) : undefined,
            chatSubreddit: isSet(object.chatSubreddit) ? Boolean(object.chatSubreddit) : undefined,
            chatUserSettings: isSet(object.chatUserSettings) ? Boolean(object.chatUserSettings) : undefined,
            chat: isSet(object.chat) ? Boolean(object.chat) : undefined,
            cookieConsentBanner: isSet(object.cookieConsentBanner) ? Boolean(object.cookieConsentBanner) : undefined,
            crosspostNotif: isSet(object.crosspostNotif) ? Boolean(object.crosspostNotif) : undefined,
            crowdControlForPost: isSet(object.crowdControlForPost) ? Boolean(object.crowdControlForPost) : undefined,
            customFeedImage: isSet(object.customFeedImage) ? Boolean(object.customFeedImage) : undefined,
            doNotTrack: isSet(object.doNotTrack) ? Boolean(object.doNotTrack) : undefined,
            expensiveCoinsPackage: isSet(object.expensiveCoinsPackage) ? Boolean(object.expensiveCoinsPackage) : undefined,
            isEmailPermissionRequired: isSet(object.isEmailPermissionRequired)
                ? Boolean(object.isEmailPermissionRequired)
                : undefined,
            liveComments: isSet(object.liveComments) ? Boolean(object.liveComments) : undefined,
            liveOrangereds: isSet(object.liveOrangereds) ? Boolean(object.liveOrangereds) : undefined,
            modAwards: isSet(object.modAwards) ? Boolean(object.modAwards) : undefined,
            modServiceMuteReads: isSet(object.modServiceMuteReads) ? Boolean(object.modServiceMuteReads) : undefined,
            modServiceMuteWrites: isSet(object.modServiceMuteWrites) ? Boolean(object.modServiceMuteWrites) : undefined,
            modlogCopyrightRemoval: isSet(object.modlogCopyrightRemoval) ? Boolean(object.modlogCopyrightRemoval) : undefined,
            mwebNsfwXpromo: isSet(object.mwebNsfwXpromo)
                ? UserFeatures_Experiment.fromJSON(object.mwebNsfwXpromo)
                : undefined,
            mwebXpromoInterstitialCommentsAndroid: isSet(object.mwebXpromoInterstitialCommentsAndroid)
                ? Boolean(object.mwebXpromoInterstitialCommentsAndroid)
                : undefined,
            mwebXpromoInterstitialCommentsIos: isSet(object.mwebXpromoInterstitialCommentsIos)
                ? Boolean(object.mwebXpromoInterstitialCommentsIos)
                : undefined,
            mwebXpromoModalListingClickDailyDismissibleAndroid: isSet(object.mwebXpromoModalListingClickDailyDismissibleAndroid)
                ? Boolean(object.mwebXpromoModalListingClickDailyDismissibleAndroid)
                : undefined,
            mwebXpromoModalListingClickDailyDismissibleIos: isSet(object.mwebXpromoModalListingClickDailyDismissibleIos)
                ? Boolean(object.mwebXpromoModalListingClickDailyDismissibleIos)
                : undefined,
            mwebXpromoRevampV2: isSet(object.mwebXpromoRevampV2)
                ? UserFeatures_Experiment.fromJSON(object.mwebXpromoRevampV2)
                : undefined,
            mwebXpromoRevampV3: isSet(object.mwebXpromoRevampV3)
                ? UserFeatures_Experiment.fromJSON(object.mwebXpromoRevampV3)
                : undefined,
            noreferrerToNoopener: isSet(object.noreferrerToNoopener) ? Boolean(object.noreferrerToNoopener) : undefined,
            pollsMobile: isSet(object.pollsMobile) ? Boolean(object.pollsMobile) : undefined,
            premiumSubscriptionsTable: isSet(object.premiumSubscriptionsTable)
                ? Boolean(object.premiumSubscriptionsTable)
                : undefined,
            promotedTrendBlanks: isSet(object.promotedTrendBlanks) ? Boolean(object.promotedTrendBlanks) : undefined,
            resizedStylesImages: isSet(object.resizedStylesImages) ? Boolean(object.resizedStylesImages) : undefined,
            showAmpLink: isSet(object.showAmpLink) ? Boolean(object.showAmpLink) : undefined,
            showNpsSurvey: isSet(object.showNpsSurvey) ? Boolean(object.showNpsSurvey) : undefined,
            spezModal: isSet(object.spezModal) ? Boolean(object.spezModal) : undefined,
            usePrefAccountDeployment: isSet(object.usePrefAccountDeployment)
                ? Boolean(object.usePrefAccountDeployment)
                : undefined,
            userFlairMigrationTesting: isSet(object.userFlairMigrationTesting)
                ? Boolean(object.userFlairMigrationTesting)
                : undefined,
            webhookConfig: isSet(object.webhookConfig) ? Boolean(object.webhookConfig) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.awardsOnStreams !== undefined && (obj.awardsOnStreams = message.awardsOnStreams);
        message.canMakeMobileTestBuildPurchases !== undefined &&
            (obj.canMakeMobileTestBuildPurchases = message.canMakeMobileTestBuildPurchases);
        message.chatGroupRollout !== undefined && (obj.chatGroupRollout = message.chatGroupRollout);
        message.chatSubreddit !== undefined && (obj.chatSubreddit = message.chatSubreddit);
        message.chatUserSettings !== undefined && (obj.chatUserSettings = message.chatUserSettings);
        message.chat !== undefined && (obj.chat = message.chat);
        message.cookieConsentBanner !== undefined && (obj.cookieConsentBanner = message.cookieConsentBanner);
        message.crosspostNotif !== undefined && (obj.crosspostNotif = message.crosspostNotif);
        message.crowdControlForPost !== undefined && (obj.crowdControlForPost = message.crowdControlForPost);
        message.customFeedImage !== undefined && (obj.customFeedImage = message.customFeedImage);
        message.doNotTrack !== undefined && (obj.doNotTrack = message.doNotTrack);
        message.expensiveCoinsPackage !== undefined && (obj.expensiveCoinsPackage = message.expensiveCoinsPackage);
        message.isEmailPermissionRequired !== undefined &&
            (obj.isEmailPermissionRequired = message.isEmailPermissionRequired);
        message.liveComments !== undefined && (obj.liveComments = message.liveComments);
        message.liveOrangereds !== undefined && (obj.liveOrangereds = message.liveOrangereds);
        message.modAwards !== undefined && (obj.modAwards = message.modAwards);
        message.modServiceMuteReads !== undefined && (obj.modServiceMuteReads = message.modServiceMuteReads);
        message.modServiceMuteWrites !== undefined && (obj.modServiceMuteWrites = message.modServiceMuteWrites);
        message.modlogCopyrightRemoval !== undefined && (obj.modlogCopyrightRemoval = message.modlogCopyrightRemoval);
        message.mwebNsfwXpromo !== undefined &&
            (obj.mwebNsfwXpromo = message.mwebNsfwXpromo
                ? UserFeatures_Experiment.toJSON(message.mwebNsfwXpromo)
                : undefined);
        message.mwebXpromoInterstitialCommentsAndroid !== undefined &&
            (obj.mwebXpromoInterstitialCommentsAndroid = message.mwebXpromoInterstitialCommentsAndroid);
        message.mwebXpromoInterstitialCommentsIos !== undefined &&
            (obj.mwebXpromoInterstitialCommentsIos = message.mwebXpromoInterstitialCommentsIos);
        message.mwebXpromoModalListingClickDailyDismissibleAndroid !== undefined &&
            (obj.mwebXpromoModalListingClickDailyDismissibleAndroid =
                message.mwebXpromoModalListingClickDailyDismissibleAndroid);
        message.mwebXpromoModalListingClickDailyDismissibleIos !== undefined &&
            (obj.mwebXpromoModalListingClickDailyDismissibleIos = message.mwebXpromoModalListingClickDailyDismissibleIos);
        message.mwebXpromoRevampV2 !== undefined && (obj.mwebXpromoRevampV2 = message.mwebXpromoRevampV2
            ? UserFeatures_Experiment.toJSON(message.mwebXpromoRevampV2)
            : undefined);
        message.mwebXpromoRevampV3 !== undefined && (obj.mwebXpromoRevampV3 = message.mwebXpromoRevampV3
            ? UserFeatures_Experiment.toJSON(message.mwebXpromoRevampV3)
            : undefined);
        message.noreferrerToNoopener !== undefined && (obj.noreferrerToNoopener = message.noreferrerToNoopener);
        message.pollsMobile !== undefined && (obj.pollsMobile = message.pollsMobile);
        message.premiumSubscriptionsTable !== undefined &&
            (obj.premiumSubscriptionsTable = message.premiumSubscriptionsTable);
        message.promotedTrendBlanks !== undefined && (obj.promotedTrendBlanks = message.promotedTrendBlanks);
        message.resizedStylesImages !== undefined && (obj.resizedStylesImages = message.resizedStylesImages);
        message.showAmpLink !== undefined && (obj.showAmpLink = message.showAmpLink);
        message.showNpsSurvey !== undefined && (obj.showNpsSurvey = message.showNpsSurvey);
        message.spezModal !== undefined && (obj.spezModal = message.spezModal);
        message.usePrefAccountDeployment !== undefined && (obj.usePrefAccountDeployment = message.usePrefAccountDeployment);
        message.userFlairMigrationTesting !== undefined &&
            (obj.userFlairMigrationTesting = message.userFlairMigrationTesting);
        message.webhookConfig !== undefined && (obj.webhookConfig = message.webhookConfig);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUserFeatures();
        message.awardsOnStreams = object.awardsOnStreams ?? undefined;
        message.canMakeMobileTestBuildPurchases = object.canMakeMobileTestBuildPurchases ?? undefined;
        message.chatGroupRollout = object.chatGroupRollout ?? undefined;
        message.chatSubreddit = object.chatSubreddit ?? undefined;
        message.chatUserSettings = object.chatUserSettings ?? undefined;
        message.chat = object.chat ?? undefined;
        message.cookieConsentBanner = object.cookieConsentBanner ?? undefined;
        message.crosspostNotif = object.crosspostNotif ?? undefined;
        message.crowdControlForPost = object.crowdControlForPost ?? undefined;
        message.customFeedImage = object.customFeedImage ?? undefined;
        message.doNotTrack = object.doNotTrack ?? undefined;
        message.expensiveCoinsPackage = object.expensiveCoinsPackage ?? undefined;
        message.isEmailPermissionRequired = object.isEmailPermissionRequired ?? undefined;
        message.liveComments = object.liveComments ?? undefined;
        message.liveOrangereds = object.liveOrangereds ?? undefined;
        message.modAwards = object.modAwards ?? undefined;
        message.modServiceMuteReads = object.modServiceMuteReads ?? undefined;
        message.modServiceMuteWrites = object.modServiceMuteWrites ?? undefined;
        message.modlogCopyrightRemoval = object.modlogCopyrightRemoval ?? undefined;
        message.mwebNsfwXpromo = (object.mwebNsfwXpromo !== undefined && object.mwebNsfwXpromo !== null)
            ? UserFeatures_Experiment.fromPartial(object.mwebNsfwXpromo)
            : undefined;
        message.mwebXpromoInterstitialCommentsAndroid = object.mwebXpromoInterstitialCommentsAndroid ?? undefined;
        message.mwebXpromoInterstitialCommentsIos = object.mwebXpromoInterstitialCommentsIos ?? undefined;
        message.mwebXpromoModalListingClickDailyDismissibleAndroid =
            object.mwebXpromoModalListingClickDailyDismissibleAndroid ?? undefined;
        message.mwebXpromoModalListingClickDailyDismissibleIos = object.mwebXpromoModalListingClickDailyDismissibleIos ??
            undefined;
        message.mwebXpromoRevampV2 = (object.mwebXpromoRevampV2 !== undefined && object.mwebXpromoRevampV2 !== null)
            ? UserFeatures_Experiment.fromPartial(object.mwebXpromoRevampV2)
            : undefined;
        message.mwebXpromoRevampV3 = (object.mwebXpromoRevampV3 !== undefined && object.mwebXpromoRevampV3 !== null)
            ? UserFeatures_Experiment.fromPartial(object.mwebXpromoRevampV3)
            : undefined;
        message.noreferrerToNoopener = object.noreferrerToNoopener ?? undefined;
        message.pollsMobile = object.pollsMobile ?? undefined;
        message.premiumSubscriptionsTable = object.premiumSubscriptionsTable ?? undefined;
        message.promotedTrendBlanks = object.promotedTrendBlanks ?? undefined;
        message.resizedStylesImages = object.resizedStylesImages ?? undefined;
        message.showAmpLink = object.showAmpLink ?? undefined;
        message.showNpsSurvey = object.showNpsSurvey ?? undefined;
        message.spezModal = object.spezModal ?? undefined;
        message.usePrefAccountDeployment = object.usePrefAccountDeployment ?? undefined;
        message.userFlairMigrationTesting = object.userFlairMigrationTesting ?? undefined;
        message.webhookConfig = object.webhookConfig ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.UserFeatures", UserFeatures);
function createBaseUserFeatures_Experiment() {
    return { experimentId: undefined, owner: undefined, variant: undefined };
}
export const UserFeatures_Experiment = {
    $type: "devvit.reddit.UserFeatures.Experiment",
    encode(message, writer = _m0.Writer.create()) {
        if (message.experimentId !== undefined) {
            Int32Value.encode({ value: message.experimentId }, writer.uint32(10).fork()).ldelim();
        }
        if (message.owner !== undefined) {
            StringValue.encode({ value: message.owner }, writer.uint32(18).fork()).ldelim();
        }
        if (message.variant !== undefined) {
            StringValue.encode({ value: message.variant }, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserFeatures_Experiment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.experimentId = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 2:
                    message.owner = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.variant = StringValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            experimentId: isSet(object.experimentId) ? Number(object.experimentId) : undefined,
            owner: isSet(object.owner) ? String(object.owner) : undefined,
            variant: isSet(object.variant) ? String(object.variant) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.experimentId !== undefined && (obj.experimentId = message.experimentId);
        message.owner !== undefined && (obj.owner = message.owner);
        message.variant !== undefined && (obj.variant = message.variant);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUserFeatures_Experiment();
        message.experimentId = object.experimentId ?? undefined;
        message.owner = object.owner ?? undefined;
        message.variant = object.variant ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.UserFeatures.Experiment", UserFeatures_Experiment);
function isSet(value) {
    return value !== null && value !== undefined;
}

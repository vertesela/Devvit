/**
 * #filter.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { firehoseEventFromJSON, firehoseEventToJSON } from '../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON } from '../../../reddit/v2alpha/subredditv2.js';
function createBaseFirehoseFilterData() {
    return { event: 0, subredditId: "", subredditRating: 0 };
}
export const FirehoseFilterData = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== 0) {
            writer.uint32(8).int32(message.event);
        }
        if (message.subredditId !== "") {
            writer.uint32(18).string(message.subredditId);
        }
        if (message.subredditRating !== 0) {
            writer.uint32(24).int32(message.subredditRating);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = reader.int32();
                    break;
                case 2:
                    message.subredditId = reader.string();
                    break;
                case 3:
                    message.subredditRating = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            event: isSet(object.event) ? firehoseEventFromJSON(object.event) : 0,
            subredditId: isSet(object.subredditId) ? String(object.subredditId) : "",
            subredditRating: isSet(object.subredditRating) ? subredditRatingFromJSON(object.subredditRating) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = firehoseEventToJSON(message.event));
        message.subredditId !== undefined && (obj.subredditId = message.subredditId);
        message.subredditRating !== undefined && (obj.subredditRating = subredditRatingToJSON(message.subredditRating));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData();
        message.event = object.event ?? 0;
        message.subredditId = object.subredditId ?? "";
        message.subredditRating = object.subredditRating ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.FirehoseFilterData", FirehoseFilterData);
function isSet(value) {
    return value !== null && value !== undefined;
}

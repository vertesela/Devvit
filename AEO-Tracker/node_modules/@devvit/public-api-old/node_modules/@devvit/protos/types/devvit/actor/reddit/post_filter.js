/**
 * #post_filter.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { Post } from '../../reddit/post.js';
function createBasePostFilterRequest() {
    return { post: undefined };
}
export const PostFilterRequest = {
    $type: "devvit.actor.reddit.PostFilterRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            Post.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostFilterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.post = Post.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { post: isSet(object.post) ? Post.fromJSON(object.post) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.post !== undefined && (obj.post = message.post ? Post.toJSON(message.post) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePostFilterRequest();
        message.post = (object.post !== undefined && object.post !== null) ? Post.fromPartial(object.post) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.reddit.PostFilterRequest", PostFilterRequest);
function createBaseResponse() {
    return { accepted: false };
}
export const Response = {
    $type: "devvit.actor.reddit.Response",
    encode(message, writer = _m0.Writer.create()) {
        if (message.accepted === true) {
            writer.uint32(8).bool(message.accepted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accepted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { accepted: isSet(object.accepted) ? Boolean(object.accepted) : false };
    },
    toJSON(message) {
        const obj = {};
        message.accepted !== undefined && (obj.accepted = message.accepted);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.accepted = object.accepted ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.reddit.Response", Response);
export class PostFilterClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.reddit.PostFilter";
        this.rpc = rpc;
        this.Filter = this.Filter.bind(this);
    }
    Filter(request) {
        const data = PostFilterRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Filter", data);
        return promise.then((data) => Response.decode(new _m0.Reader(data)));
    }
}
export const PostFilterDefinition = {
    name: "PostFilter",
    fullName: "devvit.actor.reddit.PostFilter",
    methods: {
        filter: {
            name: "Filter",
            requestType: PostFilterRequest,
            requestStream: false,
            responseType: Response,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

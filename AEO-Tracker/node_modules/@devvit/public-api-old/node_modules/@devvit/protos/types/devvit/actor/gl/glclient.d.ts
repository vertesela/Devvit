/**
 * #glclient.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface ConfigMessage {
    width: number;
    height: number;
}
export interface TickMessage {
}
export interface InputMessage {
}
export declare const ConfigMessage: {
    $type: "devvit.actor.gl.ConfigMessage";
    encode(message: ConfigMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigMessage;
    fromJSON(object: any): ConfigMessage;
    toJSON(message: ConfigMessage): unknown;
    fromPartial<I extends {
        width?: number | undefined;
        height?: number | undefined;
    } & {
        width?: number | undefined;
        height?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ConfigMessage>]: never; }>(object: I): ConfigMessage;
};
export declare const TickMessage: {
    $type: "devvit.actor.gl.TickMessage";
    encode(_: TickMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TickMessage;
    fromJSON(_: any): TickMessage;
    toJSON(_: TickMessage): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): TickMessage;
};
export declare const InputMessage: {
    $type: "devvit.actor.gl.InputMessage";
    encode(_: InputMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InputMessage;
    fromJSON(_: any): InputMessage;
    toJSON(_: InputMessage): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): InputMessage;
};
export interface GLClient {
    OnConfig(request: ConfigMessage, metadata?: Metadata): Promise<Empty>;
    OnFrameTick(request: TickMessage, metadata?: Metadata): Promise<Empty>;
    OnInput(request: InputMessage, metadata?: Metadata): Promise<Empty>;
}
export declare class GLClientClientImpl implements GLClient {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnConfig(request: ConfigMessage): Promise<Empty>;
    OnFrameTick(request: TickMessage): Promise<Empty>;
    OnInput(request: InputMessage): Promise<Empty>;
}
export type GLClientDefinition = typeof GLClientDefinition;
export declare const GLClientDefinition: {
    readonly name: "GLClient";
    readonly fullName: "devvit.actor.gl.GLClient";
    readonly methods: {
        readonly onConfig: {
            readonly name: "OnConfig";
            readonly requestType: {
                $type: "devvit.actor.gl.ConfigMessage";
                encode(message: ConfigMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigMessage;
                fromJSON(object: any): ConfigMessage;
                toJSON(message: ConfigMessage): unknown;
                fromPartial<I extends {
                    width?: number | undefined;
                    height?: number | undefined;
                } & {
                    width?: number | undefined;
                    height?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof ConfigMessage>]: never; }>(object: I): ConfigMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onFrameTick: {
            readonly name: "OnFrameTick";
            readonly requestType: {
                $type: "devvit.actor.gl.TickMessage";
                encode(_: TickMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TickMessage;
                fromJSON(_: any): TickMessage;
                toJSON(_: TickMessage): unknown;
                fromPartial<I_2 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_2): TickMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onInput: {
            readonly name: "OnInput";
            readonly requestType: {
                $type: "devvit.actor.gl.InputMessage";
                encode(_: InputMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InputMessage;
                fromJSON(_: any): InputMessage;
                toJSON(_: InputMessage): unknown;
                fromPartial<I_3 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_3): InputMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=glclient.d.ts.map
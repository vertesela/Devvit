/**
 * #http.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface FetchRequest {
    url: string;
    data?: RequestData;
}
export interface RequestData {
    method: string;
    headers: {
        [key: string]: string;
    };
    body: Uint8Array;
}
export interface RequestData_HeadersEntry {
    key: string;
    value: string;
}
export interface FetchResponse {
    url: string;
    body: Uint8Array;
    status: number;
    headers: {
        [key: string]: string;
    };
}
export interface FetchResponse_HeadersEntry {
    key: string;
    value: string;
}
export declare const FetchRequest: {
    $type: "devvit.plugin.http.FetchRequest";
    encode(message: FetchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchRequest;
    fromJSON(object: any): FetchRequest;
    toJSON(message: FetchRequest): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        data?: {
            method?: string | undefined;
            headers?: {
                [x: string]: string | undefined;
            } | undefined;
            body?: Uint8Array | undefined;
        } | undefined;
    } & {
        url?: string | undefined;
        data?: ({
            method?: string | undefined;
            headers?: {
                [x: string]: string | undefined;
            } | undefined;
            body?: Uint8Array | undefined;
        } & {
            method?: string | undefined;
            headers?: ({
                [x: string]: string | undefined;
            } & {
                [x: string]: string | undefined;
            } & { [K in Exclude<keyof I["data"]["headers"], string | number>]: never; }) | undefined;
            body?: Uint8Array | undefined;
        } & { [K_1 in Exclude<keyof I["data"], "$type" | keyof RequestData>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof FetchRequest>]: never; }>(object: I): FetchRequest;
};
export declare const RequestData: {
    $type: "devvit.plugin.http.RequestData";
    encode(message: RequestData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestData;
    fromJSON(object: any): RequestData;
    toJSON(message: RequestData): unknown;
    fromPartial<I extends {
        method?: string | undefined;
        headers?: {
            [x: string]: string | undefined;
        } | undefined;
        body?: Uint8Array | undefined;
    } & {
        method?: string | undefined;
        headers?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["headers"], string | number>]: never; }) | undefined;
        body?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof RequestData>]: never; }>(object: I): RequestData;
};
export declare const RequestData_HeadersEntry: {
    $type: "devvit.plugin.http.RequestData.HeadersEntry";
    encode(message: RequestData_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestData_HeadersEntry;
    fromJSON(object: any): RequestData_HeadersEntry;
    toJSON(message: RequestData_HeadersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RequestData_HeadersEntry>]: never; }>(object: I): RequestData_HeadersEntry;
};
export declare const FetchResponse: {
    $type: "devvit.plugin.http.FetchResponse";
    encode(message: FetchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse;
    fromJSON(object: any): FetchResponse;
    toJSON(message: FetchResponse): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        body?: Uint8Array | undefined;
        status?: number | undefined;
        headers?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        url?: string | undefined;
        body?: Uint8Array | undefined;
        status?: number | undefined;
        headers?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["headers"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof FetchResponse>]: never; }>(object: I): FetchResponse;
};
export declare const FetchResponse_HeadersEntry: {
    $type: "devvit.plugin.http.FetchResponse.HeadersEntry";
    encode(message: FetchResponse_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse_HeadersEntry;
    fromJSON(object: any): FetchResponse_HeadersEntry;
    toJSON(message: FetchResponse_HeadersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof FetchResponse_HeadersEntry>]: never; }>(object: I): FetchResponse_HeadersEntry;
};
export interface HTTP {
    Fetch(request: FetchRequest, metadata?: Metadata): Promise<FetchResponse>;
}
export declare class HTTPClientImpl implements HTTP {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Fetch(request: FetchRequest): Promise<FetchResponse>;
}
export type HTTPDefinition = typeof HTTPDefinition;
export declare const HTTPDefinition: {
    readonly name: "HTTP";
    readonly fullName: "devvit.plugin.http.HTTP";
    readonly methods: {
        readonly fetch: {
            readonly name: "Fetch";
            readonly requestType: {
                $type: "devvit.plugin.http.FetchRequest";
                encode(message: FetchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchRequest;
                fromJSON(object: any): FetchRequest;
                toJSON(message: FetchRequest): unknown;
                fromPartial<I extends {
                    url?: string | undefined;
                    data?: {
                        method?: string | undefined;
                        headers?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        body?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    url?: string | undefined;
                    data?: ({
                        method?: string | undefined;
                        headers?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        body?: Uint8Array | undefined;
                    } & {
                        method?: string | undefined;
                        headers?: ({
                            [x: string]: string | undefined;
                        } & {
                            [x: string]: string | undefined;
                        } & { [K in Exclude<keyof I["data"]["headers"], string | number>]: never; }) | undefined;
                        body?: Uint8Array | undefined;
                    } & { [K_1 in Exclude<keyof I["data"], "$type" | keyof RequestData>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | keyof FetchRequest>]: never; }>(object: I): FetchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.http.FetchResponse";
                encode(message: FetchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse;
                fromJSON(object: any): FetchResponse;
                toJSON(message: FetchResponse): unknown;
                fromPartial<I_1 extends {
                    url?: string | undefined;
                    body?: Uint8Array | undefined;
                    status?: number | undefined;
                    headers?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } & {
                    url?: string | undefined;
                    body?: Uint8Array | undefined;
                    status?: number | undefined;
                    headers?: ({
                        [x: string]: string | undefined;
                    } & {
                        [x: string]: string | undefined;
                    } & { [K in Exclude<keyof I["headers"], string | number>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof FetchResponse>]: never; }>(object: I_1): FetchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=http.d.ts.map
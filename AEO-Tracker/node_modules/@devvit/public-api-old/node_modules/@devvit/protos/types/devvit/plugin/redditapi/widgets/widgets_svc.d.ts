/**
 * #widgets_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, ButtonWidget, CalendarWidget, CommunityListWidget, CustomWidget, DeleteWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, GetWidgetsRequest, GetWidgetsResponse, ImageWidget, OrderWidgetsRequest, PostFlairWidget, TextAreaWidget, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest } from './widgets_msg.js';
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export interface Widgets {
    /**
     * Add a button widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddButtonWidget(request: AddButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Add an image widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddImageWidget(request: AddImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Add a calendar widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCalendarWidget(request: AddCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Add a text widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddTextAreaWidget(request: AddTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Add a community list widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCommunityListWidget(request: AddCommunityListWidgetRequest, metadata?: Metadata): Promise<CommunityListWidget>;
    /**
     * Add a post flair widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddPostFlairWidget(request: AddPostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Add a custom widget to a subreddit. This is an experimental feature.
     * Custom widgets don't display on mobile devices. Customizations can break at any time
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCustomWidget(request: AddCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Delete a widget from a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
     */
    DeleteWidget(request: DeleteWidgetRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Update a button widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateButtonWidget(request: UpdateButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Update an image widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateImageWidget(request: UpdateImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Update a calendar widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Update a text widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Update a community list widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest, metadata?: Metadata): Promise<UpdateCommunityListWidgetResponse>;
    /**
     * Update a post flair widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Update a custom widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCustomWidget(request: UpdateCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
     */
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest, metadata?: Metadata): Promise<GetWidgetImageUploadLeaseResponse>;
    /**
     * Update the order of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
     */
    OrderWidgets(request: OrderWidgetsRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get a list of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
     */
    GetWidgets(request: GetWidgetsRequest, metadata?: Metadata): Promise<GetWidgetsResponse>;
}
export declare class WidgetsClientImpl implements Widgets {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AddButtonWidget(request: AddButtonWidgetRequest): Promise<ButtonWidget>;
    AddImageWidget(request: AddImageWidgetRequest): Promise<ImageWidget>;
    AddCalendarWidget(request: AddCalendarWidgetRequest): Promise<CalendarWidget>;
    AddTextAreaWidget(request: AddTextAreaWidgetRequest): Promise<TextAreaWidget>;
    AddCommunityListWidget(request: AddCommunityListWidgetRequest): Promise<CommunityListWidget>;
    AddPostFlairWidget(request: AddPostFlairWidgetRequest): Promise<PostFlairWidget>;
    AddCustomWidget(request: AddCustomWidgetRequest): Promise<CustomWidget>;
    DeleteWidget(request: DeleteWidgetRequest): Promise<Empty>;
    UpdateButtonWidget(request: UpdateButtonWidgetRequest): Promise<ButtonWidget>;
    UpdateImageWidget(request: UpdateImageWidgetRequest): Promise<ImageWidget>;
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest): Promise<CalendarWidget>;
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest): Promise<TextAreaWidget>;
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest): Promise<UpdateCommunityListWidgetResponse>;
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest): Promise<PostFlairWidget>;
    UpdateCustomWidget(request: UpdateCustomWidgetRequest): Promise<CustomWidget>;
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest): Promise<GetWidgetImageUploadLeaseResponse>;
    OrderWidgets(request: OrderWidgetsRequest): Promise<Empty>;
    GetWidgets(request: GetWidgetsRequest): Promise<GetWidgetsResponse>;
}
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export type WidgetsDefinition = typeof WidgetsDefinition;
export declare const WidgetsDefinition: {
    readonly name: "Widgets";
    readonly fullName: "devvit.plugin.redditapi.widgets.Widgets";
    readonly methods: {
        /**
         * Add a button widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addButtonWidget: {
            readonly name: "AddButtonWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddButtonWidgetRequest";
                encode(message: AddButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddButtonWidgetRequest;
                fromJSON(object: any): AddButtonWidgetRequest;
                toJSON(message: AddButtonWidgetRequest): unknown;
                fromPartial<I extends {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] & ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    } & {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: ({
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & { [K in Exclude<keyof I["buttons"][number]["hoverState"], "$type" | keyof import("./widgets_msg.js").WidgetButton_HoverState>]: never; }) | undefined;
                    } & { [K_1 in Exclude<keyof I["buttons"][number], "$type" | keyof import("./widgets_msg.js").WidgetButton>]: never; })[] & { [K_2 in Exclude<keyof I["buttons"], "$type" | keyof {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_3 in Exclude<keyof I["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I, "$type" | keyof AddButtonWidgetRequest>]: never; }>(object: I): AddButtonWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ButtonWidget";
                encode(message: ButtonWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ButtonWidget;
                fromJSON(object: any): ButtonWidget;
                toJSON(message: ButtonWidget): unknown;
                fromPartial<I_1 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] & ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    } & {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: ({
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & { [K_5 in Exclude<keyof I_1["buttons"][number]["hoverState"], "$type" | keyof import("./widgets_msg.js").WidgetButton_HoverState>]: never; }) | undefined;
                    } & { [K_6 in Exclude<keyof I_1["buttons"][number], "$type" | keyof import("./widgets_msg.js").WidgetButton>]: never; })[] & { [K_7 in Exclude<keyof I_1["buttons"], "$type" | keyof {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_8 in Exclude<keyof I_1["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I_1, "$type" | keyof ButtonWidget>]: never; }>(object: I_1): ButtonWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add an image widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addImageWidget: {
            readonly name: "AddImageWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddImageWidgetRequest";
                encode(message: AddImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddImageWidgetRequest;
                fromJSON(object: any): AddImageWidgetRequest;
                toJSON(message: AddImageWidgetRequest): unknown;
                fromPartial<I_2 extends {
                    subreddit?: string | undefined;
                    data?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    data?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_10 in Exclude<keyof I_2["data"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_11 in Exclude<keyof I_2["data"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_12 in Exclude<keyof I_2["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_13 in Exclude<keyof I_2, "$type" | keyof AddImageWidgetRequest>]: never; }>(object: I_2): AddImageWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ImageWidget";
                /**
                 * Add an image widget to a subreddit.
                 *
                 * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
                 */
                encode(message: ImageWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ImageWidget;
                fromJSON(object: any): ImageWidget;
                toJSON(message: ImageWidget): unknown;
                fromPartial<I_3 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    data?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                    subreddit?: string | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    data?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_14 in Exclude<keyof I_3["data"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_15 in Exclude<keyof I_3["data"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_16 in Exclude<keyof I_3["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                    subreddit?: string | undefined;
                } & { [K_17 in Exclude<keyof I_3, "$type" | keyof ImageWidget>]: never; }>(object: I_3): ImageWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add a calendar widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCalendarWidget: {
            readonly name: "AddCalendarWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCalendarWidgetRequest";
                encode(message: AddCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddCalendarWidgetRequest;
                fromJSON(object: any): AddCalendarWidgetRequest;
                toJSON(message: AddCalendarWidgetRequest): unknown;
                fromPartial<I_4 extends {
                    subreddit?: string | undefined;
                    configuration?: {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    configuration?: ({
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & { [K_18 in Exclude<keyof I_4["configuration"], "$type" | keyof import("./widgets_msg.js").CalendarWidgetConfiguration>]: never; }) | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_19 in Exclude<keyof I_4["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_20 in Exclude<keyof I_4, "$type" | keyof AddCalendarWidgetRequest>]: never; }>(object: I_4): AddCalendarWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CalendarWidget";
                encode(message: CalendarWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CalendarWidget;
                fromJSON(object: any): CalendarWidget;
                toJSON(message: CalendarWidget): unknown;
                fromPartial<I_5 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    configuration?: {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    configuration?: ({
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & { [K_21 in Exclude<keyof I_5["configuration"], "$type" | keyof import("./widgets_msg.js").CalendarWidgetConfiguration>]: never; }) | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_22 in Exclude<keyof I_5["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_23 in Exclude<keyof I_5, "$type" | keyof CalendarWidget>]: never; }>(object: I_5): CalendarWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add a text widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addTextAreaWidget: {
            readonly name: "AddTextAreaWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddTextAreaWidgetRequest";
                encode(message: AddTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddTextAreaWidgetRequest;
                fromJSON(object: any): AddTextAreaWidgetRequest;
                toJSON(message: AddTextAreaWidgetRequest): unknown;
                fromPartial<I_6 extends {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_24 in Exclude<keyof I_6["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_25 in Exclude<keyof I_6, "$type" | keyof AddTextAreaWidgetRequest>]: never; }>(object: I_6): AddTextAreaWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.TextAreaWidget";
                encode(message: TextAreaWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TextAreaWidget;
                fromJSON(object: any): TextAreaWidget;
                toJSON(message: TextAreaWidget): unknown;
                fromPartial<I_7 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_26 in Exclude<keyof I_7["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_27 in Exclude<keyof I_7, "$type" | keyof TextAreaWidget>]: never; }>(object: I_7): TextAreaWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add a community list widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCommunityListWidget: {
            readonly name: "AddCommunityListWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCommunityListWidgetRequest";
                encode(message: AddCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddCommunityListWidgetRequest;
                fromJSON(object: any): AddCommunityListWidgetRequest;
                toJSON(message: AddCommunityListWidgetRequest): unknown;
                fromPartial<I_8 extends {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    data?: string[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    data?: (string[] & string[] & { [K_28 in Exclude<keyof I_8["data"], "$type" | keyof string[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_29 in Exclude<keyof I_8["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_30 in Exclude<keyof I_8, "$type" | keyof AddCommunityListWidgetRequest>]: never; }>(object: I_8): AddCommunityListWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CommunityListWidget";
                encode(message: CommunityListWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommunityListWidget;
                fromJSON(object: any): CommunityListWidget;
                toJSON(message: CommunityListWidget): unknown;
                fromPartial<I_9 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    data?: {
                        communityIcon?: string | undefined;
                        iconUrl?: string | undefined;
                        isNsfw?: boolean | undefined;
                        isSubscribed?: boolean | undefined;
                        name?: string | undefined;
                        prefixedName?: string | undefined;
                        primaryColor?: string | undefined;
                        subscribers?: number | undefined;
                        type?: string | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    data?: ({
                        communityIcon?: string | undefined;
                        iconUrl?: string | undefined;
                        isNsfw?: boolean | undefined;
                        isSubscribed?: boolean | undefined;
                        name?: string | undefined;
                        prefixedName?: string | undefined;
                        primaryColor?: string | undefined;
                        subscribers?: number | undefined;
                        type?: string | undefined;
                    }[] & ({
                        communityIcon?: string | undefined;
                        iconUrl?: string | undefined;
                        isNsfw?: boolean | undefined;
                        isSubscribed?: boolean | undefined;
                        name?: string | undefined;
                        prefixedName?: string | undefined;
                        primaryColor?: string | undefined;
                        subscribers?: number | undefined;
                        type?: string | undefined;
                    } & {
                        communityIcon?: string | undefined;
                        iconUrl?: string | undefined;
                        isNsfw?: boolean | undefined;
                        isSubscribed?: boolean | undefined;
                        name?: string | undefined;
                        prefixedName?: string | undefined;
                        primaryColor?: string | undefined;
                        subscribers?: number | undefined;
                        type?: string | undefined;
                    } & { [K_31 in Exclude<keyof I_9["data"][number], "$type" | keyof import("./widgets_msg.js").CommunityListWidget_CommunityData>]: never; })[] & { [K_32 in Exclude<keyof I_9["data"], "$type" | keyof {
                        communityIcon?: string | undefined;
                        iconUrl?: string | undefined;
                        isNsfw?: boolean | undefined;
                        isSubscribed?: boolean | undefined;
                        name?: string | undefined;
                        prefixedName?: string | undefined;
                        primaryColor?: string | undefined;
                        subscribers?: number | undefined;
                        type?: string | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_33 in Exclude<keyof I_9["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_34 in Exclude<keyof I_9, "$type" | keyof CommunityListWidget>]: never; }>(object: I_9): CommunityListWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add a post flair widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addPostFlairWidget: {
            readonly name: "AddPostFlairWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddPostFlairWidgetRequest";
                encode(message: AddPostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddPostFlairWidgetRequest;
                fromJSON(object: any): AddPostFlairWidgetRequest;
                toJSON(message: AddPostFlairWidgetRequest): unknown;
                fromPartial<I_10 extends {
                    subreddit?: string | undefined;
                    display?: string | undefined;
                    order?: string[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    display?: string | undefined;
                    order?: (string[] & string[] & { [K_35 in Exclude<keyof I_10["order"], "$type" | keyof string[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_36 in Exclude<keyof I_10["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_37 in Exclude<keyof I_10, "$type" | keyof AddPostFlairWidgetRequest>]: never; }>(object: I_10): AddPostFlairWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.PostFlairWidget";
                encode(message: PostFlairWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostFlairWidget;
                fromJSON(object: any): PostFlairWidget;
                toJSON(message: PostFlairWidget): unknown;
                fromPartial<I_11 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    display?: string | undefined;
                    order?: string[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                    subreddit?: string | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    display?: string | undefined;
                    order?: (string[] & string[] & { [K_38 in Exclude<keyof I_11["order"], "$type" | keyof string[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_39 in Exclude<keyof I_11["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                    subreddit?: string | undefined;
                } & { [K_40 in Exclude<keyof I_11, "$type" | keyof PostFlairWidget>]: never; }>(object: I_11): PostFlairWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Add a custom widget to a subreddit. This is an experimental feature.
         * Custom widgets don't display on mobile devices. Customizations can break at any time
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        readonly addCustomWidget: {
            readonly name: "AddCustomWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.AddCustomWidgetRequest";
                encode(message: AddCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddCustomWidgetRequest;
                fromJSON(object: any): AddCustomWidgetRequest;
                toJSON(message: AddCustomWidgetRequest): unknown;
                fromPartial<I_12 extends {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_41 in Exclude<keyof I_12["imageData"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_42 in Exclude<keyof I_12["imageData"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_43 in Exclude<keyof I_12["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_44 in Exclude<keyof I_12, "$type" | keyof AddCustomWidgetRequest>]: never; }>(object: I_12): AddCustomWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CustomWidget";
                encode(message: CustomWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CustomWidget;
                fromJSON(object: any): CustomWidget;
                toJSON(message: CustomWidget): unknown;
                fromPartial<I_13 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_45 in Exclude<keyof I_13["imageData"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_46 in Exclude<keyof I_13["imageData"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_47 in Exclude<keyof I_13["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_48 in Exclude<keyof I_13, "$type" | keyof CustomWidget>]: never; }>(object: I_13): CustomWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Delete a widget from a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
         */
        readonly deleteWidget: {
            readonly name: "DeleteWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.DeleteWidgetRequest";
                encode(message: DeleteWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteWidgetRequest;
                fromJSON(object: any): DeleteWidgetRequest;
                toJSON(message: DeleteWidgetRequest): unknown;
                fromPartial<I_14 extends {
                    id?: string | undefined;
                    subreddit?: string | undefined;
                } & {
                    id?: string | undefined;
                    subreddit?: string | undefined;
                } & { [K_49 in Exclude<keyof I_14, "$type" | keyof DeleteWidgetRequest>]: never; }>(object: I_14): DeleteWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_15 extends {} & {} & { [K_50 in Exclude<keyof I_15, "$type">]: never; }>(_: I_15): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a button widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateButtonWidget: {
            readonly name: "UpdateButtonWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateButtonWidgetRequest";
                encode(message: UpdateButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateButtonWidgetRequest;
                fromJSON(object: any): UpdateButtonWidgetRequest;
                toJSON(message: UpdateButtonWidgetRequest): unknown;
                fromPartial<I_16 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] & ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    } & {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: ({
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & { [K_51 in Exclude<keyof I_16["buttons"][number]["hoverState"], "$type" | keyof import("./widgets_msg.js").WidgetButton_HoverState>]: never; }) | undefined;
                    } & { [K_52 in Exclude<keyof I_16["buttons"][number], "$type" | keyof import("./widgets_msg.js").WidgetButton>]: never; })[] & { [K_53 in Exclude<keyof I_16["buttons"], "$type" | keyof {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_54 in Exclude<keyof I_16["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_55 in Exclude<keyof I_16, "$type" | keyof UpdateButtonWidgetRequest>]: never; }>(object: I_16): UpdateButtonWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ButtonWidget";
                encode(message: ButtonWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ButtonWidget;
                fromJSON(object: any): ButtonWidget;
                toJSON(message: ButtonWidget): unknown;
                fromPartial<I_1 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    description?: string | undefined;
                    buttons?: ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[] & ({
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    } & {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: ({
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } & { [K_5 in Exclude<keyof I_1["buttons"][number]["hoverState"], "$type" | keyof import("./widgets_msg.js").WidgetButton_HoverState>]: never; }) | undefined;
                    } & { [K_6 in Exclude<keyof I_1["buttons"][number], "$type" | keyof import("./widgets_msg.js").WidgetButton>]: never; })[] & { [K_7 in Exclude<keyof I_1["buttons"], "$type" | keyof {
                        kind?: string | undefined;
                        text?: string | undefined;
                        url?: string | undefined;
                        imageUrl?: string | undefined;
                        linkUrl?: string | undefined;
                        color?: string | undefined;
                        fillColor?: string | undefined;
                        textColor?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                        hoverState?: {
                            kind?: string | undefined;
                            color?: string | undefined;
                            fillColor?: string | undefined;
                            text?: string | undefined;
                            textColor?: string | undefined;
                            imageUrl?: string | undefined;
                            height?: number | undefined;
                            width?: number | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_8 in Exclude<keyof I_1["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I_1, "$type" | keyof ButtonWidget>]: never; }>(object: I_1): ButtonWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update an image widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateImageWidget: {
            readonly name: "UpdateImageWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateImageWidgetRequest";
                encode(message: UpdateImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateImageWidgetRequest;
                fromJSON(object: any): UpdateImageWidgetRequest;
                toJSON(message: UpdateImageWidgetRequest): unknown;
                fromPartial<I_17 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    data?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    data?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_56 in Exclude<keyof I_17["data"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_57 in Exclude<keyof I_17["data"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_58 in Exclude<keyof I_17["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_59 in Exclude<keyof I_17, "$type" | keyof UpdateImageWidgetRequest>]: never; }>(object: I_17): UpdateImageWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.ImageWidget";
                /**
                 * Add an image widget to a subreddit.
                 *
                 * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
                 */
                encode(message: ImageWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ImageWidget;
                fromJSON(object: any): ImageWidget;
                toJSON(message: ImageWidget): unknown;
                fromPartial<I_3 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    data?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                    subreddit?: string | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    data?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_14 in Exclude<keyof I_3["data"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_15 in Exclude<keyof I_3["data"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_16 in Exclude<keyof I_3["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                    subreddit?: string | undefined;
                } & { [K_17 in Exclude<keyof I_3, "$type" | keyof ImageWidget>]: never; }>(object: I_3): ImageWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a calendar widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCalendarWidget: {
            readonly name: "UpdateCalendarWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCalendarWidgetRequest";
                encode(message: UpdateCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCalendarWidgetRequest;
                fromJSON(object: any): UpdateCalendarWidgetRequest;
                toJSON(message: UpdateCalendarWidgetRequest): unknown;
                fromPartial<I_18 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    configuration?: {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    configuration?: ({
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & { [K_60 in Exclude<keyof I_18["configuration"], "$type" | keyof import("./widgets_msg.js").CalendarWidgetConfiguration>]: never; }) | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_61 in Exclude<keyof I_18["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_62 in Exclude<keyof I_18, "$type" | keyof UpdateCalendarWidgetRequest>]: never; }>(object: I_18): UpdateCalendarWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CalendarWidget";
                encode(message: CalendarWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CalendarWidget;
                fromJSON(object: any): CalendarWidget;
                toJSON(message: CalendarWidget): unknown;
                fromPartial<I_5 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    configuration?: {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    configuration?: ({
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & {
                        numEvents?: number | undefined;
                        showDate?: boolean | undefined;
                        showDescription?: boolean | undefined;
                        showLocation?: boolean | undefined;
                        showTime?: boolean | undefined;
                        showTitle?: boolean | undefined;
                    } & { [K_21 in Exclude<keyof I_5["configuration"], "$type" | keyof import("./widgets_msg.js").CalendarWidgetConfiguration>]: never; }) | undefined;
                    googleCalendarId?: string | undefined;
                    requiresSync?: boolean | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_22 in Exclude<keyof I_5["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_23 in Exclude<keyof I_5, "$type" | keyof CalendarWidget>]: never; }>(object: I_5): CalendarWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a text widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateTextAreaWidget: {
            readonly name: "UpdateTextAreaWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateTextAreaWidgetRequest";
                encode(message: UpdateTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateTextAreaWidgetRequest;
                fromJSON(object: any): UpdateTextAreaWidgetRequest;
                toJSON(message: UpdateTextAreaWidgetRequest): unknown;
                fromPartial<I_19 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_63 in Exclude<keyof I_19["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_64 in Exclude<keyof I_19, "$type" | keyof UpdateTextAreaWidgetRequest>]: never; }>(object: I_19): UpdateTextAreaWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.TextAreaWidget";
                encode(message: TextAreaWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TextAreaWidget;
                fromJSON(object: any): TextAreaWidget;
                toJSON(message: TextAreaWidget): unknown;
                fromPartial<I_7 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_26 in Exclude<keyof I_7["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_27 in Exclude<keyof I_7, "$type" | keyof TextAreaWidget>]: never; }>(object: I_7): TextAreaWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a community list widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCommunityListWidget: {
            readonly name: "UpdateCommunityListWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetRequest";
                encode(message: UpdateCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCommunityListWidgetRequest;
                fromJSON(object: any): UpdateCommunityListWidgetRequest;
                toJSON(message: UpdateCommunityListWidgetRequest): unknown;
                fromPartial<I_20 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    data?: string[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    data?: (string[] & string[] & { [K_65 in Exclude<keyof I_20["data"], "$type" | keyof string[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_66 in Exclude<keyof I_20["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_67 in Exclude<keyof I_20, "$type" | keyof UpdateCommunityListWidgetRequest>]: never; }>(object: I_20): UpdateCommunityListWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetResponse";
                encode(message: UpdateCommunityListWidgetResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCommunityListWidgetResponse;
                fromJSON(object: any): UpdateCommunityListWidgetResponse;
                toJSON(message: UpdateCommunityListWidgetResponse): unknown;
                fromPartial<I_21 extends {
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    data?: string[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    data?: (string[] & string[] & { [K_68 in Exclude<keyof I_21["data"], "$type" | keyof string[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_69 in Exclude<keyof I_21["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_70 in Exclude<keyof I_21, "$type" | keyof UpdateCommunityListWidgetResponse>]: never; }>(object: I_21): UpdateCommunityListWidgetResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a post flair widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updatePostFlairWidget: {
            readonly name: "UpdatePostFlairWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdatePostFlairWidgetRequest";
                encode(message: UpdatePostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdatePostFlairWidgetRequest;
                fromJSON(object: any): UpdatePostFlairWidgetRequest;
                toJSON(message: UpdatePostFlairWidgetRequest): unknown;
                fromPartial<I_22 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    display?: string | undefined;
                    order?: string[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    display?: string | undefined;
                    order?: (string[] & string[] & { [K_71 in Exclude<keyof I_22["order"], "$type" | keyof string[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_72 in Exclude<keyof I_22["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_73 in Exclude<keyof I_22, "$type" | keyof UpdatePostFlairWidgetRequest>]: never; }>(object: I_22): UpdatePostFlairWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.PostFlairWidget";
                encode(message: PostFlairWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostFlairWidget;
                fromJSON(object: any): PostFlairWidget;
                toJSON(message: PostFlairWidget): unknown;
                fromPartial<I_11 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    display?: string | undefined;
                    order?: string[] | undefined;
                    shortName?: string | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                    subreddit?: string | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    display?: string | undefined;
                    order?: (string[] & string[] & { [K_38 in Exclude<keyof I_11["order"], "$type" | keyof string[]>]: never; }) | undefined;
                    shortName?: string | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_39 in Exclude<keyof I_11["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                    subreddit?: string | undefined;
                } & { [K_40 in Exclude<keyof I_11, "$type" | keyof PostFlairWidget>]: never; }>(object: I_11): PostFlairWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update a custom widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        readonly updateCustomWidget: {
            readonly name: "UpdateCustomWidget";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.UpdateCustomWidgetRequest";
                encode(message: UpdateCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateCustomWidgetRequest;
                fromJSON(object: any): UpdateCustomWidgetRequest;
                toJSON(message: UpdateCustomWidgetRequest): unknown;
                fromPartial<I_23 extends {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    subreddit?: string | undefined;
                    id?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_74 in Exclude<keyof I_23["imageData"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_75 in Exclude<keyof I_23["imageData"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_76 in Exclude<keyof I_23["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_77 in Exclude<keyof I_23, "$type" | keyof UpdateCustomWidgetRequest>]: never; }>(object: I_23): UpdateCustomWidgetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.CustomWidget";
                encode(message: CustomWidget, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CustomWidget;
                fromJSON(object: any): CustomWidget;
                toJSON(message: CustomWidget): unknown;
                fromPartial<I_13 extends {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    styles?: {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    kind?: string | undefined;
                    shortName?: string | undefined;
                    text?: string | undefined;
                    height?: number | undefined;
                    css?: string | undefined;
                    imageData?: ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[] & ({
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    } & { [K_45 in Exclude<keyof I_13["imageData"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_46 in Exclude<keyof I_13["imageData"], "$type" | keyof {
                        url?: string | undefined;
                        linkUrl?: string | undefined;
                        height?: number | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    styles?: ({
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & {
                        backgroundColor?: string | undefined;
                        headerColor?: string | undefined;
                    } & { [K_47 in Exclude<keyof I_13["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                } & { [K_48 in Exclude<keyof I_13, "$type" | keyof CustomWidget>]: never; }>(object: I_13): CustomWidget;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
         */
        readonly getWidgetImageUploadLease: {
            readonly name: "GetWidgetImageUploadLease";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseRequest";
                encode(message: GetWidgetImageUploadLeaseRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetWidgetImageUploadLeaseRequest;
                fromJSON(object: any): GetWidgetImageUploadLeaseRequest;
                toJSON(message: GetWidgetImageUploadLeaseRequest): unknown;
                fromPartial<I_24 extends {
                    subreddit?: string | undefined;
                    filepath?: string | undefined;
                    mimetype?: string | undefined;
                } & {
                    subreddit?: string | undefined;
                    filepath?: string | undefined;
                    mimetype?: string | undefined;
                } & { [K_78 in Exclude<keyof I_24, "$type" | keyof GetWidgetImageUploadLeaseRequest>]: never; }>(object: I_24): GetWidgetImageUploadLeaseRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseResponse";
                encode(message: GetWidgetImageUploadLeaseResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetWidgetImageUploadLeaseResponse;
                fromJSON(object: any): GetWidgetImageUploadLeaseResponse;
                toJSON(message: GetWidgetImageUploadLeaseResponse): unknown;
                fromPartial<I_25 extends {
                    s3UploadLease?: {
                        action?: string | undefined;
                        fields?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                    websocketUrl?: string | undefined;
                } & {
                    s3UploadLease?: ({
                        action?: string | undefined;
                        fields?: {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } & {
                        action?: string | undefined;
                        fields?: ({
                            name?: string | undefined;
                            value?: string | undefined;
                        }[] & ({
                            name?: string | undefined;
                            value?: string | undefined;
                        } & {
                            name?: string | undefined;
                            value?: string | undefined;
                        } & { [K_79 in Exclude<keyof I_25["s3UploadLease"]["fields"][number], "$type" | keyof import("./widgets_msg.js").GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair>]: never; })[] & { [K_80 in Exclude<keyof I_25["s3UploadLease"]["fields"], "$type" | keyof {
                            name?: string | undefined;
                            value?: string | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_81 in Exclude<keyof I_25["s3UploadLease"], "$type" | keyof import("./widgets_msg.js").GetWidgetImageUploadLeaseResponse_S3UploadLease>]: never; }) | undefined;
                    websocketUrl?: string | undefined;
                } & { [K_82 in Exclude<keyof I_25, "$type" | keyof GetWidgetImageUploadLeaseResponse>]: never; }>(object: I_25): GetWidgetImageUploadLeaseResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Update the order of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
         */
        readonly orderWidgets: {
            readonly name: "OrderWidgets";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.OrderWidgetsRequest";
                encode(message: OrderWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): OrderWidgetsRequest;
                fromJSON(object: any): OrderWidgetsRequest;
                toJSON(message: OrderWidgetsRequest): unknown;
                fromPartial<I_26 extends {
                    subreddit?: string | undefined;
                    order?: string[] | undefined;
                } & {
                    subreddit?: string | undefined;
                    order?: (string[] & string[] & { [K_83 in Exclude<keyof I_26["order"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_84 in Exclude<keyof I_26, "$type" | keyof OrderWidgetsRequest>]: never; }>(object: I_26): OrderWidgetsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_15 extends {} & {} & { [K_50 in Exclude<keyof I_15, "$type">]: never; }>(_: I_15): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Get a list of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
         */
        readonly getWidgets: {
            readonly name: "GetWidgets";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetsRequest";
                encode(message: GetWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetWidgetsRequest;
                fromJSON(object: any): GetWidgetsRequest;
                toJSON(message: GetWidgetsRequest): unknown;
                fromPartial<I_27 extends {
                    subreddit?: string | undefined;
                    progressiveImages?: boolean | undefined;
                } & {
                    subreddit?: string | undefined;
                    progressiveImages?: boolean | undefined;
                } & { [K_85 in Exclude<keyof I_27, "$type" | keyof GetWidgetsRequest>]: never; }>(object: I_27): GetWidgetsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse";
                encode(message: GetWidgetsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetWidgetsResponse;
                fromJSON(object: any): GetWidgetsResponse;
                toJSON(message: GetWidgetsResponse): unknown;
                fromPartial<I_28 extends {
                    layout?: {
                        idCardWidget?: string | undefined;
                        topbar?: {
                            order?: string[] | undefined;
                        } | undefined;
                        sidebar?: {
                            order?: string[] | undefined;
                        } | undefined;
                        moderatorWidget?: string | undefined;
                    } | undefined;
                    items?: {
                        [x: string]: {
                            id?: string | undefined;
                            kind?: string | undefined;
                            styles?: {
                                backgroundColor?: string | undefined;
                                headerColor?: string | undefined;
                            } | undefined;
                            shortName?: string | undefined;
                            description?: string | undefined;
                            data?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            buttons?: {
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            }[] | undefined;
                            subscribersCount?: number | undefined;
                            currentlyViewingText?: string | undefined;
                            currentlyViewingCount?: number | undefined;
                            subscribersText?: string | undefined;
                            showWiki?: boolean | undefined;
                            templates?: {
                                [x: string]: {
                                    text?: string | undefined;
                                    richtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } | undefined;
                            } | undefined;
                            display?: string | undefined;
                            order?: string[] | undefined;
                            mods?: {
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            totalMods?: number | undefined;
                            googleCalendarId?: string | undefined;
                            requiresSync?: boolean | undefined;
                            configuration?: {
                                numEvents?: number | undefined;
                                showDate?: boolean | undefined;
                                showDescription?: boolean | undefined;
                                showLocation?: boolean | undefined;
                                showTime?: boolean | undefined;
                                showTitle?: boolean | undefined;
                            } | undefined;
                            text?: string | undefined;
                            css?: string | undefined;
                            stylesheetUrl?: string | undefined;
                            height?: number | undefined;
                            imageData?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                } & {
                    layout?: ({
                        idCardWidget?: string | undefined;
                        topbar?: {
                            order?: string[] | undefined;
                        } | undefined;
                        sidebar?: {
                            order?: string[] | undefined;
                        } | undefined;
                        moderatorWidget?: string | undefined;
                    } & {
                        idCardWidget?: string | undefined;
                        topbar?: ({
                            order?: string[] | undefined;
                        } & {
                            order?: (string[] & string[] & { [K_86 in Exclude<keyof I_28["layout"]["topbar"]["order"], "$type" | keyof string[]>]: never; }) | undefined;
                        } & { [K_87 in Exclude<keyof I_28["layout"]["topbar"], "$type" | "order">]: never; }) | undefined;
                        sidebar?: ({
                            order?: string[] | undefined;
                        } & {
                            order?: (string[] & string[] & { [K_88 in Exclude<keyof I_28["layout"]["sidebar"]["order"], "$type" | keyof string[]>]: never; }) | undefined;
                        } & { [K_89 in Exclude<keyof I_28["layout"]["sidebar"], "$type" | "order">]: never; }) | undefined;
                        moderatorWidget?: string | undefined;
                    } & { [K_90 in Exclude<keyof I_28["layout"], "$type" | keyof import("./widgets_msg.js").GetWidgetsResponse_Layout>]: never; }) | undefined;
                    items?: ({
                        [x: string]: {
                            id?: string | undefined;
                            kind?: string | undefined;
                            styles?: {
                                backgroundColor?: string | undefined;
                                headerColor?: string | undefined;
                            } | undefined;
                            shortName?: string | undefined;
                            description?: string | undefined;
                            data?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            buttons?: {
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            }[] | undefined;
                            subscribersCount?: number | undefined;
                            currentlyViewingText?: string | undefined;
                            currentlyViewingCount?: number | undefined;
                            subscribersText?: string | undefined;
                            showWiki?: boolean | undefined;
                            templates?: {
                                [x: string]: {
                                    text?: string | undefined;
                                    richtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } | undefined;
                            } | undefined;
                            display?: string | undefined;
                            order?: string[] | undefined;
                            mods?: {
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            totalMods?: number | undefined;
                            googleCalendarId?: string | undefined;
                            requiresSync?: boolean | undefined;
                            configuration?: {
                                numEvents?: number | undefined;
                                showDate?: boolean | undefined;
                                showDescription?: boolean | undefined;
                                showLocation?: boolean | undefined;
                                showTime?: boolean | undefined;
                                showTitle?: boolean | undefined;
                            } | undefined;
                            text?: string | undefined;
                            css?: string | undefined;
                            stylesheetUrl?: string | undefined;
                            height?: number | undefined;
                            imageData?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            }[] | undefined;
                        } | undefined;
                    } & {
                        [x: string]: ({
                            id?: string | undefined;
                            kind?: string | undefined;
                            styles?: {
                                backgroundColor?: string | undefined;
                                headerColor?: string | undefined;
                            } | undefined;
                            shortName?: string | undefined;
                            description?: string | undefined;
                            data?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            buttons?: {
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            }[] | undefined;
                            subscribersCount?: number | undefined;
                            currentlyViewingText?: string | undefined;
                            currentlyViewingCount?: number | undefined;
                            subscribersText?: string | undefined;
                            showWiki?: boolean | undefined;
                            templates?: {
                                [x: string]: {
                                    text?: string | undefined;
                                    richtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } | undefined;
                            } | undefined;
                            display?: string | undefined;
                            order?: string[] | undefined;
                            mods?: {
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            }[] | undefined;
                            totalMods?: number | undefined;
                            googleCalendarId?: string | undefined;
                            requiresSync?: boolean | undefined;
                            configuration?: {
                                numEvents?: number | undefined;
                                showDate?: boolean | undefined;
                                showDescription?: boolean | undefined;
                                showLocation?: boolean | undefined;
                                showTime?: boolean | undefined;
                                showTitle?: boolean | undefined;
                            } | undefined;
                            text?: string | undefined;
                            css?: string | undefined;
                            stylesheetUrl?: string | undefined;
                            height?: number | undefined;
                            imageData?: {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            }[] | undefined;
                        } & {
                            id?: string | undefined;
                            kind?: string | undefined;
                            styles?: ({
                                backgroundColor?: string | undefined;
                                headerColor?: string | undefined;
                            } & {
                                backgroundColor?: string | undefined;
                                headerColor?: string | undefined;
                            } & { [K_91 in Exclude<keyof I_28["items"][string]["styles"], "$type" | keyof import("./widgets_msg.js").WidgetStyles>]: never; }) | undefined;
                            shortName?: string | undefined;
                            description?: string | undefined;
                            data?: ({
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            }[] & ({
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            } & {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: ({
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] & ({
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                } & {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: ({
                                        text?: string | undefined;
                                        url?: string | undefined;
                                        children?: any[] | undefined;
                                    }[] & ({
                                        text?: string | undefined;
                                        url?: string | undefined;
                                        children?: any[] | undefined;
                                    } & {
                                        text?: string | undefined;
                                        url?: string | undefined;
                                        children?: ({
                                            text?: string | undefined;
                                            url?: string | undefined;
                                            children?: any[] | undefined;
                                        }[] & ({
                                            text?: string | undefined;
                                            url?: string | undefined;
                                            children?: any[] | undefined;
                                        } & {
                                            text?: string | undefined;
                                            url?: string | undefined;
                                            children?: ({
                                                text?: string | undefined;
                                                url?: string | undefined;
                                                children?: any[] | undefined;
                                            }[] & ({
                                                text?: string | undefined;
                                                url?: string | undefined;
                                                children?: any[] | undefined;
                                            } & {
                                                text?: string | undefined;
                                                url?: string | undefined;
                                                children?: ({
                                                    text?: string | undefined;
                                                    url?: string | undefined;
                                                    children?: any[] | undefined;
                                                }[] & ({
                                                    text?: string | undefined;
                                                    url?: string | undefined;
                                                    children?: any[] | undefined;
                                                } & {
                                                    text?: string | undefined;
                                                    url?: string | undefined;
                                                    children?: ({
                                                        text?: string | undefined;
                                                        url?: string | undefined;
                                                        children?: any[] | undefined;
                                                    }[] & ({
                                                        text?: string | undefined;
                                                        url?: string | undefined;
                                                        children?: any[] | undefined;
                                                    } & {
                                                        text?: string | undefined;
                                                        url?: string | undefined;
                                                        children?: ({
                                                            text?: string | undefined;
                                                            url?: string | undefined;
                                                            children?: any[] | undefined;
                                                        }[] & ({
                                                            text?: string | undefined;
                                                            url?: string | undefined;
                                                            children?: any[] | undefined;
                                                        } & {
                                                            text?: string | undefined;
                                                            url?: string | undefined;
                                                            children?: ({
                                                                text?: string | undefined;
                                                                url?: string | undefined;
                                                                children?: any[] | undefined;
                                                            }[] & ({
                                                                text?: string | undefined;
                                                                url?: string | undefined;
                                                                children?: any[] | undefined;
                                                            } & any & { [K_92 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_93 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                                                text?: string | undefined;
                                                                url?: string | undefined;
                                                                children?: any[] | undefined;
                                                            }[]>]: never; }) | undefined;
                                                        } & { [K_94 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_95 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                                            text?: string | undefined;
                                                            url?: string | undefined;
                                                            children?: any[] | undefined;
                                                        }[]>]: never; }) | undefined;
                                                    } & { [K_96 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_97 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                                        text?: string | undefined;
                                                        url?: string | undefined;
                                                        children?: any[] | undefined;
                                                    }[]>]: never; }) | undefined;
                                                } & { [K_98 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_99 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                                    text?: string | undefined;
                                                    url?: string | undefined;
                                                    children?: any[] | undefined;
                                                }[]>]: never; }) | undefined;
                                            } & { [K_100 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_101 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                                text?: string | undefined;
                                                url?: string | undefined;
                                                children?: any[] | undefined;
                                            }[]>]: never; }) | undefined;
                                        } & { [K_102 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_103 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number]["children"], "$type" | keyof {
                                            text?: string | undefined;
                                            url?: string | undefined;
                                            children?: any[] | undefined;
                                        }[]>]: never; }) | undefined;
                                    } & { [K_104 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_105 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number]["children"], "$type" | keyof {
                                        text?: string | undefined;
                                        url?: string | undefined;
                                        children?: any[] | undefined;
                                    }[]>]: never; }) | undefined;
                                } & { [K_106 in Exclude<keyof I_28["items"][string]["data"][number]["children"][number], "$type" | keyof import("./widgets_msg.js").MenuWidgetItem>]: never; })[] & { [K_107 in Exclude<keyof I_28["items"][string]["data"][number]["children"], "$type" | keyof {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_108 in Exclude<keyof I_28["items"][string]["data"][number], "$type" | keyof import("./widgets_msg.js").GetWidgetsResponse_WidgetItem_Data>]: never; })[] & { [K_109 in Exclude<keyof I_28["items"][string]["data"], "$type" | keyof {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                iconUrl?: string | undefined;
                                name?: string | undefined;
                                prefixedName?: string | undefined;
                                isSubscribed?: boolean | undefined;
                                type?: string | undefined;
                                subscribers?: number | undefined;
                                communityIcon?: string | undefined;
                                isNsfw?: boolean | undefined;
                                text?: string | undefined;
                                children?: {
                                    text?: string | undefined;
                                    url?: string | undefined;
                                    children?: any[] | undefined;
                                }[] | undefined;
                            }[]>]: never; }) | undefined;
                            buttons?: ({
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            }[] & ({
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            } & {
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: ({
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } & {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } & { [K_110 in Exclude<keyof I_28["items"][string]["buttons"][number]["hoverState"], "$type" | keyof import("./widgets_msg.js").WidgetButton_HoverState>]: never; }) | undefined;
                            } & { [K_111 in Exclude<keyof I_28["items"][string]["buttons"][number], "$type" | keyof import("./widgets_msg.js").WidgetButton>]: never; })[] & { [K_112 in Exclude<keyof I_28["items"][string]["buttons"], "$type" | keyof {
                                kind?: string | undefined;
                                text?: string | undefined;
                                url?: string | undefined;
                                imageUrl?: string | undefined;
                                linkUrl?: string | undefined;
                                color?: string | undefined;
                                fillColor?: string | undefined;
                                textColor?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                                hoverState?: {
                                    kind?: string | undefined;
                                    color?: string | undefined;
                                    fillColor?: string | undefined;
                                    text?: string | undefined;
                                    textColor?: string | undefined;
                                    imageUrl?: string | undefined;
                                    height?: number | undefined;
                                    width?: number | undefined;
                                } | undefined;
                            }[]>]: never; }) | undefined;
                            subscribersCount?: number | undefined;
                            currentlyViewingText?: string | undefined;
                            currentlyViewingCount?: number | undefined;
                            subscribersText?: string | undefined;
                            showWiki?: boolean | undefined;
                            templates?: ({
                                [x: string]: {
                                    text?: string | undefined;
                                    richtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } | undefined;
                            } & {
                                [x: string]: ({
                                    text?: string | undefined;
                                    richtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } & {
                                    text?: string | undefined;
                                    richtext?: ({
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[] & ({
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    } & {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    } & { [K_113 in Exclude<keyof I_28["items"][string]["templates"][string]["richtext"][number], "$type" | keyof import("../../../reddit/common.js").AuthorFlairRichText>]: never; })[] & { [K_114 in Exclude<keyof I_28["items"][string]["templates"][string]["richtext"], "$type" | keyof {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[]>]: never; }) | undefined;
                                    backgroundColor?: string | undefined;
                                    templateId?: string | undefined;
                                    textColor?: string | undefined;
                                    type?: string | undefined;
                                } & { [K_115 in Exclude<keyof I_28["items"][string]["templates"][string], "$type" | keyof import("./widgets_msg.js").GetWidgetsResponse_WidgetItem_PostFlairTemplate>]: never; }) | undefined;
                            } & { [K_116 in Exclude<keyof I_28["items"][string]["templates"], string | number>]: never; }) | undefined;
                            display?: string | undefined;
                            order?: (string[] & string[] & { [K_117 in Exclude<keyof I_28["items"][string]["order"], "$type" | keyof string[]>]: never; }) | undefined;
                            mods?: ({
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            }[] & ({
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            } & {
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: ({
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] & ({
                                    e?: string | undefined;
                                    t?: string | undefined;
                                } & {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                } & { [K_118 in Exclude<keyof I_28["items"][string]["mods"][number]["authorFlairRichtext"][number], "$type" | keyof import("../../../reddit/common.js").AuthorFlairRichText>]: never; })[] & { [K_119 in Exclude<keyof I_28["items"][string]["mods"][number]["authorFlairRichtext"], "$type" | keyof {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[]>]: never; }) | undefined;
                            } & { [K_120 in Exclude<keyof I_28["items"][string]["mods"][number], "$type" | keyof import("./widgets_msg.js").GetWidgetsResponse_WidgetItem_Moderator>]: never; })[] & { [K_121 in Exclude<keyof I_28["items"][string]["mods"], "$type" | keyof {
                                name?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFalirText?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                }[] | undefined;
                            }[]>]: never; }) | undefined;
                            totalMods?: number | undefined;
                            googleCalendarId?: string | undefined;
                            requiresSync?: boolean | undefined;
                            configuration?: ({
                                numEvents?: number | undefined;
                                showDate?: boolean | undefined;
                                showDescription?: boolean | undefined;
                                showLocation?: boolean | undefined;
                                showTime?: boolean | undefined;
                                showTitle?: boolean | undefined;
                            } & {
                                numEvents?: number | undefined;
                                showDate?: boolean | undefined;
                                showDescription?: boolean | undefined;
                                showLocation?: boolean | undefined;
                                showTime?: boolean | undefined;
                                showTitle?: boolean | undefined;
                            } & { [K_122 in Exclude<keyof I_28["items"][string]["configuration"], "$type" | keyof import("./widgets_msg.js").CalendarWidgetConfiguration>]: never; }) | undefined;
                            text?: string | undefined;
                            css?: string | undefined;
                            stylesheetUrl?: string | undefined;
                            height?: number | undefined;
                            imageData?: ({
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            }[] & ({
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            } & {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            } & { [K_123 in Exclude<keyof I_28["items"][string]["imageData"][number], "$type" | keyof import("./widgets_msg.js").WidgetImage>]: never; })[] & { [K_124 in Exclude<keyof I_28["items"][string]["imageData"], "$type" | keyof {
                                url?: string | undefined;
                                linkUrl?: string | undefined;
                                height?: number | undefined;
                                width?: number | undefined;
                            }[]>]: never; }) | undefined;
                        } & { [K_125 in Exclude<keyof I_28["items"][string], "$type" | keyof import("./widgets_msg.js").GetWidgetsResponse_WidgetItem>]: never; }) | undefined;
                    } & { [K_126 in Exclude<keyof I_28["items"], string | number>]: never; }) | undefined;
                } & { [K_127 in Exclude<keyof I_28, "$type" | keyof GetWidgetsResponse>]: never; }>(object: I_28): GetWidgetsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=widgets_svc.d.ts.map
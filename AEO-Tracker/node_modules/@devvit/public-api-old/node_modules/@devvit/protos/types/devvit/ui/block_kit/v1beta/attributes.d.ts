/**
 * #attributes.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { BlockActionType, BlockBorderWidth, BlockHorizontalAlignment, BlockSizeUnit, BlockVerticalAlignment } from './enums.js';
export interface BlockAlignment {
    vertical?: BlockVerticalAlignment | undefined;
    horizontal?: BlockHorizontalAlignment | undefined;
}
export interface BlockBorder {
    /**
     * @deprecated use colors instead
     *
     * @deprecated
     */
    color?: string | undefined;
    width?: BlockBorderWidth | undefined;
    colors?: BlockColor | undefined;
}
export interface BlockSizes {
    grow?: boolean | undefined;
    width?: BlockSizes_Dimension | undefined;
    height?: BlockSizes_Dimension | undefined;
}
export interface BlockSizes_Dimension {
    value?: BlockSizes_Dimension_Value | undefined;
    min?: BlockSizes_Dimension_Value | undefined;
    max?: BlockSizes_Dimension_Value | undefined;
}
export interface BlockSizes_Dimension_Value {
    value: number;
    unit: BlockSizeUnit;
}
/** @deprecated Use BlockSizing */
export interface BlockSize {
    /** Grow this element to fill any free space in the container */
    grow?: boolean | undefined;
    /** Width */
    width?: number | undefined;
    /** Unit of the width value */
    widthUnit?: BlockSizeUnit | undefined;
    /** Height */
    height?: number | undefined;
    /** Unit of the height value */
    heightUnit?: BlockSizeUnit | undefined;
}
export interface BlockAction {
    type: BlockActionType;
    id: string;
    data?: {
        [key: string]: any;
    };
}
export interface BlockColor {
    light?: string | undefined;
    dark?: string | undefined;
}
export declare const BlockAlignment: {
    $type: "devvit.ui.block_kit.v1beta.BlockAlignment";
    encode(message: BlockAlignment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAlignment;
    fromJSON(object: any): BlockAlignment;
    toJSON(message: BlockAlignment): unknown;
    fromPartial<I extends {
        vertical?: BlockVerticalAlignment | undefined;
        horizontal?: BlockHorizontalAlignment | undefined;
    } & {
        vertical?: BlockVerticalAlignment | undefined;
        horizontal?: BlockHorizontalAlignment | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockAlignment>]: never; }>(object: I): BlockAlignment;
};
export declare const BlockBorder: {
    $type: "devvit.ui.block_kit.v1beta.BlockBorder";
    encode(message: BlockBorder, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockBorder;
    fromJSON(object: any): BlockBorder;
    toJSON(message: BlockBorder): unknown;
    fromPartial<I extends {
        color?: string | undefined;
        width?: BlockBorderWidth | undefined;
        colors?: {
            light?: string | undefined;
            dark?: string | undefined;
        } | undefined;
    } & {
        color?: string | undefined;
        width?: BlockBorderWidth | undefined;
        colors?: ({
            light?: string | undefined;
            dark?: string | undefined;
        } & {
            light?: string | undefined;
            dark?: string | undefined;
        } & { [K in Exclude<keyof I["colors"], "$type" | keyof BlockColor>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof BlockBorder>]: never; }>(object: I): BlockBorder;
};
export declare const BlockSizes: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes";
    encode(message: BlockSizes, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes;
    fromJSON(object: any): BlockSizes;
    toJSON(message: BlockSizes): unknown;
    fromPartial<I extends {
        grow?: boolean | undefined;
        width?: {
            value?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            min?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            max?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
        } | undefined;
        height?: {
            value?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            min?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            max?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
        } | undefined;
    } & {
        grow?: boolean | undefined;
        width?: ({
            value?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            min?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            max?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
        } & {
            value?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K in Exclude<keyof I["width"]["value"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
            min?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K_1 in Exclude<keyof I["width"]["min"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
            max?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K_2 in Exclude<keyof I["width"]["max"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["width"], "$type" | keyof BlockSizes_Dimension>]: never; }) | undefined;
        height?: ({
            value?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            min?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
            max?: {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } | undefined;
        } & {
            value?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K_4 in Exclude<keyof I["height"]["value"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
            min?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K_5 in Exclude<keyof I["height"]["min"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
            max?: ({
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & {
                value?: number | undefined;
                unit?: BlockSizeUnit | undefined;
            } & { [K_6 in Exclude<keyof I["height"]["max"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["height"], "$type" | keyof BlockSizes_Dimension>]: never; }) | undefined;
    } & { [K_8 in Exclude<keyof I, "$type" | keyof BlockSizes>]: never; }>(object: I): BlockSizes;
};
export declare const BlockSizes_Dimension: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes.Dimension";
    encode(message: BlockSizes_Dimension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes_Dimension;
    fromJSON(object: any): BlockSizes_Dimension;
    toJSON(message: BlockSizes_Dimension): unknown;
    fromPartial<I extends {
        value?: {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } | undefined;
        min?: {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } | undefined;
        max?: {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } | undefined;
    } & {
        value?: ({
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & { [K in Exclude<keyof I["value"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
        min?: ({
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & { [K_1 in Exclude<keyof I["min"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
        max?: ({
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & {
            value?: number | undefined;
            unit?: BlockSizeUnit | undefined;
        } & { [K_2 in Exclude<keyof I["max"], "$type" | keyof BlockSizes_Dimension_Value>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof BlockSizes_Dimension>]: never; }>(object: I): BlockSizes_Dimension;
};
export declare const BlockSizes_Dimension_Value: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes.Dimension.Value";
    encode(message: BlockSizes_Dimension_Value, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes_Dimension_Value;
    fromJSON(object: any): BlockSizes_Dimension_Value;
    toJSON(message: BlockSizes_Dimension_Value): unknown;
    fromPartial<I extends {
        value?: number | undefined;
        unit?: BlockSizeUnit | undefined;
    } & {
        value?: number | undefined;
        unit?: BlockSizeUnit | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockSizes_Dimension_Value>]: never; }>(object: I): BlockSizes_Dimension_Value;
};
export declare const BlockSize: {
    $type: "devvit.ui.block_kit.v1beta.BlockSize";
    encode(message: BlockSize, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSize;
    fromJSON(object: any): BlockSize;
    toJSON(message: BlockSize): unknown;
    fromPartial<I extends {
        grow?: boolean | undefined;
        width?: number | undefined;
        widthUnit?: BlockSizeUnit | undefined;
        height?: number | undefined;
        heightUnit?: BlockSizeUnit | undefined;
    } & {
        grow?: boolean | undefined;
        width?: number | undefined;
        widthUnit?: BlockSizeUnit | undefined;
        height?: number | undefined;
        heightUnit?: BlockSizeUnit | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockSize>]: never; }>(object: I): BlockSize;
};
export declare const BlockAction: {
    $type: "devvit.ui.block_kit.v1beta.BlockAction";
    encode(message: BlockAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAction;
    fromJSON(object: any): BlockAction;
    toJSON(message: BlockAction): unknown;
    fromPartial<I extends {
        type?: BlockActionType | undefined;
        id?: string | undefined;
        data?: {
            [x: string]: any;
        } | undefined;
    } & {
        type?: BlockActionType | undefined;
        id?: string | undefined;
        data?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof BlockAction>]: never; }>(object: I): BlockAction;
};
export declare const BlockColor: {
    $type: "devvit.ui.block_kit.v1beta.BlockColor";
    encode(message: BlockColor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockColor;
    fromJSON(object: any): BlockColor;
    toJSON(message: BlockColor): unknown;
    fromPartial<I extends {
        light?: string | undefined;
        dark?: string | undefined;
    } & {
        light?: string | undefined;
        dark?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockColor>]: never; }>(object: I): BlockColor;
};
//# sourceMappingURL=attributes.d.ts.map
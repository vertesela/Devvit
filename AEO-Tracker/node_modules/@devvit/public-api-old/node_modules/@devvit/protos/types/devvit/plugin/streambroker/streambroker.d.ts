/**
 * #streambroker.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
import { Empty } from '../../../google/protobuf/empty.js';
export interface Message {
    topic: string;
    value: string;
}
export interface Cursor {
    topic: string;
    offset: number;
    closeAtEnd: boolean;
}
export declare const Message: {
    $type: "devvit.plugin.streambroker.Message";
    encode(message: Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Message;
    fromJSON(object: any): Message;
    toJSON(message: Message): unknown;
    fromPartial<I extends {
        topic?: string | undefined;
        value?: string | undefined;
    } & {
        topic?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Message>]: never; }>(object: I): Message;
};
export declare const Cursor: {
    $type: "devvit.plugin.streambroker.Cursor";
    encode(message: Cursor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Cursor;
    fromJSON(object: any): Cursor;
    toJSON(message: Cursor): unknown;
    fromPartial<I extends {
        topic?: string | undefined;
        offset?: number | undefined;
        closeAtEnd?: boolean | undefined;
    } & {
        topic?: string | undefined;
        offset?: number | undefined;
        closeAtEnd?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Cursor>]: never; }>(object: I): Cursor;
};
export interface StreamBroker {
    Put(request: Message, metadata?: Metadata): Promise<Empty>;
    Get(request: Cursor, metadata?: Metadata): Observable<Message>;
}
export declare class StreamBrokerClientImpl implements StreamBroker {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: Message): Promise<Empty>;
    Get(request: Cursor): Observable<Message>;
}
export type StreamBrokerDefinition = typeof StreamBrokerDefinition;
export declare const StreamBrokerDefinition: {
    readonly name: "StreamBroker";
    readonly fullName: "devvit.plugin.streambroker.StreamBroker";
    readonly methods: {
        readonly put: {
            readonly name: "Put";
            readonly requestType: {
                $type: "devvit.plugin.streambroker.Message";
                encode(message: Message, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Message;
                fromJSON(object: any): Message;
                toJSON(message: Message): unknown;
                fromPartial<I extends {
                    topic?: string | undefined;
                    value?: string | undefined;
                } & {
                    topic?: string | undefined;
                    value?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof Message>]: never; }>(object: I): Message;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly get: {
            readonly name: "Get";
            readonly requestType: {
                $type: "devvit.plugin.streambroker.Cursor";
                encode(message: Cursor, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Cursor;
                fromJSON(object: any): Cursor;
                toJSON(message: Cursor): unknown;
                fromPartial<I_2 extends {
                    topic?: string | undefined;
                    offset?: number | undefined;
                    closeAtEnd?: boolean | undefined;
                } & {
                    topic?: string | undefined;
                    offset?: number | undefined;
                    closeAtEnd?: boolean | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof Cursor>]: never; }>(object: I_2): Cursor;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.streambroker.Message";
                encode(message: Message, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Message;
                fromJSON(object: any): Message;
                toJSON(message: Message): unknown;
                fromPartial<I extends {
                    topic?: string | undefined;
                    value?: string | undefined;
                } & {
                    topic?: string | undefined;
                    value?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof Message>]: never; }>(object: I): Message;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=streambroker.d.ts.map
/**
 * #form.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { FormField } from './field.js';
function createBaseForm() {
    return {
        fields: [],
        title: undefined,
        shortDescription: undefined,
        acceptLabel: undefined,
        cancelLabel: undefined,
        id: undefined,
    };
}
export const Form = {
    $type: "devvit.ui.form_builder.v1alpha.Form",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.fields) {
            FormField.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.title !== undefined) {
            writer.uint32(18).string(message.title);
        }
        if (message.shortDescription !== undefined) {
            writer.uint32(26).string(message.shortDescription);
        }
        if (message.acceptLabel !== undefined) {
            writer.uint32(34).string(message.acceptLabel);
        }
        if (message.cancelLabel !== undefined) {
            writer.uint32(42).string(message.cancelLabel);
        }
        if (message.id !== undefined) {
            writer.uint32(50).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseForm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fields.push(FormField.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.shortDescription = reader.string();
                    break;
                case 4:
                    message.acceptLabel = reader.string();
                    break;
                case 5:
                    message.cancelLabel = reader.string();
                    break;
                case 6:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fields: Array.isArray(object?.fields) ? object.fields.map((e) => FormField.fromJSON(e)) : [],
            title: isSet(object.title) ? String(object.title) : undefined,
            shortDescription: isSet(object.shortDescription) ? String(object.shortDescription) : undefined,
            acceptLabel: isSet(object.acceptLabel) ? String(object.acceptLabel) : undefined,
            cancelLabel: isSet(object.cancelLabel) ? String(object.cancelLabel) : undefined,
            id: isSet(object.id) ? String(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fields) {
            obj.fields = message.fields.map((e) => e ? FormField.toJSON(e) : undefined);
        }
        else {
            obj.fields = [];
        }
        message.title !== undefined && (obj.title = message.title);
        message.shortDescription !== undefined && (obj.shortDescription = message.shortDescription);
        message.acceptLabel !== undefined && (obj.acceptLabel = message.acceptLabel);
        message.cancelLabel !== undefined && (obj.cancelLabel = message.cancelLabel);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseForm();
        message.fields = object.fields?.map((e) => FormField.fromPartial(e)) || [];
        message.title = object.title ?? undefined;
        message.shortDescription = object.shortDescription ?? undefined;
        message.acceptLabel = object.acceptLabel ?? undefined;
        message.cancelLabel = object.cancelLabel ?? undefined;
        message.id = object.id ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.Form", Form);
function isSet(value) {
    return value !== null && value !== undefined;
}

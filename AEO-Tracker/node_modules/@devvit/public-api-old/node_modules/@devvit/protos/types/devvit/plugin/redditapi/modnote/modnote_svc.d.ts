/**
 * #modnote_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { DeleteNotesRequest, DeleteNotesResponse, GetNotesRequest, ModNotesResponse, PostModNotesResponse, PostNotesRequest, PostRemovalNoteRequest, RecentNotesRequest } from './modnote_msg.js';
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export interface ModNote {
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
    GetNotes(request: GetNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
    DeleteNotes(request: DeleteNotesRequest, metadata?: Metadata): Promise<DeleteNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
    PostNotes(request: PostNotesRequest, metadata?: Metadata): Promise<PostModNotesResponse>;
    /** Add a mod note for why a post or comment was removed */
    PostRemovalNote(request: PostRemovalNoteRequest, metadata?: Metadata): Promise<Empty>;
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
    RecentNotes(request: RecentNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
}
export declare class ModNoteClientImpl implements ModNote {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetNotes(request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest): Promise<ModNotesResponse>;
}
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export type ModNoteDefinition = typeof ModNoteDefinition;
export declare const ModNoteDefinition: {
    readonly name: "ModNote";
    readonly fullName: "devvit.plugin.redditapi.modnote.ModNote";
    readonly methods: {
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
        readonly getNotes: {
            readonly name: "GetNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.GetNotesRequest";
                encode(message: GetNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetNotesRequest;
                fromJSON(object: any): GetNotesRequest;
                toJSON(message: GetNotesRequest): unknown;
                fromPartial<I extends {
                    subreddit?: string | undefined;
                    before?: string | undefined;
                    filter?: string | undefined;
                    limit?: number | undefined;
                    user?: string | undefined;
                } & {
                    subreddit?: string | undefined;
                    before?: string | undefined;
                    filter?: string | undefined;
                    limit?: number | undefined;
                    user?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof GetNotesRequest>]: never; }>(object: I): GetNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
                encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModNotesResponse;
                fromJSON(object: any): ModNotesResponse;
                toJSON(message: ModNotesResponse): unknown;
                fromPartial<I_1 extends {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[] | undefined;
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } & {
                    modNotes?: ({
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[] & ({
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: ({
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & { [K_1 in Exclude<keyof I_1["modNotes"][number]["modActionData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_ModActionData>]: never; }) | undefined;
                        userNoteData?: ({
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & { [K_2 in Exclude<keyof I_1["modNotes"][number]["userNoteData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_UserNoteData>]: never; }) | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & { [K_3 in Exclude<keyof I_1["modNotes"][number], "$type" | keyof import("./modnote_msg.js").ModNoteObject>]: never; })[] & { [K_4 in Exclude<keyof I_1["modNotes"], "$type" | keyof {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[]>]: never; }) | undefined;
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } & { [K_5 in Exclude<keyof I_1, "$type" | keyof ModNotesResponse>]: never; }>(object: I_1): ModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
        readonly deleteNotes: {
            readonly name: "DeleteNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.DeleteNotesRequest";
                encode(message: DeleteNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteNotesRequest;
                fromJSON(object: any): DeleteNotesRequest;
                toJSON(message: DeleteNotesRequest): unknown;
                fromPartial<I_2 extends {
                    subreddit?: string | undefined;
                    noteId?: string | undefined;
                    user?: string | undefined;
                } & {
                    subreddit?: string | undefined;
                    noteId?: string | undefined;
                    user?: string | undefined;
                } & { [K_6 in Exclude<keyof I_2, "$type" | keyof DeleteNotesRequest>]: never; }>(object: I_2): DeleteNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.DeleteNotesResponse";
                encode(message: DeleteNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteNotesResponse;
                fromJSON(object: any): DeleteNotesResponse;
                toJSON(message: DeleteNotesResponse): unknown;
                fromPartial<I_3 extends {
                    deleted?: boolean | undefined;
                } & {
                    deleted?: boolean | undefined;
                } & { [K_7 in Exclude<keyof I_3, "$type" | "deleted">]: never; }>(object: I_3): DeleteNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
        readonly postNotes: {
            readonly name: "PostNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.PostNotesRequest";
                encode(message: PostNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostNotesRequest;
                fromJSON(object: any): PostNotesRequest;
                toJSON(message: PostNotesRequest): unknown;
                fromPartial<I_4 extends {
                    subreddit?: string | undefined;
                    label?: string | undefined;
                    note?: string | undefined;
                    redditId?: string | undefined;
                    user?: string | undefined;
                } & {
                    subreddit?: string | undefined;
                    label?: string | undefined;
                    note?: string | undefined;
                    redditId?: string | undefined;
                    user?: string | undefined;
                } & { [K_8 in Exclude<keyof I_4, "$type" | keyof PostNotesRequest>]: never; }>(object: I_4): PostNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.PostModNotesResponse";
                encode(message: PostModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostModNotesResponse;
                fromJSON(object: any): PostModNotesResponse;
                toJSON(message: PostModNotesResponse): unknown;
                fromPartial<I_5 extends {
                    created?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } | undefined;
                } & {
                    created?: ({
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: ({
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & { [K_9 in Exclude<keyof I_5["created"]["modActionData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_ModActionData>]: never; }) | undefined;
                        userNoteData?: ({
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & { [K_10 in Exclude<keyof I_5["created"]["userNoteData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_UserNoteData>]: never; }) | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & { [K_11 in Exclude<keyof I_5["created"], "$type" | keyof import("./modnote_msg.js").ModNoteObject>]: never; }) | undefined;
                } & { [K_12 in Exclude<keyof I_5, "$type" | "created">]: never; }>(object: I_5): PostModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Add a mod note for why a post or comment was removed */
        readonly postRemovalNote: {
            readonly name: "PostRemovalNote";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.PostRemovalNoteRequest";
                encode(message: PostRemovalNoteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostRemovalNoteRequest;
                fromJSON(object: any): PostRemovalNoteRequest;
                toJSON(message: PostRemovalNoteRequest): unknown;
                fromPartial<I_6 extends {
                    itemIds?: string[] | undefined;
                    reasonId?: string | undefined;
                    modNote?: string | undefined;
                } & {
                    itemIds?: (string[] & string[] & { [K_13 in Exclude<keyof I_6["itemIds"], "$type" | keyof string[]>]: never; }) | undefined;
                    reasonId?: string | undefined;
                    modNote?: string | undefined;
                } & { [K_14 in Exclude<keyof I_6, "$type" | keyof PostRemovalNoteRequest>]: never; }>(object: I_6): PostRemovalNoteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_7 extends {} & {} & { [K_15 in Exclude<keyof I_7, "$type">]: never; }>(_: I_7): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
        readonly recentNotes: {
            readonly name: "RecentNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.RecentNotesRequest";
                encode(message: RecentNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecentNotesRequest;
                fromJSON(object: any): RecentNotesRequest;
                toJSON(message: RecentNotesRequest): unknown;
                fromPartial<I_8 extends {
                    subreddits?: string | undefined;
                    users?: string | undefined;
                } & {
                    subreddits?: string | undefined;
                    users?: string | undefined;
                } & { [K_16 in Exclude<keyof I_8, "$type" | keyof RecentNotesRequest>]: never; }>(object: I_8): RecentNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
                encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModNotesResponse;
                fromJSON(object: any): ModNotesResponse;
                toJSON(message: ModNotesResponse): unknown;
                fromPartial<I_1 extends {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[] | undefined;
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } & {
                    modNotes?: ({
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[] & ({
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: ({
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } & { [K_1 in Exclude<keyof I_1["modNotes"][number]["modActionData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_ModActionData>]: never; }) | undefined;
                        userNoteData?: ({
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } & { [K_2 in Exclude<keyof I_1["modNotes"][number]["userNoteData"], "$type" | keyof import("./modnote_msg.js").ModNoteObject_UserNoteData>]: never; }) | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } & { [K_3 in Exclude<keyof I_1["modNotes"][number], "$type" | keyof import("./modnote_msg.js").ModNoteObject>]: never; })[] & { [K_4 in Exclude<keyof I_1["modNotes"], "$type" | keyof {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[]>]: never; }) | undefined;
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } & { [K_5 in Exclude<keyof I_1, "$type" | keyof ModNotesResponse>]: never; }>(object: I_1): ModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=modnote_svc.d.ts.map
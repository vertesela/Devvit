import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { DataApiAuthTokenRequest, DataApiAuthTokenResponse } from './admin.js';
export var DataApiAuthTokenIssuerMethod;
(function (DataApiAuthTokenIssuerMethod) {
    DataApiAuthTokenIssuerMethod["GenerateAuthToken"] = "GenerateAuthToken";
})(DataApiAuthTokenIssuerMethod || (DataApiAuthTokenIssuerMethod = {}));
export const DataApiAuthTokenIssuerMethodList = [
    DataApiAuthTokenIssuerMethod.GenerateAuthToken,
];
export function createDataApiAuthTokenIssuerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.data.api.v1alpha',
        serviceName: 'DataApiAuthTokenIssuer',
        methodList: DataApiAuthTokenIssuerMethodList,
        matchRoute: matchDataApiAuthTokenIssuerRoute,
    });
}
function matchDataApiAuthTokenIssuerRoute(method, events) {
    switch (method) {
        case 'GenerateAuthToken':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GenerateAuthToken' };
                await events.onMatch(ctx);
                return handleDataApiAuthTokenIssuerGenerateAuthTokenRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleDataApiAuthTokenIssuerGenerateAuthTokenRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleDataApiAuthTokenIssuerGenerateAuthTokenJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleDataApiAuthTokenIssuerGenerateAuthTokenProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleDataApiAuthTokenIssuerGenerateAuthTokenJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = DataApiAuthTokenRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GenerateAuthToken(ctx, inputReq);
        });
    }
    else {
        response = await service.GenerateAuthToken(ctx, request);
    }
    return JSON.stringify(DataApiAuthTokenResponse.toJSON(response));
}
async function handleDataApiAuthTokenIssuerGenerateAuthTokenProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = DataApiAuthTokenRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GenerateAuthToken(ctx, inputReq);
        });
    }
    else {
        response = await service.GenerateAuthToken(ctx, request);
    }
    return Buffer.from(DataApiAuthTokenResponse.encode(response).finish());
}

/**
 * #modaction.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Timestamp } from '../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { CommentV2 } from './commentv2.js';
import { PostV2 } from './postv2.js';
import { SubredditV2 } from './subredditv2.js';
import { UserV2 } from './userv2.js';
export var ModActionType;
(function (ModActionType) {
    ModActionType[ModActionType["UNKNOWN"] = 0] = "UNKNOWN";
    ModActionType[ModActionType["REMOVE_POST"] = 1] = "REMOVE_POST";
    ModActionType[ModActionType["REMOVE_COMMENT"] = 2] = "REMOVE_COMMENT";
    ModActionType[ModActionType["APPROVE_POST"] = 3] = "APPROVE_POST";
    ModActionType[ModActionType["APPROVE_COMMENT"] = 4] = "APPROVE_COMMENT";
    ModActionType[ModActionType["EDIT_POST_FLAIR"] = 5] = "EDIT_POST_FLAIR";
    ModActionType[ModActionType["EDIT_USER_FLAIR"] = 6] = "EDIT_USER_FLAIR";
    ModActionType[ModActionType["LOCK_POST"] = 7] = "LOCK_POST";
    ModActionType[ModActionType["LOCK_COMMENT"] = 8] = "LOCK_COMMENT";
    ModActionType[ModActionType["SPAM_POST"] = 9] = "SPAM_POST";
    ModActionType[ModActionType["SPAM_COMMENT"] = 10] = "SPAM_COMMENT";
    ModActionType[ModActionType["DISTINGUISH_POST"] = 11] = "DISTINGUISH_POST";
    ModActionType[ModActionType["DISTINGUISH_COMMENT"] = 12] = "DISTINGUISH_COMMENT";
    ModActionType[ModActionType["STICKY_POST"] = 13] = "STICKY_POST";
    ModActionType[ModActionType["STICKY_COMMENT"] = 14] = "STICKY_COMMENT";
    ModActionType[ModActionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ModActionType || (ModActionType = {}));
export function modActionTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return ModActionType.UNKNOWN;
        case 1:
        case "REMOVE_POST":
            return ModActionType.REMOVE_POST;
        case 2:
        case "REMOVE_COMMENT":
            return ModActionType.REMOVE_COMMENT;
        case 3:
        case "APPROVE_POST":
            return ModActionType.APPROVE_POST;
        case 4:
        case "APPROVE_COMMENT":
            return ModActionType.APPROVE_COMMENT;
        case 5:
        case "EDIT_POST_FLAIR":
            return ModActionType.EDIT_POST_FLAIR;
        case 6:
        case "EDIT_USER_FLAIR":
            return ModActionType.EDIT_USER_FLAIR;
        case 7:
        case "LOCK_POST":
            return ModActionType.LOCK_POST;
        case 8:
        case "LOCK_COMMENT":
            return ModActionType.LOCK_COMMENT;
        case 9:
        case "SPAM_POST":
            return ModActionType.SPAM_POST;
        case 10:
        case "SPAM_COMMENT":
            return ModActionType.SPAM_COMMENT;
        case 11:
        case "DISTINGUISH_POST":
            return ModActionType.DISTINGUISH_POST;
        case 12:
        case "DISTINGUISH_COMMENT":
            return ModActionType.DISTINGUISH_COMMENT;
        case 13:
        case "STICKY_POST":
            return ModActionType.STICKY_POST;
        case 14:
        case "STICKY_COMMENT":
            return ModActionType.STICKY_COMMENT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ModActionType.UNRECOGNIZED;
    }
}
export function modActionTypeToJSON(object) {
    switch (object) {
        case ModActionType.UNKNOWN:
            return 0;
        case ModActionType.REMOVE_POST:
            return 1;
        case ModActionType.REMOVE_COMMENT:
            return 2;
        case ModActionType.APPROVE_POST:
            return 3;
        case ModActionType.APPROVE_COMMENT:
            return 4;
        case ModActionType.EDIT_POST_FLAIR:
            return 5;
        case ModActionType.EDIT_USER_FLAIR:
            return 6;
        case ModActionType.LOCK_POST:
            return 7;
        case ModActionType.LOCK_COMMENT:
            return 8;
        case ModActionType.SPAM_POST:
            return 9;
        case ModActionType.SPAM_COMMENT:
            return 10;
        case ModActionType.DISTINGUISH_POST:
            return 11;
        case ModActionType.DISTINGUISH_COMMENT:
            return 12;
        case ModActionType.STICKY_POST:
            return 13;
        case ModActionType.STICKY_COMMENT:
            return 14;
        case ModActionType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseModAction() {
    return {
        action: undefined,
        actionedAt: undefined,
        subreddit: undefined,
        moderator: undefined,
        targetUser: undefined,
        targetComment: undefined,
        targetPost: undefined,
    };
}
export const ModAction = {
    $type: "devvit.reddit.v2alpha.ModAction",
    encode(message, writer = _m0.Writer.create()) {
        if (message.action !== undefined) {
            writer.uint32(66).string(message.action);
        }
        if (message.actionedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.actionedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(26).fork()).ldelim();
        }
        if (message.moderator !== undefined) {
            UserV2.encode(message.moderator, writer.uint32(34).fork()).ldelim();
        }
        if (message.targetUser !== undefined) {
            UserV2.encode(message.targetUser, writer.uint32(42).fork()).ldelim();
        }
        if (message.targetComment !== undefined) {
            CommentV2.encode(message.targetComment, writer.uint32(50).fork()).ldelim();
        }
        if (message.targetPost !== undefined) {
            PostV2.encode(message.targetPost, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 8:
                    message.action = reader.string();
                    break;
                case 2:
                    message.actionedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.moderator = UserV2.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.targetUser = UserV2.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.targetComment = CommentV2.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.targetPost = PostV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            action: isSet(object.action) ? String(object.action) : undefined,
            actionedAt: isSet(object.actionedAt) ? fromJsonTimestamp(object.actionedAt) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            moderator: isSet(object.moderator) ? UserV2.fromJSON(object.moderator) : undefined,
            targetUser: isSet(object.targetUser) ? UserV2.fromJSON(object.targetUser) : undefined,
            targetComment: isSet(object.targetComment) ? CommentV2.fromJSON(object.targetComment) : undefined,
            targetPost: isSet(object.targetPost) ? PostV2.fromJSON(object.targetPost) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.action !== undefined && (obj.action = message.action);
        message.actionedAt !== undefined && (obj.actionedAt = message.actionedAt.toISOString());
        message.subreddit !== undefined &&
            (obj.subreddit = message.subreddit ? SubredditV2.toJSON(message.subreddit) : undefined);
        message.moderator !== undefined &&
            (obj.moderator = message.moderator ? UserV2.toJSON(message.moderator) : undefined);
        message.targetUser !== undefined &&
            (obj.targetUser = message.targetUser ? UserV2.toJSON(message.targetUser) : undefined);
        message.targetComment !== undefined &&
            (obj.targetComment = message.targetComment ? CommentV2.toJSON(message.targetComment) : undefined);
        message.targetPost !== undefined &&
            (obj.targetPost = message.targetPost ? PostV2.toJSON(message.targetPost) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseModAction();
        message.action = object.action ?? undefined;
        message.actionedAt = object.actionedAt ?? undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.moderator = (object.moderator !== undefined && object.moderator !== null)
            ? UserV2.fromPartial(object.moderator)
            : undefined;
        message.targetUser = (object.targetUser !== undefined && object.targetUser !== null)
            ? UserV2.fromPartial(object.targetUser)
            : undefined;
        message.targetComment = (object.targetComment !== undefined && object.targetComment !== null)
            ? CommentV2.fromPartial(object.targetComment)
            : undefined;
        message.targetPost = (object.targetPost !== undefined && object.targetPost !== null)
            ? PostV2.fromPartial(object.targetPost)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.ModAction", ModAction);
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

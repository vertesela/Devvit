/**
 * #bot.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface CommandDescription {
    name: string;
    command: string;
    description: string;
    usage: string;
}
export interface CommandsList {
    commands: CommandDescription[];
}
export interface CommandContext {
    user: string;
    subreddit: string;
    post: string;
    comment: string;
}
export interface CommandRequest {
    context?: CommandContext;
    command: string;
    args: string;
}
export declare const CommandDescription: {
    $type: "devvit.actor.bot.CommandDescription";
    encode(message: CommandDescription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandDescription;
    fromJSON(object: any): CommandDescription;
    toJSON(message: CommandDescription): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        command?: string | undefined;
        description?: string | undefined;
        usage?: string | undefined;
    } & {
        name?: string | undefined;
        command?: string | undefined;
        description?: string | undefined;
        usage?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CommandDescription>]: never; }>(object: I): CommandDescription;
};
export declare const CommandsList: {
    $type: "devvit.actor.bot.CommandsList";
    encode(message: CommandsList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandsList;
    fromJSON(object: any): CommandsList;
    toJSON(message: CommandsList): unknown;
    fromPartial<I extends {
        commands?: {
            name?: string | undefined;
            command?: string | undefined;
            description?: string | undefined;
            usage?: string | undefined;
        }[] | undefined;
    } & {
        commands?: ({
            name?: string | undefined;
            command?: string | undefined;
            description?: string | undefined;
            usage?: string | undefined;
        }[] & ({
            name?: string | undefined;
            command?: string | undefined;
            description?: string | undefined;
            usage?: string | undefined;
        } & {
            name?: string | undefined;
            command?: string | undefined;
            description?: string | undefined;
            usage?: string | undefined;
        } & { [K in Exclude<keyof I["commands"][number], "$type" | keyof CommandDescription>]: never; })[] & { [K_1 in Exclude<keyof I["commands"], "$type" | keyof {
            name?: string | undefined;
            command?: string | undefined;
            description?: string | undefined;
            usage?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "commands">]: never; }>(object: I): CommandsList;
};
export declare const CommandContext: {
    $type: "devvit.actor.bot.CommandContext";
    encode(message: CommandContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandContext;
    fromJSON(object: any): CommandContext;
    toJSON(message: CommandContext): unknown;
    fromPartial<I extends {
        user?: string | undefined;
        subreddit?: string | undefined;
        post?: string | undefined;
        comment?: string | undefined;
    } & {
        user?: string | undefined;
        subreddit?: string | undefined;
        post?: string | undefined;
        comment?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CommandContext>]: never; }>(object: I): CommandContext;
};
export declare const CommandRequest: {
    $type: "devvit.actor.bot.CommandRequest";
    encode(message: CommandRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandRequest;
    fromJSON(object: any): CommandRequest;
    toJSON(message: CommandRequest): unknown;
    fromPartial<I extends {
        context?: {
            user?: string | undefined;
            subreddit?: string | undefined;
            post?: string | undefined;
            comment?: string | undefined;
        } | undefined;
        command?: string | undefined;
        args?: string | undefined;
    } & {
        context?: ({
            user?: string | undefined;
            subreddit?: string | undefined;
            post?: string | undefined;
            comment?: string | undefined;
        } & {
            user?: string | undefined;
            subreddit?: string | undefined;
            post?: string | undefined;
            comment?: string | undefined;
        } & { [K in Exclude<keyof I["context"], "$type" | keyof CommandContext>]: never; }) | undefined;
        command?: string | undefined;
        args?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof CommandRequest>]: never; }>(object: I): CommandRequest;
};
export interface Bot {
    GetCommands(request: Empty, metadata?: Metadata): Promise<CommandsList>;
    OnCommand(request: CommandRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class BotClientImpl implements Bot {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetCommands(request: Empty): Promise<CommandsList>;
    OnCommand(request: CommandRequest): Promise<Empty>;
}
export type BotDefinition = typeof BotDefinition;
export declare const BotDefinition: {
    readonly name: "Bot";
    readonly fullName: "devvit.actor.bot.Bot";
    readonly methods: {
        readonly getCommands: {
            readonly name: "GetCommands";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.bot.CommandsList";
                encode(message: CommandsList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommandsList;
                fromJSON(object: any): CommandsList;
                toJSON(message: CommandsList): unknown;
                fromPartial<I_1 extends {
                    commands?: {
                        name?: string | undefined;
                        command?: string | undefined;
                        description?: string | undefined;
                        usage?: string | undefined;
                    }[] | undefined;
                } & {
                    commands?: ({
                        name?: string | undefined;
                        command?: string | undefined;
                        description?: string | undefined;
                        usage?: string | undefined;
                    }[] & ({
                        name?: string | undefined;
                        command?: string | undefined;
                        description?: string | undefined;
                        usage?: string | undefined;
                    } & {
                        name?: string | undefined;
                        command?: string | undefined;
                        description?: string | undefined;
                        usage?: string | undefined;
                    } & { [K in Exclude<keyof I["commands"][number], "$type" | keyof CommandDescription>]: never; })[] & { [K_1 in Exclude<keyof I["commands"], "$type" | keyof {
                        name?: string | undefined;
                        command?: string | undefined;
                        description?: string | undefined;
                        usage?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | "commands">]: never; }>(object: I_1): CommandsList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onCommand: {
            readonly name: "OnCommand";
            readonly requestType: {
                $type: "devvit.actor.bot.CommandRequest";
                encode(message: CommandRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommandRequest;
                fromJSON(object: any): CommandRequest;
                toJSON(message: CommandRequest): unknown;
                fromPartial<I_2 extends {
                    context?: {
                        user?: string | undefined;
                        subreddit?: string | undefined;
                        post?: string | undefined;
                        comment?: string | undefined;
                    } | undefined;
                    command?: string | undefined;
                    args?: string | undefined;
                } & {
                    context?: ({
                        user?: string | undefined;
                        subreddit?: string | undefined;
                        post?: string | undefined;
                        comment?: string | undefined;
                    } & {
                        user?: string | undefined;
                        subreddit?: string | undefined;
                        post?: string | undefined;
                        comment?: string | undefined;
                    } & { [K in Exclude<keyof I["context"], "$type" | keyof CommandContext>]: never; }) | undefined;
                    command?: string | undefined;
                    args?: string | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof CommandRequest>]: never; }>(object: I_2): CommandRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=bot.d.ts.map
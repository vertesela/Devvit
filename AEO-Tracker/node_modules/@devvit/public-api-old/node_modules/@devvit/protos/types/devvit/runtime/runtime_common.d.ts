/**
 * #runtime_common.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export interface Ack {
    success: boolean;
    messages: string[];
}
export interface Debug {
    message?: any;
}
export interface Strings {
    values: string[];
}
/**
 * to-do: replace with StringValue. See
 * https://github.com/stephenh/ts-proto/issues/69.
 */
export interface Str {
    value: string;
}
export declare const Ack: {
    $type: "devvit.runtime.Ack";
    encode(message: Ack, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ack;
    fromJSON(object: any): Ack;
    toJSON(message: Ack): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        messages?: string[] | undefined;
    } & {
        success?: boolean | undefined;
        messages?: (string[] & string[] & { [K in Exclude<keyof I["messages"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof Ack>]: never; }>(object: I): Ack;
};
export declare const Debug: {
    $type: "devvit.runtime.Debug";
    encode(message: Debug, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Debug;
    fromJSON(object: any): Debug;
    toJSON(message: Debug): unknown;
    fromPartial<I extends {
        message?: any;
    } & {
        message?: any;
    } & { [K in Exclude<keyof I, "$type" | "message">]: never; }>(object: I): Debug;
};
export declare const Strings: {
    $type: "devvit.runtime.Strings";
    encode(message: Strings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Strings;
    fromJSON(object: any): Strings;
    toJSON(message: Strings): unknown;
    fromPartial<I extends {
        values?: string[] | undefined;
    } & {
        values?: (string[] & string[] & { [K in Exclude<keyof I["values"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "values">]: never; }>(object: I): Strings;
};
export declare const Str: {
    $type: "devvit.runtime.Str";
    encode(message: Str, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Str;
    fromJSON(object: any): Str;
    toJSON(message: Str): unknown;
    fromPartial<I extends {
        value?: string | undefined;
    } & {
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "value">]: never; }>(object: I): Str;
};
//# sourceMappingURL=runtime_common.d.ts.map
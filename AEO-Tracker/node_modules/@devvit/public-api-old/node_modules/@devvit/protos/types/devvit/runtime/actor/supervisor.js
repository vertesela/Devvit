/**
 * #supervisor.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { LinkedBundle } from '../bundle.js';
import { Envelope } from '../envelope.js';
function createBaseUnloadRequest() {
    return { force: false, hostname: "" };
}
export const UnloadRequest = {
    $type: "devvit.runtime.actor.UnloadRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.force === true) {
            writer.uint32(8).bool(message.force);
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnloadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.force = reader.bool();
                    break;
                case 2:
                    message.hostname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            force: isSet(object.force) ? Boolean(object.force) : false,
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.force !== undefined && (obj.force = message.force);
        message.hostname !== undefined && (obj.hostname = message.hostname);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUnloadRequest();
        message.force = object.force ?? false;
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.actor.UnloadRequest", UnloadRequest);
export class SupervisorClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.runtime.actor.Supervisor";
        this.rpc = rpc;
        this.Filter = this.Filter.bind(this);
        this.Load = this.Load.bind(this);
        this.Unload = this.Unload.bind(this);
    }
    Filter(request) {
        const data = Envelope.encode(request).finish();
        const promise = this.rpc.request(this.service, "Filter", data);
        return promise.then((data) => Envelope.decode(new _m0.Reader(data)));
    }
    Load(request) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "Load", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Unload(request) {
        const data = UnloadRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unload", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const SupervisorDefinition = {
    name: "Supervisor",
    fullName: "devvit.runtime.actor.Supervisor",
    methods: {
        /**
         * Transform an incoming envelope.
         *
         * Because the input and outputs are Envelopes, they are actually Envelopes
         * wrapped in Envelopes. That is, Envelope.message is an Envelope. The outer
         * Envelope.success flag indicates filter status.
         */
        filter: {
            name: "Filter",
            requestType: Envelope,
            requestStream: false,
            responseType: Envelope,
            responseStream: false,
            options: {},
        },
        /** Unpacks and loads each bundled Actor into their own Workers */
        load: {
            name: "Load",
            requestType: LinkedBundle,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** Unloads the actor at the provided URI, and unloads dependencies if needed */
        unload: {
            name: "Unload",
            requestType: UnloadRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

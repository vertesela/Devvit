/**
 * #http.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseFetchRequest() {
    return { url: "", data: undefined };
}
export const FetchRequest = {
    $type: "devvit.plugin.http.FetchRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.data !== undefined) {
            RequestData.encode(message.data, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.data = RequestData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : "",
            data: isSet(object.data) ? RequestData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.data !== undefined && (obj.data = message.data ? RequestData.toJSON(message.data) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFetchRequest();
        message.url = object.url ?? "";
        message.data = (object.data !== undefined && object.data !== null)
            ? RequestData.fromPartial(object.data)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.http.FetchRequest", FetchRequest);
function createBaseRequestData() {
    return { method: "", headers: {}, body: new Uint8Array() };
}
export const RequestData = {
    $type: "devvit.plugin.http.RequestData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            RequestData_HeadersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.body.length !== 0) {
            writer.uint32(26).bytes(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.method = reader.string();
                    break;
                case 2:
                    const entry2 = RequestData_HeadersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.headers[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet(object.method) ? String(object.method) : "",
            headers: isObject(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.method !== undefined && (obj.method = message.method);
        obj.headers = {};
        if (message.headers) {
            Object.entries(message.headers).forEach(([k, v]) => {
                obj.headers[k] = v;
            });
        }
        message.body !== undefined &&
            (obj.body = base64FromBytes(message.body !== undefined ? message.body : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRequestData();
        message.method = object.method ?? "";
        message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.body = object.body ?? new Uint8Array();
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.http.RequestData", RequestData);
function createBaseRequestData_HeadersEntry() {
    return { key: "", value: "" };
}
export const RequestData_HeadersEntry = {
    $type: "devvit.plugin.http.RequestData.HeadersEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestData_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRequestData_HeadersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.http.RequestData.HeadersEntry", RequestData_HeadersEntry);
function createBaseFetchResponse() {
    return { url: "", body: new Uint8Array(), status: 0, headers: {} };
}
export const FetchResponse = {
    $type: "devvit.plugin.http.FetchResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.body.length !== 0) {
            writer.uint32(18).bytes(message.body);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            FetchResponse_HeadersEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.body = reader.bytes();
                    break;
                case 3:
                    message.status = reader.int32();
                    break;
                case 4:
                    const entry4 = FetchResponse_HeadersEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.headers[entry4.key] = entry4.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : "",
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(),
            status: isSet(object.status) ? Number(object.status) : 0,
            headers: isObject(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.body !== undefined &&
            (obj.body = base64FromBytes(message.body !== undefined ? message.body : new Uint8Array()));
        message.status !== undefined && (obj.status = Math.round(message.status));
        obj.headers = {};
        if (message.headers) {
            Object.entries(message.headers).forEach(([k, v]) => {
                obj.headers[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFetchResponse();
        message.url = object.url ?? "";
        message.body = object.body ?? new Uint8Array();
        message.status = object.status ?? 0;
        message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.http.FetchResponse", FetchResponse);
function createBaseFetchResponse_HeadersEntry() {
    return { key: "", value: "" };
}
export const FetchResponse_HeadersEntry = {
    $type: "devvit.plugin.http.FetchResponse.HeadersEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchResponse_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFetchResponse_HeadersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.http.FetchResponse.HeadersEntry", FetchResponse_HeadersEntry);
export class HTTPClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.http.HTTP";
        this.rpc = rpc;
        this.Fetch = this.Fetch.bind(this);
    }
    Fetch(request) {
        const data = FetchRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Fetch", data);
        return promise.then((data) => FetchResponse.decode(new _m0.Reader(data)));
    }
}
export const HTTPDefinition = {
    name: "HTTP",
    fullName: "devvit.plugin.http.HTTP",
    methods: {
        fetch: {
            name: "Fetch",
            requestType: FetchRequest,
            requestStream: false,
            responseType: FetchResponse,
            responseStream: false,
            options: {},
        },
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

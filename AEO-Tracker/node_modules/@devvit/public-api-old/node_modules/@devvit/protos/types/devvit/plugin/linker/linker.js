/**
 * #linker.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { LinkedBundle } from '../../runtime/bundle.js';
import { Bundle } from '../buildpack/buildpack_common.js';
import { ResolutionError } from './resolver.js';
function createBaseLinkerResponse() {
    return { bundle: undefined, errors: [] };
}
export const LinkerResponse = {
    $type: "devvit.plugin.linker.LinkerResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bundle !== undefined) {
            LinkedBundle.encode(message.bundle, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.errors) {
            ResolutionError.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bundle = LinkedBundle.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.errors.push(ResolutionError.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundle: isSet(object.bundle) ? LinkedBundle.fromJSON(object.bundle) : undefined,
            errors: Array.isArray(object?.errors) ? object.errors.map((e) => ResolutionError.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.bundle !== undefined && (obj.bundle = message.bundle ? LinkedBundle.toJSON(message.bundle) : undefined);
        if (message.errors) {
            obj.errors = message.errors.map((e) => e ? ResolutionError.toJSON(e) : undefined);
        }
        else {
            obj.errors = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLinkerResponse();
        message.bundle = (object.bundle !== undefined && object.bundle !== null)
            ? LinkedBundle.fromPartial(object.bundle)
            : undefined;
        message.errors = object.errors?.map((e) => ResolutionError.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.linker.LinkerResponse", LinkerResponse);
export class LinkerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.linker.Linker";
        this.rpc = rpc;
        this.Link = this.Link.bind(this);
    }
    Link(request) {
        const data = Bundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "Link", data);
        return promise.then((data) => LinkerResponse.decode(new _m0.Reader(data)));
    }
}
export const LinkerDefinition = {
    name: "Linker",
    fullName: "devvit.plugin.linker.Linker",
    methods: {
        link: {
            name: "Link",
            requestType: Bundle,
            requestStream: false,
            responseType: LinkerResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #value.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { formFieldTypeFromJSON, formFieldTypeToJSON } from './type.js';
function createBaseFormFieldValue() {
    return {
        fieldType: 0,
        stringValue: undefined,
        numberValue: undefined,
        boolValue: undefined,
        listValue: undefined,
        selectionValue: undefined,
        groupValue: undefined,
    };
}
export const FormFieldValue = {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fieldType !== 0) {
            writer.uint32(8).int32(message.fieldType);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.numberValue !== undefined) {
            writer.uint32(25).double(message.numberValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        if (message.listValue !== undefined) {
            FormFieldValue_ListValue.encode(message.listValue, writer.uint32(42).fork()).ldelim();
        }
        if (message.selectionValue !== undefined) {
            FormFieldValue_SelectionValue.encode(message.selectionValue, writer.uint32(50).fork()).ldelim();
        }
        if (message.groupValue !== undefined) {
            FormFieldValue_GroupValue.encode(message.groupValue, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormFieldValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fieldType = reader.int32();
                    break;
                case 2:
                    message.stringValue = reader.string();
                    break;
                case 3:
                    message.numberValue = reader.double();
                    break;
                case 4:
                    message.boolValue = reader.bool();
                    break;
                case 5:
                    message.listValue = FormFieldValue_ListValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.selectionValue = FormFieldValue_SelectionValue.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.groupValue = FormFieldValue_GroupValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fieldType: isSet(object.fieldType) ? formFieldTypeFromJSON(object.fieldType) : 0,
            stringValue: isSet(object.stringValue) ? String(object.stringValue) : undefined,
            numberValue: isSet(object.numberValue) ? Number(object.numberValue) : undefined,
            boolValue: isSet(object.boolValue) ? Boolean(object.boolValue) : undefined,
            listValue: isSet(object.listValue) ? FormFieldValue_ListValue.fromJSON(object.listValue) : undefined,
            selectionValue: isSet(object.selectionValue)
                ? FormFieldValue_SelectionValue.fromJSON(object.selectionValue)
                : undefined,
            groupValue: isSet(object.groupValue) ? FormFieldValue_GroupValue.fromJSON(object.groupValue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.fieldType !== undefined && (obj.fieldType = formFieldTypeToJSON(message.fieldType));
        message.stringValue !== undefined && (obj.stringValue = message.stringValue);
        message.numberValue !== undefined && (obj.numberValue = message.numberValue);
        message.boolValue !== undefined && (obj.boolValue = message.boolValue);
        message.listValue !== undefined &&
            (obj.listValue = message.listValue ? FormFieldValue_ListValue.toJSON(message.listValue) : undefined);
        message.selectionValue !== undefined && (obj.selectionValue = message.selectionValue
            ? FormFieldValue_SelectionValue.toJSON(message.selectionValue)
            : undefined);
        message.groupValue !== undefined &&
            (obj.groupValue = message.groupValue ? FormFieldValue_GroupValue.toJSON(message.groupValue) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormFieldValue();
        message.fieldType = object.fieldType ?? 0;
        message.stringValue = object.stringValue ?? undefined;
        message.numberValue = object.numberValue ?? undefined;
        message.boolValue = object.boolValue ?? undefined;
        message.listValue = (object.listValue !== undefined && object.listValue !== null)
            ? FormFieldValue_ListValue.fromPartial(object.listValue)
            : undefined;
        message.selectionValue = (object.selectionValue !== undefined && object.selectionValue !== null)
            ? FormFieldValue_SelectionValue.fromPartial(object.selectionValue)
            : undefined;
        message.groupValue = (object.groupValue !== undefined && object.groupValue !== null)
            ? FormFieldValue_GroupValue.fromPartial(object.groupValue)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FormFieldValue", FormFieldValue);
function createBaseFormFieldValue_ListValue() {
    return { itemType: 0, items: [] };
}
export const FormFieldValue_ListValue = {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.ListValue",
    encode(message, writer = _m0.Writer.create()) {
        if (message.itemType !== 0) {
            writer.uint32(8).int32(message.itemType);
        }
        for (const v of message.items) {
            FormFieldValue.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormFieldValue_ListValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemType = reader.int32();
                    break;
                case 2:
                    message.items.push(FormFieldValue.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemType: isSet(object.itemType) ? formFieldTypeFromJSON(object.itemType) : 0,
            items: Array.isArray(object?.items) ? object.items.map((e) => FormFieldValue.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.itemType !== undefined && (obj.itemType = formFieldTypeToJSON(message.itemType));
        if (message.items) {
            obj.items = message.items.map((e) => e ? FormFieldValue.toJSON(e) : undefined);
        }
        else {
            obj.items = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormFieldValue_ListValue();
        message.itemType = object.itemType ?? 0;
        message.items = object.items?.map((e) => FormFieldValue.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FormFieldValue.ListValue", FormFieldValue_ListValue);
function createBaseFormFieldValue_SelectionValue() {
    return { values: [] };
}
export const FormFieldValue_SelectionValue = {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.SelectionValue",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormFieldValue_SelectionValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.values.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { values: Array.isArray(object?.values) ? object.values.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.values) {
            obj.values = message.values.map((e) => e);
        }
        else {
            obj.values = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormFieldValue_SelectionValue();
        message.values = object.values?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FormFieldValue.SelectionValue", FormFieldValue_SelectionValue);
function createBaseFormFieldValue_GroupValue() {
    return {};
}
export const FormFieldValue_GroupValue = {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.GroupValue",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormFieldValue_GroupValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseFormFieldValue_GroupValue();
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FormFieldValue.GroupValue", FormFieldValue_GroupValue);
function isSet(value) {
    return value !== null && value !== undefined;
}

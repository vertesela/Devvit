import { LogErrorMessage, LogErrorResponse, LogEventMessage, LogEventResponse, LogMessage, LogResponse } from './logger.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface LoggerClient {
    Error(request: LogErrorMessage): Promise<LogErrorResponse>;
    Event(request: LogEventMessage): Promise<LogEventResponse>;
    Log(request: LogMessage): Promise<LogResponse>;
}
export declare class LoggerClientJSON implements LoggerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Error(request: LogErrorMessage): Promise<LogErrorResponse>;
    Event(request: LogEventMessage): Promise<LogEventResponse>;
    Log(request: LogMessage): Promise<LogResponse>;
}
export declare class LoggerClientProtobuf implements LoggerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Error(request: LogErrorMessage): Promise<LogErrorResponse>;
    Event(request: LogEventMessage): Promise<LogEventResponse>;
    Log(request: LogMessage): Promise<LogResponse>;
}
export {};
//# sourceMappingURL=logger.twirp-client.d.ts.map
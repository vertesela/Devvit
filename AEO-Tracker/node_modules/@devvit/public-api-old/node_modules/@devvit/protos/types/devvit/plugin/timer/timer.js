/**
 * #timer.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseTimerMessage() {
    return { durationMillis: 0 };
}
export const TimerMessage = {
    $type: "devvit.plugin.timer.TimerMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.durationMillis !== 0) {
            writer.uint32(8).int32(message.durationMillis);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.durationMillis = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { durationMillis: isSet(object.durationMillis) ? Number(object.durationMillis) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.durationMillis !== undefined && (obj.durationMillis = Math.round(message.durationMillis));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTimerMessage();
        message.durationMillis = object.durationMillis ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.timer.TimerMessage", TimerMessage);
export class TimerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.timer.Timer";
        this.rpc = rpc;
        this.Wait = this.Wait.bind(this);
    }
    Wait(request) {
        const data = TimerMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Wait", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const TimerDefinition = {
    name: "Timer",
    fullName: "devvit.plugin.timer.Timer",
    methods: {
        wait: {
            name: "Wait",
            requestType: TimerMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

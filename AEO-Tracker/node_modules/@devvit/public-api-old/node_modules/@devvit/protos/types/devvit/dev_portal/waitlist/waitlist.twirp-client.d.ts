import { Empty } from '../../../google/protobuf/empty.js';
import { IsCurrentUserRegisteredResponse, WaitlistRegisterUserRequest, WaitlistRegisterUserResponse, GetCurrentUserStatusResponse } from './waitlist.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface WaitlistClient {
    IsCurrentUserRegistered(request: Empty): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(request: WaitlistRegisterUserRequest): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(request: Empty): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(request: Empty): Promise<Empty>;
}
export declare class WaitlistClientJSON implements WaitlistClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    IsCurrentUserRegistered(request: Empty): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(request: WaitlistRegisterUserRequest): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(request: Empty): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(request: Empty): Promise<Empty>;
}
export declare class WaitlistClientProtobuf implements WaitlistClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    IsCurrentUserRegistered(request: Empty): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(request: WaitlistRegisterUserRequest): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(request: Empty): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(request: Empty): Promise<Empty>;
}
export {};
//# sourceMappingURL=waitlist.twirp-client.d.ts.map
/**
 * #action.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export interface ScheduledAction {
    /** Arbitrary string for an Actor's internal use */
    type: string;
    /** Arbitrary string for an Actor's internal use (i.e.: JSON serialized data) */
    data?: {
        [key: string]: any;
    };
}
export declare const ScheduledAction: {
    $type: "devvit.actor.scheduler.ScheduledAction";
    encode(message: ScheduledAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledAction;
    fromJSON(object: any): ScheduledAction;
    toJSON(message: ScheduledAction): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        data?: {
            [x: string]: any;
        } | undefined;
    } & {
        type?: string | undefined;
        data?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["data"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof ScheduledAction>]: never; }>(object: I): ScheduledAction;
};
//# sourceMappingURL=action.d.ts.map
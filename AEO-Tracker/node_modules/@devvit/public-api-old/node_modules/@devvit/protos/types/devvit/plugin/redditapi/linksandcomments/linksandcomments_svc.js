/**
 * #linksandcomments_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { BasicIdRequest, CommentRequest, FollowPostRequest, InfoRequest, JsonWrappedComment, MoreChildrenRequest, ReportAwardRequest, ReportRequest, SaveRequest, SendRepliesRequest, SetContestModeRequest, SetSubredditStickyRequest, SetSuggestedSortRequest, SubmitRequest, SubmitResponse, VoteRequest, } from './linksandcomments_msg.js';
export class LinksAndCommentsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.redditapi.linksandcomments.LinksAndComments";
        this.rpc = rpc;
        this.Comment = this.Comment.bind(this);
        this.Del = this.Del.bind(this);
        this.EditUserText = this.EditUserText.bind(this);
        this.FollowPost = this.FollowPost.bind(this);
        this.Hide = this.Hide.bind(this);
        this.Info = this.Info.bind(this);
        this.Lock = this.Lock.bind(this);
        this.MarkNSFW = this.MarkNSFW.bind(this);
        this.MoreChildren = this.MoreChildren.bind(this);
        this.Report = this.Report.bind(this);
        this.ReportAward = this.ReportAward.bind(this);
        this.Save = this.Save.bind(this);
        this.SendReplies = this.SendReplies.bind(this);
        this.SetContestMode = this.SetContestMode.bind(this);
        this.SetSubredditSticky = this.SetSubredditSticky.bind(this);
        this.SetSuggestedSort = this.SetSuggestedSort.bind(this);
        this.Spoiler = this.Spoiler.bind(this);
        this.Submit = this.Submit.bind(this);
        this.Unhide = this.Unhide.bind(this);
        this.Unlock = this.Unlock.bind(this);
        this.UnmarkNSFW = this.UnmarkNSFW.bind(this);
        this.Unsave = this.Unsave.bind(this);
        this.Unspoiler = this.Unspoiler.bind(this);
        this.Vote = this.Vote.bind(this);
    }
    Comment(request) {
        const data = CommentRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Comment", data);
        return promise.then((data) => JsonWrappedComment.decode(new _m0.Reader(data)));
    }
    Del(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Del", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    EditUserText(request) {
        const data = CommentRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EditUserText", data);
        return promise.then((data) => JsonWrappedComment.decode(new _m0.Reader(data)));
    }
    FollowPost(request) {
        const data = FollowPostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FollowPost", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Hide(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Hide", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Info(request) {
        const data = InfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Info", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    Lock(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Lock", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    MarkNSFW(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MarkNSFW", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    MoreChildren(request) {
        const data = MoreChildrenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MoreChildren", data);
        return promise.then((data) => JsonWrappedComment.decode(new _m0.Reader(data)));
    }
    Report(request) {
        const data = ReportRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Report", data);
        return promise.then((data) => JsonStatus.decode(new _m0.Reader(data)));
    }
    ReportAward(request) {
        const data = ReportAwardRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ReportAward", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Save(request) {
        const data = SaveRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Save", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    SendReplies(request) {
        const data = SendRepliesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SendReplies", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    SetContestMode(request) {
        const data = SetContestModeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetContestMode", data);
        return promise.then((data) => JsonStatus.decode(new _m0.Reader(data)));
    }
    SetSubredditSticky(request) {
        const data = SetSubredditStickyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetSubredditSticky", data);
        return promise.then((data) => JsonStatus.decode(new _m0.Reader(data)));
    }
    SetSuggestedSort(request) {
        const data = SetSuggestedSortRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetSuggestedSort", data);
        return promise.then((data) => JsonStatus.decode(new _m0.Reader(data)));
    }
    Spoiler(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Spoiler", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Submit(request) {
        const data = SubmitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Submit", data);
        return promise.then((data) => SubmitResponse.decode(new _m0.Reader(data)));
    }
    Unhide(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unhide", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Unlock(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unlock", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UnmarkNSFW(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnmarkNSFW", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Unsave(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unsave", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Unspoiler(request) {
        const data = BasicIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unspoiler", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Vote(request) {
        const data = VoteRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Vote", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const LinksAndCommentsDefinition = {
    name: "LinksAndComments",
    fullName: "devvit.plugin.redditapi.linksandcomments.LinksAndComments",
    methods: {
        /**
         * Submit a new Comment
         * Note: `thing_id` refers to the Post or Comment this comment is replying to
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_comment}
         */
        comment: {
            name: "Comment",
            requestType: CommentRequest,
            requestStream: false,
            responseType: JsonWrappedComment,
            responseStream: false,
            options: {},
        },
        /**
         * Delete a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_del}
         */
        del: {
            name: "Del",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Edit the body text of a Comment or Post
         * Note: `thing_id` refers to the Post or Comment being edited
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_editusertext}
         */
        editUserText: {
            name: "EditUserText",
            requestType: CommentRequest,
            requestStream: false,
            responseType: JsonWrappedComment,
            responseStream: false,
            options: {},
        },
        /**
         * Follow or unfollow a Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_follow_post}
         */
        followPost: {
            name: "FollowPost",
            requestType: FollowPostRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Hide one or more Posts for the user
         * Note: `id` must be one or more comma-separated Post thing IDs
         *
         * @see {@link Unhide}
         * @see {@link https://www.reddit.com/dev/api#POST_api_hide}
         */
        hide: {
            name: "Hide",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Get one or more things by ID, Subreddit name, or Link Post URL
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_info}
         */
        info: {
            name: "Info",
            requestType: InfoRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Disable comments for a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_lock}
         */
        lock: {
            name: "Lock",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Marks a Post as Not-Safe-For-Work
         *
         * @see {@link UnmarkNSFW}
         * @see {@link https://www.reddit.com/dev/api#POST_api_marknsfw}
         */
        markNSFW: {
            name: "MarkNSFW",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Get more comments from a truncated Comment tree
         *
         * A comment tree has been truncated if it ends with an entry of kind "more"
         * instead of "t1".  Use this API to fetch the additional comments listed in
         * the "children" array of the "more" entry.
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_morechildren}
         */
        moreChildren: {
            name: "MoreChildren",
            requestType: MoreChildrenRequest,
            requestStream: false,
            responseType: JsonWrappedComment,
            responseStream: false,
            options: {},
        },
        /**
         * Report a Post, Comment, or Private Message
         *
         * If reporting a Post or Comment the report is sent to the moderators of the subreddit for review.
         * If reporting a Private Message the report is sent to Reddit for review.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_report}
         */
        report: {
            name: "Report",
            requestType: ReportRequest,
            requestStream: false,
            responseType: JsonStatus,
            responseStream: false,
            options: {},
        },
        /**
         * Report an award to Reddit for review
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_report_award}
         */
        reportAward: {
            name: "ReportAward",
            requestType: ReportAwardRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Save a Post or Comment to the user's Saved list
         *
         * @see {@link Unsave}
         * @see {@link https://www.reddit.com/dev/api#POST_api_save}
         */
        save: {
            name: "Save",
            requestType: SaveRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Enable or disable reply notifications for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_sendreplies}
         */
        sendReplies: {
            name: "SendReplies",
            requestType: SendRepliesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Toggle Contest Mode for a Post's comments
         *
         * Contest Mode randomizes the sort order and hides the vote score for comments
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_contest_mode}
         */
        setContestMode: {
            name: "SetContestMode",
            requestType: SetContestModeRequest,
            requestStream: false,
            responseType: JsonStatus,
            responseStream: false,
            options: {},
        },
        /**
         * Set the "sticky" or "pinned" status of a Post
         *
         * If the post was created by the current user they can pin the post
         * to the top of their user profile.  Otherwise they must be a moderator
         * of the subreddit to stick it to the top of the subreddit it was posted in.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_subreddit_sticky}
         */
        setSubredditSticky: {
            name: "SetSubredditSticky",
            requestType: SetSubredditStickyRequest,
            requestStream: false,
            responseType: JsonStatus,
            responseStream: false,
            options: {},
        },
        /**
         * Set the default sort order for comments in the given Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_suggested_sort}
         */
        setSuggestedSort: {
            name: "SetSuggestedSort",
            requestType: SetSuggestedSortRequest,
            requestStream: false,
            responseType: JsonStatus,
            responseStream: false,
            options: {},
        },
        /**
         * Sets the spoiler tag on a given Post to hide its contents by default
         * Note: `id` must be a single thing ID for a Post
         *
         * @see {@link Unspoiler}
         * @see {@link https://www.reddit.com/dev/api#POST_api_spoiler}
         */
        spoiler: {
            name: "Spoiler",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Create a new Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_submit}
         */
        submit: {
            name: "Submit",
            requestType: SubmitRequest,
            requestStream: false,
            responseType: SubmitResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Unhide one or more Posts for the user
         * Note: `id` must be one or more comma-separated Post thing IDs
         *
         * @see {@link Hide}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unhide}
         */
        unhide: {
            name: "Unhide",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Enable comments for a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link Lock}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unlock}
         */
        unlock: {
            name: "Unlock",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Clears the Not-Safe-For-Work status from a Post
         *
         * @see {@link MarkNSFW}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unmarknsfw}
         */
        unmarkNSFW: {
            name: "UnmarkNSFW",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Remove a Post or Comment from the user's Saved list
         *
         * @see {@link Save}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unsave}
         */
        unsave: {
            name: "Unsave",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Clears the spoiler tag on a given Post
         *
         * @see {@link Spoiler}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unspoiler}
         */
        unspoiler: {
            name: "Unspoiler",
            requestType: BasicIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Vote or clear a vote on a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_vote}
         */
        vote: {
            name: "Vote",
            requestType: VoteRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};

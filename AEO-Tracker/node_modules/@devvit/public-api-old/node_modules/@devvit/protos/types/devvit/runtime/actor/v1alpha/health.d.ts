/**
 * #health.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export interface HealthStatus {
    start?: Date;
    end?: Date;
}
export declare const HealthStatus: {
    $type: "devvit.runtime.actor.v1alpha.HealthStatus";
    encode(message: HealthStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HealthStatus;
    fromJSON(object: any): HealthStatus;
    toJSON(message: HealthStatus): unknown;
    fromPartial<I extends {
        start?: Date | undefined;
        end?: Date | undefined;
    } & {
        start?: Date | undefined;
        end?: Date | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof HealthStatus>]: never; }>(object: I): HealthStatus;
};
export interface Health {
    Check(request: Empty, metadata?: Metadata): Promise<HealthStatus>;
}
export declare class HealthClientImpl implements Health {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Check(request: Empty): Promise<HealthStatus>;
}
export type HealthDefinition = typeof HealthDefinition;
export declare const HealthDefinition: {
    readonly name: "Health";
    readonly fullName: "devvit.runtime.actor.v1alpha.Health";
    readonly methods: {
        readonly check: {
            readonly name: "Check";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.runtime.actor.v1alpha.HealthStatus";
                encode(message: HealthStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HealthStatus;
                fromJSON(object: any): HealthStatus;
                toJSON(message: HealthStatus): unknown;
                fromPartial<I_1 extends {
                    start?: Date | undefined;
                    end?: Date | undefined;
                } & {
                    start?: Date | undefined;
                    end?: Date | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof HealthStatus>]: never; }>(object: I_1): HealthStatus;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=health.d.ts.map
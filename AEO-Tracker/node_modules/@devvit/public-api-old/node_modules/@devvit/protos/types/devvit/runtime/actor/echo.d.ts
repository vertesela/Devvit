/**
 * #echo.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Str } from '../runtime_common.js';
export interface Echo {
    Echo(request: Str, metadata?: Metadata): Promise<Str>;
}
export declare class EchoClientImpl implements Echo {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Echo(request: Str): Promise<Str>;
}
export type EchoDefinition = typeof EchoDefinition;
export declare const EchoDefinition: {
    readonly name: "Echo";
    readonly fullName: "devvit.runtime.actor.Echo";
    readonly methods: {
        readonly echo: {
            readonly name: "Echo";
            readonly requestType: {
                $type: "devvit.runtime.Str";
                encode(message: Str, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Str;
                fromJSON(object: any): Str;
                toJSON(message: Str): unknown;
                fromPartial<I extends {
                    value?: string | undefined;
                } & {
                    value?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "value">]: never; }>(object: I): Str;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.runtime.Str";
                encode(message: Str, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Str;
                fromJSON(object: any): Str;
                toJSON(message: Str): unknown;
                fromPartial<I extends {
                    value?: string | undefined;
                } & {
                    value?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "value">]: never; }>(object: I): Str;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=echo.d.ts.map
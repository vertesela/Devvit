/**
 * #privatemessages_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export interface GenericPrivateMessagesRequest {
    /** fullname of a thing */
    id: string;
}
export interface ComposeRequest {
    /** the name of an existing user */
    to: string;
    /** a string no longer than 100 characters */
    subject: string;
    /** raw markdown text */
    text: string;
    /** subreddit name */
    fromSr: string;
}
export interface ReadAllMessagesRequest {
    /** A comma-separated list of items */
    filterTypes: string;
}
export interface MessageWhereRequest {
    /** one "inbox", "unread", or "sent" */
    where: string;
    /** true or false */
    mark?: boolean;
    /** message id */
    mid?: string;
    /** fullname of a thing */
    after?: string;
    /** fullname of a thing */
    before?: string;
    /** a positive integer (default: 0) */
    count?: number;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number;
    /** (optional) the string all */
    show?: string;
}
export declare const GenericPrivateMessagesRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
    encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
    fromJSON(object: any): GenericPrivateMessagesRequest;
    toJSON(message: GenericPrivateMessagesRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): GenericPrivateMessagesRequest;
};
export declare const ComposeRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.ComposeRequest";
    encode(message: ComposeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ComposeRequest;
    fromJSON(object: any): ComposeRequest;
    toJSON(message: ComposeRequest): unknown;
    fromPartial<I extends {
        to?: string | undefined;
        subject?: string | undefined;
        text?: string | undefined;
        fromSr?: string | undefined;
    } & {
        to?: string | undefined;
        subject?: string | undefined;
        text?: string | undefined;
        fromSr?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ComposeRequest>]: never; }>(object: I): ComposeRequest;
};
export declare const ReadAllMessagesRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.ReadAllMessagesRequest";
    encode(message: ReadAllMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadAllMessagesRequest;
    fromJSON(object: any): ReadAllMessagesRequest;
    toJSON(message: ReadAllMessagesRequest): unknown;
    fromPartial<I extends {
        filterTypes?: string | undefined;
    } & {
        filterTypes?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "filterTypes">]: never; }>(object: I): ReadAllMessagesRequest;
};
export declare const MessageWhereRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.MessageWhereRequest";
    encode(message: MessageWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageWhereRequest;
    fromJSON(object: any): MessageWhereRequest;
    toJSON(message: MessageWhereRequest): unknown;
    fromPartial<I extends {
        where?: string | undefined;
        mark?: boolean | undefined;
        mid?: string | undefined;
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        show?: string | undefined;
    } & {
        where?: string | undefined;
        mark?: boolean | undefined;
        mid?: string | undefined;
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        show?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof MessageWhereRequest>]: never; }>(object: I): MessageWhereRequest;
};
//# sourceMappingURL=privatemessages_msg.d.ts.map
/**
 * #testcases.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** A list of test cases. Contains the actor these test cases belong to, and an array of actual test cases. */
export interface TestCasesList {
    actorName: string;
    testCases: TestCase[];
}
/**
 * An individual test case contains the method that this test is for, the name of the test, and
 * the message body that acts as the input to that method.
 */
export interface TestCase {
    methodName: string;
    testName: string;
    testInput: string;
}
export declare const TestCasesList: {
    $type: "devvit.plugin.devserver.TestCasesList";
    encode(message: TestCasesList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestCasesList;
    fromJSON(object: any): TestCasesList;
    toJSON(message: TestCasesList): unknown;
    fromPartial<I extends {
        actorName?: string | undefined;
        testCases?: {
            methodName?: string | undefined;
            testName?: string | undefined;
            testInput?: string | undefined;
        }[] | undefined;
    } & {
        actorName?: string | undefined;
        testCases?: ({
            methodName?: string | undefined;
            testName?: string | undefined;
            testInput?: string | undefined;
        }[] & ({
            methodName?: string | undefined;
            testName?: string | undefined;
            testInput?: string | undefined;
        } & {
            methodName?: string | undefined;
            testName?: string | undefined;
            testInput?: string | undefined;
        } & { [K in Exclude<keyof I["testCases"][number], "$type" | keyof TestCase>]: never; })[] & { [K_1 in Exclude<keyof I["testCases"], "$type" | keyof {
            methodName?: string | undefined;
            testName?: string | undefined;
            testInput?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof TestCasesList>]: never; }>(object: I): TestCasesList;
};
export declare const TestCase: {
    $type: "devvit.plugin.devserver.TestCase";
    encode(message: TestCase, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestCase;
    fromJSON(object: any): TestCase;
    toJSON(message: TestCase): unknown;
    fromPartial<I extends {
        methodName?: string | undefined;
        testName?: string | undefined;
        testInput?: string | undefined;
    } & {
        methodName?: string | undefined;
        testName?: string | undefined;
        testInput?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof TestCase>]: never; }>(object: I): TestCase;
};
//# sourceMappingURL=testcases.d.ts.map
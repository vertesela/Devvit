/**
 * #producer.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
export interface Arg {
    str: string | undefined;
    i32: number | undefined;
    i64: number | undefined;
}
export interface Args {
    elements: Arg[];
}
export declare const Arg: {
    $type: "devvit.actor.producer.Arg";
    encode(message: Arg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Arg;
    fromJSON(object: any): Arg;
    toJSON(message: Arg): unknown;
    fromPartial<I extends {
        str?: string | undefined;
        i32?: number | undefined;
        i64?: number | undefined;
    } & {
        str?: string | undefined;
        i32?: number | undefined;
        i64?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Arg>]: never; }>(object: I): Arg;
};
export declare const Args: {
    $type: "devvit.actor.producer.Args";
    encode(message: Args, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Args;
    fromJSON(object: any): Args;
    toJSON(message: Args): unknown;
    fromPartial<I extends {
        elements?: {
            str?: string | undefined;
            i32?: number | undefined;
            i64?: number | undefined;
        }[] | undefined;
    } & {
        elements?: ({
            str?: string | undefined;
            i32?: number | undefined;
            i64?: number | undefined;
        }[] & ({
            str?: string | undefined;
            i32?: number | undefined;
            i64?: number | undefined;
        } & {
            str?: string | undefined;
            i32?: number | undefined;
            i64?: number | undefined;
        } & { [K in Exclude<keyof I["elements"][number], "$type" | keyof Arg>]: never; })[] & { [K_1 in Exclude<keyof I["elements"], "$type" | keyof {
            str?: string | undefined;
            i32?: number | undefined;
            i64?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "elements">]: never; }>(object: I): Args;
};
export interface Producer {
    Produce(request: Args, metadata?: Metadata): Observable<Arg>;
}
export declare class ProducerClientImpl implements Producer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Produce(request: Args): Observable<Arg>;
}
export type ProducerDefinition = typeof ProducerDefinition;
export declare const ProducerDefinition: {
    readonly name: "Producer";
    readonly fullName: "devvit.actor.producer.Producer";
    readonly methods: {
        readonly produce: {
            readonly name: "Produce";
            readonly requestType: {
                $type: "devvit.actor.producer.Args";
                encode(message: Args, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Args;
                fromJSON(object: any): Args;
                toJSON(message: Args): unknown;
                fromPartial<I extends {
                    elements?: {
                        str?: string | undefined;
                        i32?: number | undefined;
                        i64?: number | undefined;
                    }[] | undefined;
                } & {
                    elements?: ({
                        str?: string | undefined;
                        i32?: number | undefined;
                        i64?: number | undefined;
                    }[] & ({
                        str?: string | undefined;
                        i32?: number | undefined;
                        i64?: number | undefined;
                    } & {
                        str?: string | undefined;
                        i32?: number | undefined;
                        i64?: number | undefined;
                    } & { [K in Exclude<keyof I["elements"][number], "$type" | keyof Arg>]: never; })[] & { [K_1 in Exclude<keyof I["elements"], "$type" | keyof {
                        str?: string | undefined;
                        i32?: number | undefined;
                        i64?: number | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | "elements">]: never; }>(object: I): Args;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.producer.Arg";
                encode(message: Arg, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Arg;
                fromJSON(object: any): Arg;
                toJSON(message: Arg): unknown;
                fromPartial<I_1 extends {
                    str?: string | undefined;
                    i32?: number | undefined;
                    i64?: number | undefined;
                } & {
                    str?: string | undefined;
                    i32?: number | undefined;
                    i64?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof Arg>]: never; }>(object: I_1): Arg;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=producer.d.ts.map
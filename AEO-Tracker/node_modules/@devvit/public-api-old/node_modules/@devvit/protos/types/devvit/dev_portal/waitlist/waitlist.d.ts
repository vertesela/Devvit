/**
 * #waitlist.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { WaitlistStatus } from '../admin/waitlist_admin.js';
export declare enum ProgrammingExperienceLevel {
    BEGINNER = 0,
    PROFICIENT = 1,
    EXPERT = 2,
    UNRECOGNIZED = -1
}
export declare function programmingExperienceLevelFromJSON(object: any): ProgrammingExperienceLevel;
export declare function programmingExperienceLevelToJSON(object: ProgrammingExperienceLevel): number;
export interface IsCurrentUserRegisteredResponse {
    isRegistered: boolean;
    /**
     * Original response returned here to future-proof
     * in case we want to allow the user to change their response
     */
    response?: WaitlistRegisterUserRequest;
    waitlistStatus: WaitlistStatus;
}
export interface WaitlistRegisterUserRequest {
    /** Thing ID */
    userId: string;
    /** Username */
    userName: string;
    /** "What apps, bots, or experiences would you like to build?" */
    whatToBuild: string;
    /** "What types of bots have you created?" (only available if above is true) */
    botsBuilt?: string;
    /** "What languages can you work with, and how proficient are you with them?" */
    programmingExperience: {
        [key: string]: ProgrammingExperienceLevel;
    };
    /** "What apps or customizations would you like to see in your subreddit(s)?" */
    appsWanted: string;
}
export interface WaitlistRegisterUserRequest_ProgrammingExperienceEntry {
    key: string;
    value: ProgrammingExperienceLevel;
}
export interface WaitlistRegisterUserResponse {
    success: boolean;
    /** Optional message, for errors, etc. */
    message?: string;
}
export interface GetCurrentUserStatusResponse {
    waitlistStatus: WaitlistStatus;
    acceptedTermsVersion: number;
    currentTermsVersion: number;
}
export declare const IsCurrentUserRegisteredResponse: {
    $type: "devvit.dev_portal.waitlist.IsCurrentUserRegisteredResponse";
    encode(message: IsCurrentUserRegisteredResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IsCurrentUserRegisteredResponse;
    fromJSON(object: any): IsCurrentUserRegisteredResponse;
    toJSON(message: IsCurrentUserRegisteredResponse): unknown;
    fromPartial<I extends {
        isRegistered?: boolean | undefined;
        response?: {
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            programmingExperience?: {
                [x: string]: ProgrammingExperienceLevel | undefined;
            } | undefined;
            appsWanted?: string | undefined;
        } | undefined;
        waitlistStatus?: WaitlistStatus | undefined;
    } & {
        isRegistered?: boolean | undefined;
        response?: ({
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            programmingExperience?: {
                [x: string]: ProgrammingExperienceLevel | undefined;
            } | undefined;
            appsWanted?: string | undefined;
        } & {
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            programmingExperience?: ({
                [x: string]: ProgrammingExperienceLevel | undefined;
            } & {
                [x: string]: ProgrammingExperienceLevel | undefined;
            } & { [K in Exclude<keyof I["response"]["programmingExperience"], string | number>]: never; }) | undefined;
            appsWanted?: string | undefined;
        } & { [K_1 in Exclude<keyof I["response"], "$type" | keyof WaitlistRegisterUserRequest>]: never; }) | undefined;
        waitlistStatus?: WaitlistStatus | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof IsCurrentUserRegisteredResponse>]: never; }>(object: I): IsCurrentUserRegisteredResponse;
};
export declare const WaitlistRegisterUserRequest: {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserRequest";
    encode(message: WaitlistRegisterUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WaitlistRegisterUserRequest;
    fromJSON(object: any): WaitlistRegisterUserRequest;
    toJSON(message: WaitlistRegisterUserRequest): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        userName?: string | undefined;
        whatToBuild?: string | undefined;
        botsBuilt?: string | undefined;
        programmingExperience?: {
            [x: string]: ProgrammingExperienceLevel | undefined;
        } | undefined;
        appsWanted?: string | undefined;
    } & {
        userId?: string | undefined;
        userName?: string | undefined;
        whatToBuild?: string | undefined;
        botsBuilt?: string | undefined;
        programmingExperience?: ({
            [x: string]: ProgrammingExperienceLevel | undefined;
        } & {
            [x: string]: ProgrammingExperienceLevel | undefined;
        } & { [K in Exclude<keyof I["programmingExperience"], string | number>]: never; }) | undefined;
        appsWanted?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof WaitlistRegisterUserRequest>]: never; }>(object: I): WaitlistRegisterUserRequest;
};
export declare const WaitlistRegisterUserRequest_ProgrammingExperienceEntry: {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserRequest.ProgrammingExperienceEntry";
    encode(message: WaitlistRegisterUserRequest_ProgrammingExperienceEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WaitlistRegisterUserRequest_ProgrammingExperienceEntry;
    fromJSON(object: any): WaitlistRegisterUserRequest_ProgrammingExperienceEntry;
    toJSON(message: WaitlistRegisterUserRequest_ProgrammingExperienceEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: ProgrammingExperienceLevel | undefined;
    } & {
        key?: string | undefined;
        value?: ProgrammingExperienceLevel | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof WaitlistRegisterUserRequest_ProgrammingExperienceEntry>]: never; }>(object: I): WaitlistRegisterUserRequest_ProgrammingExperienceEntry;
};
export declare const WaitlistRegisterUserResponse: {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserResponse";
    encode(message: WaitlistRegisterUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WaitlistRegisterUserResponse;
    fromJSON(object: any): WaitlistRegisterUserResponse;
    toJSON(message: WaitlistRegisterUserResponse): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        message?: string | undefined;
    } & {
        success?: boolean | undefined;
        message?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof WaitlistRegisterUserResponse>]: never; }>(object: I): WaitlistRegisterUserResponse;
};
export declare const GetCurrentUserStatusResponse: {
    $type: "devvit.dev_portal.waitlist.GetCurrentUserStatusResponse";
    encode(message: GetCurrentUserStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentUserStatusResponse;
    fromJSON(object: any): GetCurrentUserStatusResponse;
    toJSON(message: GetCurrentUserStatusResponse): unknown;
    fromPartial<I extends {
        waitlistStatus?: WaitlistStatus | undefined;
        acceptedTermsVersion?: number | undefined;
        currentTermsVersion?: number | undefined;
    } & {
        waitlistStatus?: WaitlistStatus | undefined;
        acceptedTermsVersion?: number | undefined;
        currentTermsVersion?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof GetCurrentUserStatusResponse>]: never; }>(object: I): GetCurrentUserStatusResponse;
};
export interface Waitlist {
    IsCurrentUserRegistered(request: Empty, metadata?: Metadata): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(request: WaitlistRegisterUserRequest, metadata?: Metadata): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(request: Empty, metadata?: Metadata): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(request: Empty, metadata?: Metadata): Promise<Empty>;
}
export declare class WaitlistClientImpl implements Waitlist {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    IsCurrentUserRegistered(request: Empty): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(request: WaitlistRegisterUserRequest): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(request: Empty): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(request: Empty): Promise<Empty>;
}
export type WaitlistDefinition = typeof WaitlistDefinition;
export declare const WaitlistDefinition: {
    readonly name: "Waitlist";
    readonly fullName: "devvit.dev_portal.waitlist.Waitlist";
    readonly methods: {
        readonly isCurrentUserRegistered: {
            readonly name: "IsCurrentUserRegistered";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.waitlist.IsCurrentUserRegisteredResponse";
                encode(message: IsCurrentUserRegisteredResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IsCurrentUserRegisteredResponse;
                fromJSON(object: any): IsCurrentUserRegisteredResponse;
                toJSON(message: IsCurrentUserRegisteredResponse): unknown;
                fromPartial<I_1 extends {
                    isRegistered?: boolean | undefined;
                    response?: {
                        userId?: string | undefined;
                        userName?: string | undefined;
                        whatToBuild?: string | undefined;
                        botsBuilt?: string | undefined;
                        programmingExperience?: {
                            [x: string]: ProgrammingExperienceLevel | undefined;
                        } | undefined;
                        appsWanted?: string | undefined;
                    } | undefined;
                    waitlistStatus?: WaitlistStatus | undefined;
                } & {
                    isRegistered?: boolean | undefined;
                    response?: ({
                        userId?: string | undefined;
                        userName?: string | undefined;
                        whatToBuild?: string | undefined;
                        botsBuilt?: string | undefined;
                        programmingExperience?: {
                            [x: string]: ProgrammingExperienceLevel | undefined;
                        } | undefined;
                        appsWanted?: string | undefined;
                    } & {
                        userId?: string | undefined;
                        userName?: string | undefined;
                        whatToBuild?: string | undefined;
                        botsBuilt?: string | undefined;
                        programmingExperience?: ({
                            [x: string]: ProgrammingExperienceLevel | undefined;
                        } & {
                            [x: string]: ProgrammingExperienceLevel | undefined;
                        } & { [K in Exclude<keyof I["response"]["programmingExperience"], string | number>]: never; }) | undefined;
                        appsWanted?: string | undefined;
                    } & { [K_1 in Exclude<keyof I["response"], "$type" | keyof WaitlistRegisterUserRequest>]: never; }) | undefined;
                    waitlistStatus?: WaitlistStatus | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | keyof IsCurrentUserRegisteredResponse>]: never; }>(object: I_1): IsCurrentUserRegisteredResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly registerUser: {
            readonly name: "RegisterUser";
            readonly requestType: {
                $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserRequest";
                encode(message: WaitlistRegisterUserRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WaitlistRegisterUserRequest;
                fromJSON(object: any): WaitlistRegisterUserRequest;
                toJSON(message: WaitlistRegisterUserRequest): unknown;
                fromPartial<I_2 extends {
                    userId?: string | undefined;
                    userName?: string | undefined;
                    whatToBuild?: string | undefined;
                    botsBuilt?: string | undefined;
                    programmingExperience?: {
                        [x: string]: ProgrammingExperienceLevel | undefined;
                    } | undefined;
                    appsWanted?: string | undefined;
                } & {
                    userId?: string | undefined;
                    userName?: string | undefined;
                    whatToBuild?: string | undefined;
                    botsBuilt?: string | undefined;
                    programmingExperience?: ({
                        [x: string]: ProgrammingExperienceLevel | undefined;
                    } & {
                        [x: string]: ProgrammingExperienceLevel | undefined;
                    } & { [K in Exclude<keyof I["programmingExperience"], string | number>]: never; }) | undefined;
                    appsWanted?: string | undefined;
                } & { [K_1 in Exclude<keyof I, "$type" | keyof WaitlistRegisterUserRequest>]: never; }>(object: I_2): WaitlistRegisterUserRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserResponse";
                encode(message: WaitlistRegisterUserResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): WaitlistRegisterUserResponse;
                fromJSON(object: any): WaitlistRegisterUserResponse;
                toJSON(message: WaitlistRegisterUserResponse): unknown;
                fromPartial<I_3 extends {
                    success?: boolean | undefined;
                    message?: string | undefined;
                } & {
                    success?: boolean | undefined;
                    message?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof WaitlistRegisterUserResponse>]: never; }>(object: I_3): WaitlistRegisterUserResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getCurrentUserStatus: {
            readonly name: "GetCurrentUserStatus";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.waitlist.GetCurrentUserStatusResponse";
                encode(message: GetCurrentUserStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentUserStatusResponse;
                fromJSON(object: any): GetCurrentUserStatusResponse;
                toJSON(message: GetCurrentUserStatusResponse): unknown;
                fromPartial<I_4 extends {
                    waitlistStatus?: WaitlistStatus | undefined;
                    acceptedTermsVersion?: number | undefined;
                    currentTermsVersion?: number | undefined;
                } & {
                    waitlistStatus?: WaitlistStatus | undefined;
                    acceptedTermsVersion?: number | undefined;
                    currentTermsVersion?: number | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof GetCurrentUserStatusResponse>]: never; }>(object: I_4): GetCurrentUserStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly acceptTermsAndConditions: {
            readonly name: "AcceptTermsAndConditions";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=waitlist.d.ts.map
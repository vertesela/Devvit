import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { UpdateAssetStatusRequest, UpdateAssetStatusResponse } from './media.js';
export var DevPortalMediaMethod;
(function (DevPortalMediaMethod) {
    DevPortalMediaMethod["UpdateAssetStatus"] = "UpdateAssetStatus";
})(DevPortalMediaMethod || (DevPortalMediaMethod = {}));
export const DevPortalMediaMethodList = [
    DevPortalMediaMethod.UpdateAssetStatus,
];
export function createDevPortalMediaServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.dev_portal.internal.media',
        serviceName: 'DevPortalMedia',
        methodList: DevPortalMediaMethodList,
        matchRoute: matchDevPortalMediaRoute,
    });
}
function matchDevPortalMediaRoute(method, events) {
    switch (method) {
        case 'UpdateAssetStatus':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateAssetStatus' };
                await events.onMatch(ctx);
                return handleDevPortalMediaUpdateAssetStatusRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleDevPortalMediaUpdateAssetStatusRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleDevPortalMediaUpdateAssetStatusJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleDevPortalMediaUpdateAssetStatusProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleDevPortalMediaUpdateAssetStatusJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateAssetStatusRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateAssetStatus(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateAssetStatus(ctx, request);
    }
    return JSON.stringify(UpdateAssetStatusResponse.toJSON(response));
}
async function handleDevPortalMediaUpdateAssetStatusProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateAssetStatusRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateAssetStatus(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateAssetStatus(ctx, request);
    }
    return Buffer.from(UpdateAssetStatusResponse.encode(response).finish());
}

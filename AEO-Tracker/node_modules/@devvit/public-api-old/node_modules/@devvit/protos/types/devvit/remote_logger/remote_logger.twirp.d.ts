/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { RemoteLogMessage, RemoteLogPutResponse, RemoteLogQuery } from './remote_logger.js';
export interface RemoteLogPublisherTwirp<T extends TwirpContext = TwirpContext> {
    Put(ctx: T, request: RemoteLogMessage): Promise<RemoteLogPutResponse>;
}
export declare enum RemoteLogPublisherMethod {
    Put = "Put"
}
export declare const RemoteLogPublisherMethodList: RemoteLogPublisherMethod[];
export declare function createRemoteLogPublisherServer<T extends TwirpContext = TwirpContext>(service: RemoteLogPublisherTwirp<T>): TwirpServer<RemoteLogPublisherTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
export interface RemoteLogConsumerTwirp<T extends TwirpContext = TwirpContext> {
    Tail(ctx: T, request: RemoteLogQuery): Promise<RemoteLogMessage>;
}
export declare enum RemoteLogConsumerMethod {
    Tail = "Tail"
}
export declare const RemoteLogConsumerMethodList: RemoteLogConsumerMethod[];
export declare function createRemoteLogConsumerServer<T extends TwirpContext = TwirpContext>(service: RemoteLogConsumerTwirp<T>): TwirpServer<RemoteLogConsumerTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
//# sourceMappingURL=remote_logger.twirp.d.ts.map
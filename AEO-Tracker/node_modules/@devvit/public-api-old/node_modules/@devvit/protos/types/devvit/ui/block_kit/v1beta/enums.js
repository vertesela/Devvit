/**
 * #enums.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
export var BlockType;
(function (BlockType) {
    BlockType[BlockType["BLOCK_ROOT"] = 0] = "BLOCK_ROOT";
    BlockType[BlockType["BLOCK_STACK"] = 1] = "BLOCK_STACK";
    BlockType[BlockType["BLOCK_TEXT"] = 2] = "BLOCK_TEXT";
    BlockType[BlockType["BLOCK_BUTTON"] = 3] = "BLOCK_BUTTON";
    BlockType[BlockType["BLOCK_IMAGE"] = 4] = "BLOCK_IMAGE";
    BlockType[BlockType["BLOCK_SPACER"] = 5] = "BLOCK_SPACER";
    BlockType[BlockType["BLOCK_ICON"] = 6] = "BLOCK_ICON";
    BlockType[BlockType["BLOCK_AVATAR"] = 7] = "BLOCK_AVATAR";
    BlockType[BlockType["BLOCK_FULLSNOO"] = 8] = "BLOCK_FULLSNOO";
    BlockType[BlockType["BLOCK_ANIMATION"] = 9] = "BLOCK_ANIMATION";
    /** BLOCK_WEBVIEW - elements 100+ are privileged */
    BlockType[BlockType["BLOCK_WEBVIEW"] = 100] = "BLOCK_WEBVIEW";
    BlockType[BlockType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockType || (BlockType = {}));
export function blockTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BLOCK_ROOT":
            return BlockType.BLOCK_ROOT;
        case 1:
        case "BLOCK_STACK":
            return BlockType.BLOCK_STACK;
        case 2:
        case "BLOCK_TEXT":
            return BlockType.BLOCK_TEXT;
        case 3:
        case "BLOCK_BUTTON":
            return BlockType.BLOCK_BUTTON;
        case 4:
        case "BLOCK_IMAGE":
            return BlockType.BLOCK_IMAGE;
        case 5:
        case "BLOCK_SPACER":
            return BlockType.BLOCK_SPACER;
        case 6:
        case "BLOCK_ICON":
            return BlockType.BLOCK_ICON;
        case 7:
        case "BLOCK_AVATAR":
            return BlockType.BLOCK_AVATAR;
        case 8:
        case "BLOCK_FULLSNOO":
            return BlockType.BLOCK_FULLSNOO;
        case 9:
        case "BLOCK_ANIMATION":
            return BlockType.BLOCK_ANIMATION;
        case 100:
        case "BLOCK_WEBVIEW":
            return BlockType.BLOCK_WEBVIEW;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockType.UNRECOGNIZED;
    }
}
export function blockTypeToJSON(object) {
    switch (object) {
        case BlockType.BLOCK_ROOT:
            return 0;
        case BlockType.BLOCK_STACK:
            return 1;
        case BlockType.BLOCK_TEXT:
            return 2;
        case BlockType.BLOCK_BUTTON:
            return 3;
        case BlockType.BLOCK_IMAGE:
            return 4;
        case BlockType.BLOCK_SPACER:
            return 5;
        case BlockType.BLOCK_ICON:
            return 6;
        case BlockType.BLOCK_AVATAR:
            return 7;
        case BlockType.BLOCK_FULLSNOO:
            return 8;
        case BlockType.BLOCK_ANIMATION:
            return 9;
        case BlockType.BLOCK_WEBVIEW:
            return 100;
        case BlockType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockActionType;
(function (BlockActionType) {
    BlockActionType[BlockActionType["ACTION_CLICK"] = 0] = "ACTION_CLICK";
    BlockActionType[BlockActionType["ACTION_WEBVIEW"] = 100] = "ACTION_WEBVIEW";
    BlockActionType[BlockActionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockActionType || (BlockActionType = {}));
export function blockActionTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTION_CLICK":
            return BlockActionType.ACTION_CLICK;
        case 100:
        case "ACTION_WEBVIEW":
            return BlockActionType.ACTION_WEBVIEW;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockActionType.UNRECOGNIZED;
    }
}
export function blockActionTypeToJSON(object) {
    switch (object) {
        case BlockActionType.ACTION_CLICK:
            return 0;
        case BlockActionType.ACTION_WEBVIEW:
            return 100;
        case BlockActionType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockRenderEventType;
(function (BlockRenderEventType) {
    /** RENDER_INITIAL - First render of the UI on the user's device */
    BlockRenderEventType[BlockRenderEventType["RENDER_INITIAL"] = 0] = "RENDER_INITIAL";
    /** RENDER_USER_ACTION - Render triggered by a user action */
    BlockRenderEventType[BlockRenderEventType["RENDER_USER_ACTION"] = 1] = "RENDER_USER_ACTION";
    /** RENDER_EFFECT_EVENT - Render triggered as the result of an effect */
    BlockRenderEventType[BlockRenderEventType["RENDER_EFFECT_EVENT"] = 2] = "RENDER_EFFECT_EVENT";
    /** RENDER_CACHED - Render a version to be cached and used before the app can respond to RENDER_INITIAL */
    BlockRenderEventType[BlockRenderEventType["RENDER_CACHED"] = 3] = "RENDER_CACHED";
    BlockRenderEventType[BlockRenderEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockRenderEventType || (BlockRenderEventType = {}));
export function blockRenderEventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "RENDER_INITIAL":
            return BlockRenderEventType.RENDER_INITIAL;
        case 1:
        case "RENDER_USER_ACTION":
            return BlockRenderEventType.RENDER_USER_ACTION;
        case 2:
        case "RENDER_EFFECT_EVENT":
            return BlockRenderEventType.RENDER_EFFECT_EVENT;
        case 3:
        case "RENDER_CACHED":
            return BlockRenderEventType.RENDER_CACHED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockRenderEventType.UNRECOGNIZED;
    }
}
export function blockRenderEventTypeToJSON(object) {
    switch (object) {
        case BlockRenderEventType.RENDER_INITIAL:
            return 0;
        case BlockRenderEventType.RENDER_USER_ACTION:
            return 1;
        case BlockRenderEventType.RENDER_EFFECT_EVENT:
            return 2;
        case BlockRenderEventType.RENDER_CACHED:
            return 3;
        case BlockRenderEventType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockStackDirection;
(function (BlockStackDirection) {
    BlockStackDirection[BlockStackDirection["STACK_HORIZONTAL"] = 0] = "STACK_HORIZONTAL";
    BlockStackDirection[BlockStackDirection["STACK_VERTICAL"] = 1] = "STACK_VERTICAL";
    BlockStackDirection[BlockStackDirection["STACK_DEPTH"] = 2] = "STACK_DEPTH";
    BlockStackDirection[BlockStackDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockStackDirection || (BlockStackDirection = {}));
export function blockStackDirectionFromJSON(object) {
    switch (object) {
        case 0:
        case "STACK_HORIZONTAL":
            return BlockStackDirection.STACK_HORIZONTAL;
        case 1:
        case "STACK_VERTICAL":
            return BlockStackDirection.STACK_VERTICAL;
        case 2:
        case "STACK_DEPTH":
            return BlockStackDirection.STACK_DEPTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockStackDirection.UNRECOGNIZED;
    }
}
export function blockStackDirectionToJSON(object) {
    switch (object) {
        case BlockStackDirection.STACK_HORIZONTAL:
            return 0;
        case BlockStackDirection.STACK_VERTICAL:
            return 1;
        case BlockStackDirection.STACK_DEPTH:
            return 2;
        case BlockStackDirection.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockBorderWidth;
(function (BlockBorderWidth) {
    BlockBorderWidth[BlockBorderWidth["BORDER_WIDTH_NONE"] = 0] = "BORDER_WIDTH_NONE";
    BlockBorderWidth[BlockBorderWidth["BORDER_WIDTH_THIN"] = 1] = "BORDER_WIDTH_THIN";
    BlockBorderWidth[BlockBorderWidth["BORDER_WIDTH_THICK"] = 2] = "BORDER_WIDTH_THICK";
    BlockBorderWidth[BlockBorderWidth["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockBorderWidth || (BlockBorderWidth = {}));
export function blockBorderWidthFromJSON(object) {
    switch (object) {
        case 0:
        case "BORDER_WIDTH_NONE":
            return BlockBorderWidth.BORDER_WIDTH_NONE;
        case 1:
        case "BORDER_WIDTH_THIN":
            return BlockBorderWidth.BORDER_WIDTH_THIN;
        case 2:
        case "BORDER_WIDTH_THICK":
            return BlockBorderWidth.BORDER_WIDTH_THICK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockBorderWidth.UNRECOGNIZED;
    }
}
export function blockBorderWidthToJSON(object) {
    switch (object) {
        case BlockBorderWidth.BORDER_WIDTH_NONE:
            return 0;
        case BlockBorderWidth.BORDER_WIDTH_THIN:
            return 1;
        case BlockBorderWidth.BORDER_WIDTH_THICK:
            return 2;
        case BlockBorderWidth.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockVerticalAlignment;
(function (BlockVerticalAlignment) {
    BlockVerticalAlignment[BlockVerticalAlignment["ALIGN_TOP"] = 0] = "ALIGN_TOP";
    BlockVerticalAlignment[BlockVerticalAlignment["ALIGN_MIDDLE"] = 1] = "ALIGN_MIDDLE";
    BlockVerticalAlignment[BlockVerticalAlignment["ALIGN_BOTTOM"] = 2] = "ALIGN_BOTTOM";
    BlockVerticalAlignment[BlockVerticalAlignment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockVerticalAlignment || (BlockVerticalAlignment = {}));
export function blockVerticalAlignmentFromJSON(object) {
    switch (object) {
        case 0:
        case "ALIGN_TOP":
            return BlockVerticalAlignment.ALIGN_TOP;
        case 1:
        case "ALIGN_MIDDLE":
            return BlockVerticalAlignment.ALIGN_MIDDLE;
        case 2:
        case "ALIGN_BOTTOM":
            return BlockVerticalAlignment.ALIGN_BOTTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockVerticalAlignment.UNRECOGNIZED;
    }
}
export function blockVerticalAlignmentToJSON(object) {
    switch (object) {
        case BlockVerticalAlignment.ALIGN_TOP:
            return 0;
        case BlockVerticalAlignment.ALIGN_MIDDLE:
            return 1;
        case BlockVerticalAlignment.ALIGN_BOTTOM:
            return 2;
        case BlockVerticalAlignment.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockHorizontalAlignment;
(function (BlockHorizontalAlignment) {
    BlockHorizontalAlignment[BlockHorizontalAlignment["ALIGN_START"] = 0] = "ALIGN_START";
    BlockHorizontalAlignment[BlockHorizontalAlignment["ALIGN_CENTER"] = 1] = "ALIGN_CENTER";
    BlockHorizontalAlignment[BlockHorizontalAlignment["ALIGN_END"] = 2] = "ALIGN_END";
    BlockHorizontalAlignment[BlockHorizontalAlignment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockHorizontalAlignment || (BlockHorizontalAlignment = {}));
export function blockHorizontalAlignmentFromJSON(object) {
    switch (object) {
        case 0:
        case "ALIGN_START":
            return BlockHorizontalAlignment.ALIGN_START;
        case 1:
        case "ALIGN_CENTER":
            return BlockHorizontalAlignment.ALIGN_CENTER;
        case 2:
        case "ALIGN_END":
            return BlockHorizontalAlignment.ALIGN_END;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockHorizontalAlignment.UNRECOGNIZED;
    }
}
export function blockHorizontalAlignmentToJSON(object) {
    switch (object) {
        case BlockHorizontalAlignment.ALIGN_START:
            return 0;
        case BlockHorizontalAlignment.ALIGN_CENTER:
            return 1;
        case BlockHorizontalAlignment.ALIGN_END:
            return 2;
        case BlockHorizontalAlignment.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockPadding;
(function (BlockPadding) {
    BlockPadding[BlockPadding["PADDING_NONE"] = 0] = "PADDING_NONE";
    BlockPadding[BlockPadding["PADDING_XSMALL"] = 1] = "PADDING_XSMALL";
    BlockPadding[BlockPadding["PADDING_SMALL"] = 2] = "PADDING_SMALL";
    BlockPadding[BlockPadding["PADDING_MEDIUM"] = 3] = "PADDING_MEDIUM";
    BlockPadding[BlockPadding["PADDING_LARGE"] = 4] = "PADDING_LARGE";
    BlockPadding[BlockPadding["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockPadding || (BlockPadding = {}));
export function blockPaddingFromJSON(object) {
    switch (object) {
        case 0:
        case "PADDING_NONE":
            return BlockPadding.PADDING_NONE;
        case 1:
        case "PADDING_XSMALL":
            return BlockPadding.PADDING_XSMALL;
        case 2:
        case "PADDING_SMALL":
            return BlockPadding.PADDING_SMALL;
        case 3:
        case "PADDING_MEDIUM":
            return BlockPadding.PADDING_MEDIUM;
        case 4:
        case "PADDING_LARGE":
            return BlockPadding.PADDING_LARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockPadding.UNRECOGNIZED;
    }
}
export function blockPaddingToJSON(object) {
    switch (object) {
        case BlockPadding.PADDING_NONE:
            return 0;
        case BlockPadding.PADDING_XSMALL:
            return 1;
        case BlockPadding.PADDING_SMALL:
            return 2;
        case BlockPadding.PADDING_MEDIUM:
            return 3;
        case BlockPadding.PADDING_LARGE:
            return 4;
        case BlockPadding.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockGap;
(function (BlockGap) {
    BlockGap[BlockGap["GAP_NONE"] = 0] = "GAP_NONE";
    BlockGap[BlockGap["GAP_SMALL"] = 1] = "GAP_SMALL";
    BlockGap[BlockGap["GAP_MEDIUM"] = 2] = "GAP_MEDIUM";
    BlockGap[BlockGap["GAP_LARGE"] = 3] = "GAP_LARGE";
    BlockGap[BlockGap["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockGap || (BlockGap = {}));
export function blockGapFromJSON(object) {
    switch (object) {
        case 0:
        case "GAP_NONE":
            return BlockGap.GAP_NONE;
        case 1:
        case "GAP_SMALL":
            return BlockGap.GAP_SMALL;
        case 2:
        case "GAP_MEDIUM":
            return BlockGap.GAP_MEDIUM;
        case 3:
        case "GAP_LARGE":
            return BlockGap.GAP_LARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockGap.UNRECOGNIZED;
    }
}
export function blockGapToJSON(object) {
    switch (object) {
        case BlockGap.GAP_NONE:
            return 0;
        case BlockGap.GAP_SMALL:
            return 1;
        case BlockGap.GAP_MEDIUM:
            return 2;
        case BlockGap.GAP_LARGE:
            return 3;
        case BlockGap.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockRadius;
(function (BlockRadius) {
    BlockRadius[BlockRadius["RADIUS_NONE"] = 0] = "RADIUS_NONE";
    BlockRadius[BlockRadius["RADIUS_SMALL"] = 1] = "RADIUS_SMALL";
    BlockRadius[BlockRadius["RADIUS_MEDIUM"] = 2] = "RADIUS_MEDIUM";
    BlockRadius[BlockRadius["RADIUS_LARGE"] = 3] = "RADIUS_LARGE";
    BlockRadius[BlockRadius["RADIUS_FULL"] = 100] = "RADIUS_FULL";
    BlockRadius[BlockRadius["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockRadius || (BlockRadius = {}));
export function blockRadiusFromJSON(object) {
    switch (object) {
        case 0:
        case "RADIUS_NONE":
            return BlockRadius.RADIUS_NONE;
        case 1:
        case "RADIUS_SMALL":
            return BlockRadius.RADIUS_SMALL;
        case 2:
        case "RADIUS_MEDIUM":
            return BlockRadius.RADIUS_MEDIUM;
        case 3:
        case "RADIUS_LARGE":
            return BlockRadius.RADIUS_LARGE;
        case 100:
        case "RADIUS_FULL":
            return BlockRadius.RADIUS_FULL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockRadius.UNRECOGNIZED;
    }
}
export function blockRadiusToJSON(object) {
    switch (object) {
        case BlockRadius.RADIUS_NONE:
            return 0;
        case BlockRadius.RADIUS_SMALL:
            return 1;
        case BlockRadius.RADIUS_MEDIUM:
            return 2;
        case BlockRadius.RADIUS_LARGE:
            return 3;
        case BlockRadius.RADIUS_FULL:
            return 100;
        case BlockRadius.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockTextSize;
(function (BlockTextSize) {
    BlockTextSize[BlockTextSize["TEXT_SIZE_MEDIUM"] = 0] = "TEXT_SIZE_MEDIUM";
    BlockTextSize[BlockTextSize["TEXT_SIZE_XSMALL"] = 1] = "TEXT_SIZE_XSMALL";
    BlockTextSize[BlockTextSize["TEXT_SIZE_SMALL"] = 2] = "TEXT_SIZE_SMALL";
    BlockTextSize[BlockTextSize["TEXT_SIZE_LARGE"] = 3] = "TEXT_SIZE_LARGE";
    BlockTextSize[BlockTextSize["TEXT_SIZE_XLARGE"] = 4] = "TEXT_SIZE_XLARGE";
    BlockTextSize[BlockTextSize["TEXT_SIZE_XXLARGE"] = 5] = "TEXT_SIZE_XXLARGE";
    BlockTextSize[BlockTextSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockTextSize || (BlockTextSize = {}));
export function blockTextSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "TEXT_SIZE_MEDIUM":
            return BlockTextSize.TEXT_SIZE_MEDIUM;
        case 1:
        case "TEXT_SIZE_XSMALL":
            return BlockTextSize.TEXT_SIZE_XSMALL;
        case 2:
        case "TEXT_SIZE_SMALL":
            return BlockTextSize.TEXT_SIZE_SMALL;
        case 3:
        case "TEXT_SIZE_LARGE":
            return BlockTextSize.TEXT_SIZE_LARGE;
        case 4:
        case "TEXT_SIZE_XLARGE":
            return BlockTextSize.TEXT_SIZE_XLARGE;
        case 5:
        case "TEXT_SIZE_XXLARGE":
            return BlockTextSize.TEXT_SIZE_XXLARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockTextSize.UNRECOGNIZED;
    }
}
export function blockTextSizeToJSON(object) {
    switch (object) {
        case BlockTextSize.TEXT_SIZE_MEDIUM:
            return 0;
        case BlockTextSize.TEXT_SIZE_XSMALL:
            return 1;
        case BlockTextSize.TEXT_SIZE_SMALL:
            return 2;
        case BlockTextSize.TEXT_SIZE_LARGE:
            return 3;
        case BlockTextSize.TEXT_SIZE_XLARGE:
            return 4;
        case BlockTextSize.TEXT_SIZE_XXLARGE:
            return 5;
        case BlockTextSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockTextWeight;
(function (BlockTextWeight) {
    BlockTextWeight[BlockTextWeight["TEXT_WEIGHT_REGULAR"] = 0] = "TEXT_WEIGHT_REGULAR";
    BlockTextWeight[BlockTextWeight["TEXT_WEIGHT_BOLD"] = 1] = "TEXT_WEIGHT_BOLD";
    BlockTextWeight[BlockTextWeight["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockTextWeight || (BlockTextWeight = {}));
export function blockTextWeightFromJSON(object) {
    switch (object) {
        case 0:
        case "TEXT_WEIGHT_REGULAR":
            return BlockTextWeight.TEXT_WEIGHT_REGULAR;
        case 1:
        case "TEXT_WEIGHT_BOLD":
            return BlockTextWeight.TEXT_WEIGHT_BOLD;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockTextWeight.UNRECOGNIZED;
    }
}
export function blockTextWeightToJSON(object) {
    switch (object) {
        case BlockTextWeight.TEXT_WEIGHT_REGULAR:
            return 0;
        case BlockTextWeight.TEXT_WEIGHT_BOLD:
            return 1;
        case BlockTextWeight.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockTextOutline;
(function (BlockTextOutline) {
    BlockTextOutline[BlockTextOutline["TEXT_OUTLINE_NONE"] = 0] = "TEXT_OUTLINE_NONE";
    BlockTextOutline[BlockTextOutline["TEXT_OUTLINE_THIN"] = 1] = "TEXT_OUTLINE_THIN";
    BlockTextOutline[BlockTextOutline["TEXT_OUTLINE_THICK"] = 2] = "TEXT_OUTLINE_THICK";
    BlockTextOutline[BlockTextOutline["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockTextOutline || (BlockTextOutline = {}));
export function blockTextOutlineFromJSON(object) {
    switch (object) {
        case 0:
        case "TEXT_OUTLINE_NONE":
            return BlockTextOutline.TEXT_OUTLINE_NONE;
        case 1:
        case "TEXT_OUTLINE_THIN":
            return BlockTextOutline.TEXT_OUTLINE_THIN;
        case 2:
        case "TEXT_OUTLINE_THICK":
            return BlockTextOutline.TEXT_OUTLINE_THICK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockTextOutline.UNRECOGNIZED;
    }
}
export function blockTextOutlineToJSON(object) {
    switch (object) {
        case BlockTextOutline.TEXT_OUTLINE_NONE:
            return 0;
        case BlockTextOutline.TEXT_OUTLINE_THIN:
            return 1;
        case BlockTextOutline.TEXT_OUTLINE_THICK:
            return 2;
        case BlockTextOutline.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockTextStyle;
(function (BlockTextStyle) {
    BlockTextStyle[BlockTextStyle["TEXT_STYLE_BODY"] = 0] = "TEXT_STYLE_BODY";
    BlockTextStyle[BlockTextStyle["TEXT_STYLE_METADATA"] = 1] = "TEXT_STYLE_METADATA";
    BlockTextStyle[BlockTextStyle["TEXT_STYLE_HEADING"] = 2] = "TEXT_STYLE_HEADING";
    BlockTextStyle[BlockTextStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockTextStyle || (BlockTextStyle = {}));
export function blockTextStyleFromJSON(object) {
    switch (object) {
        case 0:
        case "TEXT_STYLE_BODY":
            return BlockTextStyle.TEXT_STYLE_BODY;
        case 1:
        case "TEXT_STYLE_METADATA":
            return BlockTextStyle.TEXT_STYLE_METADATA;
        case 2:
        case "TEXT_STYLE_HEADING":
            return BlockTextStyle.TEXT_STYLE_HEADING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockTextStyle.UNRECOGNIZED;
    }
}
export function blockTextStyleToJSON(object) {
    switch (object) {
        case BlockTextStyle.TEXT_STYLE_BODY:
            return 0;
        case BlockTextStyle.TEXT_STYLE_METADATA:
            return 1;
        case BlockTextStyle.TEXT_STYLE_HEADING:
            return 2;
        case BlockTextStyle.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockButtonSize;
(function (BlockButtonSize) {
    BlockButtonSize[BlockButtonSize["BUTTON_SIZE_MEDIUM"] = 0] = "BUTTON_SIZE_MEDIUM";
    BlockButtonSize[BlockButtonSize["BUTTON_SIZE_SMALL"] = 1] = "BUTTON_SIZE_SMALL";
    BlockButtonSize[BlockButtonSize["BUTTON_SIZE_LARGE"] = 2] = "BUTTON_SIZE_LARGE";
    BlockButtonSize[BlockButtonSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockButtonSize || (BlockButtonSize = {}));
export function blockButtonSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "BUTTON_SIZE_MEDIUM":
            return BlockButtonSize.BUTTON_SIZE_MEDIUM;
        case 1:
        case "BUTTON_SIZE_SMALL":
            return BlockButtonSize.BUTTON_SIZE_SMALL;
        case 2:
        case "BUTTON_SIZE_LARGE":
            return BlockButtonSize.BUTTON_SIZE_LARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockButtonSize.UNRECOGNIZED;
    }
}
export function blockButtonSizeToJSON(object) {
    switch (object) {
        case BlockButtonSize.BUTTON_SIZE_MEDIUM:
            return 0;
        case BlockButtonSize.BUTTON_SIZE_SMALL:
            return 1;
        case BlockButtonSize.BUTTON_SIZE_LARGE:
            return 2;
        case BlockButtonSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockButtonAppearance;
(function (BlockButtonAppearance) {
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_SECONDARY"] = 0] = "BUTTON_APPEARANCE_SECONDARY";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_PRIMARY"] = 1] = "BUTTON_APPEARANCE_PRIMARY";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_PLAIN"] = 2] = "BUTTON_APPEARANCE_PLAIN";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_BORDERED"] = 3] = "BUTTON_APPEARANCE_BORDERED";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_MEDIA"] = 4] = "BUTTON_APPEARANCE_MEDIA";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_DESTRUCTIVE"] = 5] = "BUTTON_APPEARANCE_DESTRUCTIVE";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_CAUTION"] = 6] = "BUTTON_APPEARANCE_CAUTION";
    BlockButtonAppearance[BlockButtonAppearance["BUTTON_APPEARANCE_SUCCESS"] = 7] = "BUTTON_APPEARANCE_SUCCESS";
    BlockButtonAppearance[BlockButtonAppearance["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockButtonAppearance || (BlockButtonAppearance = {}));
export function blockButtonAppearanceFromJSON(object) {
    switch (object) {
        case 0:
        case "BUTTON_APPEARANCE_SECONDARY":
            return BlockButtonAppearance.BUTTON_APPEARANCE_SECONDARY;
        case 1:
        case "BUTTON_APPEARANCE_PRIMARY":
            return BlockButtonAppearance.BUTTON_APPEARANCE_PRIMARY;
        case 2:
        case "BUTTON_APPEARANCE_PLAIN":
            return BlockButtonAppearance.BUTTON_APPEARANCE_PLAIN;
        case 3:
        case "BUTTON_APPEARANCE_BORDERED":
            return BlockButtonAppearance.BUTTON_APPEARANCE_BORDERED;
        case 4:
        case "BUTTON_APPEARANCE_MEDIA":
            return BlockButtonAppearance.BUTTON_APPEARANCE_MEDIA;
        case 5:
        case "BUTTON_APPEARANCE_DESTRUCTIVE":
            return BlockButtonAppearance.BUTTON_APPEARANCE_DESTRUCTIVE;
        case 6:
        case "BUTTON_APPEARANCE_CAUTION":
            return BlockButtonAppearance.BUTTON_APPEARANCE_CAUTION;
        case 7:
        case "BUTTON_APPEARANCE_SUCCESS":
            return BlockButtonAppearance.BUTTON_APPEARANCE_SUCCESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockButtonAppearance.UNRECOGNIZED;
    }
}
export function blockButtonAppearanceToJSON(object) {
    switch (object) {
        case BlockButtonAppearance.BUTTON_APPEARANCE_SECONDARY:
            return 0;
        case BlockButtonAppearance.BUTTON_APPEARANCE_PRIMARY:
            return 1;
        case BlockButtonAppearance.BUTTON_APPEARANCE_PLAIN:
            return 2;
        case BlockButtonAppearance.BUTTON_APPEARANCE_BORDERED:
            return 3;
        case BlockButtonAppearance.BUTTON_APPEARANCE_MEDIA:
            return 4;
        case BlockButtonAppearance.BUTTON_APPEARANCE_DESTRUCTIVE:
            return 5;
        case BlockButtonAppearance.BUTTON_APPEARANCE_CAUTION:
            return 6;
        case BlockButtonAppearance.BUTTON_APPEARANCE_SUCCESS:
            return 7;
        case BlockButtonAppearance.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockImageResizeMode;
(function (BlockImageResizeMode) {
    BlockImageResizeMode[BlockImageResizeMode["IMAGE_RESIZE_FIT"] = 0] = "IMAGE_RESIZE_FIT";
    BlockImageResizeMode[BlockImageResizeMode["IMAGE_RESIZE_FILL"] = 1] = "IMAGE_RESIZE_FILL";
    BlockImageResizeMode[BlockImageResizeMode["IMAGE_RESIZE_COVER"] = 2] = "IMAGE_RESIZE_COVER";
    BlockImageResizeMode[BlockImageResizeMode["IMAGE_RESIZE_NONE"] = 3] = "IMAGE_RESIZE_NONE";
    BlockImageResizeMode[BlockImageResizeMode["IMAGE_RESIZE_SCALE_DOWN"] = 4] = "IMAGE_RESIZE_SCALE_DOWN";
    BlockImageResizeMode[BlockImageResizeMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockImageResizeMode || (BlockImageResizeMode = {}));
export function blockImageResizeModeFromJSON(object) {
    switch (object) {
        case 0:
        case "IMAGE_RESIZE_FIT":
            return BlockImageResizeMode.IMAGE_RESIZE_FIT;
        case 1:
        case "IMAGE_RESIZE_FILL":
            return BlockImageResizeMode.IMAGE_RESIZE_FILL;
        case 2:
        case "IMAGE_RESIZE_COVER":
            return BlockImageResizeMode.IMAGE_RESIZE_COVER;
        case 3:
        case "IMAGE_RESIZE_NONE":
            return BlockImageResizeMode.IMAGE_RESIZE_NONE;
        case 4:
        case "IMAGE_RESIZE_SCALE_DOWN":
            return BlockImageResizeMode.IMAGE_RESIZE_SCALE_DOWN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockImageResizeMode.UNRECOGNIZED;
    }
}
export function blockImageResizeModeToJSON(object) {
    switch (object) {
        case BlockImageResizeMode.IMAGE_RESIZE_FIT:
            return 0;
        case BlockImageResizeMode.IMAGE_RESIZE_FILL:
            return 1;
        case BlockImageResizeMode.IMAGE_RESIZE_COVER:
            return 2;
        case BlockImageResizeMode.IMAGE_RESIZE_NONE:
            return 3;
        case BlockImageResizeMode.IMAGE_RESIZE_SCALE_DOWN:
            return 4;
        case BlockImageResizeMode.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockSpacerSize;
(function (BlockSpacerSize) {
    BlockSpacerSize[BlockSpacerSize["SPACER_SMALL"] = 0] = "SPACER_SMALL";
    BlockSpacerSize[BlockSpacerSize["SPACER_XSMALL"] = 1] = "SPACER_XSMALL";
    BlockSpacerSize[BlockSpacerSize["SPACER_MEDIUM"] = 2] = "SPACER_MEDIUM";
    BlockSpacerSize[BlockSpacerSize["SPACER_LARGE"] = 3] = "SPACER_LARGE";
    BlockSpacerSize[BlockSpacerSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockSpacerSize || (BlockSpacerSize = {}));
export function blockSpacerSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "SPACER_SMALL":
            return BlockSpacerSize.SPACER_SMALL;
        case 1:
        case "SPACER_XSMALL":
            return BlockSpacerSize.SPACER_XSMALL;
        case 2:
        case "SPACER_MEDIUM":
            return BlockSpacerSize.SPACER_MEDIUM;
        case 3:
        case "SPACER_LARGE":
            return BlockSpacerSize.SPACER_LARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockSpacerSize.UNRECOGNIZED;
    }
}
export function blockSpacerSizeToJSON(object) {
    switch (object) {
        case BlockSpacerSize.SPACER_SMALL:
            return 0;
        case BlockSpacerSize.SPACER_XSMALL:
            return 1;
        case BlockSpacerSize.SPACER_MEDIUM:
            return 2;
        case BlockSpacerSize.SPACER_LARGE:
            return 3;
        case BlockSpacerSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockSpacerShape;
(function (BlockSpacerShape) {
    BlockSpacerShape[BlockSpacerShape["SPACER_INVISIBLE"] = 0] = "SPACER_INVISIBLE";
    BlockSpacerShape[BlockSpacerShape["SPACER_THIN"] = 1] = "SPACER_THIN";
    BlockSpacerShape[BlockSpacerShape["SPACER_SQUARE"] = 2] = "SPACER_SQUARE";
    BlockSpacerShape[BlockSpacerShape["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockSpacerShape || (BlockSpacerShape = {}));
export function blockSpacerShapeFromJSON(object) {
    switch (object) {
        case 0:
        case "SPACER_INVISIBLE":
            return BlockSpacerShape.SPACER_INVISIBLE;
        case 1:
        case "SPACER_THIN":
            return BlockSpacerShape.SPACER_THIN;
        case 2:
        case "SPACER_SQUARE":
            return BlockSpacerShape.SPACER_SQUARE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockSpacerShape.UNRECOGNIZED;
    }
}
export function blockSpacerShapeToJSON(object) {
    switch (object) {
        case BlockSpacerShape.SPACER_INVISIBLE:
            return 0;
        case BlockSpacerShape.SPACER_THIN:
            return 1;
        case BlockSpacerShape.SPACER_SQUARE:
            return 2;
        case BlockSpacerShape.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockIconSize;
(function (BlockIconSize) {
    BlockIconSize[BlockIconSize["ICON_SIZE_MEDIUM"] = 0] = "ICON_SIZE_MEDIUM";
    BlockIconSize[BlockIconSize["ICON_SIZE_XSMALL"] = 1] = "ICON_SIZE_XSMALL";
    BlockIconSize[BlockIconSize["ICON_SIZE_SMALL"] = 2] = "ICON_SIZE_SMALL";
    BlockIconSize[BlockIconSize["ICON_SIZE_LARGE"] = 3] = "ICON_SIZE_LARGE";
    BlockIconSize[BlockIconSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockIconSize || (BlockIconSize = {}));
export function blockIconSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "ICON_SIZE_MEDIUM":
            return BlockIconSize.ICON_SIZE_MEDIUM;
        case 1:
        case "ICON_SIZE_XSMALL":
            return BlockIconSize.ICON_SIZE_XSMALL;
        case 2:
        case "ICON_SIZE_SMALL":
            return BlockIconSize.ICON_SIZE_SMALL;
        case 3:
        case "ICON_SIZE_LARGE":
            return BlockIconSize.ICON_SIZE_LARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockIconSize.UNRECOGNIZED;
    }
}
export function blockIconSizeToJSON(object) {
    switch (object) {
        case BlockIconSize.ICON_SIZE_MEDIUM:
            return 0;
        case BlockIconSize.ICON_SIZE_XSMALL:
            return 1;
        case BlockIconSize.ICON_SIZE_SMALL:
            return 2;
        case BlockIconSize.ICON_SIZE_LARGE:
            return 3;
        case BlockIconSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAvatarFacing;
(function (BlockAvatarFacing) {
    BlockAvatarFacing[BlockAvatarFacing["AVATAR_FACING_LEFT"] = 0] = "AVATAR_FACING_LEFT";
    BlockAvatarFacing[BlockAvatarFacing["AVATAR_FACING_RIGHT"] = 1] = "AVATAR_FACING_RIGHT";
    BlockAvatarFacing[BlockAvatarFacing["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAvatarFacing || (BlockAvatarFacing = {}));
export function blockAvatarFacingFromJSON(object) {
    switch (object) {
        case 0:
        case "AVATAR_FACING_LEFT":
            return BlockAvatarFacing.AVATAR_FACING_LEFT;
        case 1:
        case "AVATAR_FACING_RIGHT":
            return BlockAvatarFacing.AVATAR_FACING_RIGHT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAvatarFacing.UNRECOGNIZED;
    }
}
export function blockAvatarFacingToJSON(object) {
    switch (object) {
        case BlockAvatarFacing.AVATAR_FACING_LEFT:
            return 0;
        case BlockAvatarFacing.AVATAR_FACING_RIGHT:
            return 1;
        case BlockAvatarFacing.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAvatarSize;
(function (BlockAvatarSize) {
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_SMALL"] = 0] = "AVATAR_SIZE_SMALL";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_XXSMALL"] = 1] = "AVATAR_SIZE_XXSMALL";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_XSMALL"] = 2] = "AVATAR_SIZE_XSMALL";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_MEDIUM"] = 3] = "AVATAR_SIZE_MEDIUM";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_LARGE"] = 4] = "AVATAR_SIZE_LARGE";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_XLARGE"] = 5] = "AVATAR_SIZE_XLARGE";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_XXLARGE"] = 6] = "AVATAR_SIZE_XXLARGE";
    BlockAvatarSize[BlockAvatarSize["AVATAR_SIZE_XXXLARGE"] = 7] = "AVATAR_SIZE_XXXLARGE";
    BlockAvatarSize[BlockAvatarSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAvatarSize || (BlockAvatarSize = {}));
export function blockAvatarSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "AVATAR_SIZE_SMALL":
            return BlockAvatarSize.AVATAR_SIZE_SMALL;
        case 1:
        case "AVATAR_SIZE_XXSMALL":
            return BlockAvatarSize.AVATAR_SIZE_XXSMALL;
        case 2:
        case "AVATAR_SIZE_XSMALL":
            return BlockAvatarSize.AVATAR_SIZE_XSMALL;
        case 3:
        case "AVATAR_SIZE_MEDIUM":
            return BlockAvatarSize.AVATAR_SIZE_MEDIUM;
        case 4:
        case "AVATAR_SIZE_LARGE":
            return BlockAvatarSize.AVATAR_SIZE_LARGE;
        case 5:
        case "AVATAR_SIZE_XLARGE":
            return BlockAvatarSize.AVATAR_SIZE_XLARGE;
        case 6:
        case "AVATAR_SIZE_XXLARGE":
            return BlockAvatarSize.AVATAR_SIZE_XXLARGE;
        case 7:
        case "AVATAR_SIZE_XXXLARGE":
            return BlockAvatarSize.AVATAR_SIZE_XXXLARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAvatarSize.UNRECOGNIZED;
    }
}
export function blockAvatarSizeToJSON(object) {
    switch (object) {
        case BlockAvatarSize.AVATAR_SIZE_SMALL:
            return 0;
        case BlockAvatarSize.AVATAR_SIZE_XXSMALL:
            return 1;
        case BlockAvatarSize.AVATAR_SIZE_XSMALL:
            return 2;
        case BlockAvatarSize.AVATAR_SIZE_MEDIUM:
            return 3;
        case BlockAvatarSize.AVATAR_SIZE_LARGE:
            return 4;
        case BlockAvatarSize.AVATAR_SIZE_XLARGE:
            return 5;
        case BlockAvatarSize.AVATAR_SIZE_XXLARGE:
            return 6;
        case BlockAvatarSize.AVATAR_SIZE_XXXLARGE:
            return 7;
        case BlockAvatarSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAvatarBackground;
(function (BlockAvatarBackground) {
    BlockAvatarBackground[BlockAvatarBackground["AVATAR_BG_LIGHT"] = 0] = "AVATAR_BG_LIGHT";
    BlockAvatarBackground[BlockAvatarBackground["AVATAR_BG_DARK"] = 1] = "AVATAR_BG_DARK";
    BlockAvatarBackground[BlockAvatarBackground["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAvatarBackground || (BlockAvatarBackground = {}));
export function blockAvatarBackgroundFromJSON(object) {
    switch (object) {
        case 0:
        case "AVATAR_BG_LIGHT":
            return BlockAvatarBackground.AVATAR_BG_LIGHT;
        case 1:
        case "AVATAR_BG_DARK":
            return BlockAvatarBackground.AVATAR_BG_DARK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAvatarBackground.UNRECOGNIZED;
    }
}
export function blockAvatarBackgroundToJSON(object) {
    switch (object) {
        case BlockAvatarBackground.AVATAR_BG_LIGHT:
            return 0;
        case BlockAvatarBackground.AVATAR_BG_DARK:
            return 1;
        case BlockAvatarBackground.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockFullSnooSize;
(function (BlockFullSnooSize) {
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_SMALL"] = 0] = "FULLSNOO_SMALL";
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_XSMALL"] = 1] = "FULLSNOO_XSMALL";
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_MEDIUM"] = 2] = "FULLSNOO_MEDIUM";
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_LARGE"] = 3] = "FULLSNOO_LARGE";
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_XLARGE"] = 4] = "FULLSNOO_XLARGE";
    BlockFullSnooSize[BlockFullSnooSize["FULLSNOO_XXLARGE"] = 5] = "FULLSNOO_XXLARGE";
    BlockFullSnooSize[BlockFullSnooSize["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockFullSnooSize || (BlockFullSnooSize = {}));
export function blockFullSnooSizeFromJSON(object) {
    switch (object) {
        case 0:
        case "FULLSNOO_SMALL":
            return BlockFullSnooSize.FULLSNOO_SMALL;
        case 1:
        case "FULLSNOO_XSMALL":
            return BlockFullSnooSize.FULLSNOO_XSMALL;
        case 2:
        case "FULLSNOO_MEDIUM":
            return BlockFullSnooSize.FULLSNOO_MEDIUM;
        case 3:
        case "FULLSNOO_LARGE":
            return BlockFullSnooSize.FULLSNOO_LARGE;
        case 4:
        case "FULLSNOO_XLARGE":
            return BlockFullSnooSize.FULLSNOO_XLARGE;
        case 5:
        case "FULLSNOO_XXLARGE":
            return BlockFullSnooSize.FULLSNOO_XXLARGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockFullSnooSize.UNRECOGNIZED;
    }
}
export function blockFullSnooSizeToJSON(object) {
    switch (object) {
        case BlockFullSnooSize.FULLSNOO_SMALL:
            return 0;
        case BlockFullSnooSize.FULLSNOO_XSMALL:
            return 1;
        case BlockFullSnooSize.FULLSNOO_MEDIUM:
            return 2;
        case BlockFullSnooSize.FULLSNOO_LARGE:
            return 3;
        case BlockFullSnooSize.FULLSNOO_XLARGE:
            return 4;
        case BlockFullSnooSize.FULLSNOO_XXLARGE:
            return 5;
        case BlockFullSnooSize.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAnimationType;
(function (BlockAnimationType) {
    BlockAnimationType[BlockAnimationType["ANIM_LOTTIE"] = 0] = "ANIM_LOTTIE";
    BlockAnimationType[BlockAnimationType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAnimationType || (BlockAnimationType = {}));
export function blockAnimationTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ANIM_LOTTIE":
            return BlockAnimationType.ANIM_LOTTIE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAnimationType.UNRECOGNIZED;
    }
}
export function blockAnimationTypeToJSON(object) {
    switch (object) {
        case BlockAnimationType.ANIM_LOTTIE:
            return 0;
        case BlockAnimationType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAnimationLoopMode;
(function (BlockAnimationLoopMode) {
    BlockAnimationLoopMode[BlockAnimationLoopMode["ANIM_LOOP_REPEAT"] = 0] = "ANIM_LOOP_REPEAT";
    BlockAnimationLoopMode[BlockAnimationLoopMode["ANIM_LOOP_BOUNCE"] = 1] = "ANIM_LOOP_BOUNCE";
    BlockAnimationLoopMode[BlockAnimationLoopMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAnimationLoopMode || (BlockAnimationLoopMode = {}));
export function blockAnimationLoopModeFromJSON(object) {
    switch (object) {
        case 0:
        case "ANIM_LOOP_REPEAT":
            return BlockAnimationLoopMode.ANIM_LOOP_REPEAT;
        case 1:
        case "ANIM_LOOP_BOUNCE":
            return BlockAnimationLoopMode.ANIM_LOOP_BOUNCE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAnimationLoopMode.UNRECOGNIZED;
    }
}
export function blockAnimationLoopModeToJSON(object) {
    switch (object) {
        case BlockAnimationLoopMode.ANIM_LOOP_REPEAT:
            return 0;
        case BlockAnimationLoopMode.ANIM_LOOP_BOUNCE:
            return 1;
        case BlockAnimationLoopMode.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockAnimationDirection;
(function (BlockAnimationDirection) {
    BlockAnimationDirection[BlockAnimationDirection["ANIM_DIR_FORWARD"] = 0] = "ANIM_DIR_FORWARD";
    BlockAnimationDirection[BlockAnimationDirection["ANIM_DIR_BACKWARD"] = 1] = "ANIM_DIR_BACKWARD";
    BlockAnimationDirection[BlockAnimationDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockAnimationDirection || (BlockAnimationDirection = {}));
export function blockAnimationDirectionFromJSON(object) {
    switch (object) {
        case 0:
        case "ANIM_DIR_FORWARD":
            return BlockAnimationDirection.ANIM_DIR_FORWARD;
        case 1:
        case "ANIM_DIR_BACKWARD":
            return BlockAnimationDirection.ANIM_DIR_BACKWARD;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockAnimationDirection.UNRECOGNIZED;
    }
}
export function blockAnimationDirectionToJSON(object) {
    switch (object) {
        case BlockAnimationDirection.ANIM_DIR_FORWARD:
            return 0;
        case BlockAnimationDirection.ANIM_DIR_BACKWARD:
            return 1;
        case BlockAnimationDirection.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockSizeUnit;
(function (BlockSizeUnit) {
    BlockSizeUnit[BlockSizeUnit["SIZE_UNIT_PERCENT"] = 0] = "SIZE_UNIT_PERCENT";
    BlockSizeUnit[BlockSizeUnit["SIZE_UNIT_PIXELS"] = 1] = "SIZE_UNIT_PIXELS";
    BlockSizeUnit[BlockSizeUnit["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockSizeUnit || (BlockSizeUnit = {}));
export function blockSizeUnitFromJSON(object) {
    switch (object) {
        case 0:
        case "SIZE_UNIT_PERCENT":
            return BlockSizeUnit.SIZE_UNIT_PERCENT;
        case 1:
        case "SIZE_UNIT_PIXELS":
            return BlockSizeUnit.SIZE_UNIT_PIXELS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockSizeUnit.UNRECOGNIZED;
    }
}
export function blockSizeUnitToJSON(object) {
    switch (object) {
        case BlockSizeUnit.SIZE_UNIT_PERCENT:
            return 0;
        case BlockSizeUnit.SIZE_UNIT_PIXELS:
            return 1;
        case BlockSizeUnit.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BlockTextOverflow;
(function (BlockTextOverflow) {
    BlockTextOverflow[BlockTextOverflow["TEXT_OVERFLOW_CLIP"] = 0] = "TEXT_OVERFLOW_CLIP";
    BlockTextOverflow[BlockTextOverflow["TEXT_OVERFLOW_ELLIPSE"] = 1] = "TEXT_OVERFLOW_ELLIPSE";
    BlockTextOverflow[BlockTextOverflow["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockTextOverflow || (BlockTextOverflow = {}));
export function blockTextOverflowFromJSON(object) {
    switch (object) {
        case 0:
        case "TEXT_OVERFLOW_CLIP":
            return BlockTextOverflow.TEXT_OVERFLOW_CLIP;
        case 1:
        case "TEXT_OVERFLOW_ELLIPSE":
            return BlockTextOverflow.TEXT_OVERFLOW_ELLIPSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockTextOverflow.UNRECOGNIZED;
    }
}
export function blockTextOverflowToJSON(object) {
    switch (object) {
        case BlockTextOverflow.TEXT_OVERFLOW_CLIP:
            return 0;
        case BlockTextOverflow.TEXT_OVERFLOW_ELLIPSE:
            return 1;
        case BlockTextOverflow.UNRECOGNIZED:
        default:
            return -1;
    }
}

/**
 * #automation_builder.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { ConfigForm } from '../../user_configurable/user_configurable.js';
import { Automation } from './automation.js';
import { Trigger, TriggerType } from './trigger.js';
/** The type of step it is. Used to filter list request */
export declare enum StepType {
    /** ACTION - Action type step */
    ACTION = 0,
    /** FILTER - Filter type step1 */
    FILTER = 1,
    UNRECOGNIZED = -1
}
export declare function stepTypeFromJSON(object: any): StepType;
export declare function stepTypeToJSON(object: StepType): number;
export interface GetTriggersRequest {
}
export interface ListStepsRequest {
    /** t5 id for subreddit */
    location: string;
    /** datatype the step operates on */
    triggerType: TriggerType;
    /** type of step */
    stepType: StepType;
}
export interface ListAutomationRequest {
    /** t2_id for subreddit */
    location: string;
}
export interface StepActor {
    actor: string;
    label: string;
    description: string;
    type: StepType;
}
export interface ActorList {
    actors: StepActor[];
}
export interface AutomationList {
    automations: Automation[];
}
export interface TriggerList {
    triggers: Trigger[];
}
export interface UpdateAutomationRequest {
    automation?: Automation;
    location: string;
}
export interface GetStepFormRequest {
    actor: string;
}
export declare const GetTriggersRequest: {
    $type: "devvit.actor.automation.v1alpha.GetTriggersRequest";
    encode(_: GetTriggersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetTriggersRequest;
    fromJSON(_: any): GetTriggersRequest;
    toJSON(_: GetTriggersRequest): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): GetTriggersRequest;
};
export declare const ListStepsRequest: {
    $type: "devvit.actor.automation.v1alpha.ListStepsRequest";
    encode(message: ListStepsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListStepsRequest;
    fromJSON(object: any): ListStepsRequest;
    toJSON(message: ListStepsRequest): unknown;
    fromPartial<I extends {
        location?: string | undefined;
        triggerType?: TriggerType | undefined;
        stepType?: StepType | undefined;
    } & {
        location?: string | undefined;
        triggerType?: TriggerType | undefined;
        stepType?: StepType | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ListStepsRequest>]: never; }>(object: I): ListStepsRequest;
};
export declare const ListAutomationRequest: {
    $type: "devvit.actor.automation.v1alpha.ListAutomationRequest";
    encode(message: ListAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListAutomationRequest;
    fromJSON(object: any): ListAutomationRequest;
    toJSON(message: ListAutomationRequest): unknown;
    fromPartial<I extends {
        location?: string | undefined;
    } & {
        location?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "location">]: never; }>(object: I): ListAutomationRequest;
};
export declare const StepActor: {
    $type: "devvit.actor.automation.v1alpha.StepActor";
    encode(message: StepActor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepActor;
    fromJSON(object: any): StepActor;
    toJSON(message: StepActor): unknown;
    fromPartial<I extends {
        actor?: string | undefined;
        label?: string | undefined;
        description?: string | undefined;
        type?: StepType | undefined;
    } & {
        actor?: string | undefined;
        label?: string | undefined;
        description?: string | undefined;
        type?: StepType | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof StepActor>]: never; }>(object: I): StepActor;
};
export declare const ActorList: {
    $type: "devvit.actor.automation.v1alpha.ActorList";
    encode(message: ActorList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActorList;
    fromJSON(object: any): ActorList;
    toJSON(message: ActorList): unknown;
    fromPartial<I extends {
        actors?: {
            actor?: string | undefined;
            label?: string | undefined;
            description?: string | undefined;
            type?: StepType | undefined;
        }[] | undefined;
    } & {
        actors?: ({
            actor?: string | undefined;
            label?: string | undefined;
            description?: string | undefined;
            type?: StepType | undefined;
        }[] & ({
            actor?: string | undefined;
            label?: string | undefined;
            description?: string | undefined;
            type?: StepType | undefined;
        } & {
            actor?: string | undefined;
            label?: string | undefined;
            description?: string | undefined;
            type?: StepType | undefined;
        } & { [K in Exclude<keyof I["actors"][number], "$type" | keyof StepActor>]: never; })[] & { [K_1 in Exclude<keyof I["actors"], "$type" | keyof {
            actor?: string | undefined;
            label?: string | undefined;
            description?: string | undefined;
            type?: StepType | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "actors">]: never; }>(object: I): ActorList;
};
export declare const AutomationList: {
    $type: "devvit.actor.automation.v1alpha.AutomationList";
    encode(message: AutomationList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationList;
    fromJSON(object: any): AutomationList;
    toJSON(message: AutomationList): unknown;
    fromPartial<I extends {
        automations?: {
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        automations?: ({
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        }[] & ({
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: ({
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } & {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } & { [K in Exclude<keyof I["automations"][number]["trigger"], "$type" | keyof Trigger>]: never; }) | undefined;
            steps?: ({
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] & ({
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            } & {
                actor?: string | undefined;
                config?: ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K_1 in Exclude<keyof I["automations"][number]["steps"][number]["config"], string | number>]: never; }) | undefined;
            } & { [K_2 in Exclude<keyof I["automations"][number]["steps"][number], "$type" | keyof import("./step.js").StepDescription>]: never; })[] & { [K_3 in Exclude<keyof I["automations"][number]["steps"], "$type" | keyof {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["automations"][number], "$type" | keyof Automation>]: never; })[] & { [K_5 in Exclude<keyof I["automations"], "$type" | keyof {
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | "automations">]: never; }>(object: I): AutomationList;
};
export declare const TriggerList: {
    $type: "devvit.actor.automation.v1alpha.TriggerList";
    encode(message: TriggerList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TriggerList;
    fromJSON(object: any): TriggerList;
    toJSON(message: TriggerList): unknown;
    fromPartial<I extends {
        triggers?: {
            id?: string | undefined;
            name?: string | undefined;
            label?: string | undefined;
            type?: TriggerType | undefined;
        }[] | undefined;
    } & {
        triggers?: ({
            id?: string | undefined;
            name?: string | undefined;
            label?: string | undefined;
            type?: TriggerType | undefined;
        }[] & ({
            id?: string | undefined;
            name?: string | undefined;
            label?: string | undefined;
            type?: TriggerType | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            label?: string | undefined;
            type?: TriggerType | undefined;
        } & { [K in Exclude<keyof I["triggers"][number], "$type" | keyof Trigger>]: never; })[] & { [K_1 in Exclude<keyof I["triggers"], "$type" | keyof {
            id?: string | undefined;
            name?: string | undefined;
            label?: string | undefined;
            type?: TriggerType | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "triggers">]: never; }>(object: I): TriggerList;
};
export declare const UpdateAutomationRequest: {
    $type: "devvit.actor.automation.v1alpha.UpdateAutomationRequest";
    encode(message: UpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAutomationRequest;
    fromJSON(object: any): UpdateAutomationRequest;
    toJSON(message: UpdateAutomationRequest): unknown;
    fromPartial<I extends {
        automation?: {
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        } | undefined;
        location?: string | undefined;
    } & {
        automation?: ({
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } | undefined;
            steps?: {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
            status?: import("./automation.js").AutomationStatus | undefined;
            visibility?: import("./automation.js").AutomationVisibility | undefined;
            trigger?: ({
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } & {
                id?: string | undefined;
                name?: string | undefined;
                label?: string | undefined;
                type?: TriggerType | undefined;
            } & { [K in Exclude<keyof I["automation"]["trigger"], "$type" | keyof Trigger>]: never; }) | undefined;
            steps?: ({
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[] & ({
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            } & {
                actor?: string | undefined;
                config?: ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K_1 in Exclude<keyof I["automation"]["steps"][number]["config"], string | number>]: never; }) | undefined;
            } & { [K_2 in Exclude<keyof I["automation"]["steps"][number], "$type" | keyof import("./step.js").StepDescription>]: never; })[] & { [K_3 in Exclude<keyof I["automation"]["steps"], "$type" | keyof {
                actor?: string | undefined;
                config?: {
                    [x: string]: any;
                } | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["automation"], "$type" | keyof Automation>]: never; }) | undefined;
        location?: string | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof UpdateAutomationRequest>]: never; }>(object: I): UpdateAutomationRequest;
};
export declare const GetStepFormRequest: {
    $type: "devvit.actor.automation.v1alpha.GetStepFormRequest";
    encode(message: GetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetStepFormRequest;
    fromJSON(object: any): GetStepFormRequest;
    toJSON(message: GetStepFormRequest): unknown;
    fromPartial<I extends {
        actor?: string | undefined;
    } & {
        actor?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "actor">]: never; }>(object: I): GetStepFormRequest;
};
/** Service for providing data to Automation Builder UI element */
export interface AutomationBuilder {
    /** Looks up all registered Triggers from the database */
    GetTriggers(request: GetTriggersRequest, metadata?: Metadata): Promise<TriggerList>;
    /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
    ListSteps(request: ListStepsRequest, metadata?: Metadata): Promise<ActorList>;
    /** Get all automations for a given location (subreddit) */
    ListAutomations(request: ListAutomationRequest, metadata?: Metadata): Promise<AutomationList>;
    /** Updates an automation. Will create a new automation if ID isn't set */
    UpdateAutomation(request: UpdateAutomationRequest, metadata?: Metadata): Promise<Empty>;
    /** Get form layout for step */
    GetStepForm(request: GetStepFormRequest, metadata?: Metadata): Promise<ConfigForm>;
}
export declare class AutomationBuilderClientImpl implements AutomationBuilder {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetTriggers(request: GetTriggersRequest): Promise<TriggerList>;
    ListSteps(request: ListStepsRequest): Promise<ActorList>;
    ListAutomations(request: ListAutomationRequest): Promise<AutomationList>;
    UpdateAutomation(request: UpdateAutomationRequest): Promise<Empty>;
    GetStepForm(request: GetStepFormRequest): Promise<ConfigForm>;
}
/** Service for providing data to Automation Builder UI element */
export type AutomationBuilderDefinition = typeof AutomationBuilderDefinition;
export declare const AutomationBuilderDefinition: {
    readonly name: "AutomationBuilder";
    readonly fullName: "devvit.actor.automation.v1alpha.AutomationBuilder";
    readonly methods: {
        /** Looks up all registered Triggers from the database */
        readonly getTriggers: {
            readonly name: "GetTriggers";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.GetTriggersRequest";
                encode(_: GetTriggersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetTriggersRequest;
                fromJSON(_: any): GetTriggersRequest;
                toJSON(_: GetTriggersRequest): unknown;
                fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): GetTriggersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.TriggerList";
                encode(message: TriggerList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TriggerList;
                fromJSON(object: any): TriggerList;
                toJSON(message: TriggerList): unknown;
                fromPartial<I_1 extends {
                    triggers?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        type?: TriggerType | undefined;
                    }[] | undefined;
                } & {
                    triggers?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        type?: TriggerType | undefined;
                    }[] & ({
                        id?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        type?: TriggerType | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        type?: TriggerType | undefined;
                    } & { [K in Exclude<keyof I["triggers"][number], "$type" | keyof Trigger>]: never; })[] & { [K_1 in Exclude<keyof I["triggers"], "$type" | keyof {
                        id?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        type?: TriggerType | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | "triggers">]: never; }>(object: I_1): TriggerList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
        readonly listSteps: {
            readonly name: "ListSteps";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.ListStepsRequest";
                encode(message: ListStepsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListStepsRequest;
                fromJSON(object: any): ListStepsRequest;
                toJSON(message: ListStepsRequest): unknown;
                fromPartial<I_2 extends {
                    location?: string | undefined;
                    triggerType?: TriggerType | undefined;
                    stepType?: StepType | undefined;
                } & {
                    location?: string | undefined;
                    triggerType?: TriggerType | undefined;
                    stepType?: StepType | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof ListStepsRequest>]: never; }>(object: I_2): ListStepsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.ActorList";
                encode(message: ActorList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ActorList;
                fromJSON(object: any): ActorList;
                toJSON(message: ActorList): unknown;
                fromPartial<I_3 extends {
                    actors?: {
                        actor?: string | undefined;
                        label?: string | undefined;
                        description?: string | undefined;
                        type?: StepType | undefined;
                    }[] | undefined;
                } & {
                    actors?: ({
                        actor?: string | undefined;
                        label?: string | undefined;
                        description?: string | undefined;
                        type?: StepType | undefined;
                    }[] & ({
                        actor?: string | undefined;
                        label?: string | undefined;
                        description?: string | undefined;
                        type?: StepType | undefined;
                    } & {
                        actor?: string | undefined;
                        label?: string | undefined;
                        description?: string | undefined;
                        type?: StepType | undefined;
                    } & { [K in Exclude<keyof I["actors"][number], "$type" | keyof StepActor>]: never; })[] & { [K_1 in Exclude<keyof I["actors"], "$type" | keyof {
                        actor?: string | undefined;
                        label?: string | undefined;
                        description?: string | undefined;
                        type?: StepType | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | "actors">]: never; }>(object: I_3): ActorList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get all automations for a given location (subreddit) */
        readonly listAutomations: {
            readonly name: "ListAutomations";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.ListAutomationRequest";
                encode(message: ListAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListAutomationRequest;
                fromJSON(object: any): ListAutomationRequest;
                toJSON(message: ListAutomationRequest): unknown;
                fromPartial<I_4 extends {
                    location?: string | undefined;
                } & {
                    location?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "location">]: never; }>(object: I_4): ListAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.AutomationList";
                encode(message: AutomationList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationList;
                fromJSON(object: any): AutomationList;
                toJSON(message: AutomationList): unknown;
                fromPartial<I_5 extends {
                    automations?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    }[] | undefined;
                } & {
                    automations?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    }[] & ({
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: ({
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } & {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } & { [K in Exclude<keyof I_5["automations"][number]["trigger"], "$type" | keyof Trigger>]: never; }) | undefined;
                        steps?: ({
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] & ({
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        } & {
                            actor?: string | undefined;
                            config?: ({
                                [x: string]: any;
                            } & {
                                [x: string]: any;
                            } & { [K_1 in Exclude<keyof I_5["automations"][number]["steps"][number]["config"], string | number>]: never; }) | undefined;
                        } & { [K_2 in Exclude<keyof I_5["automations"][number]["steps"][number], "$type" | keyof import("./step.js").StepDescription>]: never; })[] & { [K_3 in Exclude<keyof I_5["automations"][number]["steps"], "$type" | keyof {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_4 in Exclude<keyof I_5["automations"][number], "$type" | keyof Automation>]: never; })[] & { [K_5 in Exclude<keyof I_5["automations"], "$type" | keyof {
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_6 in Exclude<keyof I_5, "$type" | "automations">]: never; }>(object: I_5): AutomationList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Updates an automation. Will create a new automation if ID isn't set */
        readonly updateAutomation: {
            readonly name: "UpdateAutomation";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.UpdateAutomationRequest";
                encode(message: UpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAutomationRequest;
                fromJSON(object: any): UpdateAutomationRequest;
                toJSON(message: UpdateAutomationRequest): unknown;
                fromPartial<I_6 extends {
                    automation?: {
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    } | undefined;
                    location?: string | undefined;
                } & {
                    automation?: ({
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } | undefined;
                        steps?: {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] | undefined;
                    } & {
                        id?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                        status?: import("./automation.js").AutomationStatus | undefined;
                        visibility?: import("./automation.js").AutomationVisibility | undefined;
                        trigger?: ({
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } & {
                            id?: string | undefined;
                            name?: string | undefined;
                            label?: string | undefined;
                            type?: TriggerType | undefined;
                        } & { [K_7 in Exclude<keyof I_6["automation"]["trigger"], "$type" | keyof Trigger>]: never; }) | undefined;
                        steps?: ({
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[] & ({
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        } & {
                            actor?: string | undefined;
                            config?: ({
                                [x: string]: any;
                            } & {
                                [x: string]: any;
                            } & { [K_8 in Exclude<keyof I_6["automation"]["steps"][number]["config"], string | number>]: never; }) | undefined;
                        } & { [K_9 in Exclude<keyof I_6["automation"]["steps"][number], "$type" | keyof import("./step.js").StepDescription>]: never; })[] & { [K_10 in Exclude<keyof I_6["automation"]["steps"], "$type" | keyof {
                            actor?: string | undefined;
                            config?: {
                                [x: string]: any;
                            } | undefined;
                        }[]>]: never; }) | undefined;
                    } & { [K_11 in Exclude<keyof I_6["automation"], "$type" | keyof Automation>]: never; }) | undefined;
                    location?: string | undefined;
                } & { [K_12 in Exclude<keyof I_6, "$type" | keyof UpdateAutomationRequest>]: never; }>(object: I_6): UpdateAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty"; /** FILTER - Filter type step1 */
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_7 extends {} & {} & { [K_13 in Exclude<keyof I_7, "$type">]: never; }>(_: I_7): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get form layout for step */
        readonly getStepForm: {
            readonly name: "GetStepForm";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.GetStepFormRequest";
                encode(message: GetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetStepFormRequest;
                fromJSON(object: any): GetStepFormRequest;
                toJSON(message: GetStepFormRequest): unknown;
                fromPartial<I_8 extends {
                    actor?: string | undefined;
                } & {
                    actor?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "actor">]: never; }>(object: I_8): GetStepFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                fromPartial<I_9 extends {
                    fields?: {
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] | undefined;
                } & {
                    fields?: ({
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[] & ({
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & {
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    } & { [K_14 in Exclude<keyof I_9["fields"][number], "$type" | keyof import("../../user_configurable/user_configurable.js").ConfigField>]: never; })[] & { [K_15 in Exclude<keyof I_9["fields"], "$type" | keyof {
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType | undefined;
                        key?: string | undefined;
                        prompt?: string | undefined;
                        response?: string | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_16 in Exclude<keyof I_9, "fields" | "$type">]: never; }>(object: I_9): ConfigForm;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=automation_builder.d.ts.map
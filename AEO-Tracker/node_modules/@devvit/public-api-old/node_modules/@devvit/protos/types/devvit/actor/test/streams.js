/**
 * #streams.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseTestMessage() {
    return { number: 0 };
}
export const TestMessage = {
    $type: "devvit.actor.test.TestMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.number !== 0) {
            writer.uint32(8).int32(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.number = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { number: isSet(object.number) ? Number(object.number) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.number !== undefined && (obj.number = Math.round(message.number));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTestMessage();
        message.number = object.number ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.test.TestMessage", TestMessage);
export class StreamsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.test.Streams";
        this.rpc = rpc;
        this.Transform = this.Transform.bind(this);
        this.Aggregate = this.Aggregate.bind(this);
        this.Enumerate = this.Enumerate.bind(this);
    }
    Transform(request) {
        const data = request.pipe(map((request) => TestMessage.encode(request).finish()));
        const result = this.rpc.bidirectionalStreamingRequest(this.service, "Transform", data);
        return result.pipe(map((data) => TestMessage.decode(new _m0.Reader(data))));
    }
    Aggregate(request) {
        const data = request.pipe(map((request) => TestMessage.encode(request).finish()));
        const promise = this.rpc.clientStreamingRequest(this.service, "Aggregate", data);
        return promise.then((data) => TestMessage.decode(new _m0.Reader(data)));
    }
    Enumerate(request) {
        const data = TestMessage.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Enumerate", data);
        return result.pipe(map((data) => TestMessage.decode(new _m0.Reader(data))));
    }
}
export const StreamsDefinition = {
    name: "Streams",
    fullName: "devvit.actor.test.Streams",
    methods: {
        /**
         * this copies messages from the request stream to the response stream.
         * It could also represent a filtering process (i.e. every odd number)
         */
        transform: {
            name: "Transform",
            requestType: TestMessage,
            requestStream: true,
            responseType: TestMessage,
            responseStream: true,
            options: {},
        },
        /**
         * This takes a stream of messages and returns a single response.
         * A canonical implementation would be a sum() function.
         */
        aggregate: {
            name: "Aggregate",
            requestType: TestMessage,
            requestStream: true,
            responseType: TestMessage,
            responseStream: false,
            options: {},
        },
        /**
         * This takes a single message and returns a stream of messages.  Think
         * range()
         */
        enumerate: {
            name: "Enumerate",
            requestType: TestMessage,
            requestStream: false,
            responseType: TestMessage,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

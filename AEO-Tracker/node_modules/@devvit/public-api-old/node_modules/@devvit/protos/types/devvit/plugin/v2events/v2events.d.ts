/**
 * #v2events.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface V2EventsActionInfo {
    pageType: string;
    paneName: string;
}
export interface V2EventsPostGuidanceCreate {
    actionInfo?: V2EventsActionInfo;
}
export interface V2EventsPostGuidanceUpdate {
    actionInfo?: V2EventsActionInfo;
}
export interface V2EventsPublishRequest {
    postGuidanceCreate?: V2EventsPostGuidanceCreate | undefined;
    postGuidanceUpdate?: V2EventsPostGuidanceUpdate | undefined;
}
/** Generic response interface */
export interface V2EventsPublishResponse {
}
export declare const V2EventsActionInfo: {
    $type: "devvit.plugin.v2events.V2EventsActionInfo";
    encode(message: V2EventsActionInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsActionInfo;
    fromJSON(object: any): V2EventsActionInfo;
    toJSON(message: V2EventsActionInfo): unknown;
    fromPartial<I extends {
        pageType?: string | undefined;
        paneName?: string | undefined;
    } & {
        pageType?: string | undefined;
        paneName?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof V2EventsActionInfo>]: never; }>(object: I): V2EventsActionInfo;
};
export declare const V2EventsPostGuidanceCreate: {
    $type: "devvit.plugin.v2events.V2EventsPostGuidanceCreate";
    encode(message: V2EventsPostGuidanceCreate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPostGuidanceCreate;
    fromJSON(object: any): V2EventsPostGuidanceCreate;
    toJSON(message: V2EventsPostGuidanceCreate): unknown;
    fromPartial<I extends {
        actionInfo?: {
            pageType?: string | undefined;
            paneName?: string | undefined;
        } | undefined;
    } & {
        actionInfo?: ({
            pageType?: string | undefined;
            paneName?: string | undefined;
        } & {
            pageType?: string | undefined;
            paneName?: string | undefined;
        } & { [K in Exclude<keyof I["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "actionInfo">]: never; }>(object: I): V2EventsPostGuidanceCreate;
};
export declare const V2EventsPostGuidanceUpdate: {
    $type: "devvit.plugin.v2events.V2EventsPostGuidanceUpdate";
    encode(message: V2EventsPostGuidanceUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPostGuidanceUpdate;
    fromJSON(object: any): V2EventsPostGuidanceUpdate;
    toJSON(message: V2EventsPostGuidanceUpdate): unknown;
    fromPartial<I extends {
        actionInfo?: {
            pageType?: string | undefined;
            paneName?: string | undefined;
        } | undefined;
    } & {
        actionInfo?: ({
            pageType?: string | undefined;
            paneName?: string | undefined;
        } & {
            pageType?: string | undefined;
            paneName?: string | undefined;
        } & { [K in Exclude<keyof I["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "actionInfo">]: never; }>(object: I): V2EventsPostGuidanceUpdate;
};
export declare const V2EventsPublishRequest: {
    $type: "devvit.plugin.v2events.V2EventsPublishRequest";
    encode(message: V2EventsPublishRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPublishRequest;
    fromJSON(object: any): V2EventsPublishRequest;
    toJSON(message: V2EventsPublishRequest): unknown;
    fromPartial<I extends {
        postGuidanceCreate?: {
            actionInfo?: {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } | undefined;
        } | undefined;
        postGuidanceUpdate?: {
            actionInfo?: {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        postGuidanceCreate?: ({
            actionInfo?: {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } | undefined;
        } & {
            actionInfo?: ({
                pageType?: string | undefined;
                paneName?: string | undefined;
            } & {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } & { [K in Exclude<keyof I["postGuidanceCreate"]["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["postGuidanceCreate"], "$type" | "actionInfo">]: never; }) | undefined;
        postGuidanceUpdate?: ({
            actionInfo?: {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } | undefined;
        } & {
            actionInfo?: ({
                pageType?: string | undefined;
                paneName?: string | undefined;
            } & {
                pageType?: string | undefined;
                paneName?: string | undefined;
            } & { [K_2 in Exclude<keyof I["postGuidanceUpdate"]["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["postGuidanceUpdate"], "$type" | "actionInfo">]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | keyof V2EventsPublishRequest>]: never; }>(object: I): V2EventsPublishRequest;
};
export declare const V2EventsPublishResponse: {
    $type: "devvit.plugin.v2events.V2EventsPublishResponse";
    encode(_: V2EventsPublishResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPublishResponse;
    fromJSON(_: any): V2EventsPublishResponse;
    toJSON(_: V2EventsPublishResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): V2EventsPublishResponse;
};
/** The Events plugin allows an app to emit pre-defined v2 events */
export interface V2Events {
    Publish(request: V2EventsPublishRequest, metadata?: Metadata): Promise<V2EventsPublishResponse>;
}
export declare class V2EventsClientImpl implements V2Events {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Publish(request: V2EventsPublishRequest): Promise<V2EventsPublishResponse>;
}
/** The Events plugin allows an app to emit pre-defined v2 events */
export type V2EventsDefinition = typeof V2EventsDefinition;
export declare const V2EventsDefinition: {
    readonly name: "V2Events";
    readonly fullName: "devvit.plugin.v2events.V2Events";
    readonly methods: {
        readonly publish: {
            readonly name: "Publish";
            readonly requestType: {
                $type: "devvit.plugin.v2events.V2EventsPublishRequest";
                encode(message: V2EventsPublishRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPublishRequest;
                fromJSON(object: any): V2EventsPublishRequest;
                toJSON(message: V2EventsPublishRequest): unknown;
                fromPartial<I extends {
                    postGuidanceCreate?: {
                        actionInfo?: {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } | undefined;
                    } | undefined;
                    postGuidanceUpdate?: {
                        actionInfo?: {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } | undefined;
                    } | undefined;
                } & {
                    postGuidanceCreate?: ({
                        actionInfo?: {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } | undefined;
                    } & {
                        actionInfo?: ({
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } & {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } & { [K in Exclude<keyof I["postGuidanceCreate"]["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
                    } & { [K_1 in Exclude<keyof I["postGuidanceCreate"], "$type" | "actionInfo">]: never; }) | undefined;
                    postGuidanceUpdate?: ({
                        actionInfo?: {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } | undefined;
                    } & {
                        actionInfo?: ({
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } & {
                            pageType?: string | undefined;
                            paneName?: string | undefined;
                        } & { [K_2 in Exclude<keyof I["postGuidanceUpdate"]["actionInfo"], "$type" | keyof V2EventsActionInfo>]: never; }) | undefined;
                    } & { [K_3 in Exclude<keyof I["postGuidanceUpdate"], "$type" | "actionInfo">]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I, "$type" | keyof V2EventsPublishRequest>]: never; }>(object: I): V2EventsPublishRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v2events.V2EventsPublishResponse";
                encode(_: V2EventsPublishResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): V2EventsPublishResponse;
                fromJSON(_: any): V2EventsPublishResponse;
                toJSON(_: V2EventsPublishResponse): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I_1): V2EventsPublishResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=v2events.d.ts.map
import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { RemoteLogMessage, RemoteLogPutResponse, RemoteLogQuery, } from './remote_logger.js';
export var RemoteLogPublisherMethod;
(function (RemoteLogPublisherMethod) {
    RemoteLogPublisherMethod["Put"] = "Put";
})(RemoteLogPublisherMethod || (RemoteLogPublisherMethod = {}));
export const RemoteLogPublisherMethodList = [RemoteLogPublisherMethod.Put];
export function createRemoteLogPublisherServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.remote_logger',
        serviceName: 'RemoteLogPublisher',
        methodList: RemoteLogPublisherMethodList,
        matchRoute: matchRemoteLogPublisherRoute,
    });
}
function matchRemoteLogPublisherRoute(method, events) {
    switch (method) {
        case 'Put':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Put' };
                await events.onMatch(ctx);
                return handleRemoteLogPublisherPutRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRemoteLogPublisherPutRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRemoteLogPublisherPutJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRemoteLogPublisherPutProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleRemoteLogPublisherPutJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RemoteLogMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return JSON.stringify(RemoteLogPutResponse.toJSON(response));
}
async function handleRemoteLogPublisherPutProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RemoteLogMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return Buffer.from(RemoteLogPutResponse.encode(response).finish());
}
export var RemoteLogConsumerMethod;
(function (RemoteLogConsumerMethod) {
    RemoteLogConsumerMethod["Tail"] = "Tail";
})(RemoteLogConsumerMethod || (RemoteLogConsumerMethod = {}));
export const RemoteLogConsumerMethodList = [RemoteLogConsumerMethod.Tail];
export function createRemoteLogConsumerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.remote_logger',
        serviceName: 'RemoteLogConsumer',
        methodList: RemoteLogConsumerMethodList,
        matchRoute: matchRemoteLogConsumerRoute,
    });
}
function matchRemoteLogConsumerRoute(method, events) {
    switch (method) {
        case 'Tail':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Tail' };
                await events.onMatch(ctx);
                return handleRemoteLogConsumerTailRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRemoteLogConsumerTailRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRemoteLogConsumerTailJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRemoteLogConsumerTailProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleRemoteLogConsumerTailJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RemoteLogQuery.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Tail(ctx, inputReq);
        });
    }
    else {
        response = await service.Tail(ctx, request);
    }
    return JSON.stringify(RemoteLogMessage.toJSON(response));
}
async function handleRemoteLogConsumerTailProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RemoteLogQuery.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Tail(ctx, inputReq);
        });
    }
    else {
        response = await service.Tail(ctx, request);
    }
    return Buffer.from(RemoteLogMessage.encode(response).finish());
}

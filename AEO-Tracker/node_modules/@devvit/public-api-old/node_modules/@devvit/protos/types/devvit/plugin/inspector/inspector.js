/**
 * #inspector.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { SerializableServiceDefinition } from '../../runtime/serializable.js';
export var InspectorUpdateType;
(function (InspectorUpdateType) {
    InspectorUpdateType[InspectorUpdateType["ADDED"] = 0] = "ADDED";
    InspectorUpdateType[InspectorUpdateType["REMOVED"] = 1] = "REMOVED";
    InspectorUpdateType[InspectorUpdateType["CHANGED"] = 2] = "CHANGED";
    /** SUBSCRIBED - The client is now a registered subscriber and will receive updates. */
    InspectorUpdateType[InspectorUpdateType["SUBSCRIBED"] = 3] = "SUBSCRIBED";
    InspectorUpdateType[InspectorUpdateType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(InspectorUpdateType || (InspectorUpdateType = {}));
export function inspectorUpdateTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ADDED":
            return InspectorUpdateType.ADDED;
        case 1:
        case "REMOVED":
            return InspectorUpdateType.REMOVED;
        case 2:
        case "CHANGED":
            return InspectorUpdateType.CHANGED;
        case 3:
        case "SUBSCRIBED":
            return InspectorUpdateType.SUBSCRIBED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return InspectorUpdateType.UNRECOGNIZED;
    }
}
export function inspectorUpdateTypeToJSON(object) {
    switch (object) {
        case InspectorUpdateType.ADDED:
            return 0;
        case InspectorUpdateType.REMOVED:
            return 1;
        case InspectorUpdateType.CHANGED:
            return 2;
        case InspectorUpdateType.SUBSCRIBED:
            return 3;
        case InspectorUpdateType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseInspectorQuery() {
    return { type: "", hostname: "" };
}
export const InspectorQuery = {
    $type: "devvit.plugin.inspector.InspectorQuery",
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                case 2:
                    message.hostname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? String(object.type) : "",
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = message.type);
        message.hostname !== undefined && (obj.hostname = message.hostname);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInspectorQuery();
        message.type = object.type ?? "";
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.inspector.InspectorQuery", InspectorQuery);
function createBaseInspectorDescription() {
    return { provides: [], hostname: "" };
}
export const InspectorDescription = {
    $type: "devvit.plugin.inspector.InspectorDescription",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.provides) {
            SerializableServiceDefinition.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.provides.push(SerializableServiceDefinition.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.hostname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            provides: Array.isArray(object?.provides)
                ? object.provides.map((e) => SerializableServiceDefinition.fromJSON(e))
                : [],
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.provides) {
            obj.provides = message.provides.map((e) => e ? SerializableServiceDefinition.toJSON(e) : undefined);
        }
        else {
            obj.provides = [];
        }
        message.hostname !== undefined && (obj.hostname = message.hostname);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInspectorDescription();
        message.provides = object.provides?.map((e) => SerializableServiceDefinition.fromPartial(e)) || [];
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.inspector.InspectorDescription", InspectorDescription);
function createBaseInspectorDescriptions() {
    return { descriptions: [] };
}
export const InspectorDescriptions = {
    $type: "devvit.plugin.inspector.InspectorDescriptions",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.descriptions) {
            InspectorDescription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorDescriptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.descriptions.push(InspectorDescription.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            descriptions: Array.isArray(object?.descriptions)
                ? object.descriptions.map((e) => InspectorDescription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.descriptions) {
            obj.descriptions = message.descriptions.map((e) => e ? InspectorDescription.toJSON(e) : undefined);
        }
        else {
            obj.descriptions = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInspectorDescriptions();
        message.descriptions = object.descriptions?.map((e) => InspectorDescription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.inspector.InspectorDescriptions", InspectorDescriptions);
function createBaseInspectorUpdate() {
    return { description: undefined, type: 0 };
}
export const InspectorUpdate = {
    $type: "devvit.plugin.inspector.InspectorUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.description !== undefined) {
            InspectorDescription.encode(message.description, writer.uint32(10).fork()).ldelim();
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInspectorUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.description = InspectorDescription.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: isSet(object.description) ? InspectorDescription.fromJSON(object.description) : undefined,
            type: isSet(object.type) ? inspectorUpdateTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.description !== undefined &&
            (obj.description = message.description ? InspectorDescription.toJSON(message.description) : undefined);
        message.type !== undefined && (obj.type = inspectorUpdateTypeToJSON(message.type));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseInspectorUpdate();
        message.description = (object.description !== undefined && object.description !== null)
            ? InspectorDescription.fromPartial(object.description)
            : undefined;
        message.type = object.type ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.inspector.InspectorUpdate", InspectorUpdate);
export class InspectorClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.inspector.Inspector";
        this.rpc = rpc;
        this.ListActors = this.ListActors.bind(this);
        this.ActorChanges = this.ActorChanges.bind(this);
    }
    ListActors(request) {
        const data = InspectorQuery.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListActors", data);
        return promise.then((data) => InspectorDescriptions.decode(new _m0.Reader(data)));
    }
    ActorChanges(request) {
        const data = Empty.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "ActorChanges", data);
        return result.pipe(map((data) => InspectorUpdate.decode(new _m0.Reader(data))));
    }
}
export const InspectorDefinition = {
    name: "Inspector",
    fullName: "devvit.plugin.inspector.Inspector",
    methods: {
        listActors: {
            name: "ListActors",
            requestType: InspectorQuery,
            requestStream: false,
            responseType: InspectorDescriptions,
            responseStream: false,
            options: {},
        },
        actorChanges: {
            name: "ActorChanges",
            requestType: Empty,
            requestStream: false,
            responseType: InspectorUpdate,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

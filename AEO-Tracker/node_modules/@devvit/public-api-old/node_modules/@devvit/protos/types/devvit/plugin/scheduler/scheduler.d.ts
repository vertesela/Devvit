/**
 * #scheduler.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { ScheduledAction } from '../../actor/scheduler/action.js';
import { Strings } from '../../runtime/runtime_common.js';
export interface ScheduledActionRequest {
    /** A time in the future to execute the action */
    when?: Date | undefined;
    /** A crontab parseable string */
    cron: string | undefined;
    /** Action data to send back to the Actor */
    action?: ScheduledAction;
}
export interface ScheduledActionResponse {
    /** Opaque ID for the scheduled action */
    id: string;
}
export interface CancelActionRequest {
    /** Opaque ID returned from a previous call to Schedule() */
    id: string;
}
export interface StorableAction {
    id: string;
    actorHostname: string;
    request?: ScheduledActionRequest;
    metadata: {
        [key: string]: Strings;
    };
    state?: StorableAction_State | undefined;
}
export declare enum StorableAction_State {
    WAITING = 0,
    CANCELED = 1,
    FAILED = 2,
    DELIVERED = 3,
    UNRECOGNIZED = -1
}
export declare function storableAction_StateFromJSON(object: any): StorableAction_State;
export declare function storableAction_StateToJSON(object: StorableAction_State): number;
export interface StorableAction_MetadataEntry {
    key: string;
    value?: Strings;
}
export interface ListActionRequest {
    before?: Date;
    after?: Date;
}
export interface GetActionResponse {
    id: string;
    request?: ScheduledActionRequest;
}
export interface ListActionResponse {
    actions: GetActionResponse[];
}
export declare const ScheduledActionRequest: {
    $type: "devvit.plugin.scheduler.ScheduledActionRequest";
    encode(message: ScheduledActionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledActionRequest;
    fromJSON(object: any): ScheduledActionRequest;
    toJSON(message: ScheduledActionRequest): unknown;
    fromPartial<I extends {
        when?: Date | undefined;
        cron?: string | undefined;
        action?: {
            type?: string | undefined;
            data?: {
                [x: string]: any;
            } | undefined;
        } | undefined;
    } & {
        when?: Date | undefined;
        cron?: string | undefined;
        action?: ({
            type?: string | undefined;
            data?: {
                [x: string]: any;
            } | undefined;
        } & {
            type?: string | undefined;
            data?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["action"]["data"], string | number>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ScheduledActionRequest>]: never; }>(object: I): ScheduledActionRequest;
};
export declare const ScheduledActionResponse: {
    $type: "devvit.plugin.scheduler.ScheduledActionResponse";
    encode(message: ScheduledActionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledActionResponse;
    fromJSON(object: any): ScheduledActionResponse;
    toJSON(message: ScheduledActionResponse): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): ScheduledActionResponse;
};
export declare const CancelActionRequest: {
    $type: "devvit.plugin.scheduler.CancelActionRequest";
    encode(message: CancelActionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CancelActionRequest;
    fromJSON(object: any): CancelActionRequest;
    toJSON(message: CancelActionRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): CancelActionRequest;
};
export declare const StorableAction: {
    $type: "devvit.plugin.scheduler.StorableAction";
    encode(message: StorableAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorableAction;
    fromJSON(object: any): StorableAction;
    toJSON(message: StorableAction): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        actorHostname?: string | undefined;
        request?: {
            when?: Date | undefined;
            cron?: string | undefined;
            action?: {
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        } | undefined;
        metadata?: {
            [x: string]: {
                values?: string[] | undefined;
            } | undefined;
        } | undefined;
        state?: StorableAction_State | undefined;
    } & {
        id?: string | undefined;
        actorHostname?: string | undefined;
        request?: ({
            when?: Date | undefined;
            cron?: string | undefined;
            action?: {
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        } & {
            when?: Date | undefined;
            cron?: string | undefined;
            action?: ({
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } & {
                type?: string | undefined;
                data?: ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K in Exclude<keyof I["request"]["action"]["data"], string | number>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["request"]["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["request"], "$type" | keyof ScheduledActionRequest>]: never; }) | undefined;
        metadata?: ({
            [x: string]: {
                values?: string[] | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                values?: string[] | undefined;
            } & {
                values?: (string[] & string[] & { [K_3 in Exclude<keyof I["metadata"][string]["values"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_4 in Exclude<keyof I["metadata"][string], "$type" | "values">]: never; }) | undefined;
        } & { [K_5 in Exclude<keyof I["metadata"], string | number>]: never; }) | undefined;
        state?: StorableAction_State | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | keyof StorableAction>]: never; }>(object: I): StorableAction;
};
export declare const StorableAction_MetadataEntry: {
    $type: "devvit.plugin.scheduler.StorableAction.MetadataEntry";
    encode(message: StorableAction_MetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StorableAction_MetadataEntry;
    fromJSON(object: any): StorableAction_MetadataEntry;
    toJSON(message: StorableAction_MetadataEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: {
            values?: string[] | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            values?: string[] | undefined;
        } & {
            values?: (string[] & string[] & { [K in Exclude<keyof I["value"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["value"], "$type" | "values">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof StorableAction_MetadataEntry>]: never; }>(object: I): StorableAction_MetadataEntry;
};
export declare const ListActionRequest: {
    $type: "devvit.plugin.scheduler.ListActionRequest";
    encode(message: ListActionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListActionRequest;
    fromJSON(object: any): ListActionRequest;
    toJSON(message: ListActionRequest): unknown;
    fromPartial<I extends {
        before?: Date | undefined;
        after?: Date | undefined;
    } & {
        before?: Date | undefined;
        after?: Date | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ListActionRequest>]: never; }>(object: I): ListActionRequest;
};
export declare const GetActionResponse: {
    $type: "devvit.plugin.scheduler.GetActionResponse";
    encode(message: GetActionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetActionResponse;
    fromJSON(object: any): GetActionResponse;
    toJSON(message: GetActionResponse): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        request?: {
            when?: Date | undefined;
            cron?: string | undefined;
            action?: {
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        id?: string | undefined;
        request?: ({
            when?: Date | undefined;
            cron?: string | undefined;
            action?: {
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        } & {
            when?: Date | undefined;
            cron?: string | undefined;
            action?: ({
                type?: string | undefined;
                data?: {
                    [x: string]: any;
                } | undefined;
            } & {
                type?: string | undefined;
                data?: ({
                    [x: string]: any;
                } & {
                    [x: string]: any;
                } & { [K in Exclude<keyof I["request"]["action"]["data"], string | number>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["request"]["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["request"], "$type" | keyof ScheduledActionRequest>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof GetActionResponse>]: never; }>(object: I): GetActionResponse;
};
export declare const ListActionResponse: {
    $type: "devvit.plugin.scheduler.ListActionResponse";
    encode(message: ListActionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListActionResponse;
    fromJSON(object: any): ListActionResponse;
    toJSON(message: ListActionResponse): unknown;
    fromPartial<I extends {
        actions?: {
            id?: string | undefined;
            request?: {
                when?: Date | undefined;
                cron?: string | undefined;
                action?: {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        actions?: ({
            id?: string | undefined;
            request?: {
                when?: Date | undefined;
                cron?: string | undefined;
                action?: {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            id?: string | undefined;
            request?: {
                when?: Date | undefined;
                cron?: string | undefined;
                action?: {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined;
            } | undefined;
        } & {
            id?: string | undefined;
            request?: ({
                when?: Date | undefined;
                cron?: string | undefined;
                action?: {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined;
            } & {
                when?: Date | undefined;
                cron?: string | undefined;
                action?: ({
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } & {
                    type?: string | undefined;
                    data?: ({
                        [x: string]: any;
                    } & {
                        [x: string]: any;
                    } & { [K in Exclude<keyof I["actions"][number]["request"]["action"]["data"], string | number>]: never; }) | undefined;
                } & { [K_1 in Exclude<keyof I["actions"][number]["request"]["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
            } & { [K_2 in Exclude<keyof I["actions"][number]["request"], "$type" | keyof ScheduledActionRequest>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["actions"][number], "$type" | keyof GetActionResponse>]: never; })[] & { [K_4 in Exclude<keyof I["actions"], "$type" | keyof {
            id?: string | undefined;
            request?: {
                when?: Date | undefined;
                cron?: string | undefined;
                action?: {
                    type?: string | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | "actions">]: never; }>(object: I): ListActionResponse;
};
/**
 * Provides an API for Actors to execute an action sometime in the future.
 *
 * Actors will need to implement the SchedulerHandler interface which the Scheduler will call with
 * the provided ScheduledAction as an argument.
 *
 * The Scheduler will fail with an error if the time provided is in the past.
 */
export interface Scheduler {
    /** This schedules an action */
    Schedule(request: ScheduledActionRequest, metadata?: Metadata): Promise<ScheduledActionResponse>;
    /** This cancels any scheduled action */
    Cancel(request: CancelActionRequest, metadata?: Metadata): Promise<Empty>;
    /** This lists all scheduled actions for this installation. */
    List(request: ListActionRequest, metadata?: Metadata): Promise<ListActionResponse>;
}
export declare class SchedulerClientImpl implements Scheduler {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Schedule(request: ScheduledActionRequest): Promise<ScheduledActionResponse>;
    Cancel(request: CancelActionRequest): Promise<Empty>;
    List(request: ListActionRequest): Promise<ListActionResponse>;
}
/**
 * Provides an API for Actors to execute an action sometime in the future.
 *
 * Actors will need to implement the SchedulerHandler interface which the Scheduler will call with
 * the provided ScheduledAction as an argument.
 *
 * The Scheduler will fail with an error if the time provided is in the past.
 */
export type SchedulerDefinition = typeof SchedulerDefinition;
export declare const SchedulerDefinition: {
    readonly name: "Scheduler";
    readonly fullName: "devvit.plugin.scheduler.Scheduler";
    readonly methods: {
        /** This schedules an action */
        readonly schedule: {
            readonly name: "Schedule";
            readonly requestType: {
                $type: "devvit.plugin.scheduler.ScheduledActionRequest";
                encode(message: ScheduledActionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledActionRequest;
                fromJSON(object: any): ScheduledActionRequest;
                toJSON(message: ScheduledActionRequest): unknown;
                fromPartial<I extends {
                    when?: Date | undefined;
                    cron?: string | undefined;
                    action?: {
                        type?: string | undefined;
                        data?: {
                            [x: string]: any;
                        } | undefined;
                    } | undefined;
                } & {
                    when?: Date | undefined;
                    cron?: string | undefined;
                    action?: ({
                        type?: string | undefined;
                        data?: {
                            [x: string]: any;
                        } | undefined;
                    } & {
                        type?: string | undefined;
                        data?: ({
                            [x: string]: any;
                        } & {
                            [x: string]: any;
                        } & { [K in Exclude<keyof I["action"]["data"], string | number>]: never; }) | undefined;
                    } & { [K_1 in Exclude<keyof I["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I, "$type" | keyof ScheduledActionRequest>]: never; }>(object: I): ScheduledActionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.scheduler.ScheduledActionResponse";
                encode(message: ScheduledActionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledActionResponse;
                fromJSON(object: any): ScheduledActionResponse;
                toJSON(message: ScheduledActionResponse): unknown;
                fromPartial<I_1 extends {
                    id?: string | undefined;
                } & {
                    id?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I_1): ScheduledActionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** This cancels any scheduled action */
        readonly cancel: {
            readonly name: "Cancel";
            readonly requestType: {
                $type: "devvit.plugin.scheduler.CancelActionRequest";
                encode(message: CancelActionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CancelActionRequest;
                fromJSON(object: any): CancelActionRequest;
                toJSON(message: CancelActionRequest): unknown;
                fromPartial<I_2 extends {
                    id?: string | undefined;
                } & {
                    id?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I_2): CancelActionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_3 extends {} & {} & { [K in Exclude<keyof I_3, "$type">]: never; }>(_: I_3): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** This lists all scheduled actions for this installation. */
        readonly list: {
            readonly name: "List";
            readonly requestType: {
                $type: "devvit.plugin.scheduler.ListActionRequest";
                encode(message: ListActionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListActionRequest;
                fromJSON(object: any): ListActionRequest;
                toJSON(message: ListActionRequest): unknown;
                fromPartial<I_4 extends {
                    before?: Date | undefined;
                    after?: Date | undefined;
                } & {
                    before?: Date | undefined;
                    after?: Date | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof ListActionRequest>]: never; }>(object: I_4): ListActionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.scheduler.ListActionResponse";
                encode(message: ListActionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListActionResponse;
                fromJSON(object: any): ListActionResponse;
                toJSON(message: ListActionResponse): unknown;
                fromPartial<I_5 extends {
                    actions?: {
                        id?: string | undefined;
                        request?: {
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: {
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    }[] | undefined;
                } & {
                    actions?: ({
                        id?: string | undefined;
                        request?: {
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: {
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    }[] & ({
                        id?: string | undefined;
                        request?: {
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: {
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    } & {
                        id?: string | undefined;
                        request?: ({
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: {
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } & {
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: ({
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } & {
                                type?: string | undefined;
                                data?: ({
                                    [x: string]: any;
                                } & {
                                    [x: string]: any;
                                } & { [K in Exclude<keyof I["actions"][number]["request"]["action"]["data"], string | number>]: never; }) | undefined;
                            } & { [K_1 in Exclude<keyof I["actions"][number]["request"]["action"], "$type" | keyof ScheduledAction>]: never; }) | undefined;
                        } & { [K_2 in Exclude<keyof I["actions"][number]["request"], "$type" | keyof ScheduledActionRequest>]: never; }) | undefined;
                    } & { [K_3 in Exclude<keyof I["actions"][number], "$type" | keyof GetActionResponse>]: never; })[] & { [K_4 in Exclude<keyof I["actions"], "$type" | keyof {
                        id?: string | undefined;
                        request?: {
                            when?: Date | undefined;
                            cron?: string | undefined;
                            action?: {
                                type?: string | undefined;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_5 in Exclude<keyof I, "$type" | "actions">]: never; }>(object: I_5): ListActionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=scheduler.d.ts.map
/**
 * #bundle.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Timestamp } from '../../google/protobuf/timestamp.js';
import { StringValue } from '../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
import { SerializableServiceDefinition } from './serializable.js';
/** See also LinkedBundle. */
export var LinkedBundleTargetPlatform;
(function (LinkedBundleTargetPlatform) {
    /** BROWSER - A LinkedBundle for browser runtimes. */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["BROWSER"] = 0] = "BROWSER";
    /** V8 - A LinkedBundle for V8 runtimes. */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["V8"] = 1] = "V8";
    /**
     * SKINNY - An API definition that cannot be executed. This is a LinkedBundle with no
     * code and no dependencies.
     */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["SKINNY"] = 2] = "SKINNY";
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkedBundleTargetPlatform || (LinkedBundleTargetPlatform = {}));
export function linkedBundleTargetPlatformFromJSON(object) {
    switch (object) {
        case 0:
        case "BROWSER":
            return LinkedBundleTargetPlatform.BROWSER;
        case 1:
        case "V8":
            return LinkedBundleTargetPlatform.V8;
        case 2:
        case "SKINNY":
            return LinkedBundleTargetPlatform.SKINNY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LinkedBundleTargetPlatform.UNRECOGNIZED;
    }
}
export function linkedBundleTargetPlatformToJSON(object) {
    switch (object) {
        case LinkedBundleTargetPlatform.BROWSER:
            return 0;
        case LinkedBundleTargetPlatform.V8:
            return 1;
        case LinkedBundleTargetPlatform.SKINNY:
            return 2;
        case LinkedBundleTargetPlatform.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseActorSpec() {
    return { name: "", owner: "", version: "" };
}
export const ActorSpec = {
    $type: "devvit.runtime.ActorSpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            owner: isSet(object.owner) ? String(object.owner) : "",
            version: isSet(object.version) ? String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.owner !== undefined && (obj.owner = message.owner);
        message.version !== undefined && (obj.version = message.version);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseActorSpec();
        message.name = object.name ?? "";
        message.owner = object.owner ?? "";
        message.version = object.version ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.ActorSpec", ActorSpec);
function createBaseLocationFilter() {
    return { allow: [], deny: [] };
}
export const LocationFilter = {
    $type: "devvit.runtime.LocationFilter",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.allow) {
            writer.uint32(10).string(v);
        }
        for (const v of message.deny) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLocationFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allow.push(reader.string());
                    break;
                case 2:
                    message.deny.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            allow: Array.isArray(object?.allow) ? object.allow.map((e) => String(e)) : [],
            deny: Array.isArray(object?.deny) ? object.deny.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allow) {
            obj.allow = message.allow.map((e) => e);
        }
        else {
            obj.allow = [];
        }
        if (message.deny) {
            obj.deny = message.deny.map((e) => e);
        }
        else {
            obj.deny = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLocationFilter();
        message.allow = object.allow?.map((e) => e) || [];
        message.deny = object.deny?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.LocationFilter", LocationFilter);
function createBasePackageSpec() {
    return { actor: undefined, definition: undefined, locations: undefined, partitionsBy: [] };
}
export const PackageSpec = {
    $type: "devvit.runtime.PackageSpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.definition !== undefined) {
            SerializableServiceDefinition.encode(message.definition, writer.uint32(18).fork()).ldelim();
        }
        if (message.locations !== undefined) {
            LocationFilter.encode(message.locations, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.partitionsBy) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.definition = SerializableServiceDefinition.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.locations = LocationFilter.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.partitionsBy.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            definition: isSet(object.definition) ? SerializableServiceDefinition.fromJSON(object.definition) : undefined,
            locations: isSet(object.locations) ? LocationFilter.fromJSON(object.locations) : undefined,
            partitionsBy: Array.isArray(object?.partitionsBy) ? object.partitionsBy.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.actor !== undefined && (obj.actor = message.actor ? ActorSpec.toJSON(message.actor) : undefined);
        message.definition !== undefined &&
            (obj.definition = message.definition ? SerializableServiceDefinition.toJSON(message.definition) : undefined);
        message.locations !== undefined &&
            (obj.locations = message.locations ? LocationFilter.toJSON(message.locations) : undefined);
        if (message.partitionsBy) {
            obj.partitionsBy = message.partitionsBy.map((e) => e);
        }
        else {
            obj.partitionsBy = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBasePackageSpec();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.definition = (object.definition !== undefined && object.definition !== null)
            ? SerializableServiceDefinition.fromPartial(object.definition)
            : undefined;
        message.locations = (object.locations !== undefined && object.locations !== null)
            ? LocationFilter.fromPartial(object.locations)
            : undefined;
        message.partitionsBy = object.partitionsBy?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.PackageSpec", PackageSpec);
function createBasePackageQuery() {
    return { name: undefined, owner: undefined, typeName: "", versions: undefined };
}
export const PackageQuery = {
    $type: "devvit.runtime.PackageQuery",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(10).fork()).ldelim();
        }
        if (message.owner !== undefined) {
            StringValue.encode({ value: message.owner }, writer.uint32(18).fork()).ldelim();
        }
        if (message.typeName !== "") {
            writer.uint32(26).string(message.typeName);
        }
        if (message.versions !== undefined) {
            StringValue.encode({ value: message.versions }, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 2:
                    message.owner = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.typeName = reader.string();
                    break;
                case 4:
                    message.versions = StringValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            owner: isSet(object.owner) ? String(object.owner) : undefined,
            typeName: isSet(object.typeName) ? String(object.typeName) : "",
            versions: isSet(object.versions) ? String(object.versions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.owner !== undefined && (obj.owner = message.owner);
        message.typeName !== undefined && (obj.typeName = message.typeName);
        message.versions !== undefined && (obj.versions = message.versions);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePackageQuery();
        message.name = object.name ?? undefined;
        message.owner = object.owner ?? undefined;
        message.typeName = object.typeName ?? "";
        message.versions = object.versions ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.PackageQuery", PackageQuery);
function createBaseDependencySpec() {
    return { actor: undefined, hostname: "", provides: [], uses: [] };
}
export const DependencySpec = {
    $type: "devvit.runtime.DependencySpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        for (const v of message.provides) {
            PackageSpec.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.uses) {
            PackageQuery.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDependencySpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.hostname = reader.string();
                    break;
                case 3:
                    message.provides.push(PackageSpec.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.uses.push(PackageQuery.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
            provides: Array.isArray(object?.provides) ? object.provides.map((e) => PackageSpec.fromJSON(e)) : [],
            uses: Array.isArray(object?.uses) ? object.uses.map((e) => PackageQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.actor !== undefined && (obj.actor = message.actor ? ActorSpec.toJSON(message.actor) : undefined);
        message.hostname !== undefined && (obj.hostname = message.hostname);
        if (message.provides) {
            obj.provides = message.provides.map((e) => e ? PackageSpec.toJSON(e) : undefined);
        }
        else {
            obj.provides = [];
        }
        if (message.uses) {
            obj.uses = message.uses.map((e) => e ? PackageQuery.toJSON(e) : undefined);
        }
        else {
            obj.uses = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDependencySpec();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.hostname = object.hostname ?? "";
        message.provides = object.provides?.map((e) => PackageSpec.fromPartial(e)) || [];
        message.uses = object.uses?.map((e) => PackageQuery.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.DependencySpec", DependencySpec);
function createBaseLinkedBundle() {
    return {
        actor: undefined,
        code: "",
        hostname: "",
        provides: [],
        uses: [],
        buildInfo: undefined,
        assetsUrl: undefined,
        assets: {},
    };
}
export const LinkedBundle = {
    $type: "devvit.runtime.LinkedBundle",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.code !== "") {
            writer.uint32(18).string(message.code);
        }
        if (message.hostname !== "") {
            writer.uint32(26).string(message.hostname);
        }
        for (const v of message.provides) {
            SerializableServiceDefinition.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.uses) {
            LinkedBundle.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.buildInfo !== undefined) {
            BuildInfo.encode(message.buildInfo, writer.uint32(50).fork()).ldelim();
        }
        if (message.assetsUrl !== undefined) {
            StringValue.encode({ value: message.assetsUrl }, writer.uint32(58).fork()).ldelim();
        }
        Object.entries(message.assets).forEach(([key, value]) => {
            LinkedBundle_AssetsEntry.encode({ key: key, value }, writer.uint32(66).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.code = reader.string();
                    break;
                case 3:
                    message.hostname = reader.string();
                    break;
                case 4:
                    message.provides.push(SerializableServiceDefinition.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.uses.push(LinkedBundle.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.buildInfo = BuildInfo.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.assetsUrl = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 8:
                    const entry8 = LinkedBundle_AssetsEntry.decode(reader, reader.uint32());
                    if (entry8.value !== undefined) {
                        message.assets[entry8.key] = entry8.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            code: isSet(object.code) ? String(object.code) : "",
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
            provides: Array.isArray(object?.provides)
                ? object.provides.map((e) => SerializableServiceDefinition.fromJSON(e))
                : [],
            uses: Array.isArray(object?.uses) ? object.uses.map((e) => LinkedBundle.fromJSON(e)) : [],
            buildInfo: isSet(object.buildInfo) ? BuildInfo.fromJSON(object.buildInfo) : undefined,
            assetsUrl: isSet(object.assetsUrl) ? String(object.assetsUrl) : undefined,
            assets: isObject(object.assets)
                ? Object.entries(object.assets).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.actor !== undefined && (obj.actor = message.actor ? ActorSpec.toJSON(message.actor) : undefined);
        message.code !== undefined && (obj.code = message.code);
        message.hostname !== undefined && (obj.hostname = message.hostname);
        if (message.provides) {
            obj.provides = message.provides.map((e) => e ? SerializableServiceDefinition.toJSON(e) : undefined);
        }
        else {
            obj.provides = [];
        }
        if (message.uses) {
            obj.uses = message.uses.map((e) => e ? LinkedBundle.toJSON(e) : undefined);
        }
        else {
            obj.uses = [];
        }
        message.buildInfo !== undefined &&
            (obj.buildInfo = message.buildInfo ? BuildInfo.toJSON(message.buildInfo) : undefined);
        message.assetsUrl !== undefined && (obj.assetsUrl = message.assetsUrl);
        obj.assets = {};
        if (message.assets) {
            Object.entries(message.assets).forEach(([k, v]) => {
                obj.assets[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.code = object.code ?? "";
        message.hostname = object.hostname ?? "";
        message.provides = object.provides?.map((e) => SerializableServiceDefinition.fromPartial(e)) || [];
        message.uses = object.uses?.map((e) => LinkedBundle.fromPartial(e)) || [];
        message.buildInfo = (object.buildInfo !== undefined && object.buildInfo !== null)
            ? BuildInfo.fromPartial(object.buildInfo)
            : undefined;
        message.assetsUrl = object.assetsUrl ?? undefined;
        message.assets = Object.entries(object.assets ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.LinkedBundle", LinkedBundle);
function createBaseLinkedBundle_AssetsEntry() {
    return { key: "", value: "" };
}
export const LinkedBundle_AssetsEntry = {
    $type: "devvit.runtime.LinkedBundle.AssetsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle_AssetsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle_AssetsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.LinkedBundle.AssetsEntry", LinkedBundle_AssetsEntry);
function createBaseBuildInfo() {
    return { created: undefined, dependencies: {} };
}
export const BuildInfo = {
    $type: "devvit.runtime.BuildInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.created !== undefined) {
            Timestamp.encode(toTimestamp(message.created), writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.dependencies).forEach(([key, value]) => {
            BuildInfo_DependenciesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    const entry2 = BuildInfo_DependenciesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.dependencies[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
            dependencies: isObject(object.dependencies)
                ? Object.entries(object.dependencies).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.created !== undefined && (obj.created = message.created.toISOString());
        obj.dependencies = {};
        if (message.dependencies) {
            Object.entries(message.dependencies).forEach(([k, v]) => {
                obj.dependencies[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBuildInfo();
        message.created = object.created ?? undefined;
        message.dependencies = Object.entries(object.dependencies ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.BuildInfo", BuildInfo);
function createBaseBuildInfo_DependenciesEntry() {
    return { key: "", value: "" };
}
export const BuildInfo_DependenciesEntry = {
    $type: "devvit.runtime.BuildInfo.DependenciesEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildInfo_DependenciesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBuildInfo_DependenciesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.BuildInfo.DependenciesEntry", BuildInfo_DependenciesEntry);
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

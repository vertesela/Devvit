/**
 * #show_form.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { Form } from '../../form_builder/v1alpha/form.js';
import { FormFieldValue } from '../../form_builder/v1alpha/value.js';
function createBaseShowFormEffect() {
    return { form: undefined };
}
export const ShowFormEffect = {
    $type: "devvit.ui.effects.v1alpha.ShowFormEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.form !== undefined) {
            Form.encode(message.form, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShowFormEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.form = Form.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { form: isSet(object.form) ? Form.fromJSON(object.form) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.form !== undefined && (obj.form = message.form ? Form.toJSON(message.form) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseShowFormEffect();
        message.form = (object.form !== undefined && object.form !== null) ? Form.fromPartial(object.form) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.ShowFormEffect", ShowFormEffect);
function createBaseFormSubmittedEvent() {
    return { results: {}, formId: undefined };
}
export const FormSubmittedEvent = {
    $type: "devvit.ui.effects.v1alpha.FormSubmittedEvent",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.results).forEach(([key, value]) => {
            FormSubmittedEvent_ResultsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.formId !== undefined) {
            writer.uint32(18).string(message.formId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormSubmittedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = FormSubmittedEvent_ResultsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.results[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.formId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: isObject(object.results)
                ? Object.entries(object.results).reduce((acc, [key, value]) => {
                    acc[key] = FormFieldValue.fromJSON(value);
                    return acc;
                }, {})
                : {},
            formId: isSet(object.formId) ? String(object.formId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        obj.results = {};
        if (message.results) {
            Object.entries(message.results).forEach(([k, v]) => {
                obj.results[k] = FormFieldValue.toJSON(v);
            });
        }
        message.formId !== undefined && (obj.formId = message.formId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormSubmittedEvent();
        message.results = Object.entries(object.results ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = FormFieldValue.fromPartial(value);
            }
            return acc;
        }, {});
        message.formId = object.formId ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.FormSubmittedEvent", FormSubmittedEvent);
function createBaseFormSubmittedEvent_ResultsEntry() {
    return { key: "", value: undefined };
}
export const FormSubmittedEvent_ResultsEntry = {
    $type: "devvit.ui.effects.v1alpha.FormSubmittedEvent.ResultsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            FormFieldValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormSubmittedEvent_ResultsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = FormFieldValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? FormFieldValue.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? FormFieldValue.toJSON(message.value) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormSubmittedEvent_ResultsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? FormFieldValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.effects.v1alpha.FormSubmittedEvent.ResultsEntry", FormSubmittedEvent_ResultsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #toast.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
export var ToastAppearance;
(function (ToastAppearance) {
    ToastAppearance[ToastAppearance["NEUTRAL"] = 0] = "NEUTRAL";
    ToastAppearance[ToastAppearance["SUCCESS"] = 1] = "SUCCESS";
    ToastAppearance[ToastAppearance["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ToastAppearance || (ToastAppearance = {}));
export function toastAppearanceFromJSON(object) {
    switch (object) {
        case 0:
        case "NEUTRAL":
            return ToastAppearance.NEUTRAL;
        case 1:
        case "SUCCESS":
            return ToastAppearance.SUCCESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ToastAppearance.UNRECOGNIZED;
    }
}
export function toastAppearanceToJSON(object) {
    switch (object) {
        case ToastAppearance.NEUTRAL:
            return 0;
        case ToastAppearance.SUCCESS:
            return 1;
        case ToastAppearance.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseToastLeadingElement() {
    return { icon: undefined, emoji: undefined, avatar: undefined };
}
export const ToastLeadingElement = {
    $type: "devvit.ui.toast.ToastLeadingElement",
    encode(message, writer = _m0.Writer.create()) {
        if (message.icon !== undefined) {
            writer.uint32(10).string(message.icon);
        }
        if (message.emoji !== undefined) {
            writer.uint32(18).string(message.emoji);
        }
        if (message.avatar !== undefined) {
            writer.uint32(26).string(message.avatar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToastLeadingElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.icon = reader.string();
                    break;
                case 2:
                    message.emoji = reader.string();
                    break;
                case 3:
                    message.avatar = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            icon: isSet(object.icon) ? String(object.icon) : undefined,
            emoji: isSet(object.emoji) ? String(object.emoji) : undefined,
            avatar: isSet(object.avatar) ? String(object.avatar) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.icon !== undefined && (obj.icon = message.icon);
        message.emoji !== undefined && (obj.emoji = message.emoji);
        message.avatar !== undefined && (obj.avatar = message.avatar);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseToastLeadingElement();
        message.icon = object.icon ?? undefined;
        message.emoji = object.emoji ?? undefined;
        message.avatar = object.avatar ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.toast.ToastLeadingElement", ToastLeadingElement);
function createBaseToastTrailingElement() {
    return { label: undefined, icon: undefined };
}
export const ToastTrailingElement = {
    $type: "devvit.ui.toast.ToastTrailingElement",
    encode(message, writer = _m0.Writer.create()) {
        if (message.label !== undefined) {
            writer.uint32(10).string(message.label);
        }
        if (message.icon !== undefined) {
            writer.uint32(18).string(message.icon);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToastTrailingElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.label = reader.string();
                    break;
                case 2:
                    message.icon = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            label: isSet(object.label) ? String(object.label) : undefined,
            icon: isSet(object.icon) ? String(object.icon) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.label !== undefined && (obj.label = message.label);
        message.icon !== undefined && (obj.icon = message.icon);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseToastTrailingElement();
        message.label = object.label ?? undefined;
        message.icon = object.icon ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.toast.ToastTrailingElement", ToastTrailingElement);
function createBaseToast() {
    return { text: "", appearance: undefined, leadingElement: undefined, trailingElement: undefined };
}
export const Toast = {
    $type: "devvit.ui.toast.Toast",
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.appearance !== undefined) {
            writer.uint32(16).int32(message.appearance);
        }
        if (message.leadingElement !== undefined) {
            ToastLeadingElement.encode(message.leadingElement, writer.uint32(26).fork()).ldelim();
        }
        if (message.trailingElement !== undefined) {
            ToastTrailingElement.encode(message.trailingElement, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToast();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.text = reader.string();
                    break;
                case 2:
                    message.appearance = reader.int32();
                    break;
                case 3:
                    message.leadingElement = ToastLeadingElement.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.trailingElement = ToastTrailingElement.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? String(object.text) : "",
            appearance: isSet(object.appearance) ? toastAppearanceFromJSON(object.appearance) : undefined,
            leadingElement: isSet(object.leadingElement) ? ToastLeadingElement.fromJSON(object.leadingElement) : undefined,
            trailingElement: isSet(object.trailingElement)
                ? ToastTrailingElement.fromJSON(object.trailingElement)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.text !== undefined && (obj.text = message.text);
        message.appearance !== undefined &&
            (obj.appearance = message.appearance !== undefined ? toastAppearanceToJSON(message.appearance) : undefined);
        message.leadingElement !== undefined &&
            (obj.leadingElement = message.leadingElement ? ToastLeadingElement.toJSON(message.leadingElement) : undefined);
        message.trailingElement !== undefined &&
            (obj.trailingElement = message.trailingElement
                ? ToastTrailingElement.toJSON(message.trailingElement)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseToast();
        message.text = object.text ?? "";
        message.appearance = object.appearance ?? undefined;
        message.leadingElement = (object.leadingElement !== undefined && object.leadingElement !== null)
            ? ToastLeadingElement.fromPartial(object.leadingElement)
            : undefined;
        message.trailingElement = (object.trailingElement !== undefined && object.trailingElement !== null)
            ? ToastTrailingElement.fromPartial(object.trailingElement)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.toast.Toast", Toast);
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #postv2.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { LinkFlairV2, UserFlairV2 } from './flair.js';
export declare enum CrowdControlLevel {
    OFF = 0,
    LENIENT = 1,
    MEDIUM = 2,
    STRICT = 3,
    UNRECOGNIZED = -1
}
export declare function crowdControlLevelFromJSON(object: any): CrowdControlLevel;
export declare function crowdControlLevelToJSON(object: CrowdControlLevel): number;
export declare enum DistinguishType {
    NULL_VALUE = 0,
    ADMIN = 1,
    GOLD = 2,
    GOLD_AUTO = 3,
    YES = 4,
    SPECIAL = 5,
    UNRECOGNIZED = -1
}
export declare function distinguishTypeFromJSON(object: any): DistinguishType;
export declare function distinguishTypeToJSON(object: DistinguishType): number;
export interface PostV2 {
    id: string;
    title: string;
    /** rename to text? */
    selftext: string;
    nsfw: boolean;
    authorId: string;
    crowdControlLevel: CrowdControlLevel;
    numReports: number;
    isGallery: boolean;
    isMeta: boolean;
    createdAt: number;
    isApproved: boolean;
    isArchived: boolean;
    distinguished: DistinguishType;
    ignoreReports: boolean;
    isSelf: boolean;
    isVideo: boolean;
    isLocked: boolean;
    isSpoiler: boolean;
    subredditId: string;
    upvotes: number;
    downvotes: number;
    url: string;
    isSticky: boolean;
    linkFlair?: LinkFlairV2;
    authorFlair?: UserFlairV2;
    spam: boolean;
    deleted: boolean;
    languageCode: string;
    updatedAt: number;
    gildings: number;
    score: number;
    numComments: number;
    thumbnail: string;
    media?: MediaObject;
    crosspostParentId: string;
    permalink: string;
    isPoll: boolean;
    isPromoted: boolean;
    isMultiMedia: boolean;
}
export interface Oembed {
    type: string;
    version: string;
    title: string;
    description: string;
    authorName: string;
    authorUrl: string;
    providerName: string;
    providerUrl: string;
    thumbnailUrl: string;
    thumbnailWidth: number;
    thumbnailHeight: number;
    html: string;
    width: number;
    height: number;
}
export interface RedditVideo {
    bitrateKbps: number;
    fallbackUrl: string;
    height: number;
    width: number;
    scrubberMediaUrl: string;
    dashUrl: string;
    duration: number;
    hlsUrl: string;
    isGif: boolean;
    transcodingStatus: string;
}
export interface MediaObject {
    type: string;
    oembed?: Oembed;
    redditVideo?: RedditVideo;
}
export declare const PostV2: {
    $type: "devvit.reddit.v2alpha.PostV2";
    encode(message: PostV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostV2;
    fromJSON(object: any): PostV2;
    toJSON(message: PostV2): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        title?: string | undefined;
        selftext?: string | undefined;
        nsfw?: boolean | undefined;
        authorId?: string | undefined;
        crowdControlLevel?: CrowdControlLevel | undefined;
        numReports?: number | undefined;
        isGallery?: boolean | undefined;
        isMeta?: boolean | undefined;
        createdAt?: number | undefined;
        isApproved?: boolean | undefined;
        isArchived?: boolean | undefined;
        distinguished?: DistinguishType | undefined;
        ignoreReports?: boolean | undefined;
        isSelf?: boolean | undefined;
        isVideo?: boolean | undefined;
        isLocked?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        subredditId?: string | undefined;
        upvotes?: number | undefined;
        downvotes?: number | undefined;
        url?: string | undefined;
        isSticky?: boolean | undefined;
        linkFlair?: {
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } | undefined;
        authorFlair?: {
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } | undefined;
        spam?: boolean | undefined;
        deleted?: boolean | undefined;
        languageCode?: string | undefined;
        updatedAt?: number | undefined;
        gildings?: number | undefined;
        score?: number | undefined;
        numComments?: number | undefined;
        thumbnail?: string | undefined;
        media?: {
            type?: string | undefined;
            oembed?: {
                type?: string | undefined;
                version?: string | undefined;
                title?: string | undefined;
                description?: string | undefined;
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                providerName?: string | undefined;
                providerUrl?: string | undefined;
                thumbnailUrl?: string | undefined;
                thumbnailWidth?: number | undefined;
                thumbnailHeight?: number | undefined;
                html?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
            } | undefined;
            redditVideo?: {
                bitrateKbps?: number | undefined;
                fallbackUrl?: string | undefined;
                height?: number | undefined;
                width?: number | undefined;
                scrubberMediaUrl?: string | undefined;
                dashUrl?: string | undefined;
                duration?: number | undefined;
                hlsUrl?: string | undefined;
                isGif?: boolean | undefined;
                transcodingStatus?: string | undefined;
            } | undefined;
        } | undefined;
        crosspostParentId?: string | undefined;
        permalink?: string | undefined;
        isPoll?: boolean | undefined;
        isPromoted?: boolean | undefined;
        isMultiMedia?: boolean | undefined;
    } & {
        id?: string | undefined;
        title?: string | undefined;
        selftext?: string | undefined;
        nsfw?: boolean | undefined;
        authorId?: string | undefined;
        crowdControlLevel?: CrowdControlLevel | undefined;
        numReports?: number | undefined;
        isGallery?: boolean | undefined;
        isMeta?: boolean | undefined;
        createdAt?: number | undefined;
        isApproved?: boolean | undefined;
        isArchived?: boolean | undefined;
        distinguished?: DistinguishType | undefined;
        ignoreReports?: boolean | undefined;
        isSelf?: boolean | undefined;
        isVideo?: boolean | undefined;
        isLocked?: boolean | undefined;
        isSpoiler?: boolean | undefined;
        subredditId?: string | undefined;
        upvotes?: number | undefined;
        downvotes?: number | undefined;
        url?: string | undefined;
        isSticky?: boolean | undefined;
        linkFlair?: ({
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } & {
            text?: string | undefined;
            cssClass?: string | undefined;
            backgroundColor?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
        } & { [K in Exclude<keyof I["linkFlair"], "$type" | keyof LinkFlairV2>]: never; }) | undefined;
        authorFlair?: ({
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } & {
            userId?: string | undefined;
            subredditId?: string | undefined;
            text?: string | undefined;
            cssClass?: string | undefined;
            templateId?: string | undefined;
            textColor?: string | undefined;
            backgroundColor?: string | undefined;
            enabled?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["authorFlair"], "$type" | keyof UserFlairV2>]: never; }) | undefined;
        spam?: boolean | undefined;
        deleted?: boolean | undefined;
        languageCode?: string | undefined;
        updatedAt?: number | undefined;
        gildings?: number | undefined;
        score?: number | undefined;
        numComments?: number | undefined;
        thumbnail?: string | undefined;
        media?: ({
            type?: string | undefined;
            oembed?: {
                type?: string | undefined;
                version?: string | undefined;
                title?: string | undefined;
                description?: string | undefined;
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                providerName?: string | undefined;
                providerUrl?: string | undefined;
                thumbnailUrl?: string | undefined;
                thumbnailWidth?: number | undefined;
                thumbnailHeight?: number | undefined;
                html?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
            } | undefined;
            redditVideo?: {
                bitrateKbps?: number | undefined;
                fallbackUrl?: string | undefined;
                height?: number | undefined;
                width?: number | undefined;
                scrubberMediaUrl?: string | undefined;
                dashUrl?: string | undefined;
                duration?: number | undefined;
                hlsUrl?: string | undefined;
                isGif?: boolean | undefined;
                transcodingStatus?: string | undefined;
            } | undefined;
        } & {
            type?: string | undefined;
            oembed?: ({
                type?: string | undefined;
                version?: string | undefined;
                title?: string | undefined;
                description?: string | undefined;
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                providerName?: string | undefined;
                providerUrl?: string | undefined;
                thumbnailUrl?: string | undefined;
                thumbnailWidth?: number | undefined;
                thumbnailHeight?: number | undefined;
                html?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
            } & {
                type?: string | undefined;
                version?: string | undefined;
                title?: string | undefined;
                description?: string | undefined;
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                providerName?: string | undefined;
                providerUrl?: string | undefined;
                thumbnailUrl?: string | undefined;
                thumbnailWidth?: number | undefined;
                thumbnailHeight?: number | undefined;
                html?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
            } & { [K_2 in Exclude<keyof I["media"]["oembed"], "$type" | keyof Oembed>]: never; }) | undefined;
            redditVideo?: ({
                bitrateKbps?: number | undefined;
                fallbackUrl?: string | undefined;
                height?: number | undefined;
                width?: number | undefined;
                scrubberMediaUrl?: string | undefined;
                dashUrl?: string | undefined;
                duration?: number | undefined;
                hlsUrl?: string | undefined;
                isGif?: boolean | undefined;
                transcodingStatus?: string | undefined;
            } & {
                bitrateKbps?: number | undefined;
                fallbackUrl?: string | undefined;
                height?: number | undefined;
                width?: number | undefined;
                scrubberMediaUrl?: string | undefined;
                dashUrl?: string | undefined;
                duration?: number | undefined;
                hlsUrl?: string | undefined;
                isGif?: boolean | undefined;
                transcodingStatus?: string | undefined;
            } & { [K_3 in Exclude<keyof I["media"]["redditVideo"], "$type" | keyof RedditVideo>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["media"], "$type" | keyof MediaObject>]: never; }) | undefined;
        crosspostParentId?: string | undefined;
        permalink?: string | undefined;
        isPoll?: boolean | undefined;
        isPromoted?: boolean | undefined;
        isMultiMedia?: boolean | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof PostV2>]: never; }>(object: I): PostV2;
};
export declare const Oembed: {
    $type: "devvit.reddit.v2alpha.Oembed";
    encode(message: Oembed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Oembed;
    fromJSON(object: any): Oembed;
    toJSON(message: Oembed): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        version?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        authorName?: string | undefined;
        authorUrl?: string | undefined;
        providerName?: string | undefined;
        providerUrl?: string | undefined;
        thumbnailUrl?: string | undefined;
        thumbnailWidth?: number | undefined;
        thumbnailHeight?: number | undefined;
        html?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
    } & {
        type?: string | undefined;
        version?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        authorName?: string | undefined;
        authorUrl?: string | undefined;
        providerName?: string | undefined;
        providerUrl?: string | undefined;
        thumbnailUrl?: string | undefined;
        thumbnailWidth?: number | undefined;
        thumbnailHeight?: number | undefined;
        html?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Oembed>]: never; }>(object: I): Oembed;
};
export declare const RedditVideo: {
    $type: "devvit.reddit.v2alpha.RedditVideo";
    encode(message: RedditVideo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedditVideo;
    fromJSON(object: any): RedditVideo;
    toJSON(message: RedditVideo): unknown;
    fromPartial<I extends {
        bitrateKbps?: number | undefined;
        fallbackUrl?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        scrubberMediaUrl?: string | undefined;
        dashUrl?: string | undefined;
        duration?: number | undefined;
        hlsUrl?: string | undefined;
        isGif?: boolean | undefined;
        transcodingStatus?: string | undefined;
    } & {
        bitrateKbps?: number | undefined;
        fallbackUrl?: string | undefined;
        height?: number | undefined;
        width?: number | undefined;
        scrubberMediaUrl?: string | undefined;
        dashUrl?: string | undefined;
        duration?: number | undefined;
        hlsUrl?: string | undefined;
        isGif?: boolean | undefined;
        transcodingStatus?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RedditVideo>]: never; }>(object: I): RedditVideo;
};
export declare const MediaObject: {
    $type: "devvit.reddit.v2alpha.MediaObject";
    encode(message: MediaObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaObject;
    fromJSON(object: any): MediaObject;
    toJSON(message: MediaObject): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        oembed?: {
            type?: string | undefined;
            version?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorName?: string | undefined;
            authorUrl?: string | undefined;
            providerName?: string | undefined;
            providerUrl?: string | undefined;
            thumbnailUrl?: string | undefined;
            thumbnailWidth?: number | undefined;
            thumbnailHeight?: number | undefined;
            html?: string | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } | undefined;
        redditVideo?: {
            bitrateKbps?: number | undefined;
            fallbackUrl?: string | undefined;
            height?: number | undefined;
            width?: number | undefined;
            scrubberMediaUrl?: string | undefined;
            dashUrl?: string | undefined;
            duration?: number | undefined;
            hlsUrl?: string | undefined;
            isGif?: boolean | undefined;
            transcodingStatus?: string | undefined;
        } | undefined;
    } & {
        type?: string | undefined;
        oembed?: ({
            type?: string | undefined;
            version?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorName?: string | undefined;
            authorUrl?: string | undefined;
            providerName?: string | undefined;
            providerUrl?: string | undefined;
            thumbnailUrl?: string | undefined;
            thumbnailWidth?: number | undefined;
            thumbnailHeight?: number | undefined;
            html?: string | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } & {
            type?: string | undefined;
            version?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorName?: string | undefined;
            authorUrl?: string | undefined;
            providerName?: string | undefined;
            providerUrl?: string | undefined;
            thumbnailUrl?: string | undefined;
            thumbnailWidth?: number | undefined;
            thumbnailHeight?: number | undefined;
            html?: string | undefined;
            width?: number | undefined;
            height?: number | undefined;
        } & { [K in Exclude<keyof I["oembed"], "$type" | keyof Oembed>]: never; }) | undefined;
        redditVideo?: ({
            bitrateKbps?: number | undefined;
            fallbackUrl?: string | undefined;
            height?: number | undefined;
            width?: number | undefined;
            scrubberMediaUrl?: string | undefined;
            dashUrl?: string | undefined;
            duration?: number | undefined;
            hlsUrl?: string | undefined;
            isGif?: boolean | undefined;
            transcodingStatus?: string | undefined;
        } & {
            bitrateKbps?: number | undefined;
            fallbackUrl?: string | undefined;
            height?: number | undefined;
            width?: number | undefined;
            scrubberMediaUrl?: string | undefined;
            dashUrl?: string | undefined;
            duration?: number | undefined;
            hlsUrl?: string | undefined;
            isGif?: boolean | undefined;
            transcodingStatus?: string | undefined;
        } & { [K_1 in Exclude<keyof I["redditVideo"], "$type" | keyof RedditVideo>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof MediaObject>]: never; }>(object: I): MediaObject;
};
//# sourceMappingURL=postv2.d.ts.map
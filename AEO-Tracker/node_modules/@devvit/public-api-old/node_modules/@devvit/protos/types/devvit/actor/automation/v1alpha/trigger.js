/**
 * #trigger.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
/**
 * The type of data the trigger will produce
 * This is the type of data that will serve as the input
 */
export var TriggerType;
(function (TriggerType) {
    /** POST - Trigger will result in a Post */
    TriggerType[TriggerType["POST"] = 0] = "POST";
    /** COMMENT - Trigger will result in a Comment */
    TriggerType[TriggerType["COMMENT"] = 1] = "COMMENT";
    /** USER - Trigger will result in a User */
    TriggerType[TriggerType["USER"] = 2] = "USER";
    TriggerType[TriggerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TriggerType || (TriggerType = {}));
export function triggerTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "POST":
            return TriggerType.POST;
        case 1:
        case "COMMENT":
            return TriggerType.COMMENT;
        case 2:
        case "USER":
            return TriggerType.USER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TriggerType.UNRECOGNIZED;
    }
}
export function triggerTypeToJSON(object) {
    switch (object) {
        case TriggerType.POST:
            return 0;
        case TriggerType.COMMENT:
            return 1;
        case TriggerType.USER:
            return 2;
        case TriggerType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseTrigger() {
    return { id: "", name: "", label: "", type: 0 };
}
export const Trigger = {
    $type: "devvit.actor.automation.v1alpha.Trigger",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.label !== "") {
            writer.uint32(26).string(message.label);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrigger();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.label = reader.string();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            label: isSet(object.label) ? String(object.label) : "",
            type: isSet(object.type) ? triggerTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.label !== undefined && (obj.label = message.label);
        message.type !== undefined && (obj.type = triggerTypeToJSON(message.type));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTrigger();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.label = object.label ?? "";
        message.type = object.type ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.Trigger", Trigger);
function isSet(value) {
    return value !== null && value !== undefined;
}

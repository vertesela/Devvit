/**
 * #realtime.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { Empty } from '../../../google/protobuf/empty.js';
import { Value } from '../../../google/protobuf/struct.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseRealtimeRequest() {
    return { channels: [] };
}
export const RealtimeRequest = {
    $type: "devvit.events.v1alpha.RealtimeRequest",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.channels) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channels.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { channels: Array.isArray(object?.channels) ? object.channels.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.channels) {
            obj.channels = message.channels.map((e) => e);
        }
        else {
            obj.channels = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRealtimeRequest();
        message.channels = object.channels?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.RealtimeRequest", RealtimeRequest);
function createBaseRealtimeEvent() {
    return { channel: "", data: undefined };
}
export const RealtimeEvent = {
    $type: "devvit.events.v1alpha.RealtimeEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        if (message.data !== undefined) {
            Value.encode(Value.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channel = reader.string();
                    break;
                case 2:
                    message.data = Value.unwrap(Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel: isSet(object.channel) ? String(object.channel) : "",
            data: isSet(object?.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.channel !== undefined && (obj.channel = message.channel);
        message.data !== undefined && (obj.data = message.data);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRealtimeEvent();
        message.channel = object.channel ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.events.v1alpha.RealtimeEvent", RealtimeEvent);
export class RealtimeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.events.v1alpha.Realtime";
        this.rpc = rpc;
        this.Subscribe = this.Subscribe.bind(this);
        this.Send = this.Send.bind(this);
    }
    Subscribe(request) {
        const data = RealtimeRequest.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Subscribe", data);
        return result.pipe(map((data) => RealtimeEvent.decode(new _m0.Reader(data))));
    }
    Send(request) {
        const data = RealtimeEvent.encode(request).finish();
        const promise = this.rpc.request(this.service, "Send", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const RealtimeDefinition = {
    name: "Realtime",
    fullName: "devvit.events.v1alpha.Realtime",
    methods: {
        subscribe: {
            name: "Subscribe",
            requestType: RealtimeRequest,
            requestStream: false,
            responseType: RealtimeEvent,
            responseStream: true,
            options: {},
        },
        send: {
            name: "Send",
            requestType: RealtimeEvent,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

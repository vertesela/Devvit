/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { Empty } from '../../../google/protobuf/empty.js';
import { IsCurrentUserRegisteredResponse, WaitlistRegisterUserRequest, WaitlistRegisterUserResponse, GetCurrentUserStatusResponse } from './waitlist.js';
export interface WaitlistTwirp<T extends TwirpContext = TwirpContext> {
    IsCurrentUserRegistered(ctx: T, request: Empty): Promise<IsCurrentUserRegisteredResponse>;
    RegisterUser(ctx: T, request: WaitlistRegisterUserRequest): Promise<WaitlistRegisterUserResponse>;
    GetCurrentUserStatus(ctx: T, request: Empty): Promise<GetCurrentUserStatusResponse>;
    AcceptTermsAndConditions(ctx: T, request: Empty): Promise<Empty>;
}
export declare enum WaitlistMethod {
    IsCurrentUserRegistered = "IsCurrentUserRegistered",
    RegisterUser = "RegisterUser",
    GetCurrentUserStatus = "GetCurrentUserStatus",
    AcceptTermsAndConditions = "AcceptTermsAndConditions"
}
export declare const WaitlistMethodList: WaitlistMethod[];
export declare function createWaitlistServer<T extends TwirpContext = TwirpContext>(service: WaitlistTwirp<T>): TwirpServer<WaitlistTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
//# sourceMappingURL=waitlist.twirp.d.ts.map
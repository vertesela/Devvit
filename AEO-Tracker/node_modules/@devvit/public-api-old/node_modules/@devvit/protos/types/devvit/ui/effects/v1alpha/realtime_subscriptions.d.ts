/**
 * #realtime_subscriptions.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { RealtimeEvent } from '../../../events/v1alpha/realtime.js';
export declare enum RealtimeSubscriptionStatus {
    REALTIME_SUBSCRIBED = 0,
    REALTIME_UNSUBSCRIBED = 1,
    UNRECOGNIZED = -1
}
export declare function realtimeSubscriptionStatusFromJSON(object: any): RealtimeSubscriptionStatus;
export declare function realtimeSubscriptionStatusToJSON(object: RealtimeSubscriptionStatus): number;
/** Instruct the client to subscribe to realtime events */
export interface RealtimeSubscriptionsEffect {
    /** List of IDs the client should be subscribed to */
    subscriptionIds: string[];
}
export interface RealtimeSubscriptionEvent {
    /** Event data from the subscription */
    event?: RealtimeEvent;
    /** If set, this event signals a change in the subscription status */
    status?: RealtimeSubscriptionStatus | undefined;
}
export declare const RealtimeSubscriptionsEffect: {
    $type: "devvit.ui.effects.v1alpha.RealtimeSubscriptionsEffect";
    encode(message: RealtimeSubscriptionsEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeSubscriptionsEffect;
    fromJSON(object: any): RealtimeSubscriptionsEffect;
    toJSON(message: RealtimeSubscriptionsEffect): unknown;
    fromPartial<I extends {
        subscriptionIds?: string[] | undefined;
    } & {
        subscriptionIds?: (string[] & string[] & { [K in Exclude<keyof I["subscriptionIds"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "subscriptionIds">]: never; }>(object: I): RealtimeSubscriptionsEffect;
};
export declare const RealtimeSubscriptionEvent: {
    $type: "devvit.ui.effects.v1alpha.RealtimeSubscriptionEvent";
    encode(message: RealtimeSubscriptionEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeSubscriptionEvent;
    fromJSON(object: any): RealtimeSubscriptionEvent;
    toJSON(message: RealtimeSubscriptionEvent): unknown;
    fromPartial<I extends {
        event?: {
            channel?: string | undefined;
            data?: any;
        } | undefined;
        status?: RealtimeSubscriptionStatus | undefined;
    } & {
        event?: ({
            channel?: string | undefined;
            data?: any;
        } & {
            channel?: string | undefined;
            data?: any;
        } & { [K in Exclude<keyof I["event"], "$type" | keyof RealtimeEvent>]: never; }) | undefined;
        status?: RealtimeSubscriptionStatus | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof RealtimeSubscriptionEvent>]: never; }>(object: I): RealtimeSubscriptionEvent;
};
//# sourceMappingURL=realtime_subscriptions.d.ts.map
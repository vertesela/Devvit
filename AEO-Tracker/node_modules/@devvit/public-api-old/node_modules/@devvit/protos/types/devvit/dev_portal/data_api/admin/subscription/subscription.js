/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { DataSubscription } from '../../../../data/api/v1alpha/admin.js';
import { dataTierFromJSON, dataTierToJSON, firehoseEventFromJSON, firehoseEventToJSON, } from '../../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON, } from '../../../../reddit/v2alpha/subredditv2.js';
function createBaseCreateDataSubscriptionRequest() {
    return { tier: 0, events: [], subreddits: [], subredditRatings: [], customer: "", name: "", description: undefined };
}
export const CreateDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tier !== 0) {
            writer.uint32(8).int32(message.tier);
        }
        writer.uint32(18).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(26).string(v);
        }
        writer.uint32(34).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.customer !== "") {
            writer.uint32(42).string(message.customer);
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(58).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tier = reader.int32();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                    }
                    else {
                        message.events.push(reader.int32());
                    }
                    break;
                case 3:
                    message.subreddits.push(reader.string());
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                    }
                    else {
                        message.subredditRatings.push(reader.int32());
                    }
                    break;
                case 5:
                    message.customer = reader.string();
                    break;
                case 6:
                    message.name = reader.string();
                    break;
                case 7:
                    message.description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tier: isSet(object.tier) ? dataTierFromJSON(object.tier) : 0,
            events: Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: Array.isArray(object?.subreddits) ? object.subreddits.map((e) => String(e)) : [],
            subredditRatings: Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
            customer: isSet(object.customer) ? String(object.customer) : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.tier !== undefined && (obj.tier = dataTierToJSON(message.tier));
        if (message.events) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        else {
            obj.events = [];
        }
        if (message.subreddits) {
            obj.subreddits = message.subreddits.map((e) => e);
        }
        else {
            obj.subreddits = [];
        }
        if (message.subredditRatings) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        else {
            obj.subredditRatings = [];
        }
        message.customer !== undefined && (obj.customer = message.customer);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateDataSubscriptionRequest();
        message.tier = object.tier ?? 0;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        message.customer = object.customer ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest", CreateDataSubscriptionRequest);
function createBaseCreateDataSubscriptionResponse() {
    return { subscription: undefined };
}
export const CreateDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.subscription !== undefined &&
            (obj.subscription = message.subscription ? DataSubscription.toJSON(message.subscription) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateDataSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse", CreateDataSubscriptionResponse);
function createBaseGetDataSubscriptionByIdRequest() {
    return { subscriptionId: "" };
}
export const GetDataSubscriptionByIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscriptionId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.subscriptionId !== undefined && (obj.subscriptionId = message.subscriptionId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionByIdRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest", GetDataSubscriptionByIdRequest);
function createBaseGetDataSubscriptionByIdResponse() {
    return { subscription: undefined };
}
export const GetDataSubscriptionByIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.subscription !== undefined &&
            (obj.subscription = message.subscription ? DataSubscription.toJSON(message.subscription) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionByIdResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse", GetDataSubscriptionByIdResponse);
function createBaseGetDataSubscriptionsByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetDataSubscriptionsByOrganizationNameRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionsByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizationName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.organizationName !== undefined && (obj.organizationName = message.organizationName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionsByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest", GetDataSubscriptionsByOrganizationNameRequest);
function createBaseGetDataSubscriptionsByOrganizationNameResponse() {
    return { subscriptions: [] };
}
export const GetDataSubscriptionsByOrganizationNameResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptions) {
            DataSubscription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionsByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscriptions.push(DataSubscription.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => DataSubscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptions) {
            obj.subscriptions = message.subscriptions.map((e) => e ? DataSubscription.toJSON(e) : undefined);
        }
        else {
            obj.subscriptions = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionsByOrganizationNameResponse();
        message.subscriptions = object.subscriptions?.map((e) => DataSubscription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse", GetDataSubscriptionsByOrganizationNameResponse);
function createBaseUpdateDataSubscriptionRequest() {
    return {
        subscriptionId: "",
        name: undefined,
        description: undefined,
        tier: undefined,
        events: [],
        subreddits: [],
        subredditRatings: [],
    };
}
export const UpdateDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.tier !== undefined) {
            writer.uint32(32).int32(message.tier);
        }
        writer.uint32(42).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(50).string(v);
        }
        writer.uint32(58).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscriptionId = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.tier = reader.int32();
                    break;
                case 5:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                    }
                    else {
                        message.events.push(reader.int32());
                    }
                    break;
                case 6:
                    message.subreddits.push(reader.string());
                    break;
                case 7:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                    }
                    else {
                        message.subredditRatings.push(reader.int32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptionId: isSet(object.subscriptionId) ? String(object.subscriptionId) : "",
            name: isSet(object.name) ? String(object.name) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            tier: isSet(object.tier) ? dataTierFromJSON(object.tier) : undefined,
            events: Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: Array.isArray(object?.subreddits) ? object.subreddits.map((e) => String(e)) : [],
            subredditRatings: Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.subscriptionId !== undefined && (obj.subscriptionId = message.subscriptionId);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        message.tier !== undefined && (obj.tier = message.tier !== undefined ? dataTierToJSON(message.tier) : undefined);
        if (message.events) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        else {
            obj.events = [];
        }
        if (message.subreddits) {
            obj.subreddits = message.subreddits.map((e) => e);
        }
        else {
            obj.subreddits = [];
        }
        if (message.subredditRatings) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        else {
            obj.subredditRatings = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateDataSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.tier = object.tier ?? undefined;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest", UpdateDataSubscriptionRequest);
function createBaseUpdateDataSubscriptionResponse() {
    return { subscription: undefined };
}
export const UpdateDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.subscription !== undefined &&
            (obj.subscription = message.subscription ? DataSubscription.toJSON(message.subscription) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateDataSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse", UpdateDataSubscriptionResponse);
function createBaseDeleteDataSubscriptionRequest() {
    return { subscriptionId: "" };
}
export const DeleteDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscriptionId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.subscriptionId !== undefined && (obj.subscriptionId = message.subscriptionId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDeleteDataSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest", DeleteDataSubscriptionRequest);
function createBaseDeleteDataSubscriptionResponse() {
    return {};
}
export const DeleteDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseDeleteDataSubscriptionResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse", DeleteDataSubscriptionResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}

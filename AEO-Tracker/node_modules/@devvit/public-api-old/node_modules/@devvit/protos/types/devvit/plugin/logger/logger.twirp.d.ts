/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { LogErrorMessage, LogErrorResponse, LogEventMessage, LogEventResponse, LogMessage, LogResponse } from './logger.js';
export interface LoggerTwirp<T extends TwirpContext = TwirpContext> {
    Error(ctx: T, request: LogErrorMessage): Promise<LogErrorResponse>;
    Event(ctx: T, request: LogEventMessage): Promise<LogEventResponse>;
    Log(ctx: T, request: LogMessage): Promise<LogResponse>;
}
export declare enum LoggerMethod {
    Error = "Error",
    Event = "Event",
    Log = "Log"
}
export declare const LoggerMethodList: LoggerMethod[];
export declare function createLoggerServer<T extends TwirpContext = TwirpContext>(service: LoggerTwirp<T>): TwirpServer<LoggerTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse>>, T>;
//# sourceMappingURL=logger.twirp.d.ts.map
/**
 * #glrenderer.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { GLMethod } from './methods.js';
import { GLMethodType } from './methodtype.js';
export interface CommandArgument {
    null: boolean | undefined;
    scalar?: any;
    blob: Uint8Array | undefined;
    referenceId: number | undefined;
}
export interface GLCommand {
    method: GLMethod;
    type: GLMethodType;
    args: CommandArgument[];
    referenceId: number;
}
export interface ExecuteMessage {
    commands: GLCommand[];
}
export declare const CommandArgument: {
    $type: "devvit.plugin.gl.CommandArgument";
    encode(message: CommandArgument, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandArgument;
    fromJSON(object: any): CommandArgument;
    toJSON(message: CommandArgument): unknown;
    fromPartial<I extends {
        null?: boolean | undefined;
        scalar?: any;
        blob?: Uint8Array | undefined;
        referenceId?: number | undefined;
    } & {
        null?: boolean | undefined;
        scalar?: any;
        blob?: Uint8Array | undefined;
        referenceId?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CommandArgument>]: never; }>(object: I): CommandArgument;
};
export declare const GLCommand: {
    $type: "devvit.plugin.gl.GLCommand";
    encode(message: GLCommand, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GLCommand;
    fromJSON(object: any): GLCommand;
    toJSON(message: GLCommand): unknown;
    fromPartial<I extends {
        method?: GLMethod | undefined;
        type?: GLMethodType | undefined;
        args?: {
            null?: boolean | undefined;
            scalar?: any;
            blob?: Uint8Array | undefined;
            referenceId?: number | undefined;
        }[] | undefined;
        referenceId?: number | undefined;
    } & {
        method?: GLMethod | undefined;
        type?: GLMethodType | undefined;
        args?: ({
            null?: boolean | undefined;
            scalar?: any;
            blob?: Uint8Array | undefined;
            referenceId?: number | undefined;
        }[] & ({
            null?: boolean | undefined;
            scalar?: any;
            blob?: Uint8Array | undefined;
            referenceId?: number | undefined;
        } & {
            null?: boolean | undefined;
            scalar?: any;
            blob?: Uint8Array | undefined;
            referenceId?: number | undefined;
        } & { [K in Exclude<keyof I["args"][number], "$type" | keyof CommandArgument>]: never; })[] & { [K_1 in Exclude<keyof I["args"], "$type" | keyof {
            null?: boolean | undefined;
            scalar?: any;
            blob?: Uint8Array | undefined;
            referenceId?: number | undefined;
        }[]>]: never; }) | undefined;
        referenceId?: number | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof GLCommand>]: never; }>(object: I): GLCommand;
};
export declare const ExecuteMessage: {
    $type: "devvit.plugin.gl.ExecuteMessage";
    encode(message: ExecuteMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteMessage;
    fromJSON(object: any): ExecuteMessage;
    toJSON(message: ExecuteMessage): unknown;
    fromPartial<I extends {
        commands?: {
            method?: GLMethod | undefined;
            type?: GLMethodType | undefined;
            args?: {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[] | undefined;
            referenceId?: number | undefined;
        }[] | undefined;
    } & {
        commands?: ({
            method?: GLMethod | undefined;
            type?: GLMethodType | undefined;
            args?: {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[] | undefined;
            referenceId?: number | undefined;
        }[] & ({
            method?: GLMethod | undefined;
            type?: GLMethodType | undefined;
            args?: {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[] | undefined;
            referenceId?: number | undefined;
        } & {
            method?: GLMethod | undefined;
            type?: GLMethodType | undefined;
            args?: ({
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[] & ({
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            } & {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            } & { [K in Exclude<keyof I["commands"][number]["args"][number], "$type" | keyof CommandArgument>]: never; })[] & { [K_1 in Exclude<keyof I["commands"][number]["args"], "$type" | keyof {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[]>]: never; }) | undefined;
            referenceId?: number | undefined;
        } & { [K_2 in Exclude<keyof I["commands"][number], "$type" | keyof GLCommand>]: never; })[] & { [K_3 in Exclude<keyof I["commands"], "$type" | keyof {
            method?: GLMethod | undefined;
            type?: GLMethodType | undefined;
            args?: {
                null?: boolean | undefined;
                scalar?: any;
                blob?: Uint8Array | undefined;
                referenceId?: number | undefined;
            }[] | undefined;
            referenceId?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | "commands">]: never; }>(object: I): ExecuteMessage;
};
export interface GLRenderer {
    Execute(request: ExecuteMessage, metadata?: Metadata): Promise<Empty>;
}
export declare class GLRendererClientImpl implements GLRenderer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Execute(request: ExecuteMessage): Promise<Empty>;
}
export type GLRendererDefinition = typeof GLRendererDefinition;
export declare const GLRendererDefinition: {
    readonly name: "GLRenderer";
    readonly fullName: "devvit.plugin.gl.GLRenderer";
    readonly methods: {
        readonly execute: {
            readonly name: "Execute";
            readonly requestType: {
                $type: "devvit.plugin.gl.ExecuteMessage";
                encode(message: ExecuteMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteMessage;
                fromJSON(object: any): ExecuteMessage;
                toJSON(message: ExecuteMessage): unknown;
                fromPartial<I extends {
                    commands?: {
                        method?: GLMethod | undefined;
                        type?: GLMethodType | undefined;
                        args?: {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[] | undefined;
                        referenceId?: number | undefined;
                    }[] | undefined;
                } & {
                    commands?: ({
                        method?: GLMethod | undefined;
                        type?: GLMethodType | undefined;
                        args?: {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[] | undefined;
                        referenceId?: number | undefined;
                    }[] & ({
                        method?: GLMethod | undefined;
                        type?: GLMethodType | undefined;
                        args?: {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[] | undefined;
                        referenceId?: number | undefined;
                    } & {
                        method?: GLMethod | undefined;
                        type?: GLMethodType | undefined;
                        args?: ({
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[] & ({
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        } & {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        } & { [K in Exclude<keyof I["commands"][number]["args"][number], "$type" | keyof CommandArgument>]: never; })[] & { [K_1 in Exclude<keyof I["commands"][number]["args"], "$type" | keyof {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[]>]: never; }) | undefined;
                        referenceId?: number | undefined;
                    } & { [K_2 in Exclude<keyof I["commands"][number], "$type" | keyof GLCommand>]: never; })[] & { [K_3 in Exclude<keyof I["commands"], "$type" | keyof {
                        method?: GLMethod | undefined;
                        type?: GLMethodType | undefined;
                        args?: {
                            null?: boolean | undefined;
                            scalar?: any;
                            blob?: Uint8Array | undefined;
                            referenceId?: number | undefined;
                        }[] | undefined;
                        referenceId?: number | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I, "$type" | "commands">]: never; }>(object: I): ExecuteMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                fromPartial<I_1 extends {} & {} & { [K in Exclude<keyof I_1, "$type">]: never; }>(_: I_1): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=glrenderer.d.ts.map
/**
 * #custom_post.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Struct } from '../../../../google/protobuf/struct.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { BlockRenderRequest, BlockRenderResponse } from '../../../ui/block_kit/v1beta/rendering.js';
import { Effect } from '../../../ui/effects/v1alpha/effect.js';
function createBaseRenderPostRequest() {
    return { state: undefined, blocks: undefined };
}
export const RenderPostRequest = {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        if (message.blocks !== undefined) {
            BlockRenderRequest.encode(message.blocks, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderPostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.blocks = BlockRenderRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            blocks: isSet(object.blocks) ? BlockRenderRequest.fromJSON(object.blocks) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.state !== undefined && (obj.state = message.state);
        message.blocks !== undefined &&
            (obj.blocks = message.blocks ? BlockRenderRequest.toJSON(message.blocks) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRenderPostRequest();
        message.state = object.state ?? undefined;
        message.blocks = (object.blocks !== undefined && object.blocks !== null)
            ? BlockRenderRequest.fromPartial(object.blocks)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.custom_post.v1alpha.RenderPostRequest", RenderPostRequest);
function createBaseRenderPostResponse() {
    return { state: undefined, effects: [], blocks: undefined };
}
export const RenderPostResponse = {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.effects) {
            Effect.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.blocks !== undefined) {
            BlockRenderResponse.encode(message.blocks, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderPostResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.effects.push(Effect.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.blocks = BlockRenderResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            effects: Array.isArray(object?.effects) ? object.effects.map((e) => Effect.fromJSON(e)) : [],
            blocks: isSet(object.blocks) ? BlockRenderResponse.fromJSON(object.blocks) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.state !== undefined && (obj.state = message.state);
        if (message.effects) {
            obj.effects = message.effects.map((e) => e ? Effect.toJSON(e) : undefined);
        }
        else {
            obj.effects = [];
        }
        message.blocks !== undefined &&
            (obj.blocks = message.blocks ? BlockRenderResponse.toJSON(message.blocks) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRenderPostResponse();
        message.state = object.state ?? undefined;
        message.effects = object.effects?.map((e) => Effect.fromPartial(e)) || [];
        message.blocks = (object.blocks !== undefined && object.blocks !== null)
            ? BlockRenderResponse.fromPartial(object.blocks)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.custom_post.v1alpha.RenderPostResponse", RenderPostResponse);
export class CustomPostClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.reddit.custom_post.v1alpha.CustomPost";
        this.rpc = rpc;
        this.RenderPost = this.RenderPost.bind(this);
    }
    RenderPost(request) {
        const data = RenderPostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RenderPost", data);
        return promise.then((data) => RenderPostResponse.decode(new _m0.Reader(data)));
    }
}
export const CustomPostDefinition = {
    name: "CustomPost",
    fullName: "devvit.reddit.custom_post.v1alpha.CustomPost",
    methods: {
        /** Render a custom post. */
        renderPost: {
            name: "RenderPost",
            requestType: RenderPostRequest,
            requestStream: false,
            responseType: RenderPostResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #media.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface MediaUploadRequest {
    url: string;
    type: string;
}
export interface MediaUploadResponse {
    mediaId: string;
    mediaUrl: string;
}
export declare const MediaUploadRequest: {
    $type: "devvit.plugin.media.MediaUploadRequest";
    encode(message: MediaUploadRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadRequest;
    fromJSON(object: any): MediaUploadRequest;
    toJSON(message: MediaUploadRequest): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        type?: string | undefined;
    } & {
        url?: string | undefined;
        type?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof MediaUploadRequest>]: never; }>(object: I): MediaUploadRequest;
};
export declare const MediaUploadResponse: {
    $type: "devvit.plugin.media.MediaUploadResponse";
    encode(message: MediaUploadResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadResponse;
    fromJSON(object: any): MediaUploadResponse;
    toJSON(message: MediaUploadResponse): unknown;
    fromPartial<I extends {
        mediaId?: string | undefined;
        mediaUrl?: string | undefined;
    } & {
        mediaId?: string | undefined;
        mediaUrl?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof MediaUploadResponse>]: never; }>(object: I): MediaUploadResponse;
};
export interface MediaService {
    Upload(request: MediaUploadRequest, metadata?: Metadata): Promise<MediaUploadResponse>;
}
export declare class MediaServiceClientImpl implements MediaService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Upload(request: MediaUploadRequest): Promise<MediaUploadResponse>;
}
export type MediaServiceDefinition = typeof MediaServiceDefinition;
export declare const MediaServiceDefinition: {
    readonly name: "MediaService";
    readonly fullName: "devvit.plugin.media.MediaService";
    readonly methods: {
        readonly upload: {
            readonly name: "Upload";
            readonly requestType: {
                $type: "devvit.plugin.media.MediaUploadRequest";
                encode(message: MediaUploadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadRequest;
                fromJSON(object: any): MediaUploadRequest;
                toJSON(message: MediaUploadRequest): unknown;
                fromPartial<I extends {
                    url?: string | undefined;
                    type?: string | undefined;
                } & {
                    url?: string | undefined;
                    type?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof MediaUploadRequest>]: never; }>(object: I): MediaUploadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.media.MediaUploadResponse";
                encode(message: MediaUploadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadResponse;
                fromJSON(object: any): MediaUploadResponse;
                toJSON(message: MediaUploadResponse): unknown;
                fromPartial<I_1 extends {
                    mediaId?: string | undefined;
                    mediaUrl?: string | undefined;
                } & {
                    mediaId?: string | undefined;
                    mediaUrl?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof MediaUploadResponse>]: never; }>(object: I_1): MediaUploadResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=media.d.ts.map
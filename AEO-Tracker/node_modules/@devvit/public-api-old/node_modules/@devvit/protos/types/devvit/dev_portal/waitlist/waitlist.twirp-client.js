import { Empty } from '../../../google/protobuf/empty.js';
import { IsCurrentUserRegisteredResponse, WaitlistRegisterUserRequest, WaitlistRegisterUserResponse, GetCurrentUserStatusResponse, } from './waitlist.js';
export class WaitlistClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.IsCurrentUserRegistered.bind(this);
        this.RegisterUser.bind(this);
        this.GetCurrentUserStatus.bind(this);
        this.AcceptTermsAndConditions.bind(this);
    }
    IsCurrentUserRegistered(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'IsCurrentUserRegistered', 'application/json', data);
        return promise.then((data) => IsCurrentUserRegisteredResponse.fromJSON(data));
    }
    RegisterUser(request) {
        const data = WaitlistRegisterUserRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'RegisterUser', 'application/json', data);
        return promise.then((data) => WaitlistRegisterUserResponse.fromJSON(data));
    }
    GetCurrentUserStatus(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'GetCurrentUserStatus', 'application/json', data);
        return promise.then((data) => GetCurrentUserStatusResponse.fromJSON(data));
    }
    AcceptTermsAndConditions(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'AcceptTermsAndConditions', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class WaitlistClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.IsCurrentUserRegistered.bind(this);
        this.RegisterUser.bind(this);
        this.GetCurrentUserStatus.bind(this);
        this.AcceptTermsAndConditions.bind(this);
    }
    IsCurrentUserRegistered(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'IsCurrentUserRegistered', 'application/protobuf', data);
        return promise.then((data) => IsCurrentUserRegisteredResponse.decode(data));
    }
    RegisterUser(request) {
        const data = WaitlistRegisterUserRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'RegisterUser', 'application/protobuf', data);
        return promise.then((data) => WaitlistRegisterUserResponse.decode(data));
    }
    GetCurrentUserStatus(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'GetCurrentUserStatus', 'application/protobuf', data);
        return promise.then((data) => GetCurrentUserStatusResponse.decode(data));
    }
    AcceptTermsAndConditions(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.waitlist.Waitlist', 'AcceptTermsAndConditions', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}

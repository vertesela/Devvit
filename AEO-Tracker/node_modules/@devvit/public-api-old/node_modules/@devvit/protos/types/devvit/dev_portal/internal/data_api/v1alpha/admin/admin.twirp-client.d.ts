import { GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse } from '../../../../data_api/admin/auth/auth.js';
import { GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse } from '../../../../data_api/admin/subscription/subscription.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface InternalDataApiAdminClient {
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
}
export declare class InternalDataApiAdminClientJSON implements InternalDataApiAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
}
export declare class InternalDataApiAdminClientProtobuf implements InternalDataApiAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
}
export {};
//# sourceMappingURL=admin.twirp-client.d.ts.map
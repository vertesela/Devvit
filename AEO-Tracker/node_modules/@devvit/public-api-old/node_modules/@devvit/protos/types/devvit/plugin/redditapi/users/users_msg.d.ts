/**
 * #users_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { User } from '../../../reddit/user.js';
/** Requests */
export interface GenericUsersRequest {
    /** thing id e.g. 't3_15bfi0' */
    id?: string;
    /** a valid, existing reddit username */
    username: string;
}
export interface BlockUserRequest {
    /** account thing id e.g. 't3_15bfi0' */
    accountId?: string;
    /** a valid, existing reddit username */
    name?: string;
}
export interface FriendRequest {
    /** thing id e.g. 't3_15bfi0' */
    banContext?: string;
    /** raw markdown text */
    banMessage?: string;
    /** a string no longer than 100 characters */
    banReason?: string;
    /** an integer between 1 and 999 */
    duration?: number;
    /** the name of an existing user */
    name: string;
    /** a string no longer than 300 characters */
    note?: string;
    permissions?: string;
    /** one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string;
}
export interface ReportUserRequest {
    /** JSON data */
    details: string;
    /** a string no longer than 100 characters */
    reason: string;
    /** a valid, existing reddit username */
    user: string;
}
export interface SetPermissionsRequest {
    /** the name of an existing user */
    name: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    permissions: string;
    type: string;
}
export interface UnfriendRequest {
    /** thing id e.g. 't3_15bfi0' */
    id?: string;
    /** the name of an existing */
    name?: string;
    /** one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string;
}
export interface UserDataByAccountIdsRequest {
    /** a comma-separated list of account thing ids */
    ids: string;
}
export interface UsernameAvailableRequest {
    /** a valid, unused username */
    user: string;
}
export interface UpdateFriendRelationshipRequest {
    /** a valid, existing reddit username */
    name: string;
    note: string;
}
export interface UserAboutRequest {
    /** a valid, existing reddit username */
    username: string;
}
export interface UserWhereRequest {
    context?: number;
    show?: string;
    sort?: string;
    t?: string;
    type?: string;
    after?: string;
    before?: string;
    count?: number;
    limit?: number;
    username?: string;
    where: string;
}
/** Responses */
export interface GeneralFriendResponse {
    date?: number;
    relId?: string;
    name?: string;
    id?: string;
    /** error case */
    fields: string[];
    explanation?: string;
    message?: string;
    reason?: string;
}
export interface BlockUserResponse {
    date?: number;
    iconImg?: string;
    id?: string;
    name?: string;
}
export interface UserDataByAccountIdsResponse {
    users: {
        [key: string]: UserDataByAccountIdsResponse_UserAccountData;
    };
}
export interface UserDataByAccountIdsResponse_UserAccountData {
    name?: string;
    createdUtc?: number;
    linkKarma?: number;
    commentKarma?: number;
    profileImg?: string;
    profileColor?: string;
    profileOver18?: boolean;
}
export interface UserDataByAccountIdsResponse_UsersEntry {
    key: string;
    value?: UserDataByAccountIdsResponse_UserAccountData;
}
export interface UserTrophiesResponse {
    kind?: string;
    data?: UserTrophiesResponse_UserTrophiesData;
}
export interface UserTrophiesResponse_TrophiesData {
    icon70?: string;
    grantedAt?: number;
    url?: string;
    icon40?: string;
    name?: string;
    awardId?: string;
    id?: string;
    description?: string;
}
export interface UserTrophiesResponse_TrophiesType {
    kind?: string;
    data?: UserTrophiesResponse_TrophiesData;
}
export interface UserTrophiesResponse_UserTrophiesData {
    trophies: UserTrophiesResponse_TrophiesType[];
}
export interface UserAboutResponse {
    kind?: string;
    data?: User;
}
export declare const GenericUsersRequest: {
    $type: "devvit.plugin.redditapi.users.GenericUsersRequest";
    encode(message: GenericUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenericUsersRequest;
    fromJSON(object: any): GenericUsersRequest;
    toJSON(message: GenericUsersRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        username?: string | undefined;
    } & {
        id?: string | undefined;
        username?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof GenericUsersRequest>]: never; }>(object: I): GenericUsersRequest;
};
export declare const BlockUserRequest: {
    $type: "devvit.plugin.redditapi.users.BlockUserRequest";
    encode(message: BlockUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockUserRequest;
    fromJSON(object: any): BlockUserRequest;
    toJSON(message: BlockUserRequest): unknown;
    fromPartial<I extends {
        accountId?: string | undefined;
        name?: string | undefined;
    } & {
        accountId?: string | undefined;
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockUserRequest>]: never; }>(object: I): BlockUserRequest;
};
export declare const FriendRequest: {
    $type: "devvit.plugin.redditapi.users.FriendRequest";
    encode(message: FriendRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FriendRequest;
    fromJSON(object: any): FriendRequest;
    toJSON(message: FriendRequest): unknown;
    fromPartial<I extends {
        banContext?: string | undefined;
        banMessage?: string | undefined;
        banReason?: string | undefined;
        duration?: number | undefined;
        name?: string | undefined;
        note?: string | undefined;
        permissions?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & {
        banContext?: string | undefined;
        banMessage?: string | undefined;
        banReason?: string | undefined;
        duration?: number | undefined;
        name?: string | undefined;
        note?: string | undefined;
        permissions?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof FriendRequest>]: never; }>(object: I): FriendRequest;
};
export declare const ReportUserRequest: {
    $type: "devvit.plugin.redditapi.users.ReportUserRequest";
    encode(message: ReportUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReportUserRequest;
    fromJSON(object: any): ReportUserRequest;
    toJSON(message: ReportUserRequest): unknown;
    fromPartial<I extends {
        details?: string | undefined;
        reason?: string | undefined;
        user?: string | undefined;
    } & {
        details?: string | undefined;
        reason?: string | undefined;
        user?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ReportUserRequest>]: never; }>(object: I): ReportUserRequest;
};
export declare const SetPermissionsRequest: {
    $type: "devvit.plugin.redditapi.users.SetPermissionsRequest";
    encode(message: SetPermissionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetPermissionsRequest;
    fromJSON(object: any): SetPermissionsRequest;
    toJSON(message: SetPermissionsRequest): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        subreddit?: string | undefined;
        permissions?: string | undefined;
        type?: string | undefined;
    } & {
        name?: string | undefined;
        subreddit?: string | undefined;
        permissions?: string | undefined;
        type?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SetPermissionsRequest>]: never; }>(object: I): SetPermissionsRequest;
};
export declare const UnfriendRequest: {
    $type: "devvit.plugin.redditapi.users.UnfriendRequest";
    encode(message: UnfriendRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnfriendRequest;
    fromJSON(object: any): UnfriendRequest;
    toJSON(message: UnfriendRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & {
        id?: string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UnfriendRequest>]: never; }>(object: I): UnfriendRequest;
};
export declare const UserDataByAccountIdsRequest: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsRequest";
    encode(message: UserDataByAccountIdsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsRequest;
    fromJSON(object: any): UserDataByAccountIdsRequest;
    toJSON(message: UserDataByAccountIdsRequest): unknown;
    fromPartial<I extends {
        ids?: string | undefined;
    } & {
        ids?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "ids">]: never; }>(object: I): UserDataByAccountIdsRequest;
};
export declare const UsernameAvailableRequest: {
    $type: "devvit.plugin.redditapi.users.UsernameAvailableRequest";
    encode(message: UsernameAvailableRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UsernameAvailableRequest;
    fromJSON(object: any): UsernameAvailableRequest;
    toJSON(message: UsernameAvailableRequest): unknown;
    fromPartial<I extends {
        user?: string | undefined;
    } & {
        user?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "user">]: never; }>(object: I): UsernameAvailableRequest;
};
export declare const UpdateFriendRelationshipRequest: {
    $type: "devvit.plugin.redditapi.users.UpdateFriendRelationshipRequest";
    encode(message: UpdateFriendRelationshipRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateFriendRelationshipRequest;
    fromJSON(object: any): UpdateFriendRelationshipRequest;
    toJSON(message: UpdateFriendRelationshipRequest): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        note?: string | undefined;
    } & {
        name?: string | undefined;
        note?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UpdateFriendRelationshipRequest>]: never; }>(object: I): UpdateFriendRelationshipRequest;
};
export declare const UserAboutRequest: {
    $type: "devvit.plugin.redditapi.users.UserAboutRequest";
    encode(message: UserAboutRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserAboutRequest;
    fromJSON(object: any): UserAboutRequest;
    toJSON(message: UserAboutRequest): unknown;
    fromPartial<I extends {
        username?: string | undefined;
    } & {
        username?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "username">]: never; }>(object: I): UserAboutRequest;
};
export declare const UserWhereRequest: {
    $type: "devvit.plugin.redditapi.users.UserWhereRequest";
    encode(message: UserWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserWhereRequest;
    fromJSON(object: any): UserWhereRequest;
    toJSON(message: UserWhereRequest): unknown;
    fromPartial<I extends {
        context?: number | undefined;
        show?: string | undefined;
        sort?: string | undefined;
        t?: string | undefined;
        type?: string | undefined;
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        username?: string | undefined;
        where?: string | undefined;
    } & {
        context?: number | undefined;
        show?: string | undefined;
        sort?: string | undefined;
        t?: string | undefined;
        type?: string | undefined;
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        username?: string | undefined;
        where?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UserWhereRequest>]: never; }>(object: I): UserWhereRequest;
};
export declare const GeneralFriendResponse: {
    $type: "devvit.plugin.redditapi.users.GeneralFriendResponse";
    encode(message: GeneralFriendResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GeneralFriendResponse;
    fromJSON(object: any): GeneralFriendResponse;
    toJSON(message: GeneralFriendResponse): unknown;
    fromPartial<I extends {
        date?: number | undefined;
        relId?: string | undefined;
        name?: string | undefined;
        id?: string | undefined;
        fields?: string[] | undefined;
        explanation?: string | undefined;
        message?: string | undefined;
        reason?: string | undefined;
    } & {
        date?: number | undefined;
        relId?: string | undefined;
        name?: string | undefined;
        id?: string | undefined;
        fields?: (string[] & string[] & { [K in Exclude<keyof I["fields"], "$type" | keyof string[]>]: never; }) | undefined;
        explanation?: string | undefined;
        message?: string | undefined;
        reason?: string | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof GeneralFriendResponse>]: never; }>(object: I): GeneralFriendResponse;
};
export declare const BlockUserResponse: {
    $type: "devvit.plugin.redditapi.users.BlockUserResponse";
    encode(message: BlockUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockUserResponse;
    fromJSON(object: any): BlockUserResponse;
    toJSON(message: BlockUserResponse): unknown;
    fromPartial<I extends {
        date?: number | undefined;
        iconImg?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
    } & {
        date?: number | undefined;
        iconImg?: string | undefined;
        id?: string | undefined;
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof BlockUserResponse>]: never; }>(object: I): BlockUserResponse;
};
export declare const UserDataByAccountIdsResponse: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse";
    encode(message: UserDataByAccountIdsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse;
    fromJSON(object: any): UserDataByAccountIdsResponse;
    toJSON(message: UserDataByAccountIdsResponse): unknown;
    fromPartial<I extends {
        users?: {
            [x: string]: {
                name?: string | undefined;
                createdUtc?: number | undefined;
                linkKarma?: number | undefined;
                commentKarma?: number | undefined;
                profileImg?: string | undefined;
                profileColor?: string | undefined;
                profileOver18?: boolean | undefined;
            } | undefined;
        } | undefined;
    } & {
        users?: ({
            [x: string]: {
                name?: string | undefined;
                createdUtc?: number | undefined;
                linkKarma?: number | undefined;
                commentKarma?: number | undefined;
                profileImg?: string | undefined;
                profileColor?: string | undefined;
                profileOver18?: boolean | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                name?: string | undefined;
                createdUtc?: number | undefined;
                linkKarma?: number | undefined;
                commentKarma?: number | undefined;
                profileImg?: string | undefined;
                profileColor?: string | undefined;
                profileOver18?: boolean | undefined;
            } & {
                name?: string | undefined;
                createdUtc?: number | undefined;
                linkKarma?: number | undefined;
                commentKarma?: number | undefined;
                profileImg?: string | undefined;
                profileColor?: string | undefined;
                profileOver18?: boolean | undefined;
            } & { [K in Exclude<keyof I["users"][string], "$type" | keyof UserDataByAccountIdsResponse_UserAccountData>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["users"], string | number>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "users">]: never; }>(object: I): UserDataByAccountIdsResponse;
};
export declare const UserDataByAccountIdsResponse_UserAccountData: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse.UserAccountData";
    encode(message: UserDataByAccountIdsResponse_UserAccountData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse_UserAccountData;
    fromJSON(object: any): UserDataByAccountIdsResponse_UserAccountData;
    toJSON(message: UserDataByAccountIdsResponse_UserAccountData): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        createdUtc?: number | undefined;
        linkKarma?: number | undefined;
        commentKarma?: number | undefined;
        profileImg?: string | undefined;
        profileColor?: string | undefined;
        profileOver18?: boolean | undefined;
    } & {
        name?: string | undefined;
        createdUtc?: number | undefined;
        linkKarma?: number | undefined;
        commentKarma?: number | undefined;
        profileImg?: string | undefined;
        profileColor?: string | undefined;
        profileOver18?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UserDataByAccountIdsResponse_UserAccountData>]: never; }>(object: I): UserDataByAccountIdsResponse_UserAccountData;
};
export declare const UserDataByAccountIdsResponse_UsersEntry: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse.UsersEntry";
    encode(message: UserDataByAccountIdsResponse_UsersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse_UsersEntry;
    fromJSON(object: any): UserDataByAccountIdsResponse_UsersEntry;
    toJSON(message: UserDataByAccountIdsResponse_UsersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: {
            name?: string | undefined;
            createdUtc?: number | undefined;
            linkKarma?: number | undefined;
            commentKarma?: number | undefined;
            profileImg?: string | undefined;
            profileColor?: string | undefined;
            profileOver18?: boolean | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            name?: string | undefined;
            createdUtc?: number | undefined;
            linkKarma?: number | undefined;
            commentKarma?: number | undefined;
            profileImg?: string | undefined;
            profileColor?: string | undefined;
            profileOver18?: boolean | undefined;
        } & {
            name?: string | undefined;
            createdUtc?: number | undefined;
            linkKarma?: number | undefined;
            commentKarma?: number | undefined;
            profileImg?: string | undefined;
            profileColor?: string | undefined;
            profileOver18?: boolean | undefined;
        } & { [K in Exclude<keyof I["value"], "$type" | keyof UserDataByAccountIdsResponse_UserAccountData>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof UserDataByAccountIdsResponse_UsersEntry>]: never; }>(object: I): UserDataByAccountIdsResponse_UsersEntry;
};
export declare const UserTrophiesResponse: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse";
    encode(message: UserTrophiesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse;
    fromJSON(object: any): UserTrophiesResponse;
    toJSON(message: UserTrophiesResponse): unknown;
    fromPartial<I extends {
        kind?: string | undefined;
        data?: {
            trophies?: {
                kind?: string | undefined;
                data?: {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        kind?: string | undefined;
        data?: ({
            trophies?: {
                kind?: string | undefined;
                data?: {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            trophies?: ({
                kind?: string | undefined;
                data?: {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[] & ({
                kind?: string | undefined;
                data?: {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            } & {
                kind?: string | undefined;
                data?: ({
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } & {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } & { [K in Exclude<keyof I["data"]["trophies"][number]["data"], "$type" | keyof UserTrophiesResponse_TrophiesData>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["data"]["trophies"][number], "$type" | keyof UserTrophiesResponse_TrophiesType>]: never; })[] & { [K_2 in Exclude<keyof I["data"]["trophies"], "$type" | keyof {
                kind?: string | undefined;
                data?: {
                    icon70?: string | undefined;
                    grantedAt?: number | undefined;
                    url?: string | undefined;
                    icon40?: string | undefined;
                    name?: string | undefined;
                    awardId?: string | undefined;
                    id?: string | undefined;
                    description?: string | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["data"], "$type" | "trophies">]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | keyof UserTrophiesResponse>]: never; }>(object: I): UserTrophiesResponse;
};
export declare const UserTrophiesResponse_TrophiesData: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.TrophiesData";
    encode(message: UserTrophiesResponse_TrophiesData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_TrophiesData;
    fromJSON(object: any): UserTrophiesResponse_TrophiesData;
    toJSON(message: UserTrophiesResponse_TrophiesData): unknown;
    fromPartial<I extends {
        icon70?: string | undefined;
        grantedAt?: number | undefined;
        url?: string | undefined;
        icon40?: string | undefined;
        name?: string | undefined;
        awardId?: string | undefined;
        id?: string | undefined;
        description?: string | undefined;
    } & {
        icon70?: string | undefined;
        grantedAt?: number | undefined;
        url?: string | undefined;
        icon40?: string | undefined;
        name?: string | undefined;
        awardId?: string | undefined;
        id?: string | undefined;
        description?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UserTrophiesResponse_TrophiesData>]: never; }>(object: I): UserTrophiesResponse_TrophiesData;
};
export declare const UserTrophiesResponse_TrophiesType: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.TrophiesType";
    encode(message: UserTrophiesResponse_TrophiesType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_TrophiesType;
    fromJSON(object: any): UserTrophiesResponse_TrophiesType;
    toJSON(message: UserTrophiesResponse_TrophiesType): unknown;
    fromPartial<I extends {
        kind?: string | undefined;
        data?: {
            icon70?: string | undefined;
            grantedAt?: number | undefined;
            url?: string | undefined;
            icon40?: string | undefined;
            name?: string | undefined;
            awardId?: string | undefined;
            id?: string | undefined;
            description?: string | undefined;
        } | undefined;
    } & {
        kind?: string | undefined;
        data?: ({
            icon70?: string | undefined;
            grantedAt?: number | undefined;
            url?: string | undefined;
            icon40?: string | undefined;
            name?: string | undefined;
            awardId?: string | undefined;
            id?: string | undefined;
            description?: string | undefined;
        } & {
            icon70?: string | undefined;
            grantedAt?: number | undefined;
            url?: string | undefined;
            icon40?: string | undefined;
            name?: string | undefined;
            awardId?: string | undefined;
            id?: string | undefined;
            description?: string | undefined;
        } & { [K in Exclude<keyof I["data"], "$type" | keyof UserTrophiesResponse_TrophiesData>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof UserTrophiesResponse_TrophiesType>]: never; }>(object: I): UserTrophiesResponse_TrophiesType;
};
export declare const UserTrophiesResponse_UserTrophiesData: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.UserTrophiesData";
    encode(message: UserTrophiesResponse_UserTrophiesData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_UserTrophiesData;
    fromJSON(object: any): UserTrophiesResponse_UserTrophiesData;
    toJSON(message: UserTrophiesResponse_UserTrophiesData): unknown;
    fromPartial<I extends {
        trophies?: {
            kind?: string | undefined;
            data?: {
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        trophies?: ({
            kind?: string | undefined;
            data?: {
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[] & ({
            kind?: string | undefined;
            data?: {
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } | undefined;
        } & {
            kind?: string | undefined;
            data?: ({
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } & {
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } & { [K in Exclude<keyof I["trophies"][number]["data"], "$type" | keyof UserTrophiesResponse_TrophiesData>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["trophies"][number], "$type" | keyof UserTrophiesResponse_TrophiesType>]: never; })[] & { [K_2 in Exclude<keyof I["trophies"], "$type" | keyof {
            kind?: string | undefined;
            data?: {
                icon70?: string | undefined;
                grantedAt?: number | undefined;
                url?: string | undefined;
                icon40?: string | undefined;
                name?: string | undefined;
                awardId?: string | undefined;
                id?: string | undefined;
                description?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "trophies">]: never; }>(object: I): UserTrophiesResponse_UserTrophiesData;
};
export declare const UserAboutResponse: {
    $type: "devvit.plugin.redditapi.users.UserAboutResponse";
    encode(message: UserAboutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserAboutResponse;
    fromJSON(object: any): UserAboutResponse;
    toJSON(message: UserAboutResponse): unknown;
    fromPartial<I extends {
        kind?: string | undefined;
        data?: {
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: number[] | undefined;
            subreddit?: {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } | undefined;
    } & {
        kind?: string | undefined;
        data?: ({
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: number[] | undefined;
            subreddit?: {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } & {
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: ({
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } & {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K in Exclude<keyof I["data"]["features"]["mwebNsfwXpromo"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K_1 in Exclude<keyof I["data"]["features"]["mwebXpromoRevampV2"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                mwebXpromoRevampV3?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K_2 in Exclude<keyof I["data"]["features"]["mwebXpromoRevampV3"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } & { [K_3 in Exclude<keyof I["data"]["features"], "$type" | keyof import("../../../reddit/user.js").UserFeatures>]: never; }) | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: (number[] & number[] & { [K_4 in Exclude<keyof I["data"]["snoovatarSize"], "$type" | keyof number[]>]: never; }) | undefined;
            subreddit?: ({
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } & {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: (string[] & string[] & { [K_5 in Exclude<keyof I["data"]["subreddit"]["allowedMediaInComments"], "$type" | keyof string[]>]: never; }) | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: (number[] & number[] & { [K_6 in Exclude<keyof I["data"]["subreddit"]["bannerSize"], "$type" | keyof number[]>]: never; }) | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: ({
                    allowedMediaTypes?: string[] | undefined;
                } & {
                    allowedMediaTypes?: (string[] & string[] & { [K_7 in Exclude<keyof I["data"]["subreddit"]["commentContributionSettings"]["allowedMediaTypes"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_8 in Exclude<keyof I["data"]["subreddit"]["commentContributionSettings"], "$type" | "allowedMediaTypes">]: never; }) | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: (number[] & number[] & { [K_9 in Exclude<keyof I["data"]["subreddit"]["emojisCustomSize"], "$type" | keyof number[]>]: never; }) | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: (number[] & number[] & { [K_10 in Exclude<keyof I["data"]["subreddit"]["headerSize"], "$type" | keyof number[]>]: never; }) | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: (number[] & number[] & { [K_11 in Exclude<keyof I["data"]["subreddit"]["iconSize"], "$type" | keyof number[]>]: never; }) | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: (string[] & string[] & { [K_12 in Exclude<keyof I["data"]["subreddit"]["previousNames"], "$type" | keyof string[]>]: never; }) | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: ({
                    e?: string | undefined;
                    t?: string | undefined;
                }[] & ({
                    e?: string | undefined;
                    t?: string | undefined;
                } & {
                    e?: string | undefined;
                    t?: string | undefined;
                } & { [K_13 in Exclude<keyof I["data"]["subreddit"]["userFlairRichtext"][number], "$type" | keyof import("../../../reddit/common.js").UserFlairRichtext>]: never; })[] & { [K_14 in Exclude<keyof I["data"]["subreddit"]["userFlairRichtext"], "$type" | keyof {
                    e?: string | undefined;
                    t?: string | undefined;
                }[]>]: never; }) | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: ({
                    bodyRestrictionPolicy?: string | undefined;
                } & {
                    bodyRestrictionPolicy?: string | undefined;
                } & { [K_15 in Exclude<keyof I["data"]["subreddit"]["postRequirements"], "$type" | "bodyRestrictionPolicy">]: never; }) | undefined;
                userIsMuted?: boolean | undefined;
            } & { [K_16 in Exclude<keyof I["data"]["subreddit"], "$type" | keyof import("../../../reddit/subreddit.js").Subreddit>]: never; }) | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } & { [K_17 in Exclude<keyof I["data"], "$type" | keyof User>]: never; }) | undefined;
    } & { [K_18 in Exclude<keyof I, "$type" | keyof UserAboutResponse>]: never; }>(object: I): UserAboutResponse;
};
//# sourceMappingURL=users_msg.d.ts.map
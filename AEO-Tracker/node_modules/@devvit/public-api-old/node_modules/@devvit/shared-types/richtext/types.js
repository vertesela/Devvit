// Rich-Text-JSON
//
// Rich-Text-JSON or (RTF|J) for short, is a declarative JSON format that encodes
// Reddit content. You can think of it as AST designed for rendering content.
// Historically, Reddit has encoded all of its content as Markdown. With RTF,
// clients will submit and receive content in a JSON tree instead. This
// removes the burden of parsing from clients, while providing a data-structure
// that's more suited to rendering interactive content. e.g. media galleries,
// sortable tables, etc
//
// The high level idea of the format, is that every part of the "document"
// can be represented by element nodes. Each node is a plain old JS Object.
// To differentiate each object, nodes specify their element kind. Some example
// element kinds are `par` for paragraphs, `h` for headers, `link` for links,
// `table` for tables, etc. Note: not all elements are allowable at the top-level,
//  some are used to differentiate nested data inside more complicated
// constructs, such as tables, or nested lists.
//
// Since payload size is a concern, all of the keys are shortened to be
// one character in length. There's some common conventions that will make
// it easier to grok an element's json.
//
// e - `Element`, the element type of a node. Should always be a string.
// t - `text content`, the text content of a node.
// f - `formatting`, the formatting, or text styles, applied to the node
// c - `content`, the content of the element. In most cases this will be an array
//     other objects. e.g. a paragraph's content (`c`) is a list of `Text` nodes
//     and `Link` nodes (simplified).
export var FormattingFlag;
(function (FormattingFlag) {
    FormattingFlag[FormattingFlag["bold"] = 1] = "bold";
    FormattingFlag[FormattingFlag["italic"] = 2] = "italic";
    FormattingFlag[FormattingFlag["underline"] = 4] = "underline";
    FormattingFlag[FormattingFlag["strikethrough"] = 8] = "strikethrough";
    FormattingFlag[FormattingFlag["subscript"] = 16] = "subscript";
    FormattingFlag[FormattingFlag["superscript"] = 32] = "superscript";
    FormattingFlag[FormattingFlag["monospace"] = 64] = "monospace";
})(FormattingFlag || (FormattingFlag = {}));
export const TEXT_ELEMENT = 'text';
export const RAW_TEXT_ELEMENT = 'raw';
export const LINEBREAK_ELEMENT = 'br';
// Links -----------------------------------------------------------------------
export const LINK_ELEMENT = 'link';
// Reddit Links ----------------------------------------------------------------
export const COMMENT_LINK_ELEMENT = 'c/';
export const POST_LINK_ELEMENT = 'p/';
export const SUBREDDIT_LINK_ELEMENT = 'r/';
export const USER_LINK_ELEMENT = 'u/';
export const USER_MENTION_ELEMENT = '@';
export const SPOILER_TEXT_ELEMENT = 'spoilertext';
export const PARAGRAPH_ELEMENT = 'par';
export const HEADING_ELEMENT = 'h';
export const HORIZONTAL_RULE_ELEMENT = 'hr';
export const BLOCK_QUOTE_ELEMENT = 'blockquote';
export const CODE_BLOCK_ELEMENT = 'code';
// Lists -----------------------------------------------------------------------
// lists are stored as flat list of list items.
export const LIST_ITEM_ELEMENT = 'li';
export const LIST_ELEMENT = 'list';
export const COLUMN_ALIGN_LEFT = 'L';
export const COLUMN_ALIGN_RIGHT = 'R';
export const COLUMN_ALIGN_CENTER = 'C';
export const TABLE_ELEMENT = 'table';
// Embeds ----------------------------------------------------------------------
// embeds are essentially a nested iframe embed that previews a link.
export const EMBED_ELEMENT = 'embed';
export const IMAGE_ELEMENT = 'img';
// Animated images, gifs, or html5 videos are similar to images, they just have
// slightly different descriptos given the different urls required to render them.
// Having a separate node type lets clients know what component should be
// used to render
export const ANIMATED_IMAGE_ELEMENT = 'gif';
// Videos are rendered via dynamic streaming. so instead of having different urls
// for each size we just store two urls for different streaming formats.
// Additionally, we store an array of placeholder image previews .
export const VIDEO_ELEMENT = 'video';

import type { BlockQuoteContainer, CodeBlockContainer, HeadingContainer, HorizontalRuleContainer, ImageContainer, LineBreakContainer, LinkContainer, ListContainer, ListItemContainer, ParagraphContainer, RawTextContainer, TableCellContainer, TableContainer, TableContentContainer, TextContainer } from './containers.js';
/**
 * @borrows ParagraphContainer
 */
export type BlockQuoteContext = ParagraphContainer<BlockQuoteContext>;
/**
 * @borrows RawTextContainer
 */
export type CodeBlockContext = RawTextContainer<CodeBlockContext>;
/**
 * @borrows RawTextContainer
 * @borrows LinkContainer
 */
export type HeadingContext = RawTextContainer<HeadingContext> & LinkContainer<HeadingContext>;
/**
 * @borrows BlockQuoteContainer
 * @borrows CodeBlockContainer
 * @borrows HeadingContainer
 * @borrows HorizontalRuleContainer
 * @borrows ListContainer
 * @borrows ParagraphContainer
 * @borrows TableContainer
 */
export type ListItemContext = BlockQuoteContainer<ListItemContext> & CodeBlockContainer<ListItemContext> & HeadingContainer<ListItemContext> & HorizontalRuleContainer<ListItemContext> & ListContainer<ListItemContext> & ParagraphContainer<ListItemContext> & TableContainer<ListItemContext>;
/**
 * @borrows ListItemContainer
 */
export type ListContext = ListItemContainer<ListContext>;
/**
 * @borrows TextContainer
 * @borrows ImageContainer
 * @borrows LinkContainer
 * @borrows LineBreakContainer
 */
export type ParagraphContext = TextContainer<ParagraphContext> & ImageContainer<ParagraphContext> & LinkContainer<ParagraphContext> & LineBreakContainer<ParagraphContext>;
/**
 * @borrows TextContainer
 * @borrows LinkContainer
 * @borrows LineBreakContainer
 */
export type SpoilerContext = TextContainer<SpoilerContext> & LinkContainer<SpoilerContext> & LineBreakContainer<SpoilerContext>;
/**
 * @borrows TextContainer
 * @borrows LinkContainer
 * @borrows ImageContainer
 */
export type TableCellContext = TextContainer<TableHeaderCellContext> & LinkContainer<TableHeaderCellContext> & ImageContainer<TableHeaderCellContext>;
/**
 * @borrows TableContentContainer
 */
export type TableContext = TableContentContainer<TableContext>;
/**
 * @borrows TableCellContext
 */
export type TableHeaderCellContext = TableCellContext;
/**
 * @borrows TableCellContainer
 */
export type TableRowContext = TableCellContainer<TableRowContext>;
//# sourceMappingURL=contexts.d.ts.map
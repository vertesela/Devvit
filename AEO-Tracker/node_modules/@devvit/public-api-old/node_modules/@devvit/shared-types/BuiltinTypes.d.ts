export type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export interface Strings {
    values: string[];
}
/** Mark property K of type T as optional. */
export type Optional<T, K extends keyof T> = Omit<T, K> & {
    [P in K]?: T[K] | undefined;
};
//# sourceMappingURL=BuiltinTypes.d.ts.map
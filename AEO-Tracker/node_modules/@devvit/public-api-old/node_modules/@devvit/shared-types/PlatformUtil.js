/**
 * Returns true for any kind of worker (web worker, Node.js, v8go, etc). False
 * for BrowserRuntime and NodeRuntime.
 */
export function isWorker() {
    return ((typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ||
        // Go doesn't polyfill WorkerGlobalScope, but it doesn't execute non-worker code
        // so we know any code it executes is within a worker.
        isPlatformGo());
}
/**
 * Returns true if the platform is Go which also implies execution within a v8go
 * worker.
 */
export function isPlatformGo() {
    return globalThis.devvit?.compute?.platform === 'go';
}
export function isPlatformWeb() {
    // to-do: populate globalThis.devvit?.compute.platform for the web.
    // The BrowserRuntime executes in a Window. The NodeRuntime has no window
    // global and the platform isn't Go.
    return !isPlatformGo() && !isPlatformNode();
}
export function isPlatformNode() {
    // to-do: populate globalThis.devvit?.compute.platform for Node.js.
    return typeof process !== 'undefined' && process.release?.name === 'node';
}
/** Returns true if no GUI nor rich debug console. */
export function isHeadless() {
    // @ts-expect-error
    return typeof window === 'undefined' || isPlatformGo() || isPlatformNode();
}
/**
 * Returns true if the platform is native (Go) and executing within a worker.
 */
export function isNativeWorker() {
    return isWorker() && isPlatformGo();
}

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DevvitVersion_major, _DevvitVersion_minor, _DevvitVersion_patch, _DevvitVersion_prerelease;
export var VersionBumpType;
(function (VersionBumpType) {
    VersionBumpType["Major"] = "major";
    VersionBumpType["Minor"] = "minor";
    VersionBumpType["Patch"] = "patch";
    VersionBumpType["Prerelease"] = "prerelease";
})(VersionBumpType || (VersionBumpType = {}));
export class DevvitVersion {
    static fromString(str) {
        const parts = str.split('.').map((p) => parseInt(p));
        // check that each part is a number
        parts.forEach((p) => {
            if (isNaN(p)) {
                throw new Error('DevvitVersion parts can only be numbers');
            }
        });
        if (parts.length < 3 || parts.length > 4) {
            throw new Error('DevvitVersion should only consist of a major, minor, patch, and an optional prerelease number');
        }
        return new DevvitVersion(parts[0], parts[1], parts[2], parts[3]);
    }
    static fromProtoAppVersionInfo(version) {
        return new DevvitVersion(version.majorVersion, version.minorVersion, version.patchVersion, version.prereleaseVersion);
    }
    constructor(major, minor, patch, prerelease) {
        _DevvitVersion_major.set(this, void 0);
        _DevvitVersion_minor.set(this, void 0);
        _DevvitVersion_patch.set(this, void 0);
        _DevvitVersion_prerelease.set(this, void 0);
        __classPrivateFieldSet(this, _DevvitVersion_major, major, "f");
        __classPrivateFieldSet(this, _DevvitVersion_minor, minor, "f");
        __classPrivateFieldSet(this, _DevvitVersion_patch, patch, "f");
        __classPrivateFieldSet(this, _DevvitVersion_prerelease, prerelease === -1 ? undefined : prerelease, "f");
    }
    get major() {
        return __classPrivateFieldGet(this, _DevvitVersion_major, "f");
    }
    get minor() {
        return __classPrivateFieldGet(this, _DevvitVersion_minor, "f");
    }
    get patch() {
        return __classPrivateFieldGet(this, _DevvitVersion_patch, "f");
    }
    get prerelease() {
        return __classPrivateFieldGet(this, _DevvitVersion_prerelease, "f");
    }
    // create a new clone
    clone() {
        return DevvitVersion.fromString(this.toString());
    }
    isEqual(rhs) {
        return this.toString() === rhs.toString();
    }
    bumpVersion(bumpType) {
        var _a, _b, _c, _d;
        switch (bumpType) {
            case VersionBumpType.Major: {
                __classPrivateFieldSet(this, _DevvitVersion_major, (_a = __classPrivateFieldGet(this, _DevvitVersion_major, "f"), _a++, _a), "f");
                __classPrivateFieldSet(this, _DevvitVersion_minor, 0, "f");
                __classPrivateFieldSet(this, _DevvitVersion_patch, 0, "f");
                __classPrivateFieldSet(this, _DevvitVersion_prerelease, undefined, "f");
                break;
            }
            case VersionBumpType.Minor: {
                __classPrivateFieldSet(this, _DevvitVersion_minor, (_b = __classPrivateFieldGet(this, _DevvitVersion_minor, "f"), _b++, _b), "f");
                __classPrivateFieldSet(this, _DevvitVersion_patch, 0, "f");
                __classPrivateFieldSet(this, _DevvitVersion_prerelease, undefined, "f");
                break;
            }
            case VersionBumpType.Patch: {
                __classPrivateFieldSet(this, _DevvitVersion_patch, (_c = __classPrivateFieldGet(this, _DevvitVersion_patch, "f"), _c++, _c), "f");
                __classPrivateFieldSet(this, _DevvitVersion_prerelease, undefined, "f");
                break;
            }
            case VersionBumpType.Prerelease: {
                if (__classPrivateFieldGet(this, _DevvitVersion_prerelease, "f") == null)
                    __classPrivateFieldSet(this, _DevvitVersion_prerelease, 0, "f");
                __classPrivateFieldSet(this, _DevvitVersion_prerelease, (_d = __classPrivateFieldGet(this, _DevvitVersion_prerelease, "f"), _d++, _d), "f");
                break;
            }
        }
    }
    newerThan(rhs) {
        return this.compare(rhs) > 0;
    }
    toString() {
        const res = `${__classPrivateFieldGet(this, _DevvitVersion_major, "f")}.${__classPrivateFieldGet(this, _DevvitVersion_minor, "f")}.${__classPrivateFieldGet(this, _DevvitVersion_patch, "f")}`;
        if (!__classPrivateFieldGet(this, _DevvitVersion_prerelease, "f"))
            return res;
        return res + '.' + __classPrivateFieldGet(this, _DevvitVersion_prerelease, "f");
    }
    /**
     * @description return 1 if greater than rhs, -1 if less, and 0 if equal
     */
    compare(rhs) {
        if (this.major > rhs.major) {
            return 1;
        }
        if (this.major < rhs.major) {
            return -1;
        }
        if (this.minor > rhs.minor) {
            return 1;
        }
        if (this.minor < rhs.minor) {
            return -1;
        }
        if (this.patch > rhs.patch) {
            return 1;
        }
        if (this.patch < rhs.patch) {
            return -1;
        }
        if ((this.prerelease ?? 0) > (rhs.prerelease ?? 0)) {
            return 1;
        }
        if ((this.prerelease ?? 0) < (rhs.prerelease ?? 0)) {
            return -1;
        }
        return 0;
    }
}
_DevvitVersion_major = new WeakMap(), _DevvitVersion_minor = new WeakMap(), _DevvitVersion_patch = new WeakMap(), _DevvitVersion_prerelease = new WeakMap();

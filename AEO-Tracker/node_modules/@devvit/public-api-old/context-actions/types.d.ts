import { ConfigForm, Metadata, RedditObject, SubredditObject } from '@devvit/protos';
export declare enum Context {
    POST = "post",
    COMMENT = "comment",
    SUBREDDIT = "subreddit"
}
export declare enum UserContext {
    LOGGED_OUT = "loggedOut",
    MEMBER = "member",
    MODERATOR = "moderator"
}
export type BaseContextAction = {
    name: string;
    description: string;
    userContext?: UserContext;
    userInput?: ConfigForm;
};
export type BaseContextActionEvent = {
    userInput: ConfigForm | undefined;
};
export type PostContextActionEvent = BaseContextActionEvent & {
    context: Context.POST;
    post: RedditObject;
};
export type CommentContextActionEvent = BaseContextActionEvent & {
    context: Context.COMMENT;
    comment: RedditObject;
};
export type SubredditContextActionEvent = BaseContextActionEvent & {
    context: Context.SUBREDDIT;
    subreddit: SubredditObject;
};
export type ContextActionEvent = PostContextActionEvent | CommentContextActionEvent | SubredditContextActionEvent;
export type ContextActionResponse = {
    success: boolean;
    message: string;
};
export type PostContextAction = BaseContextAction & {
    context: Context.POST;
    handler: (event: PostContextActionEvent, metadata?: Metadata) => Promise<ContextActionResponse>;
};
export type CommentContextAction = BaseContextAction & {
    context: Context.COMMENT;
    handler: (event: CommentContextActionEvent, metadata?: Metadata) => Promise<ContextActionResponse>;
};
export type SubredditContextAction = BaseContextAction & {
    context: Context.SUBREDDIT;
    handler: (event: SubredditContextActionEvent, metadata?: Metadata) => Promise<ContextActionResponse>;
};
export type MultiContextAction = BaseContextAction & {
    context: Context[];
    handler: (event: ContextActionEvent, metadata?: Metadata) => Promise<ContextActionResponse>;
};
export type ContextAction = PostContextAction | CommentContextAction | SubredditContextAction;
//# sourceMappingURL=types.d.ts.map
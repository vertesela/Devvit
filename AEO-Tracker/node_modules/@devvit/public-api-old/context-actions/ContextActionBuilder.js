var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ContextActionsBuilder_actions;
import { ContextActionDescription, ContextActionList, } from '@devvit/protos';
/**
 * Helper class to simplify the creation of a ContextActionDescription response
 */
export class ContextActionsBuilder {
    constructor() {
        _ContextActionsBuilder_actions.set(this, []);
    }
    build() {
        return ContextActionList.fromPartial({
            actions: __classPrivateFieldGet(this, _ContextActionsBuilder_actions, "f"),
        });
    }
    action(opts) {
        if (!opts.post && !opts.comment && !opts.subreddit) {
            throw new Error('Must specify at least one type');
        }
        __classPrivateFieldGet(this, _ContextActionsBuilder_actions, "f").push(ContextActionDescription.fromPartial({
            actionId: opts.actionId,
            name: opts.name,
            description: opts.description,
            contexts: {
                post: !!opts.post,
                comment: !!opts.comment,
                subreddit: !!opts.subreddit,
            },
            users: {
                moderator: !!opts.moderator,
                member: !!opts.member,
            },
            userInput: opts.userInput,
        }));
        return this;
    }
}
_ContextActionsBuilder_actions = new WeakMap();

import { ContextType } from '@devvit/protos';
import { Context, UserContext } from './types.js';
export function getContextActionId(contextAction, index) {
    return `${contextAction.name.toLowerCase().replace(/ /g, '-')}-${index}`;
}
export function convertContextActionsToProtos(contextActions) {
    return {
        actions: contextActions.map((c, index) => ({
            actionId: getContextActionId(c, index),
            description: c.description,
            name: c.name,
            contexts: {
                post: c.context === Context.POST || c.context.includes(Context.POST),
                comment: c.context === Context.COMMENT || c.context.includes(Context.COMMENT),
                subreddit: c.context === Context.SUBREDDIT || c.context.includes(Context.SUBREDDIT),
            },
            users: {
                loggedOut: c.userContext === UserContext.LOGGED_OUT,
                member: c.userContext === UserContext.MEMBER,
                moderator: c.userContext === UserContext.MODERATOR,
            },
            ...(c.userInput ? { userInput: c.userInput } : {}),
        })),
    };
}
export function executeContextActionHandler(contextAction, req, metadata) {
    const baseEvent = {
        userInput: req.userInput,
    };
    switch (contextAction.context) {
        case Context.POST: {
            if (!req.post) {
                throw new Error('post is missing from ContextActionRequest');
            }
            const postContextActionEvent = {
                ...baseEvent,
                context: Context.POST,
                post: req.post,
            };
            return contextAction.handler(postContextActionEvent, metadata);
        }
        case Context.COMMENT: {
            if (!req.comment) {
                throw new Error('comment is missing from ContextActionRequest');
            }
            const commentContextActionEvent = {
                ...baseEvent,
                context: Context.COMMENT,
                comment: req.comment,
            };
            return contextAction.handler(commentContextActionEvent, metadata);
        }
        case Context.SUBREDDIT: {
            if (!req.subreddit) {
                throw new Error('subreddit is missing from ContextActionRequest');
            }
            const subredditContextActionEvent = {
                ...baseEvent,
                context: Context.SUBREDDIT,
                subreddit: req.subreddit,
            };
            return contextAction.handler(subredditContextActionEvent, metadata);
        }
        default:
            if (Array.isArray(contextAction.context)) {
                let multiContextActionEvent;
                if (req.context === ContextType.POST && req.post) {
                    multiContextActionEvent = {
                        ...baseEvent,
                        context: Context.POST,
                        post: req.post,
                    };
                }
                else if (req.context === ContextType.COMMENT && req.comment) {
                    multiContextActionEvent = {
                        ...baseEvent,
                        context: Context.COMMENT,
                        comment: req.comment,
                    };
                }
                else if (req.context === ContextType.SUBREDDIT && req.subreddit) {
                    multiContextActionEvent = {
                        ...baseEvent,
                        context: Context.SUBREDDIT,
                        subreddit: req.subreddit,
                    };
                }
                if (multiContextActionEvent) {
                    return contextAction.handler(multiContextActionEvent, metadata);
                }
            }
            throw new Error('unsupported ContextAction context');
    }
}

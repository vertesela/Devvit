/**
 * These functions were copied from @devvit/public-api/src/apis/ui/helpers
 * to keep things consistent with the next iteration of the Developer Experience.
 */
import { FormField as FormFieldProto, FormFieldType } from '@devvit/protos';
export function assertValidFormFields(fields, seenNames = new Set()) {
    for (const field of fields) {
        if (field.type === 'group') {
            assertValidFormFields(field.fields, seenNames);
            continue;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const fieldName = field.name;
        if (seenNames.has(fieldName)) {
            throw new Error(`Duplicate field name: ${fieldName}`);
        }
        seenNames.add(fieldName);
    }
}
export function flattenFormFieldValue(value) {
    switch (value.fieldType) {
        case FormFieldType.STRING:
            return value.stringValue;
        case FormFieldType.PARAGRAPH:
            return value.stringValue;
        case FormFieldType.NUMBER:
            return value.numberValue;
        case FormFieldType.BOOLEAN:
            return value.boolValue;
        case FormFieldType.SELECTION:
            return value.selectionValue?.values ?? [];
        default:
            return undefined;
    }
}
export function getSettingsValues(results) {
    return Object.keys(results).reduce((acc, key) => {
        acc[key] = flattenFormFieldValue(results[key]);
        return acc;
    }, {});
}
export function transformFormFields(fields) {
    return fields.map((field) => {
        switch (field.type) {
            case 'string':
                return transformStringField(field);
            case 'paragraph':
                return transformParagraphField(field);
            case 'number':
                return transformNumberField(field);
            case 'select':
                return transformSelectField(field);
            case 'boolean':
                return transformBooleanField(field);
            case 'group':
                return transformGroupField(field);
            default:
                throw new Error('Unknown field type.');
        }
    });
}
function transformStringField(field) {
    return FormFieldProto.fromPartial({
        defaultValue: {
            fieldType: FormFieldType.STRING,
            stringValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            stringConfig: {
                placeholder: field.placeholder,
            },
        },
        fieldId: field.name,
        fieldType: FormFieldType.STRING,
        helpText: field.helpText,
        label: field.label,
    });
}
function transformParagraphField(field) {
    return FormFieldProto.fromPartial({
        defaultValue: {
            fieldType: FormFieldType.PARAGRAPH,
            stringValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            paragraphConfig: {
                lineHeight: field.lineHeight,
                placeholder: field.placeholder,
            },
        },
        fieldId: field.name,
        fieldType: FormFieldType.PARAGRAPH,
        helpText: field.helpText,
        label: field.label,
    });
}
function transformNumberField(field) {
    return FormFieldProto.fromPartial({
        defaultValue: {
            fieldType: FormFieldType.NUMBER,
            numberValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldConfig: {
            numberConfig: {},
        },
        fieldId: field.name,
        fieldType: FormFieldType.NUMBER,
        helpText: field.helpText,
        label: field.label,
    });
}
function transformSelectField(field) {
    return FormFieldProto.fromPartial({
        defaultValue: {
            fieldType: FormFieldType.SELECTION,
            selectionValue: {
                values: field.defaultValue,
            },
        },
        disabled: field.disabled,
        fieldConfig: {
            selectionConfig: {
                choices: field.options,
                multiSelect: field.multiSelect,
            },
        },
        fieldId: field.name,
        fieldType: FormFieldType.SELECTION,
        helpText: field.helpText,
        label: field.label,
    });
}
function transformBooleanField(field) {
    return FormFieldProto.fromPartial({
        defaultValue: {
            fieldType: FormFieldType.BOOLEAN,
            boolValue: field.defaultValue,
        },
        disabled: field.disabled,
        fieldId: field.name,
        fieldType: FormFieldType.BOOLEAN,
        helpText: field.helpText,
        label: field.label,
    });
}
function transformGroupField(field) {
    return FormFieldProto.fromPartial({
        fieldType: FormFieldType.GROUP,
        fieldConfig: {
            groupConfig: {
                fields: transformFormFields(field.fields),
            },
        },
        label: field.label,
        helpText: field.helpText,
    });
}

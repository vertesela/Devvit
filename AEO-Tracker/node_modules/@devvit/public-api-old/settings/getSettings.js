import { Devvit } from '../abstractions/Devvit.js';
import { getSettingsValues } from './utilities.js';
/**
 * Get all stored values for the app installation in the current subreddit.
 *
 * @param {Metadata} metadata - Metadata from the originating handler. Make sure to always include this.
 * @returns {Promise<SettingsValues>} - A map of setting names to values.
 *
 * * @example
 * ```ts
 * import { Devvit, getSetting } from '@devvit/public-api-old';
 *
 * const mySettings = await getSettings(metadata);
 * ```
 */
export async function getSettings(metadata) {
    const settingsClient = Devvit.getApiClient(Devvit.Types.Settings);
    const response = await settingsClient.GetSettings({}, metadata);
    if (!response.installationSettings) {
        throw new Error('Could not get settings');
    }
    return getSettingsValues(response.installationSettings.settings);
}
/**
 * Get a setting value by name for the app installation in the current subreddit.
 *
 * @param {string} name
 * @param {Metadata} metadata - Metadata from the originating handler. Make sure to always include this.
 * @returns {Promise<T>} - A promise that resolves to the setting value.
 *
 * @example
 * ```ts
 * import { Devvit, getSetting } from '@devvit/public-api-old';
 *
 * const mySetting = await getSetting('foo', metadata);
 * ```
 */
export async function getSetting(name, metadata) {
    const settings = await getSettings(metadata);
    return settings[name];
}

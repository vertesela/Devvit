import type { BlockQuoteOptions, CodeBlockOptions, CommentLinkOptions, EmbedOptions, HeadingOptions, ImageOptions, LinkOptions, ListOptions, PostLinkOptions, SubredditLinkOptions, TableHeaderCellOptions, TextOptions, UserLinkOptions, UserMentionOptions, VideoOptions } from './options.js';
import type { BlockQuoteContext, CodeBlockContext, HeadingContext, ListContext, ListItemContext, ParagraphContext, SpoilerContext, TableCellContext, TableContext, TableHeaderCellContext, TableRowContext } from './contexts.js';
/**
 * @mixin
 */
export interface BlockQuoteContainer<T> {
    /**
     * Append a Block Quote element
     * @param opts
     * @param cb scoped callback to add child elements to this Block Quote
     */
    blockQuote(opts: BlockQuoteOptions, cb: (blockQuote: BlockQuoteContext) => void): T;
}
/**
 * @mixin
 */
export interface CodeBlockContainer<T> {
    /**
     * Append a Code Block element
     * @param opts {@link CodeBlockOptions}
     * @param cb scoped callback to add child elements to this Code Block
     */
    codeBlock(opts: CodeBlockOptions, cb: (codeBlock: CodeBlockContext) => void): T;
}
/**
 * @mixin
 */
export interface EmbedContainer<T> {
    /**
     * Append an embedded iframe
     * @param opts {@link EmbedOptions}
     */
    embed(opts: EmbedOptions): T;
}
/**
 * @mixin
 */
export interface HeadingContainer<T> {
    /**
     * Append a Heading
     * @param opts {@link HeadingOptions}
     * @param cb scoped callback to add child elements to this Heading
     */
    heading(opts: HeadingOptions, cb: (heading: HeadingContext) => void): T;
}
/**
 * @mixin
 */
export interface HorizontalRuleContainer<T> {
    /**
     * Append a Horizontal Rule
     */
    horizontalRule(): T;
}
/**
 * @mixin
 */
export interface ImageContainer<T> {
    /**
     * Append an Image
     * @param opts {@link ImageOptions}
     */
    image(opts: ImageOptions): T;
    /**
     * Append an Animated Image
     * @param opts {@link ImageOptions}
     */
    animatedImage(opts: ImageOptions): T;
}
/**
 * @mixin
 */
export interface LineBreakContainer<T> {
    /**
     * Append a Line Break
     */
    linebreak(): T;
}
/**
 * @mixin
 */
export interface LinkContainer<T> extends RedditLinkContainer<T> {
    /**
     * Append a Link
     * @param opts {@link LinkOptions}
     */
    link(opts: LinkOptions): T;
}
/**
 * @mixin
 */
export interface ListContainer<T> {
    /**
     * Append a List
     * @param opts {@link ListOptions}
     * @param cb scoped callback to add child elements to this List
     */
    list(opts: ListOptions, cb: (list: ListContext) => void): T;
}
/**
 * @mixin
 */
export interface ListItemContainer<T> {
    /**
     * Append a List Item to a List
     * @param cb scoped callback to add child elements to this List Item
     */
    item(cb: (item: ListItemContext) => void): T;
}
/**
 * @mixin
 */
export interface ParagraphContainer<T> {
    /**
     * Append a Paragraph
     * @param cb scoped callback to add child elements to this Paragraph
     */
    paragraph(cb: (paragraph: ParagraphContext) => void): T;
}
/**
 * @mixin
 */
export interface RawTextContainer<T> {
    /**
     * Append unstyled text
     * @param text
     */
    rawText(text: string): T;
}
/**
 * @mixin
 */
export interface RedditLinkContainer<T> {
    /**
     * Append a link to a Reddit Comment
     * @param opts {@link CommentLinkOptions}
     */
    commentLink(opts: CommentLinkOptions): T;
    /**
     * Append a link to a Reddit Post
     * @param opts {@link PostLinkOptions}
     */
    postLink(opts: PostLinkOptions): T;
    /**
     * Append a link to a Reddit Subreddit
     * @param opts {@link SubredditLinkOptions}
     */
    subredditLink(opts: SubredditLinkOptions): T;
    /**
     * Append a link to a Reddit User
     * @param opts {@link UserLinkOptions}
     */
    userLink(opts: UserLinkOptions): T;
    /**
     * Append a link to a Reddit User as a @mention
     * @param opts {@link UserMentionOptions}
     */
    userMention(opts: UserMentionOptions): T;
}
/**
 * @mixin
 */
export interface SpoilerContainer<T> {
    /**
     * Append a Spoiler
     * @param cb scoped callback to add child elements to this Spoiler
     */
    spoiler(cb: (spoiler: SpoilerContext) => void): T;
}
/**
 * @mixin
 */
export interface TableCellContainer<T> {
    /**
     * Append a Cell to a Table Row
     * @param cb scoped callback to add child elements to this Table Cell
     */
    cell(cb: (cell: TableCellContext) => void): T;
}
/**
 * @mixin
 */
export interface TableContainer<T> {
    /**
     * Append a Table
     * @param cb scoped callback to add child elements to this Table
     */
    table(cb: (table: TableContext) => void): T;
}
/**
 * @mixin
 */
export interface TableContentContainer<T> {
    /**
     * Append a Table Cell to the Table Header
     * @param opts {@link TableHeaderCellOptions}
     * @param cb scoped callback to add child elements to this Table Header Cell
     */
    headerCell(opts: TableHeaderCellOptions, cb: (cell: TableHeaderCellContext) => void): T;
    /**
     * Append a Table Row to the Table
     * @param cb scoped callback to add child elements to this Table Row
     */
    row(cb: (row: TableRowContext) => void): T;
}
/**
 * @mixin
 */
export interface TextContainer<T> {
    /**
     * Append Text with optional formatting
     * @param opts {@link TextOptions}
     */
    text(opts: TextOptions): T;
}
/**
 * @mixin
 */
export interface VideoContainer<T> {
    /**
     * Append a Video
     * @param opts {@link VideoOptions}
     */
    video(opts: VideoOptions): T;
}
//# sourceMappingURL=containers.d.ts.map
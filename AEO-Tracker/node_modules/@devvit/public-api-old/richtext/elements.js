import { ANIMATED_IMAGE_ELEMENT, BLOCK_QUOTE_ELEMENT, CODE_BLOCK_ELEMENT, COLUMN_ALIGN_CENTER, COLUMN_ALIGN_LEFT, COLUMN_ALIGN_RIGHT, COMMENT_LINK_ELEMENT, EMBED_ELEMENT, FormattingFlag, HEADING_ELEMENT, HORIZONTAL_RULE_ELEMENT, IMAGE_ELEMENT, LINEBREAK_ELEMENT, LINK_ELEMENT, LIST_ELEMENT, LIST_ITEM_ELEMENT, PARAGRAPH_ELEMENT, POST_LINK_ELEMENT, RAW_TEXT_ELEMENT, SPOILER_TEXT_ELEMENT, SUBREDDIT_LINK_ELEMENT, TABLE_ELEMENT, TEXT_ELEMENT, USER_LINK_ELEMENT, USER_MENTION_ELEMENT, VIDEO_ELEMENT, } from './types.js';
import { mixinBlockQuoteContext, mixinCodeBlockContext, mixinHeadingContext, mixinHorizontalRuleContext, mixinImageContext, mixinLineBreakContext, mixinLinkContext, mixinListContext, mixinListItemContext, mixinParagraphContext, mixinRawTextContext, mixinSpoilerContext, mixinTableContentContext, mixinTableContext, mixinTableRowContext, mixinTextContext, } from './mixins.js';
/**
 *
 * @param opts {@link ImageOptions}
 * @returns AnimatedImage
 */
export function makeAnimatedImage(opts) {
    return {
        e: ANIMATED_IMAGE_ELEMENT,
        id: opts.mediaId,
        c: opts.caption,
        o: opts.blur,
    };
}
export function makeBlockQuote(opts, cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinBlockQuoteContext(context, content), mixinCodeBlockContext(context, content), mixinHeadingContext(context, content), mixinListContext(context, content), mixinParagraphContext(context, content), mixinTableContext(context, content));
    cb(context);
    return {
        e: BLOCK_QUOTE_ELEMENT,
        c: content,
        a: opts.author,
    };
}
export function makeCodeBlock(opts, cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinRawTextContext(context, content));
    cb(context);
    return {
        e: CODE_BLOCK_ELEMENT,
        c: content,
        l: opts.language,
    };
}
export function makeCommentLink(opts) {
    return {
        e: COMMENT_LINK_ELEMENT,
        t: opts.permalink,
    };
}
export function makeHeadingContext(opts, cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinRawTextContext(context, content), mixinLinkContext(context, content));
    cb(context);
    return {
        e: HEADING_ELEMENT,
        l: opts.level,
        c: content,
    };
}
export function makeEmbed(opts) {
    return {
        e: EMBED_ELEMENT,
        u: opts.sourceUrl,
        c: opts.contentUrl,
        x: opts.width,
        y: opts.height,
    };
}
export function makeFormatting(opts) {
    let spec = 0;
    if (opts.bold) {
        spec |= FormattingFlag.bold;
    }
    if (opts.italic) {
        spec |= FormattingFlag.italic;
    }
    if (opts.underline) {
        spec |= FormattingFlag.underline;
    }
    if (opts.strikethrough) {
        spec |= FormattingFlag.strikethrough;
    }
    if (opts.subscript) {
        spec |= FormattingFlag.subscript;
    }
    if (opts.superscript) {
        spec |= FormattingFlag.superscript;
    }
    if (opts.monospace) {
        spec |= FormattingFlag.monospace;
    }
    return [spec, opts.startIndex, opts.length];
}
export function makeHorizontalRule() {
    return { e: HORIZONTAL_RULE_ELEMENT };
}
export function makeImage(opts) {
    return {
        e: IMAGE_ELEMENT,
        id: opts.mediaId,
        c: opts.caption,
        o: opts.blur,
    };
}
export function makeLineBreak() {
    return {
        e: LINEBREAK_ELEMENT,
    };
}
export function makeLink(opts) {
    return {
        e: LINK_ELEMENT,
        t: opts.text,
        u: opts.url,
        f: opts.formatting,
        a: opts.tooltip,
    };
}
export function makeList(opts, cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinListItemContext(context, content));
    cb(context);
    return {
        e: LIST_ELEMENT,
        o: opts.ordered,
        c: content,
    };
}
export function makeListItem(cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinBlockQuoteContext(context, content), mixinCodeBlockContext(context, content), mixinHeadingContext(context, content), mixinHorizontalRuleContext(context, content), mixinListContext(context, content), mixinParagraphContext(context, content), mixinTableContext(context, content));
    cb(context);
    return {
        e: LIST_ITEM_ELEMENT,
        c: content,
    };
}
export function makeParagraph(cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinTextContext(context, content), mixinLinkContext(context, content), mixinLineBreakContext(context, content), mixinSpoilerContext(context, content), mixinImageContext(context, content));
    cb(context);
    return {
        e: PARAGRAPH_ELEMENT,
        c: content,
    };
}
export function makePostLink(opts) {
    return {
        e: POST_LINK_ELEMENT,
        t: opts.permalink,
    };
}
export function makeRawText(text) {
    return {
        e: RAW_TEXT_ELEMENT,
        t: text,
    };
}
export function makeSpoilerText(cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinTextContext(context, content), mixinLinkContext(context, content), mixinLineBreakContext(context, content));
    cb(context);
    return {
        e: SPOILER_TEXT_ELEMENT,
        c: content,
    };
}
export function makeSubredditLink(opts) {
    return {
        e: SUBREDDIT_LINK_ELEMENT,
        t: opts.subredditName,
        l: opts.showPrefix,
    };
}
export function makeTable(cb) {
    const context = {};
    const headerContent = [];
    const rowContent = [];
    Object.assign(context, mixinTableContentContext(context, headerContent, rowContent));
    cb(context);
    return {
        e: TABLE_ELEMENT,
        h: headerContent,
        c: rowContent,
    };
}
export function makeTableCell(cb) {
    const [context, content] = tableCellTextContext();
    cb(context);
    return {
        c: content,
    };
}
export function makeTableHeaderCell(opts, cb) {
    const [context, content] = tableCellTextContext();
    cb(context);
    let alignment;
    switch (opts.columnAlignment) {
        case 'left':
            alignment = COLUMN_ALIGN_LEFT;
            break;
        case 'right':
            alignment = COLUMN_ALIGN_RIGHT;
            break;
        case 'center':
            alignment = COLUMN_ALIGN_CENTER;
            break;
    }
    return {
        a: alignment,
        c: content,
    };
}
export function makeTableRow(cb) {
    const context = {};
    const content = [];
    Object.assign(context, mixinTableRowContext(context, content));
    cb(context);
    return content;
}
export function makeText(opts) {
    return {
        e: TEXT_ELEMENT,
        t: opts.text,
        f: opts.formatting,
    };
}
export function makeUserLink(opts) {
    return {
        e: USER_LINK_ELEMENT,
        t: opts.username,
        l: opts.showPrefix,
    };
}
export function makeUserMention(opts) {
    return {
        e: USER_MENTION_ELEMENT,
        t: opts.username,
        l: opts.showPrefix,
    };
}
export function makeVideo(opts) {
    return {
        e: VIDEO_ELEMENT,
        id: opts.mediaId,
        c: opts.caption,
        o: opts.blur,
        p: opts.thumbnail,
        gifify: opts.convertToGif,
    };
}
function tableCellTextContext() {
    const context = {};
    const content = [];
    Object.assign(context, mixinTextContext(context, content), mixinLinkContext(context, content), mixinSpoilerContext(context, content), mixinImageContext(context, content));
    return [context, content];
}

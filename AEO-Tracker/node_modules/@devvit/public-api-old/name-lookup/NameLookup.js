var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _NameLookup_instances, _NameLookup_users, _NameLookup_linksAndComments, _NameLookup_lookupUsers, _NameLookup_lookupSubreddits;
import { Devvit } from '../abstractions/Devvit.js';
var IdBuckets;
(function (IdBuckets) {
    IdBuckets[IdBuckets["USER"] = 0] = "USER";
    IdBuckets[IdBuckets["SUBREDDIT"] = 1] = "SUBREDDIT";
})(IdBuckets || (IdBuckets = {}));
/**
 * Provides a way to convert `t2_` and `t5_` IDs into the names of those users and subreddits
 * respectively. This is useful for both displaying data to the user, and interacting with
 * some Reddit API calls that require the name of an object instead of its ID.
 */
export class NameLookup {
    /**
     * Creates a new NameLookup object. Note that the args are entirely optional.
     * @param users Defaults to `Devvit.use(Devvit.Types.RedditAPI.Users)`
     * @param linksAndComments Defaults to `Devvit.use(Devvit.Types.RedditAPI.LinksAndComments)`
     */
    constructor(users = Devvit.use(Devvit.Types.RedditAPI.Users), linksAndComments = Devvit.use(Devvit.Types.RedditAPI.LinksAndComments)) {
        _NameLookup_instances.add(this);
        _NameLookup_users.set(this, void 0);
        _NameLookup_linksAndComments.set(this, void 0);
        __classPrivateFieldSet(this, _NameLookup_users, users, "f");
        __classPrivateFieldSet(this, _NameLookup_linksAndComments, linksAndComments, "f");
    }
    /**
     * Gets the name for one thing ID. If you have multiple IDs you need to look up at the same time,
     * please use {@link getAll} instead.
     * @param id A `t2_` or `t5_` ID
     * @returns The name of the thing you asked about.
     */
    async get(id) {
        const oneIDMap = await this.getAll([id]);
        if (!oneIDMap[id]) {
            throw new Error(`Unable to find name for thing "${id}"`);
        }
        return oneIDMap[id];
    }
    /**
     * Gets the names for multiple things. This groups the IDs together so that we make as few API
     * calls as possible.
     * @param ids An array of `t2_` or `t5_` IDs to look up
     * @returns An object where the keys are the IDs provided, and the values are the names. It is
     *          possible for an ID to be omitted from the return value; if this happens, it means the
     *          given ID doesn't exist.
     */
    async getAll(ids) {
        const retval = {};
        // Sort all the IDs into buckets by which method we call, so we can get all IDs of the same
        // type at the same time
        const bucketByCall = {
            [IdBuckets.USER]: [],
            [IdBuckets.SUBREDDIT]: [],
        };
        for (const id of ids) {
            const thingPrefix = id.substring(0, 3);
            switch (thingPrefix) {
                case 't2_':
                    bucketByCall[IdBuckets.USER].push(id);
                    break;
                case 't5_':
                    bucketByCall[IdBuckets.SUBREDDIT].push(id);
                    break;
                default:
                    throw new Error(`Unknown thing type "${thingPrefix}" given when trying to look up the name for "${id}"`);
            }
        }
        const mappedResultsByBucket = await Promise.all([
            __classPrivateFieldGet(this, _NameLookup_instances, "m", _NameLookup_lookupUsers).call(this, bucketByCall[IdBuckets.USER]),
            __classPrivateFieldGet(this, _NameLookup_instances, "m", _NameLookup_lookupSubreddits).call(this, bucketByCall[IdBuckets.SUBREDDIT]),
        ]);
        for (const [id, name] of mappedResultsByBucket.flat(1)) {
            if (name) {
                retval[id] = name;
            }
        }
        return retval;
    }
}
_NameLookup_users = new WeakMap(), _NameLookup_linksAndComments = new WeakMap(), _NameLookup_instances = new WeakSet(), _NameLookup_lookupUsers = async function _NameLookup_lookupUsers(ids) {
    // short circuit if we weren't given any IDs
    if (ids.length === 0) {
        return [];
    }
    const userData = await __classPrivateFieldGet(this, _NameLookup_users, "f").UserDataByAccountIds({ ids: ids.join(',') });
    return Object.entries(userData.users).flatMap(([id, userObj]) => {
        if (!userObj.name) {
            return [];
        }
        return [[id, userObj.name]];
    });
}, _NameLookup_lookupSubreddits = async function _NameLookup_lookupSubreddits(ids) {
    // short circuit if we weren't given any IDs
    if (ids.length === 0) {
        return [];
    }
    const subData = await __classPrivateFieldGet(this, _NameLookup_linksAndComments, "f").Info({
        thingIds: ids,
        subreddits: [], // it wants names, we don't have names
    });
    const children = subData.data?.children || [];
    return children.flatMap((child) => {
        if (!child.data) {
            return [];
        }
        const id = child.data.name;
        if (!id) {
            return [];
        }
        // Yes, really. I don't like this either.
        const nameMatcher = child.data.url?.match(/\/r\/([^/]*)\/?/);
        if (!nameMatcher) {
            return [];
        }
        const name = nameMatcher[1];
        if (!name) {
            return [];
        }
        return [[id, name]];
    });
};

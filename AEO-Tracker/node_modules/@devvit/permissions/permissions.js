var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Permissions_instances, _Permissions_permissionMap, _Permissions_requireAny, _Permissions_requireAll;
import { PermissionList } from '@devvit/protos';
import yaml from 'js-yaml';
export class Permissions {
    constructor(permissionConfig) {
        _Permissions_instances.add(this);
        _Permissions_permissionMap.set(this, void 0);
        const configJson = yaml.load(permissionConfig);
        const permissionList = PermissionList.fromJSON(configJson);
        __classPrivateFieldSet(this, _Permissions_permissionMap, permissionList.permissions.reduce((permissionMap, permissionConfig) => {
            permissionMap.set(permissionConfig.actor, permissionConfig);
            return permissionMap;
        }, new Map()), "f");
    }
    size() {
        return __classPrivateFieldGet(this, _Permissions_permissionMap, "f").size;
    }
    CanAccess(caller, receiver) {
        const permissions = __classPrivateFieldGet(this, _Permissions_permissionMap, "f").get(caller)?.has ?? [];
        const permissionSet = new Set(permissions);
        const requirements = __classPrivateFieldGet(this, _Permissions_permissionMap, "f").get(receiver)?.requires;
        return requirements ? __classPrivateFieldGet(this, _Permissions_instances, "m", _Permissions_requireAll).call(this, requirements, permissionSet) : true;
    }
}
_Permissions_permissionMap = new WeakMap(), _Permissions_instances = new WeakSet(), _Permissions_requireAny = function _Permissions_requireAny(requirements, permissions) {
    return requirements.some((requirement) => {
        if (requirement.permission) {
            return permissions.has(requirement.permission);
        }
        else if (requirement.and) {
            return __classPrivateFieldGet(this, _Permissions_instances, "m", _Permissions_requireAll).call(this, requirement.and.requires, permissions);
        }
        else if (requirement.or) {
            return __classPrivateFieldGet(this, _Permissions_instances, "m", _Permissions_requireAny).call(this, requirement.or.requires, permissions);
        }
        else {
            return false;
        }
    });
}, _Permissions_requireAll = function _Permissions_requireAll(requirements, permissions) {
    return requirements.every((requirement) => {
        if (requirement.permission) {
            return permissions.has(requirement.permission);
        }
        else if (requirement.and) {
            return __classPrivateFieldGet(this, _Permissions_instances, "m", _Permissions_requireAll).call(this, requirement.and.requires, permissions);
        }
        else if (requirement.or) {
            return __classPrivateFieldGet(this, _Permissions_instances, "m", _Permissions_requireAny).call(this, requirement.or.requires, permissions);
        }
        else {
            return true;
        }
    });
};

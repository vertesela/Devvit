var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import addOutline from '../assets/icons/add-outline.svg';
import caretDownOutline from '../assets/icons/caret-down-outline.svg';
import caretUpOutline from '../assets/icons/caret-up-outline.svg';
import checkmarkFill from '../assets/icons/checkmark-fill.svg';
import closeOutline from '../assets/icons/close-outline.svg';
import communityOutline from '../assets/icons/community-outline.svg';
import copyClipboardOutline from '../assets/icons/copy-clipboard-outline.svg';
import dayOutline from '../assets/icons/day-outline.svg';
import downloadOutline from '../assets/icons/download-outline.svg';
import externalOutline from '../assets/icons/external-outline.svg';
import infoOutline from '../assets/icons/info-outline.svg';
import nightOutline from '../assets/icons/night-outline.svg';
import overflowHorizontalOutline from '../assets/icons/overflow-horizontal-outline.svg';
import readingOutline from '../assets/icons/reading-outline.svg';
import reportOutline from '../assets/icons/report-outline.svg';
import resizeHorizontalOutline from '../assets/icons/resize-horizontal-outline.svg';
import restartOutline from '../assets/icons/restart-outline.svg';
import shareNewOutline from '../assets/icons/share-new-outline.svg';
const icons = {
    'add-outline': addOutline,
    'caret-down-outline': caretDownOutline,
    'caret-up-outline': caretUpOutline,
    'checkmark-fill': checkmarkFill,
    'close-outline': closeOutline,
    'community-outline': communityOutline,
    'copy-clipboard-outline': copyClipboardOutline,
    'day-outline': dayOutline,
    'download-outline': downloadOutline,
    'external-outline': externalOutline,
    'info-outline': infoOutline,
    'night-outline': nightOutline,
    'overflow-horizontal-outline': overflowHorizontalOutline,
    'reading-outline': readingOutline,
    'report-outline': reportOutline,
    'resize-horizontal-outline': resizeHorizontalOutline,
    'restart-outline': restartOutline,
    'share-new-outline': shareNewOutline
};
let PlayIcon = class PlayIcon extends LitElement {
    constructor() {
        super(...arguments);
        this.size = '16px';
        this.color = 'currentColor';
    }
    render() {
        const style = {
            width: this.size,
            height: this.size,
            fill: this.color
        };
        return this.icon
            ? html `
          <div style=${styleMap(style)}>${unsafeHTML(icons[this.icon])}</div>
        `
            : nothing;
    }
};
__decorate([
    property({ type: String })
], PlayIcon.prototype, "size", void 0);
__decorate([
    property({ type: String })
], PlayIcon.prototype, "color", void 0);
__decorate([
    property({ type: String })
], PlayIcon.prototype, "icon", void 0);
PlayIcon = __decorate([
    customElement('play-icon')
], PlayIcon);
export { PlayIcon };
//# sourceMappingURL=play-icon.js.map
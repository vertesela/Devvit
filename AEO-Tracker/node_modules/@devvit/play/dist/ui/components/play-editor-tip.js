var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, css, html, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import ts, { displayPartsToString } from 'typescript';
let PlayEditorTip = class PlayEditorTip extends LitElement {
    render() {
        if (!this.info)
            return nothing;
        const text = displayPartsToString(this.info.displayParts);
        const docs = [];
        for (const doc of this.info.documentation ?? [])
            docs.push(html `<p>${doc.text}</p>`);
        return html `<p>${text}</p>
      ${docs}`;
    }
};
PlayEditorTip.styles = css `
    :host {
      display: block;
      max-width: 640px;
    }
    p:first-child {
      margin-top: 0;
    }
    p:last-child {
      margin-bottom: 0;
    }
  `;
__decorate([
    property({ attribute: false })
], PlayEditorTip.prototype, "diagnostics", void 0);
__decorate([
    property({ attribute: false })
], PlayEditorTip.prototype, "info", void 0);
PlayEditorTip = __decorate([
    customElement('play-editor-tip')
], PlayEditorTip);
export { PlayEditorTip };
//# sourceMappingURL=play-editor-tip.js.map
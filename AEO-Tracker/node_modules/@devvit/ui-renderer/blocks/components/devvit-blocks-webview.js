var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DevvitBlocksWebview_iframe, _DevvitBlocksWebview_handleMessage, _DevvitBlocksWebview_onLoad;
import { css, html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { createRef, ref } from 'lit/directives/ref.js';
import { customEvent } from '@reddit/faceplate/lib/custom-event.js';
import { BlockActionType } from '@devvit/protos';
/**
 * Wraps an iframe to capture messages sent from within to be handled by the app rendering the Blocks
 */
let DevvitBlocksWebview = class DevvitBlocksWebview extends LitElement {
    constructor() {
        super(...arguments);
        _DevvitBlocksWebview_iframe.set(this, createRef());
        _DevvitBlocksWebview_handleMessage.set(this, (event) => {
            if (event.source === __classPrivateFieldGet(this, _DevvitBlocksWebview_iframe, "f").value?.contentWindow) {
                event.stopImmediatePropagation();
                const action = {
                    type: BlockActionType.ACTION_WEBVIEW,
                    id: event.data.id,
                    data: event.data.data,
                };
                this.dispatchEvent(customEvent('devvit-user-action', { action }));
            }
        });
        _DevvitBlocksWebview_onLoad.set(this, () => {
            __classPrivateFieldGet(this, _DevvitBlocksWebview_iframe, "f")?.value?.contentWindow?.postMessage({
                event: this.request,
                state: this.state,
            }, '*');
        });
    }
    static get styles() {
        return [
            css `
        :host {
          display: flex;
          flex-direction: row;
        }

        iframe {
          flex-grow: 1;
          border: 0;
        }
      `,
        ];
    }
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('message', __classPrivateFieldGet(this, _DevvitBlocksWebview_handleMessage, "f"));
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        window.removeEventListener('message', __classPrivateFieldGet(this, _DevvitBlocksWebview_handleMessage, "f"));
    }
    render() {
        return html `<iframe
      src="${ifDefined(this.src)}"
      sandbox="allow-scripts"
      @load="${__classPrivateFieldGet(this, _DevvitBlocksWebview_onLoad, "f")}"
      ${ref(__classPrivateFieldGet(this, _DevvitBlocksWebview_iframe, "f"))}
    ></iframe>`;
    }
};
_DevvitBlocksWebview_iframe = new WeakMap();
_DevvitBlocksWebview_handleMessage = new WeakMap();
_DevvitBlocksWebview_onLoad = new WeakMap();
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], DevvitBlocksWebview.prototype, "src", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitBlocksWebview.prototype, "request", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitBlocksWebview.prototype, "state", void 0);
DevvitBlocksWebview = __decorate([
    customElement('devvit-blocks-webview')
], DevvitBlocksWebview);

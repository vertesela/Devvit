import { nothing } from 'lit';
import { getTemplateRenderingStrategy } from '@reddit/faceplate-ui/faceplateUIConfig.js';
import { BlockStackDirection } from '@devvit/protos';
import { alignmentClass, backgroundClass, backgroundStyle, borderClass, borderStyle, defaultClasses, defaultStyles, gapSize, stackGapStyle, onClickAction, paddingClass, pointerEventsClass, radiusClass, stackDirectionClass, } from '../attributes.js';
import { classMap } from './util.js';
import { resolveStyleColor } from './color.js';
export function renderStackBlock(block, ctx = { stackDirection: BlockStackDirection.UNRECOGNIZED }, renderBlock, attributeOverrides = undefined) {
    const { html, repeat, styleMap, ifDefined } = getTemplateRenderingStrategy();
    if (block.config?.stackConfig === undefined) {
        console.error('Invalid block: Stack missing StackConfig');
        return nothing;
    }
    const { children, direction, padding, gap, alignment, reverse, backgroundColor, backgroundColors, border, cornerRadius, } = block.config.stackConfig;
    const bgColorLight = backgroundColors?.light ?? backgroundColor;
    const bgColorDark = backgroundColors?.dark ?? bgColorLight;
    const hasBGColor = !!bgColorLight || !!bgColorDark;
    // capture mouse events on a stack if there are actions associated or there's a background color
    const pointerEvents = !!block.actions.length || hasBGColor;
    const classes = {
        ...defaultClasses(block, ctx),
        ...backgroundClass(!!backgroundColors || !!backgroundColor),
        ...stackDirectionClass(direction, reverse),
        ...paddingClass(padding),
        ...alignmentClass(direction, alignment),
        ...borderClass(border),
        ...radiusClass(cornerRadius),
        ...pointerEventsClass(pointerEvents),
        ...attributeOverrides?.classes,
    };
    const styles = {
        ...defaultStyles(block, ctx),
        ...backgroundStyle(backgroundColors, backgroundColor),
        ...borderStyle(border),
        ...stackGapStyle(direction, gap, padding, children.length),
        ...attributeOverrides?.styles,
    };
    const newCtx = {
        ...ctx,
        stackDirection: direction,
        gapSize: gapSize(gap),
    };
    const onClick = onClickAction(block, ctx);
    let blockType = '';
    switch (direction) {
        case BlockStackDirection.STACK_DEPTH:
            blockType = 'zstack';
            break;
        case BlockStackDirection.STACK_VERTICAL:
            blockType = 'vstack';
            break;
        case BlockStackDirection.STACK_HORIZONTAL:
            blockType = 'hstack';
            break;
    }
    return html `
    <div
      class="${classMap(classes)}"
      style="${styleMap(styles)}"
      @click="${ifDefined(onClick)}"
      data-debug-block-type="${blockType}"
      ${resolveStyleColor(styles, 'backgroundColor')}
      ${resolveStyleColor(styles, 'borderColor')}
    >
      ${repeat(children, (block, childIndex) => renderBlock(block, { ...newCtx, childIndex }))}
    </div>
  `;
}

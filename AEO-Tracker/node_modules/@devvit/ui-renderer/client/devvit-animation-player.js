var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { BlockAnimationDirection, BlockAnimationLoopMode, BlockAnimationType, } from '@devvit/protos';
import { html, LitElement } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import '@dotlottie/player-component';
import { ifDefined } from 'lit/directives/if-defined.js';
/**
 * @description a simple wrapper for lottie-player
 */
let DevvitAnimationPlayer = class DevvitAnimationPlayer extends LitElement {
    constructor() {
        super(...arguments);
        this.src = '';
        this.imageWidth = -1;
        this.imageHeight = -1;
        this.autoplay = true;
        this.loop = true;
        this.loopMode = BlockAnimationLoopMode.ANIM_LOOP_REPEAT;
        this.loopModeStr = 'normal';
    }
    updated(changedProperties) {
        const typeChanged = changedProperties.has('type');
        const srcChanged = changedProperties.has('src');
        switch (this.loopMode) {
            case BlockAnimationLoopMode.ANIM_LOOP_BOUNCE:
                this.loopModeStr = 'bounce';
                break;
            case BlockAnimationLoopMode.ANIM_LOOP_REPEAT:
            default:
                this.loopModeStr = 'normal';
        }
        switch (this.direction) {
            case BlockAnimationDirection.ANIM_DIR_FORWARD:
                this.directionNum = 1;
                break;
            case BlockAnimationDirection.ANIM_DIR_BACKWARD:
                this.directionNum = -1;
                break;
            default:
                this.directionNum = undefined;
        }
    }
    render() {
        /* eslint-disable @reddit/i18n-shreddit/no-unwrapped-strings */
        const imageSize = {
            width: this.imageWidth < 0 ? 'initial' : `${this.imageWidth}px`,
            height: this.imageHeight < 0 ? 'initial' : `${this.imageHeight}px`,
        };
        /* eslint-enable @reddit/i18n-shreddit/no-unwrapped-strings */
        if (this.type === BlockAnimationType.ANIM_LOTTIE) {
            return html `<dotlottie-player
        ?autoplay="${this.autoplay}"
        ?loop="${this.loop}"
        mode="${this.loopModeStr}"
        src="${this.src}"
        speed="${ifDefined(this.speed)}"
        direction="${ifDefined(this.directionNum)}"
        style="${styleMap(imageSize)}"
        class="max-w-100 max-h-100"
        light
      ></dotlottie-player>`;
        }
        // eslint-disable-next-line @reddit/i18n-shreddit/no-unwrapped-strings
        return html `<div>Unsupported animation format</div>`;
    }
};
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], DevvitAnimationPlayer.prototype, "src", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "imageWidth", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "imageHeight", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], DevvitAnimationPlayer.prototype, "autoplay", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], DevvitAnimationPlayer.prototype, "loop", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "loopMode", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "type", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "direction", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], DevvitAnimationPlayer.prototype, "speed", void 0);
__decorate([
    query('#lottie', false),
    __metadata("design:type", HTMLDivElement)
], DevvitAnimationPlayer.prototype, "$lottieAnimation", void 0);
__decorate([
    state(),
    __metadata("design:type", String)
], DevvitAnimationPlayer.prototype, "loopModeStr", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], DevvitAnimationPlayer.prototype, "directionNum", void 0);
DevvitAnimationPlayer = __decorate([
    customElement('devvit-animation-player')
], DevvitAnimationPlayer);
export { DevvitAnimationPlayer };

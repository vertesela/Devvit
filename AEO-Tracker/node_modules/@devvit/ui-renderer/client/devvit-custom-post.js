var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _DevvitCustomPost_instances, _DevvitCustomPost_lastRequest, _DevvitCustomPost_looper, _DevvitCustomPost_rootHeight, _DevvitCustomPost_bubble, _DevvitCustomPost_newRenderContext, _DevvitCustomPost_onError, _DevvitCustomPost_onPluginCall, _DevvitCustomPost_onRenderPost, _DevvitCustomPost_onUserActionEffect, _DevvitCustomPost_onUserActionEvent;
import '@reddit/faceplate-ui/templateRenderingStrategy/clientStrategy.js';
import { Block } from '@devvit/protos';
import { BlockConfig_Root, BlockRenderEventType, BlockStackDirection, RealtimeDefinition, } from '@devvit/protos';
import * as b64 from 'base64-js';
import { isCircuitBreaker } from '@devvit/runtime-lite/types/CircuitBreaker.js';
import { asT3ID } from '@devvit/shared-types/tid.js';
import { customEvent } from '@reddit/faceplate/lib/custom-event.js';
import { LitElement, html, nothing } from 'lit';
import { customElement, property, query, state } from 'lit/decorators.js';
import { DevvitBlocksRenderer } from '../blocks/components/devvit-blocks-renderer.js';
import { DEFAULT_ROOT_HEIGHT } from '../blocks/templates/renderBlock.js';
import { styles } from '../styles.js';
import { AppUILooper } from './app-ui-looper.js';
import { RemoteApp } from './ui-app.js';
import '../blocks/components/devvit-blocks-renderer.js';
import '../blocks/components/devvit-blocks-webview.js';
import './devvit-animation-player.js';
/**
 * Blocks program renderer.
 *
 * Assumes the loaded program is a CustomPost & UIEventHandler.
 *
 * The complexity of this class should only be the UI itself and proxying state
 * to devvit-blocks-renderer and AppUILooper. Don't put logic here that you
 * can't unit test.
 *
 * @slot - Loading / unloaded state.
 */
let DevvitCustomPost = class DevvitCustomPost extends LitElement {
    constructor() {
        super();
        _DevvitCustomPost_instances.add(this);
        this.useExperimentalBlocks = false;
        // to-do: don't use attributes initialized to true. They cannot be passed by
        // attributes.
        this.useSandbox = true;
        this._isSuspended = false; // eslint-disable-line @typescript-eslint/naming-convention
        _DevvitCustomPost_lastRequest.set(this, void 0);
        _DevvitCustomPost_looper.set(this, new AppUILooper());
        _DevvitCustomPost_rootHeight.set(this, void 0);
        _DevvitCustomPost_newRenderContext.set(this, () => ({
            experimental: this.useExperimentalBlocks,
            onAction: (action) => __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").queueRenderPost(BlockRenderEventType.RENDER_USER_ACTION, action.id, action.data ?? {}),
            request: __classPrivateFieldGet(this, _DevvitCustomPost_lastRequest, "f"),
            stackDirection: BlockStackDirection.UNRECOGNIZED,
            state: __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").appState,
        }));
        _DevvitCustomPost_onError.set(this, (type, err) => {
            if (!isCircuitBreaker(err))
                console.error(err);
            __classPrivateFieldGet(this, _DevvitCustomPost_instances, "m", _DevvitCustomPost_bubble).call(this, 'devvit-ui-error', { err, type });
        });
        _DevvitCustomPost_onPluginCall.set(this, (_id, serviceName, method, args, _meta) => {
            if (serviceName === RealtimeDefinition.fullName &&
                method === RealtimeDefinition.methods.send.name)
                __classPrivateFieldGet(this, _DevvitCustomPost_instances, "m", _DevvitCustomPost_bubble).call(this, 'devvit-realtime-send', { event: args });
        });
        _DevvitCustomPost_onRenderPost.set(this, (req, rsp) => {
            var _a, _b;
            this.renderResponse = rsp;
            if (this.renderResponse?.blocks?.ui) {
                __classPrivateFieldSet(this, _DevvitCustomPost_lastRequest, req.blocks, "f");
                this._rootBlock = this.renderResponse.blocks.ui;
                if (!__classPrivateFieldGet(this, _DevvitCustomPost_rootHeight, "f")) {
                    // Lock in the initial height
                    __classPrivateFieldSet(this, _DevvitCustomPost_rootHeight, this._rootBlock.config?.rootConfig?.height || DEFAULT_ROOT_HEIGHT, "f");
                }
                else {
                    (_a = this._rootBlock).config ?? (_a.config = {});
                    (_b = this._rootBlock.config).rootConfig ?? (_b.rootConfig = BlockConfig_Root.fromPartial({}));
                    this._rootBlock.config.rootConfig.height = __classPrivateFieldGet(this, _DevvitCustomPost_rootHeight, "f");
                }
            }
        });
        _DevvitCustomPost_onUserActionEffect.set(this, (fx) => {
            __classPrivateFieldGet(this, _DevvitCustomPost_instances, "m", _DevvitCustomPost_bubble).call(this, 'devvit-ui-effect', {
                effect: fx,
                onEvent: (ev) => __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").queueEvent(ev),
            });
        });
        _DevvitCustomPost_onUserActionEvent.set(this, (ev) => {
            __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").queueRenderPost(BlockRenderEventType.RENDER_USER_ACTION, ev.detail.action.id, ev.detail.action.data);
        });
        this.addEventListener('devvit-user-action', __classPrivateFieldGet(this, _DevvitCustomPost_onUserActionEvent, "f"));
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").onError = __classPrivateFieldGet(this, _DevvitCustomPost_onError, "f");
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").onPluginCall = __classPrivateFieldGet(this, _DevvitCustomPost_onPluginCall, "f");
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").onRenderPost = __classPrivateFieldGet(this, _DevvitCustomPost_onRenderPost, "f");
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").onUserAction = __classPrivateFieldGet(this, _DevvitCustomPost_onUserActionEffect, "f");
    }
    async connectedCallback() {
        super.connectedCallback();
        this._isSuspended = false;
    }
    disconnectedCallback() {
        this._isSuspended = true;
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").unload();
        super.disconnectedCallback();
    }
    get blocksConfig() {
        if (!this._rootBlock)
            return '';
        return b64.fromByteArray(Block.encode(this._rootBlock).finish());
    }
    // to-do [studio]: remove.
    rerender() {
        this._blocksRenderer?.requestUpdate();
    }
    static get styles() {
        return [styles];
    }
    render() {
        if (!this.renderResponse) {
            // The slot content is considered the loading state.
            return html `<slot></slot>`;
        }
        return html `<div class="relative">
      <devvit-blocks-renderer
        class="${this.scheme ?? ''}"
        .block="${this._rootBlock}"
        .renderContext="${__classPrivateFieldGet(this, _DevvitCustomPost_newRenderContext, "f")}"
      >
        <slot slot="empty-state-image" name="empty-state-image"></slot>
      </devvit-blocks-renderer>
      ${this._isSuspended
            ? html `<div class="absolute top-0 left-0 w-full h-full bg-transparent border-none"></div>`
            : nothing}
    </div>`;
    }
    async willUpdate(props) {
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").meta = this.metadata;
        __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").postConfig = this.postConfig;
        if (props.has('postId')) {
            __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").postID = this.postId ? asT3ID(this.postId) : undefined;
        }
        if (props.has('actorRef')) {
            if (!this.actorRef)
                __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").remote = undefined;
            else if ('As' in this.actorRef)
                __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").remote = new RemoteApp(this.actorRef);
            else
                __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").remote = this.actorRef;
        }
        if (props.has('localRuntimeCode'))
            __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").setLocalSrc(this.localRuntimeCode);
        if (props.has('bundle') && this.bundle) {
            await __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").load(this.bundle, this.useSandbox);
            // Bundle was _replaced_. Require a new render.
            if (props.get('bundle'))
                __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").resetAppState();
        }
        if (!__classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").rendered)
            __classPrivateFieldGet(this, _DevvitCustomPost_looper, "f").queueRenderPost(BlockRenderEventType.RENDER_INITIAL, undefined, {});
    }
};
_DevvitCustomPost_lastRequest = new WeakMap();
_DevvitCustomPost_looper = new WeakMap();
_DevvitCustomPost_rootHeight = new WeakMap();
_DevvitCustomPost_newRenderContext = new WeakMap();
_DevvitCustomPost_onError = new WeakMap();
_DevvitCustomPost_onPluginCall = new WeakMap();
_DevvitCustomPost_onRenderPost = new WeakMap();
_DevvitCustomPost_onUserActionEffect = new WeakMap();
_DevvitCustomPost_onUserActionEvent = new WeakMap();
_DevvitCustomPost_instances = new WeakSet();
_DevvitCustomPost_bubble = function _DevvitCustomPost_bubble(type, detail) {
    this.dispatchEvent(customEvent(type, detail));
};
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "actorRef", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "bundle", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "localRuntimeCode", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "metadata", void 0);
__decorate([
    property({ attribute: false }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "postConfig", void 0);
__decorate([
    property({ attribute: 'post-id' }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "postId", void 0);
__decorate([
    property({ attribute: 'scheme' }),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "scheme", void 0);
__decorate([
    property({ attribute: 'use-experimental-blocks', type: Boolean }),
    __metadata("design:type", Boolean)
], DevvitCustomPost.prototype, "useExperimentalBlocks", void 0);
__decorate([
    property({ attribute: 'use-sandbox', type: Boolean }),
    __metadata("design:type", Boolean)
], DevvitCustomPost.prototype, "useSandbox", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "renderResponse", void 0);
__decorate([
    query('devvit-blocks-renderer'),
    __metadata("design:type", DevvitBlocksRenderer)
], DevvitCustomPost.prototype, "_blocksRenderer", void 0);
__decorate([
    state(),
    __metadata("design:type", Boolean)
], DevvitCustomPost.prototype, "_isSuspended", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], DevvitCustomPost.prototype, "_rootBlock", void 0);
DevvitCustomPost = __decorate([
    customElement('devvit-custom-post'),
    __metadata("design:paramtypes", [])
], DevvitCustomPost);
export { DevvitCustomPost };

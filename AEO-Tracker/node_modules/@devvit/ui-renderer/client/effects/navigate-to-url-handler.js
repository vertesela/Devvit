var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NavigateToUrlEffectHandler_queryString, _NavigateToUrlEffectHandler_parentWindowInfo, _NavigateToUrlEffectHandler_dialog;
import { DevvitEffectHandler } from './devvit-effect-handler.js';
const IPV4_PATTERN = 
// eslint-disable-next-line security/detect-unsafe-regex
/((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])/;
const IPV6_PATTERN = 
// eslint-disable-next-line security/detect-unsafe-regex
/(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]+|::(ffff(:0{1,4})?:)?((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\.){3}(25[0-5]|(2[0-4]|1?[0-9])?[0-9]))/;
export class NavigateToUrlEffectHandler extends DevvitEffectHandler {
    constructor(host, queryString = 'devvit-navigate-offsite-dialog', parentWindowInfo) {
        super(host);
        _NavigateToUrlEffectHandler_queryString.set(this, void 0);
        _NavigateToUrlEffectHandler_parentWindowInfo.set(this, void 0);
        _NavigateToUrlEffectHandler_dialog.set(this, void 0);
        __classPrivateFieldSet(this, _NavigateToUrlEffectHandler_queryString, queryString, "f");
        __classPrivateFieldSet(this, _NavigateToUrlEffectHandler_parentWindowInfo, parentWindowInfo, "f");
    }
    hostUpdated() {
        super.hostUpdated();
        __classPrivateFieldSet(this, _NavigateToUrlEffectHandler_dialog, this.host.renderRoot.querySelector(__classPrivateFieldGet(this, _NavigateToUrlEffectHandler_queryString, "f")), "f");
    }
    onNavigateToUrl(navigateTo, _onEvent) {
        try {
            const url = new URL(navigateTo.url);
            // Strip auth segments
            if (url.username) {
                url.username = '';
            }
            if (url.password) {
                url.password = '';
            }
            // Enforce HTTPS
            if (url.protocol !== 'https:') {
                console.warn('App provided a non-secure URL to navigate to:', url.toString);
                return;
            }
            // Disallow IP address hosts
            if (url.hostname.match(IPV4_PATTERN) || url.hostname.match(IPV6_PATTERN)) {
                console.warn('App provided invalid URL to navigate to:', url.toString());
                return;
            }
            // Disallow extended unicode hostnames
            if (url.hostname.startsWith('xn--')) {
                console.warn('Extended hostnames are not allowed:', url.toString());
                return;
            }
            if (__classPrivateFieldGet(this, _NavigateToUrlEffectHandler_parentWindowInfo, "f")) {
                this.postMessageToWindow(__classPrivateFieldGet(this, _NavigateToUrlEffectHandler_parentWindowInfo, "f"), {
                    url: url.href,
                    effectName: 'devvit:navigateToEffect',
                });
                return;
            }
            if (url.hostname.endsWith('reddit.com')) {
                window.open(url, '_self');
            }
            else {
                __classPrivateFieldGet(this, _NavigateToUrlEffectHandler_dialog, "f")?.show(url.toString());
            }
        }
        catch (e) {
            console.warn('Unable to parse URL:', navigateTo.url);
        }
    }
}
_NavigateToUrlEffectHandler_queryString = new WeakMap(), _NavigateToUrlEffectHandler_parentWindowInfo = new WeakMap(), _NavigateToUrlEffectHandler_dialog = new WeakMap();

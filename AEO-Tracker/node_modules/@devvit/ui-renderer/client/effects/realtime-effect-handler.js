var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _RealtimeEffectHandler_instances, _RealtimeEffectHandler_onEvent, _RealtimeEffectHandler_sendEvent;
import { RealtimeSubscriptionStatus } from '@devvit/protos';
import { DevvitEffectHandler } from './devvit-effect-handler.js';
export class RealtimeEffectHandler extends DevvitEffectHandler {
    constructor(host) {
        super(host);
        _RealtimeEffectHandler_instances.add(this);
        _RealtimeEffectHandler_onEvent.set(this, void 0);
    }
    hostConnected() {
        super.hostConnected();
        this.host.addEventListener('devvit-realtime-send', (ev) => void __classPrivateFieldGet(this, _RealtimeEffectHandler_instances, "m", _RealtimeEffectHandler_sendEvent).call(this, ev));
    }
    get onEvent() {
        return __classPrivateFieldGet(this, _RealtimeEffectHandler_onEvent, "f");
    }
    onSubscribe(channel) {
        __classPrivateFieldGet(this, _RealtimeEffectHandler_onEvent, "f")?.call(this, {
            realtimeEvent: { event: { channel }, status: RealtimeSubscriptionStatus.REALTIME_SUBSCRIBED },
        });
    }
    onUnsubscribe(channel) {
        __classPrivateFieldGet(this, _RealtimeEffectHandler_onEvent, "f")?.call(this, {
            realtimeEvent: {
                event: { channel },
                status: RealtimeSubscriptionStatus.REALTIME_UNSUBSCRIBED,
            },
        });
    }
    onRealtimeSubscriptions(subscriptions, onEvent) {
        __classPrivateFieldSet(this, _RealtimeEffectHandler_onEvent, onEvent, "f");
        this.subscribe(subscriptions.subscriptionIds);
    }
}
_RealtimeEffectHandler_onEvent = new WeakMap(), _RealtimeEffectHandler_instances = new WeakSet(), _RealtimeEffectHandler_sendEvent = async function _RealtimeEffectHandler_sendEvent(ev) {
    const { event } = ev.detail;
    await this.send(event.channel, event.data);
};

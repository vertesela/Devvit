import type { Effect, Form, NavigateToUrlEffect, RealtimeSubscriptionsEffect, ReloadPartEffect, Toast, UIEvent } from '@devvit/protos';
import type { Severity } from '@reddit/faceplate/types.js';
import type { ReactiveController, ReactiveElement } from 'lit';
import type { ParentWindowInfo } from '../../types/parent-window.js';
export type DevvitPostMessageEffectDetail = {
    onEvent?(event: UIEvent): void;
} & ({
    effectName: 'devvit:navigateToEffect';
    url: string;
} | {
    effectName: 'devvit:toastEffect';
    message: string;
    level: Severity;
} | {
    effectName: 'devvit:formEffect';
    form: Form;
});
export declare abstract class DevvitEffectHandler implements ReactiveController {
    #private;
    protected host: ReactiveElement;
    constructor(host: ReactiveElement);
    protected onShowToast(_toast: Toast, _onEvent: (event: UIEvent) => void): void;
    protected onShowForm(_form: Form, _onEvent: (event: UIEvent) => void): void;
    protected onReloadPart(_parts: ReloadPartEffect, _onEvent: (event: UIEvent) => void): void;
    protected onNavigateToUrl(_navigateTo: NavigateToUrlEffect, _onEvent: (event: UIEvent) => void): void;
    protected onRealtimeSubscriptions(_subscriptions: RealtimeSubscriptionsEffect, _onEvent: (event: UIEvent) => void): void;
    hostConnected(): void;
    hostDisconnected(): void;
    hostUpdate(): void;
    hostUpdated(): void;
    postMessageToWindow: (parentWindowInfo: ParentWindowInfo, eventDetail: DevvitPostMessageEffectDetail) => void;
    handle: (effect: Effect, onEvent: (event: UIEvent) => void) => void;
}
//# sourceMappingURL=devvit-effect-handler.d.ts.map
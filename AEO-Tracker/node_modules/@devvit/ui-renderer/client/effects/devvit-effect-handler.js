var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DevvitEffectHandler_handleEvent;
import { EffectType } from '@devvit/protos';
export class DevvitEffectHandler {
    constructor(host) {
        _DevvitEffectHandler_handleEvent.set(this, (event) => {
            const { effect, onEvent } = event.detail;
            this.handle(effect, onEvent);
        });
        this.postMessageToWindow = (parentWindowInfo, eventDetail) => {
            /*
              postMessage to a specified window and host origin.
              Most commonly used in iframe situations, so that effect details can be sent to the iframe parent, instead of the iframe window itself.
            */
            const { windowTop, postMessageHostOrigin } = parentWindowInfo;
            if (!windowTop && !postMessageHostOrigin)
                return;
            windowTop.postMessage(eventDetail, postMessageHostOrigin);
        };
        this.handle = (effect, onEvent) => {
            switch (effect.type) {
                case EffectType.EFFECT_SHOW_TOAST:
                    if (effect.showToast?.toast) {
                        this.onShowToast(effect.showToast.toast, onEvent);
                    }
                    break;
                case EffectType.EFFECT_SHOW_FORM:
                    if (effect.showForm?.form) {
                        this.onShowForm(effect.showForm.form, onEvent);
                    }
                    break;
                case EffectType.EFFECT_REALTIME_SUB:
                    if (effect.realtimeSubscriptions) {
                        this.onRealtimeSubscriptions(effect.realtimeSubscriptions, onEvent);
                    }
                    break;
                case EffectType.EFFECT_RELOAD_PART:
                    if (effect.reloadPart) {
                        this.onReloadPart(effect.reloadPart, onEvent);
                    }
                    break;
                case EffectType.EFFECT_NAVIGATE_TO_URL:
                    if (effect.navigateToUrl) {
                        this.onNavigateToUrl(effect.navigateToUrl, onEvent);
                    }
                    break;
                default:
                    return;
            }
        };
        this.host = host;
        this.host.addController(this);
    }
    onShowToast(_toast, _onEvent) { }
    onShowForm(_form, _onEvent) { }
    onReloadPart(_parts, _onEvent) { }
    onNavigateToUrl(_navigateTo, _onEvent) { }
    onRealtimeSubscriptions(_subscriptions, _onEvent) { }
    hostConnected() {
        this.host.addEventListener('devvit-ui-effect', __classPrivateFieldGet(this, _DevvitEffectHandler_handleEvent, "f"));
    }
    hostDisconnected() {
        this.host.removeEventListener('devvit-ui-effect', __classPrivateFieldGet(this, _DevvitEffectHandler_handleEvent, "f"));
    }
    hostUpdate() { }
    hostUpdated() { }
}
_DevvitEffectHandler_handleEvent = new WeakMap();

import '@reddit/faceplate-ui/templateRenderingStrategy/clientStrategy.js';
import type { BlockAction, Effect, LinkedBundle, Metadata, RenderPostResponse, Struct, UIEvent, RealtimeEvent } from '@devvit/protos';
import type { WorkerErrorType } from '@devvit/runtime-lite/client/BrowserLiteClient.js';
import type { ActorRef } from '@devvit/runtimes/common/runtime/ActorRef.js';
import type { FaceplateEvent } from '@reddit/faceplate/event-types.js';
import type { PropertyValues } from 'lit';
import { LitElement } from 'lit';
import type { UIApp } from './ui-app.js';
import '../blocks/components/devvit-blocks-renderer.js';
import '../blocks/components/devvit-blocks-webview.js';
import './devvit-animation-player.js';
declare global {
    interface HTMLElementTagNameMap {
        'devvit-custom-post': DevvitCustomPost;
    }
    interface HTMLElementEventMap {
        'devvit-realtime-send': DevvitRealtimeSendEvent;
        'devvit-ui-effect': DevvitUIEffectEvent;
        'devvit-ui-error': FaceplateEvent<'devvit-ui-error'> & {
            detail: DevvitUIError;
        };
        'devvit-user-action': DevvitUserActionEvent;
    }
}
export type DevvitRealtimeSend = {
    event: RealtimeEvent;
};
export type DevvitRealtimeSendEvent = FaceplateEvent<'devvit-realtime-send'> & {
    detail: DevvitRealtimeSend;
};
export type DevvitUIEffect = {
    effect: Effect;
    onEvent(event: UIEvent): void;
};
export type DevvitUIEffectEvent = FaceplateEvent<'devvit-ui-effect'> & {
    detail: DevvitUIEffect;
};
export type DevvitUIError = {
    type: WorkerErrorType;
    err: unknown;
};
export type DevvitUserAction = {
    action: BlockAction;
};
export type DevvitUserActionEvent = FaceplateEvent<'devvit-user-action'> & {
    detail: DevvitUserAction;
};
/**
 * Blocks program renderer.
 *
 * Assumes the loaded program is a CustomPost & UIEventHandler.
 *
 * The complexity of this class should only be the UI itself and proxying state
 * to devvit-blocks-renderer and AppUILooper. Don't put logic here that you
 * can't unit test.
 *
 * @slot - Loading / unloaded state.
 */
export declare class DevvitCustomPost extends LitElement {
    #private;
    /** Probably a wrapper around the remote runtime (compute-go). */
    actorRef?: ActorRef | UIApp | undefined;
    bundle?: LinkedBundle | undefined;
    localRuntimeCode?: Blob | undefined;
    metadata?: Metadata | undefined;
    postConfig?: Struct['fields'] | undefined;
    postId?: string | undefined;
    scheme?: 'dark' | 'light' | undefined;
    useExperimentalBlocks: boolean;
    useSandbox: boolean;
    renderResponse?: RenderPostResponse | undefined;
    private _blocksRenderer;
    private _isSuspended;
    private _rootBlock?;
    constructor();
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    get blocksConfig(): string;
    rerender(): void;
    static get styles(): import("lit").CSSResult[];
    protected render(): import("lit-html").TemplateResult<1>;
    protected willUpdate(props: PropertyValues<this>): Promise<void>;
}
//# sourceMappingURL=devvit-custom-post.d.ts.map
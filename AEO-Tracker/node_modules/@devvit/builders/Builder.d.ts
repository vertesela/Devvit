import type { BuildPack } from '@devvit/build-pack/lib/BuildPack.js';
import type { Resolver, Builder as BuilderService, CompileParams, Metadata } from '@devvit/protos';
import { BuildResponse } from '@devvit/protos';
import type { Disposable } from '@devvit/shared-types/Disposable.js';
import type { Observable } from 'rxjs';
export type Builder = BuilderService & Disposable;
export declare class DefaultBuilder implements Builder {
    #private;
    constructor(pack: BuildPack, resolver: Resolver);
    dispose(): Promise<void>;
    Build(request: CompileParams, metadata: Metadata | undefined): Promise<BuildResponse>;
    Watch(request: CompileParams, metadata: Metadata | undefined): Observable<BuildResponse>;
}
//# sourceMappingURL=Builder.d.ts.map
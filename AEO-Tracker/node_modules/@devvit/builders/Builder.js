var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DefaultBuilder_instances, _DefaultBuilder_pack, _DefaultBuilder_linker, _DefaultBuilder_watchSubscriptions, _DefaultBuilder_link;
import { DefaultLinker } from '@devvit/linkers/linker.js';
import { defaultPermissions } from '@devvit/permissions';
import { BuildResponse, CompileLog } from '@devvit/protos';
import { BehaviorSubject, mergeMap } from 'rxjs';
export class DefaultBuilder {
    constructor(pack, resolver) {
        _DefaultBuilder_instances.add(this);
        _DefaultBuilder_pack.set(this, void 0);
        _DefaultBuilder_linker.set(this, void 0);
        _DefaultBuilder_watchSubscriptions.set(this, void 0);
        __classPrivateFieldSet(this, _DefaultBuilder_pack, pack, "f");
        __classPrivateFieldSet(this, _DefaultBuilder_linker, new DefaultLinker(resolver, defaultPermissions), "f");
        __classPrivateFieldSet(this, _DefaultBuilder_watchSubscriptions, [], "f");
    }
    async dispose() {
        for (const watcher of __classPrivateFieldGet(this, _DefaultBuilder_watchSubscriptions, "f"))
            watcher.unsubscribe();
        await __classPrivateFieldGet(this, _DefaultBuilder_pack, "f").dispose();
    }
    async Build(request, metadata) {
        const compileResponse = await __classPrivateFieldGet(this, _DefaultBuilder_pack, "f").Compile(request, metadata);
        return await __classPrivateFieldGet(this, _DefaultBuilder_instances, "m", _DefaultBuilder_link).call(this, compileResponse, metadata);
    }
    Watch(request, metadata) {
        const adapter = new BehaviorSubject(BuildResponse.fromPartial({}));
        const subscription = __classPrivateFieldGet(this, _DefaultBuilder_pack, "f")
            .Watch(request, metadata)
            .pipe(mergeMap((compileResponse) => __classPrivateFieldGet(this, _DefaultBuilder_instances, "m", _DefaultBuilder_link).call(this, compileResponse, metadata)))
            .subscribe((response) => adapter.next(response));
        __classPrivateFieldGet(this, _DefaultBuilder_watchSubscriptions, "f").push(subscription);
        return adapter;
    }
}
_DefaultBuilder_pack = new WeakMap(), _DefaultBuilder_linker = new WeakMap(), _DefaultBuilder_watchSubscriptions = new WeakMap(), _DefaultBuilder_instances = new WeakSet(), _DefaultBuilder_link = async function _DefaultBuilder_link(compileResponse, metadata) {
    const linkResponse = compileResponse.bundle == null
        ? undefined
        : await __classPrivateFieldGet(this, _DefaultBuilder_linker, "f").Link(compileResponse.bundle, metadata);
    const linkErrors = linkResponse?.errors.map((error) => CompileLog.fromPartial({ text: error.text })) ?? [];
    return BuildResponse.fromPartial({
        bundle: linkResponse?.bundle,
        errors: [...compileResponse.errors, ...linkErrors],
        warnings: compileResponse.warnings,
    });
};

// Only the following domains are approved: redd.it, redditstatic.com, redditmedia.com, or snoo.dev
export const REDD_IT = 'redd.it';
export const REDDIT_STATIC = 'redditstatic.com';
export const REDDIT_MEDIA = 'redditmedia.com';
export const SNOO_DEV = 'snoo.dev';
export const VerifiedPublicImageHosts = [REDD_IT, REDDIT_STATIC, REDDIT_MEDIA];
export const VerifiedImageHosts = [
    SNOO_DEV,
    REDD_IT,
    REDDIT_STATIC,
    REDDIT_MEDIA,
];
const DATA_URL_REGEX = 
// eslint-disable-next-line security/detect-unsafe-regex
/^data:([a-zA-Z]+\/[a-zA-Z0-9.+_-]+)?(;charset=[a-zA-Z0-9._+-]+)?(;base64)?,(.*)/;
function preprocessDataUrl(input) {
    /**
     * This can be submitted to us as multi-line and that will break the parser
     * so we remove all newlines here
     */
    return input.trim().replace(/[\r\n]+/g, '');
}
export function isDataUrl(input) {
    return !!preprocessDataUrl(input).match(DATA_URL_REGEX);
}
export function parseDataUrl(dataUrl) {
    const matches = DATA_URL_REGEX.exec(preprocessDataUrl(dataUrl));
    if (!matches)
        return;
    return {
        mimeType: matches[1],
        charset: matches[2]?.split('=')[1], // Extract charset without ';charset='
        isBase64: !!matches[3],
        data: matches[4].trim(),
    };
}
export function isAcceptableDataUrlMimeType(mimeType) {
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#image_types
    const acceptableMimeTypes = ['image/svg+xml'];
    return acceptableMimeTypes.includes(mimeType);
}
export function isAcceptableDataUrl(maybeDataUrl) {
    const parsedDataUrl = parseDataUrl(maybeDataUrl);
    if (!parsedDataUrl?.mimeType)
        return false;
    return isAcceptableDataUrlMimeType(parsedDataUrl.mimeType);
}
export function isValidImageURL(imageUrl) {
    try {
        if (isAcceptableDataUrl(imageUrl))
            return true;
        // The second "base" param helps to handle relative paths to local files
        // https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#parameters
        const hostName = new URL(imageUrl, `https://i.${REDD_IT}`)?.hostname;
        const tld = hostName.split('.').slice(-2).join('.');
        return Boolean(tld) && VerifiedImageHosts.includes(tld);
    }
    catch (_) {
        return false;
    }
}

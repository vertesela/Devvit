import { Immutable } from './Immutable.js';
// https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types
const supportedObjectTypes = Immutable(new Set([
    Boolean,
    String,
    Date,
    // to-do: Blob,
    // to-do: File,
    // to-do: FileList,
    ArrayBuffer,
    DataView,
    // to-do: ImageBitmap,
    // to-do: ImageData,
    Array,
    Object,
    Map,
    Set,
    // TypedArray
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array,
    BigInt64Array,
    BigUint64Array,
    // Errors
    // to-do: DOMException
    Error,
    EvalError,
    RangeError,
    ReferenceError,
    SyntaxError,
    TypeError,
    URIError,
].map((type) => type.prototype)));
/**
 * If cloneable by the [structured clone algorithm], returns []. If not, returns
 * the path and value of the first non-cloneable data.
 *
 * [structured clone algorithm]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
 */
export function findUncloneable(path, dat) {
    if (dat == null)
        return [];
    if (typeof dat === 'bigint')
        return [];
    if (typeof dat === 'boolean')
        return [];
    if (typeof dat === 'function')
        return [path, `function: ${String(dat)}`];
    if (typeof dat === 'number')
        return [];
    if (typeof dat === 'string')
        return [];
    if (typeof dat === 'symbol')
        return [path, `symbol: ${String(dat)}`];
    if (dat instanceof RegExp)
        return [path, `regex: ${String(dat)}`];
    const obj = dat;
    const proto = Object.getPrototypeOf(obj);
    if (obj instanceof Object && proto != null && !isSupportedObjectType(proto))
        return [path, dat];
    for (const [key, val] of Object.entries(obj)) {
        const descendant = findUncloneable(`${path}.${key}`, val);
        if (descendant.length > 0)
            return descendant;
    }
    return [];
}
function isSupportedObjectType(proto) {
    return supportedObjectTypes.has(proto);
}

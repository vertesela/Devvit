export declare function assertNonNull<T>(val: null extends T ? T : never, msg?: string): asserts val is null extends T ? NonNullable<T> : never;
export declare function assertNonNull<T>(val: undefined extends T ? T : never, msg?: string): asserts val is undefined extends T ? NonNullable<T> : never;
/**
 * Returns a nonnullish value or throws.
 *
 * This function can be thought of as casting or enforcing nonnullish
 * values similar to the way `BigInt(.5)` throws a RangeError when
 * passed a noninteger.
 */
export declare function NonNull<T>(val: null extends T ? T : never, msg?: string): NonNullable<T>;
export declare function NonNull<T>(val: undefined extends T ? T : never, msg?: string): NonNullable<T>;
//# sourceMappingURL=NonNull.d.ts.map
/// <reference lib="dom" />
import type { LinkedBundle, Metadata } from '@devvit/protos';
import type { CallResponse, PluginOptions } from '../runtime/RuntimeLite.js';
export type WorkerErrorType = 'Error' | 'MessageError' | 'UnhandledRejection';
export type ErrorCallback = (type: WorkerErrorType, err: unknown) => void;
export type LiteClient = {
    call(method: string, args: unknown, meta: Metadata | undefined): Promise<unknown>;
    loadBundle(app: Readonly<LinkedBundle>, sandbox?: boolean): Promise<void>;
    onPluginResponse(id: number, result: CallResponse): void;
    quit(): void;
    ready: boolean;
};
/**
 * Wraps worker, runtime lifecycles, and call un/packing.
 *
 * Used by Shreddit via devvit-custom-post. A feed would have one client per
 * post. Not used by native mobile apps which doesn't have workers.
 *
 * Web workers can run code from data URI or URL of window origin.
 */
export declare class BrowserLiteClient implements LiteClient {
    #private;
    /** @arg onError Worker error event handler. */
    constructor(workerCode: Blob, onError?: ErrorCallback, pluginOptions?: PluginOptions);
    get ready(): boolean;
    loadBundle(bundle: LinkedBundle, sandbox?: boolean): Promise<void>;
    call(method: string, args: unknown, metadata: Metadata | undefined): Promise<unknown>;
    onPluginResponse(id: number, result: CallResponse): void;
    /** Call this method before repeating a call to loadBundle(). */
    quit(): void;
}
//# sourceMappingURL=BrowserLiteClient.d.ts.map
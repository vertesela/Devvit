import type { LinkedBundle } from '@devvit/protos';
type PromiseParams<T> = Parameters<ConstructorParameters<typeof Promise<T>>[0]>;
export type ResolveRejectHandlers<T = unknown> = {
    resolve: PromiseParams<T>[0];
    reject: PromiseParams<T>[1];
};
/**
 * Saves the promise callbacks for calls made asynchronously to BrowserLiteWorker to be
 * used when a response is received from the worker.
 */
export type ReturnHandlerMap<T = unknown> = {
    [key: number]: ResolveRejectHandlers<T>;
};
export declare function getAppName(bundle: Readonly<LinkedBundle>): string;
export declare function getAppTitle(bundle: Readonly<LinkedBundle>): string;
export {};
//# sourceMappingURL=ClientShared.d.ts.map
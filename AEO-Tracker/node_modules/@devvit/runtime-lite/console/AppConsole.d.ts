/**
 * Logging API supported in sandboxed execution. The sandboxed runtime provides
 * this API to its sandbox. The unsandboxed runtime may be a superset and may
 * intermingle runtime debug logs. The runtime may log additional important
 * details such as uncaught errors and unhandled rejections.
 */
export type AppConsole = Pick<Console, AppConsoleMethod>;
/** Logging API method names. A subset of Console. */
export type AppConsoleMethod = ('debug' | 'error' | 'info' | 'log' | 'trace' | 'warn') & keyof Console;
/**
 * The AppConsole API invoked and the arguments invoked with. These are
 * usually kept in order emitted.
 */
export type AppLog = {
    /** Eg, `'log'` for `console.log('abc')`. */
    method: AppConsoleMethod;
    /**
     * Inspectified arguments. Eg, `['abc']` for `console.log('abc')`.
     *
     * This is stringified because it is for logging only and the original
     * arguments may not be structure cloneable (required by postMessage()) which
     * would cause console.log() to confusingly throw an error.
     */
    args: string[];
};
//# sourceMappingURL=AppConsole.d.ts.map
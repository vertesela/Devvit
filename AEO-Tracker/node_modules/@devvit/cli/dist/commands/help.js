var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Help_instances, _Help_logAdditionalHelpContent;
import { Command } from '@oclif/core';
import NoTopicHelpImpl from '../lib/help.js';
import chalk from 'chalk';
class Help extends Command {
    constructor() {
        super(...arguments);
        _Help_instances.add(this);
    }
    async run() {
        await new NoTopicHelpImpl(this.config).showRootHelp();
        __classPrivateFieldGet(this, _Help_instances, "m", _Help_logAdditionalHelpContent).call(this);
    }
}
_Help_instances = new WeakSet(), _Help_logAdditionalHelpContent = function _Help_logAdditionalHelpContent() {
    this.log(`${chalk.bold('DOCUMENTATION')}\n  https://developers.reddit.com/docs \n\n${chalk.bold('REPORT A BUG')}\n  https://reddit.com/r/devvit`);
};
Help.description = 'Display help for devvit';
export default Help;

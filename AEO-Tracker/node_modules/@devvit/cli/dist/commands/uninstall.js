var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Uninstall_installationsClient, _Uninstall_appVersionClient;
import { GetAllWithInstallLocationRequest, InstallationType, UUID } from '@devvit/protos';
import { StringUtil } from '@devvit/shared-types/StringUtil.js';
import { Args, ux } from '@oclif/core';
import { createAppVersionClient, createInstallationsClient } from '../util/clientGenerators.js';
import { DevvitCommand, toLowerCaseArgParser } from '../util/commands/DevvitCommand.js';
class Uninstall extends DevvitCommand {
    constructor() {
        super(...arguments);
        _Uninstall_installationsClient.set(this, createInstallationsClient(this));
        _Uninstall_appVersionClient.set(this, createAppVersionClient(this));
    }
    async run() {
        const { args } = await this.parse(Uninstall);
        const appName = args.app || (await this.inferAppNameFromProject());
        await this.getAccessTokenAndLoginIfNeeded();
        ux.action.start(`Finding installation of the app "${appName}" in ${args.subreddit.startsWith('r/') ? args.subreddit : `r/${args.subreddit}`}`);
        let id;
        try {
            const allInstalledHere = await __classPrivateFieldGet(this, _Uninstall_installationsClient, "f").GetAllWithInstallLocation(GetAllWithInstallLocationRequest.fromPartial({
                type: InstallationType.SUBREDDIT,
                location: args.subreddit,
            }));
            // TODO I do not like how I'm doing this. I think we should make a new API call for this, but this _does_ work for now.
            const installationToRemove = (await Promise.all(allInstalledHere.installations.map(async (installation) => {
                const fullInstallInfo = await __classPrivateFieldGet(this, _Uninstall_installationsClient, "f").GetByUUID(UUID.fromPartial({ id: installation.id }));
                const appVersionInfo = await __classPrivateFieldGet(this, _Uninstall_appVersionClient, "f").Get(UUID.fromPartial({ id: fullInstallInfo.appVersion?.id }));
                if (appVersionInfo.app?.slug === appName) {
                    // This is the one we want to uninstall
                    return installation;
                }
                else {
                    return null;
                }
            }))).find((maybeInstall) => !!maybeInstall);
            if (!installationToRemove) {
                this.error(`Could not uninstall - no installation of "${appName}" exists in that location!`);
            }
            id = installationToRemove.id;
        }
        catch (err) {
            this.error(`Error while trying to find installation to remove: ${StringUtil.caughtToString(err)}`);
        }
        ux.action.stop(`✅`);
        ux.action.start(`Uninstalling`);
        try {
            await __classPrivateFieldGet(this, _Uninstall_installationsClient, "f").Remove(UUID.fromPartial({ id }));
        }
        catch (err) {
            this.error(`ERROR: Unable to uninstall app: ${StringUtil.caughtToString(err)}`);
        }
        ux.action.stop('✅');
    }
}
_Uninstall_installationsClient = new WeakMap(), _Uninstall_appVersionClient = new WeakMap();
Uninstall.description = 'Uninstall an app from the specified subreddit';
Uninstall.examples = [
    '$ devvit uninstall <subreddit> [app]',
    '$ devvit uninstall r/myTestSubreddit',
    '$ devvit uninstall myOtherTestSubreddit my-app',
];
Uninstall.args = {
    subreddit: Args.string({
        description: 'Provide the name of the subreddit to uninstall from. The "r/" prefix is optional',
        required: true,
        parse: toLowerCaseArgParser,
    }),
    app: Args.string({
        description: 'Provide the name of the app to uninstall (defaults to working directory app).',
        required: false,
        parse: toLowerCaseArgParser,
    }),
};
export default Uninstall;

var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ListApps_instances, _ListApps_appService, _ListApps_logApps;
import { GetAllWithOwnerRequest } from '@devvit/protos';
import { ux } from '@oclif/core';
import { DevvitCommand } from '../../util/commands/DevvitCommand.js';
import { createAppClient } from '../../util/clientGenerators.js';
class ListApps extends DevvitCommand {
    constructor() {
        super(...arguments);
        _ListApps_instances.add(this);
        _ListApps_appService.set(this, createAppClient(this));
    }
    async run() {
        const token = await this.getAccessTokenAndLoginIfNeeded();
        const t2_id = await this.getUserT2Id(token);
        ux.action.start('Fetching');
        const res = await __classPrivateFieldGet(this, _ListApps_appService, "f").GetAllWithOwner(GetAllWithOwnerRequest.fromPartial({ owner: t2_id }));
        ux.action.stop();
        __classPrivateFieldGet(this, _ListApps_instances, "m", _ListApps_logApps).call(this, res.apps);
    }
}
_ListApps_appService = new WeakMap(), _ListApps_instances = new WeakSet(), _ListApps_logApps = function _ListApps_logApps(apps) {
    const tableData = apps.map((app) => ({
        name: app.name,
        installCount: app.stats.installCount,
    }));
    const appNameColumn = {
        header: 'App name',
        get: (entry) => entry.name,
    };
    const latestVersionColumn = {
        header: 'Number of installs',
        get: (entry) => entry.installCount,
    };
    ux.table(tableData, { appNameColumn, latestVersionColumn });
};
ListApps.description = 'List all apps that you have published';
export default ListApps;

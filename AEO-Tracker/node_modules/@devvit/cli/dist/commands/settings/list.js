var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ListAppSettings_instances, _ListAppSettings_appSettingsService, _ListAppSettings_appService, _ListAppSettings_displayAppSettingsKeys;
import { createAppClient, createAppSettingsClient } from '../../util/clientGenerators.js';
import { ux } from '@oclif/core';
import { StringUtil } from '@devvit/shared-types/StringUtil.js';
import { FormFieldType } from '@devvit/protos';
import { ProjectCommand } from '../../util/commands/ProjectCommand.js';
import { getAppBySlug } from '../../util/utils.js';
import { TwirpError, TwirpErrorCode } from 'twirp-ts';
class ListAppSettings extends ProjectCommand {
    constructor() {
        super(...arguments);
        _ListAppSettings_instances.add(this);
        _ListAppSettings_appSettingsService.set(this, createAppSettingsClient(this));
        _ListAppSettings_appService.set(this, createAppClient(this));
    }
    async run() {
        const projectConfig = await this.getProjectConfig();
        const appName = projectConfig.slug ?? projectConfig.name;
        ux.action.start('Fetching app setting keys');
        try {
            const appInfo = await getAppBySlug(__classPrivateFieldGet(this, _ListAppSettings_appService, "f"), appName);
            if (!appInfo?.app?.id) {
                ux.action.stop(`❌ Your app doesn't exist yet - you'll need to run 'devvit upload' before you can list settings.`);
                return;
            }
            const response = await __classPrivateFieldGet(this, _ListAppSettings_appSettingsService, "f").GetForm({
                appId: appInfo.app.id,
            });
            ux.action.stop();
            if (response) {
                __classPrivateFieldGet(this, _ListAppSettings_instances, "m", _ListAppSettings_displayAppSettingsKeys).call(this, response.form);
            }
        }
        catch (err) {
            if (err instanceof TwirpError) {
                if (err.code === TwirpErrorCode.NotFound) {
                    ux.action.stop(`❌ Please install your app before listing settings.`);
                    return;
                }
                else if (err.message.includes('does not provide method')) {
                    ux.action.stop(`❌ Unable to fetch settings. Please verify Devvit.addSettings was used in your app.`);
                    return;
                }
            }
            ux.action.stop(`❌`);
            this.error(StringUtil.caughtToString(err));
        }
    }
}
_ListAppSettings_appSettingsService = new WeakMap(), _ListAppSettings_appService = new WeakMap(), _ListAppSettings_instances = new WeakSet(), _ListAppSettings_displayAppSettingsKeys = function _ListAppSettings_displayAppSettingsKeys(forms) {
    /* eslint no-var: 0 */
    var settingKeys = [];
    Object.entries(forms).forEach(([_, form]) => {
        if (form.fields) {
            Object.entries(form.fields).forEach(([_, field]) => {
                settingKeys.push({
                    key: field.fieldId,
                    label: field.label,
                    type: FormFieldType[field.fieldType],
                    is_secret: field.isSecret ? field.isSecret : false,
                });
            });
        }
    });
    const keyColumn = {
        header: 'Key',
        get: (entry) => entry.key,
    };
    const labelColumn = {
        header: 'Label',
        get: (entry) => entry.label,
    };
    const typeColumn = {
        header: 'Type',
        get: (entry) => entry.type,
    };
    const secretColumn = {
        header: 'Is this a secret?',
        get: (entry) => entry.is_secret,
    };
    ux.table(settingKeys, { keyColumn, labelColumn, secretColumn, typeColumn });
};
ListAppSettings.description = 'List settings for your app. These settings exist at the global app-scope and are available to all instances of your app.';
export default ListAppSettings;

var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SetAppSettings_instances, _SetAppSettings_appSettingsService, _SetAppSettings_appService, _SetAppSettings_promptSettingValue;
import { Args } from '@oclif/core';
import { createAppClient, createAppSettingsClient } from '../../util/clientGenerators.js';
import { SettingsValues, FormFieldType } from '@devvit/protos';
import { StringUtil } from '@devvit/shared-types/StringUtil.js';
import inquirer from 'inquirer';
import { ux } from '@oclif/core';
import { TwirpError, TwirpErrorCode } from 'twirp-ts';
import { ProjectCommand } from '../../util/commands/ProjectCommand.js';
import { getAppBySlug } from '../../util/utils.js';
class SetAppSettings extends ProjectCommand {
    constructor() {
        super(...arguments);
        _SetAppSettings_instances.add(this);
        _SetAppSettings_appSettingsService.set(this, createAppSettingsClient(this));
        _SetAppSettings_appService.set(this, createAppClient(this));
    }
    async run() {
        const { args } = await this.parse(SetAppSettings);
        const settingsKey = args.settingsKey;
        const settingsValue = await __classPrivateFieldGet(this, _SetAppSettings_instances, "m", _SetAppSettings_promptSettingValue).call(this, settingsKey);
        const projectConfig = await this.getProjectConfig();
        const appName = projectConfig.slug ?? projectConfig.name;
        ux.action.start('Updating app settings');
        try {
            const appInfo = await getAppBySlug(__classPrivateFieldGet(this, _SetAppSettings_appService, "f"), appName);
            if (!appInfo?.app?.id) {
                ux.action.stop(`❌ Your app doesn't exist yet - you'll need to run 'devvit upload' before you can set settings.`);
                return;
            }
            const response = await __classPrivateFieldGet(this, _SetAppSettings_appSettingsService, "f").UpdateSettings({
                appId: appInfo.app.id,
                settings: SettingsValues.fromPartial({
                    settings: {
                        [settingsKey]: {
                            fieldType: FormFieldType.STRING,
                            stringValue: settingsValue,
                        },
                    },
                }),
            });
            if (!response.success) {
                this.error(`${JSON.stringify(response.errors)}`);
            }
            ux.action.stop(`✅ Successfully added app settings for ${settingsKey}!`);
        }
        catch (err) {
            if (err instanceof TwirpError) {
                if (err.code === TwirpErrorCode.NotFound) {
                    const msg = err.message.includes('addSettings')
                        ? `Unable to lookup the setting key: ${settingsKey}, please verify Devvit.addSettings was used in your app and the setting's scope is set to SettingScope.App.`
                        : 'Please install your app before listing settings.';
                    ux.action.stop(`❌ ${msg}`);
                    return;
                }
            }
            this.error(StringUtil.caughtToString(err));
        }
    }
}
_SetAppSettings_appSettingsService = new WeakMap(), _SetAppSettings_appService = new WeakMap(), _SetAppSettings_instances = new WeakSet(), _SetAppSettings_promptSettingValue = async function _SetAppSettings_promptSettingValue(settingsKey) {
    const promptMessage = `Enter the value you would like to assign to the variable ${settingsKey}:`;
    const res = await inquirer.prompt([
        {
            name: 'settingValue',
            message: promptMessage,
            type: 'input',
        },
    ]);
    return res.settingValue;
};
SetAppSettings.description = 'Create and update settings for your app. These settings will be added at the global app-scope.';
SetAppSettings.args = {
    settingsKey: Args.string({
        description: 'Settings key to add',
        required: true,
    }),
};
export default SetAppSettings;

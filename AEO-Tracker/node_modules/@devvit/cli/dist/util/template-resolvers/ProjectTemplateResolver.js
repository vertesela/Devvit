var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ProjectTemplateResolver_instances, _ProjectTemplateResolver_templateOptions, _ProjectTemplateResolver_initOptions;
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
const DEFAULT_PROJECT_TEMPLATES_PATH = path.join(fileURLToPath(import.meta.url), '..', // This chops off the file name
'..', // This chops off the 'util' directory
'..', // This chops off the 'src' directory
'templates');
export class ProjectTemplateResolver {
    constructor(projectTemplatesPath = DEFAULT_PROJECT_TEMPLATES_PATH) {
        _ProjectTemplateResolver_instances.add(this);
        _ProjectTemplateResolver_templateOptions.set(this, new Map());
        __classPrivateFieldGet(this, _ProjectTemplateResolver_instances, "m", _ProjectTemplateResolver_initOptions).call(this, projectTemplatesPath);
        this.options = Array.from(__classPrivateFieldGet(this, _ProjectTemplateResolver_templateOptions, "f").keys());
    }
    resolve(query) {
        const projectTemplateName = query.name;
        const templateProject = __classPrivateFieldGet(this, _ProjectTemplateResolver_templateOptions, "f").get(projectTemplateName);
        if (!templateProject) {
            throw new Error(`Specified template: ${projectTemplateName} does not exist`);
        }
        return templateProject;
    }
}
_ProjectTemplateResolver_templateOptions = new WeakMap(), _ProjectTemplateResolver_instances = new WeakSet(), _ProjectTemplateResolver_initOptions = function _ProjectTemplateResolver_initOptions(templatesPath) {
    fs.readdirSync(templatesPath, { withFileTypes: true })
        .filter((d) => d.isDirectory()) // only get directories
        .forEach((dirent) => {
        const projectName = dirent.name.split(path.sep).at(-1);
        const projectDir = path.join(templatesPath, dirent.name);
        __classPrivateFieldGet(this, _ProjectTemplateResolver_templateOptions, "f").set(projectName, projectDir);
    });
};

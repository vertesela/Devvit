var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ProjectCommand_projectRoot;
import { readDevvitConfig } from '../devvitConfig.js';
import { findProjectRoot } from '../project-util.js';
import { DevvitCommand } from './DevvitCommand.js';
export class ProjectCommand extends DevvitCommand {
    constructor() {
        super(...arguments);
        _ProjectCommand_projectRoot.set(this, void 0);
    }
    async init() {
        await this.assertProject();
    }
    get projectRoot() {
        if (!__classPrivateFieldGet(this, _ProjectCommand_projectRoot, "f")) {
            throw new Error(`Did not assert that command is run in project`);
        }
        return __classPrivateFieldGet(this, _ProjectCommand_projectRoot, "f");
    }
    async getProjectConfig() {
        return readDevvitConfig(this.projectRoot);
    }
    // checks that the command is run in a devvit project
    async assertProject() {
        if (__classPrivateFieldGet(this, _ProjectCommand_projectRoot, "f"))
            return __classPrivateFieldGet(this, _ProjectCommand_projectRoot, "f");
        const projectRoot = await findProjectRoot();
        if (!projectRoot) {
            this.error('Not in devvit project. Make sure that there is a valid devvit.yaml in the root of your project');
        }
        __classPrivateFieldSet(this, _ProjectCommand_projectRoot, projectRoot, "f");
        return __classPrivateFieldGet(this, _ProjectCommand_projectRoot, "f");
    }
}
_ProjectCommand_projectRoot = new WeakMap();

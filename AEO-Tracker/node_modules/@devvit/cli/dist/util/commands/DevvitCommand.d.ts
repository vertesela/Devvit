import { NodeFSAuthenticationPlugin } from '@devvit/dev-server/server/plugins/authentication/NodeFSAuthenticationPlugin.js';
import type { StoredToken } from '@devvit/protos';
import type { T2ID } from '@devvit/shared-types/tid.js';
import { Command } from '@oclif/core';
/**
 * Note: we have to return `Promise<string>` here rather than just `string`
 * The official documentation has an error and doesn't match the TS declarations for this method
 *
 * @see https://oclif.io/docs/args/
 */
export declare const toLowerCaseArgParser: (input: string) => Promise<string>;
export declare abstract class DevvitCommand extends Command {
    protected _authSvc: NodeFSAuthenticationPlugin | undefined;
    get isOauthSvcInitd(): boolean;
    get oauthSvc(): NodeFSAuthenticationPlugin;
    getAccessTokenAndLoginIfNeeded: (copyPaste?: boolean) => Promise<StoredToken>;
    getAccessToken: () => Promise<StoredToken | undefined>;
    protected checkDevvitTermsAndConditions: () => Promise<void>;
    protected checkIfUserLoggedIn(): Promise<void>;
    /**
     * @description Get the user's display name from the stored token.
     */
    protected getUserDisplayName(token: StoredToken): Promise<string>;
    /**
     * @description Get the user's t2 id from the stored token.
     */
    protected getUserT2Id(token: StoredToken): Promise<T2ID>;
    protected inferAppNameFromProject(): Promise<string>;
    /**
     * @description Handle resolving the appname@version for the following cases
     *
     * Case 1: devvit <publish|install> <app-name>@<version>  - can be run anywhere
     * Case 1: devvit <publish|install> <app-name>            - can be run anywhere
     * Case 3: devvit <publish|install> <version>             - must be in project directory
     * Case 2: devvit <publish|install>                       - must be in project directory
     */
    protected inferAppNameAndVersion(appWithVersion: string | undefined): Promise<string>;
}
//# sourceMappingURL=DevvitCommand.d.ts.map
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _FileSystem_makeFile;
import { File as IFile, FileSystem as IFileSystem } from '@devvit/protos';
import { lstat, readFile } from 'node:fs/promises';
import path from 'node:path';
export class FileSystem {
    static async fromGitProject(git) {
        const filePaths = await git.listFiles();
        const files = await Promise.all(filePaths.map((relativePathFromRoot) => __classPrivateFieldGet(this, _a, "m", _FileSystem_makeFile).call(this, git.rootDir, relativePathFromRoot)));
        return IFileSystem.fromPartial({ files });
    }
}
_a = FileSystem, _FileSystem_makeFile = async function _FileSystem_makeFile(absoluteRootPath, relativePathFromRoot) {
    const fullPath = path.join(absoluteRootPath, relativePathFromRoot);
    const stat = await lstat(fullPath);
    if (stat.isFile()) {
        return IFile.fromPartial({
            path: relativePathFromRoot,
            content: await readFile(fullPath, { encoding: 'utf8' }),
            isDirectory: false,
        });
    }
    if (stat.isDirectory()) {
        return IFile.fromPartial({
            path: relativePathFromRoot,
            isDirectory: true,
        });
    }
    throw new Error(`${fullPath} is invalid`);
};
export default FileSystem;

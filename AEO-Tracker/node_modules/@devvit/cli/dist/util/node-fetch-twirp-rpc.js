import { TwirpError, TwirpErrorCode } from 'twirp-ts/build/twirp/errors.js';
import fetch, { Headers } from 'node-fetch';
export var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["ProtoBuf"] = "application/protobuf";
})(ContentType || (ContentType = {}));
export const NodeFetchRPC = (options) => {
    return {
        async request(service, method, contentType, data) {
            const headers = new Headers(options.headers);
            headers.set('content-type', contentType);
            if (options.getToken) {
                const token = await options.getToken();
                if (!token) {
                    console.error(`Expected token to be present for rpc ${service} ${method}`);
                    throw new TwirpError(TwirpErrorCode.Unauthenticated, 'UNAUTHORIZED');
                }
                headers.set('authorization', `bearer ${token.accessToken}`);
            }
            const response = await fetch(`${options.baseUrl}/${service}/${method}`, {
                ...options,
                method: 'POST',
                headers,
                body: data instanceof Uint8Array ? data : JSON.stringify(data),
            });
            if (response.status === 200) {
                if (contentType === ContentType.Json) {
                    return (await response.json());
                }
                return new Uint8Array(await response.arrayBuffer());
            }
            const err = await getErrorFromResponse(response);
            throw TwirpError.fromObject(err);
        },
    };
};
async function getErrorFromResponse(response) {
    if (response.headers.get('content-type') === ContentType.Json) {
        return (await response.json());
    }
    const body = await response.text();
    return {
        code: `${response.status} ${response.statusText}: ${body}`,
        msg: `${response.status} ${response.statusText}: ${body}`,
    };
}

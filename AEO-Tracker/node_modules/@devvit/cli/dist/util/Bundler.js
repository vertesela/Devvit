var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Bundler_buildPack;
import { ESBuildPack } from '@devvit/build-pack/esbuild/ESBuildPack.js';
import { TscTypeChecker } from '@devvit/build-pack/index.js';
import { formatLogs } from '@devvit/build-pack/lib/BuildPack.js';
import { CompileParams } from '@devvit/protos';
import { newBuildInfoDependencies } from '@devvit/runtimes/lib/BuildInfoUtil.js';
import { LOCAL_HOSTNAME } from '@devvit/runtimes/lib/HostnameUtil.js';
import { createRequire } from 'module';
import { map } from 'rxjs';
import { DEVVIT_DISABLE_EXTERN_DEVVIT_PROTOS } from './config.js';
const require = createRequire(import.meta.url);
const publicAPI = require('@devvit/public-api/package.json');
export class Bundler {
    constructor(typecheckEnabled = true) {
        _Bundler_buildPack.set(this, void 0);
        __classPrivateFieldSet(this, _Bundler_buildPack, new ESBuildPack({ hostname: LOCAL_HOSTNAME }, {
            disableExternDevvitProtos: DEVVIT_DISABLE_EXTERN_DEVVIT_PROTOS,
            typeChecker: typecheckEnabled ? new TscTypeChecker() : undefined,
        }), "f");
    }
    async bundle(actorDir, actorSpec) {
        const compiledRes = await __classPrivateFieldGet(this, _Bundler_buildPack, "f").Compile(CompileParams.fromPartial({ filename: actorDir, info: actorSpec, includeAssets: true }), undefined);
        if (compiledRes.warnings.length > 0) {
            console.warn(formatLogs(compiledRes.warnings));
        }
        if (compiledRes.errors.length > 0) {
            throw new Error(formatLogs(compiledRes.errors));
        }
        if (compiledRes.bundle == null) {
            throw new Error('Missing bundle');
        }
        return newBundle(compiledRes.bundle);
    }
    async dispose() {
        await __classPrivateFieldGet(this, _Bundler_buildPack, "f").dispose();
    }
    watch(actorDir, actorSpec) {
        return __classPrivateFieldGet(this, _Bundler_buildPack, "f")
            .Watch(CompileParams.fromPartial({ filename: actorDir, info: actorSpec }), undefined)
            .pipe(map((rsp) => {
            if (rsp.warnings.length > 0)
                console.warn(formatLogs(rsp.warnings));
            if (rsp.errors.length > 0)
                console.error(formatLogs(rsp.errors));
            return rsp.bundle ? newBundle(rsp.bundle) : undefined;
        }));
    }
}
_Bundler_buildPack = new WeakMap();
function newBundle(bundle) {
    // to-do: use Builder and pass buildInfo through.
    const dependencies = newBuildInfoDependencies();
    dependencies[publicAPI.name] = publicAPI.version;
    return {
        ...bundle,
        buildInfo: { created: new Date(), dependencies },
    };
}

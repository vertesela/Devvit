var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MultiLogger_loggers;
export class MultiLogger {
    constructor(...loggers) {
        _MultiLogger_loggers.set(this, []);
        __classPrivateFieldGet(this, _MultiLogger_loggers, "f").push(...loggers);
    }
    addLogger(logger) {
        __classPrivateFieldGet(this, _MultiLogger_loggers, "f").push(logger);
    }
    async Error(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((logger) => logger.Error(msg, metadata)));
        return {};
    }
    async Event(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((logger) => logger.Event(msg, metadata)));
        return {};
    }
    async Log(msg, metadata) {
        await Promise.allSettled(__classPrivateFieldGet(this, _MultiLogger_loggers, "f").map((l) => l.Log(msg, metadata)));
        return {};
    }
}
_MultiLogger_loggers = new WeakMap();

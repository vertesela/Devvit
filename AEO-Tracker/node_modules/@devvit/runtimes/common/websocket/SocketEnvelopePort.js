var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _SocketEnvelopePort_socket, _SocketEnvelopePort_onClose, _SocketEnvelopePort_onError, _SocketEnvelopePort_onMessage, _SocketEnvelopePort_onOpen;
import { v4 as UUIDv4 } from 'uuid';
import { Envelope, Strings } from '@devvit/protos';
import { SocketState } from './SocketState.js';
import { Header } from '../../lib/Header.js';
/** Adapts a socket to an EnvelopePort. */
// TODO: Reconnect?
export class SocketEnvelopePort {
    constructor() {
        this.id = UUIDv4();
        _SocketEnvelopePort_socket.set(this, void 0);
        this.onmessage = null;
        _SocketEnvelopePort_onClose.set(this, (_event) => {
            this.unbindSocket();
        });
        _SocketEnvelopePort_onError.set(this, void 0);
        _SocketEnvelopePort_onMessage.set(this, (event) => {
            if (this.onmessage == null)
                throw Error('Socket message missed. No listener on port.');
            // Unmarshal the Envelope and generate a new event. As best practice,
            // preserve as much of the original socket message event's properties as
            // possible.
            const envelopeEvent = new MessageEvent('message', {
                data: Envelope.fromJSON(JSON.parse(event.data)),
                lastEventId: event.lastEventId,
                origin: event.origin,
                ports: event.ports == null ? [] : [...event.ports],
                source: event.source,
            });
            this.onmessage(envelopeEvent);
        });
        _SocketEnvelopePort_onOpen.set(this, void 0);
        __classPrivateFieldSet(this, _SocketEnvelopePort_onClose, __classPrivateFieldGet(this, _SocketEnvelopePort_onClose, "f").bind(this), "f");
        __classPrivateFieldSet(this, _SocketEnvelopePort_onMessage, __classPrivateFieldGet(this, _SocketEnvelopePort_onMessage, "f").bind(this), "f");
        __classPrivateFieldGet(this, _SocketEnvelopePort_onError, "f");
        __classPrivateFieldSet(this, _SocketEnvelopePort_onOpen, undefined, "f");
    }
    async bindSocket(socket) {
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f") != null)
            throw Error(`Port already bound to socket for ${__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").url}.`);
        // Actually an AnySocket but the event listener typing is incorrect.
        __classPrivateFieldSet(this, _SocketEnvelopePort_socket, socket, "f");
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").addEventListener('close', __classPrivateFieldGet(this, _SocketEnvelopePort_onClose, "f"));
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").addEventListener('message', __classPrivateFieldGet(this, _SocketEnvelopePort_onMessage, "f"));
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").readyState === SocketState.OPEN)
            return;
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").readyState !== SocketState.CONNECTING)
            throw Error(`Port socket not connecting to ${__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").url}.`);
        await new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _SocketEnvelopePort_onError, reject, "f");
            __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").addEventListener('error', __classPrivateFieldGet(this, _SocketEnvelopePort_onError, "f"));
            __classPrivateFieldSet(this, _SocketEnvelopePort_onOpen, () => resolve(), "f");
            __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").addEventListener('open', __classPrivateFieldGet(this, _SocketEnvelopePort_onOpen, "f"));
        });
    }
    unbindSocket() {
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f") == null)
            return;
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_onOpen, "f") != null)
            __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").removeEventListener('open', __classPrivateFieldGet(this, _SocketEnvelopePort_onOpen, "f"));
        __classPrivateFieldSet(this, _SocketEnvelopePort_onOpen, undefined, "f");
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_onError, "f") != null)
            __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").removeEventListener('error', __classPrivateFieldGet(this, _SocketEnvelopePort_onError, "f"));
        __classPrivateFieldSet(this, _SocketEnvelopePort_onError, undefined, "f");
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").removeEventListener('message', __classPrivateFieldGet(this, _SocketEnvelopePort_onMessage, "f"));
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").removeEventListener('close', __classPrivateFieldGet(this, _SocketEnvelopePort_onClose, "f"));
        __classPrivateFieldSet(this, _SocketEnvelopePort_socket, undefined, "f");
    }
    postMessage(envelope) {
        if (__classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f") == null)
            throw Error('Port not bound to socket.');
        envelope.metadata[Header.CallerPortID] = Strings.fromPartial({ values: [this.id] });
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f").send(JSON.stringify(Envelope.toJSON(envelope)));
    }
    terminate() {
        __classPrivateFieldGet(this, _SocketEnvelopePort_socket, "f")?.close();
        this.onmessage = null;
    }
}
_SocketEnvelopePort_socket = new WeakMap(), _SocketEnvelopePort_onClose = new WeakMap(), _SocketEnvelopePort_onError = new WeakMap(), _SocketEnvelopePort_onMessage = new WeakMap(), _SocketEnvelopePort_onOpen = new WeakMap();

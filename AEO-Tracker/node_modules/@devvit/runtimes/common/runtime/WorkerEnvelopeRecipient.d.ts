import type { Envelope } from '@devvit/protos';
import type { EnvelopeDispatcher } from '../envelope/dispatcher/EnvelopeDispatcher.js';
import type { WorkerErrorLogger } from './CommonRuntime.js';
import type { EnvelopeRecipient } from '../envelope/EnvelopeRecipient.js';
export declare class WorkerEnvelopeRecipient implements EnvelopeRecipient {
    #private;
    constructor(hostname: string, bootstrapPath: string, logger: WorkerErrorLogger);
    get hostname(): string;
    post(caller: Readonly<EnvelopeRecipient>, envelope: Envelope): void;
    dispose(): Promise<void>;
    onBind(dispatcher: Readonly<EnvelopeDispatcher>): void;
    onUnbind(dispatcher: Readonly<EnvelopeDispatcher>): void;
}
//# sourceMappingURL=WorkerEnvelopeRecipient.d.ts.map
import { Hostname } from './HostnameUtil.js';
/**
 * Metadata header key. Every system header should start with "devvit-".
 *
 * Synchronize to headers.md.
 */
export const Header = Object.freeze({
    Actor: 'devvit-actor',
    App: 'devvit-app',
    AppUser: 'devvit-app-user',
    Caller: 'devvit-caller',
    CallerPortID: 'devvit-caller-port-id',
    Canary: 'devvit-canary',
    DebugRenderXML: 'devvit-debug-render-xml',
    Installation: 'devvit-installation',
    ModPermissions: 'devvit-mod-permissions',
    R2Auth: 'devvit-sec-authorization',
    R2Host: 'devvit-r2-host',
    RemoteHostname: 'devvit-remote-hostname',
    StreamID: 'devvit-stream-id',
    Subreddit: 'devvit-subreddit',
    TraceID: 'devvit-trace-id',
    User: 'devvit-user',
    Version: 'devvit-version',
    SettingsUri: 'devvit-sec-settings-uri',
    GQLHost: 'devvit-gql-host',
    AppViewerAuthToken: 'devvit-app-viewer-authorization',
});
/** Returns true for any header starting with "devvit-". */
export function isSystemHeader(header) {
    return header.startsWith('devvit-');
}
// These headers are always allowed to all destinations including untrusted
// destinations. System headers are not sent to non-system destinations by
// default. See headers.md. Sync to metadata_envelope_filter.go.
export const allowlistedReadHeaders = Object.freeze([
    Header.App,
    Header.AppUser,
    Header.Caller,
    Header.Canary,
    Header.DebugRenderXML,
    Header.Installation,
    Header.ModPermissions,
    Header.StreamID,
    Header.Subreddit,
    Header.TraceID,
    Header.User,
]);
/**
 * Return a new shallow copy of metadata with restricted headers filtered out.
 *
 * Don't care about the origin of the request. System destinations have access
 * to all headers regardless of the sender.
 */
export function filterHeadersForDestination(namespace, metadata, destination) {
    if (isTrustedLocation(namespace, destination))
        return { ...metadata }; // No filtering.
    const allowedEntries = Object.entries(metadata).filter(([header]) => allowlistedReadHeaders.includes(header) || !isSystemHeader(header));
    return Object.fromEntries(allowedEntries);
}
export function isTrustedLocation(namespace, location) {
    return (
    // Allow runtime plugin clients, Studio, and test clients to send whatever
    // headers they wish. An actor trusts all Envelopes manufactured in its
    // own thread.
    location === namespace.hostname ||
        Hostname.isPlugin(location, namespace) ||
        Hostname.isSystem(location, namespace));
}

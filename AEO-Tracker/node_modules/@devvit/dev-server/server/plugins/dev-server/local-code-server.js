import http from 'node:http';
import url from 'node:url';
import { errorPage, handleError, loginSuccess } from '../authentication/views/login.js';
import crypto from 'node:crypto';
export async function localCodeServer(config) {
    const state = config.state ?? crypto.randomBytes(16).toString('hex');
    const server = http.createServer();
    const promise = new Promise((resolve, reject) => {
        server.on('request', (req, res) => {
            const { query } = url.parse(req.url || '', true);
            // ignore requests that don't have query params or don't match the state
            if (!query || query.state !== state) {
                res.writeHead(401);
                res.end();
                return;
            }
            // pass all other requests to the handler
            config.requestHandler(query, res).then((code) => {
                if (code !== false) {
                    // code is valid, so we're done
                    if (!res.headersSent) {
                        res.writeHead(200, { 'Content-Type': 'text/html' });
                        res.write(loginSuccess());
                        res.end();
                    }
                    server.close();
                    resolve(code);
                }
                else {
                    // code is invalid, so keep trying
                    if (!res.headersSent) {
                        res.writeHead(401);
                        res.write(errorPage('Something went wrong. Please try again.'));
                        res.end();
                    }
                }
            }, (err) => {
                // error occurred, so shut down the server
                if (!res.headersSent) {
                    handleError(res, err);
                }
                reject(err);
            });
        });
    });
    server.listen(config.port ?? 0); // 0 == use a random port
    const address = server.address();
    if (!address || typeof address === 'string') {
        throw Error('Failed to get server address - address is not an object');
    }
    if (config.serverListeningCallback) {
        config.serverListeningCallback({
            port: address.port,
            state,
        });
    }
    try {
        const code = await promise;
        server.close();
        return code;
    }
    catch (e) {
        server.close();
        throw e;
    }
}

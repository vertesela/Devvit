/**
 * DevServer Plugin
 *
 * This plugin implements the devvit/plugin/devserver::DevServerPlugin interface
 *
 * @packageDocumentation
 */
import { Observable } from 'rxjs';
import type { DevServer as DevServerPluginInterface, ProjectListingResponse, ProjectListRequest, ProjectUpdatesRequest, TestCasesRequest } from '@devvit/protos';
import { Empty, ProjectUpdateResponse, TestCasesList } from '@devvit/protos';
import type { Namespace } from '@devvit/runtimes/common/envelope/Namespace.js';
import type { Disposable } from '@devvit/shared-types/Disposable.js';
export default class DevServerPlugin implements DevServerPluginInterface, Disposable {
    #private;
    /**
     * The default behavior is to externalize @devvit/protos. Set
     * disableExternDevvitProtos to bundle this large dependency.
     */
    constructor(defaultProjectDir: string, namespace: Readonly<Namespace>, disableExternDevvitProtos: boolean);
    dispose(): Promise<void>;
    ListProject(request: ProjectListRequest): Promise<ProjectListingResponse>;
    NotifyBundleUpdates(request: ProjectUpdatesRequest): Observable<ProjectUpdateResponse>;
    GetTestCases(request: TestCasesRequest): Promise<TestCasesList>;
    UpdateTestCases(request: TestCasesList): Promise<Empty>;
}
//# sourceMappingURL=dev-server-plugin.d.ts.map
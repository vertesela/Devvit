var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DevServerRealtime_eventSubjects;
import { Observable, Subject } from 'rxjs';
export class DevServerRealtime {
    constructor() {
        _DevServerRealtime_eventSubjects.set(this, new Map());
    }
    Subscribe(req, _metadata) {
        // Create a subject for each requested channel if it doesn't already exist
        for (const channel of req.channels) {
            if (!__classPrivateFieldGet(this, _DevServerRealtime_eventSubjects, "f").has(channel)) {
                __classPrivateFieldGet(this, _DevServerRealtime_eventSubjects, "f").set(channel, new Subject());
                console.log(`Created channel '${channel}'`);
            }
        }
        // Return an observable that combines all subjects for the requested channels
        return new Observable((observer) => {
            req.channels.forEach((channel) => {
                const subject = __classPrivateFieldGet(this, _DevServerRealtime_eventSubjects, "f").get(channel);
                if (subject) {
                    subject
                        .subscribe({
                        next: (event) => observer.next(event),
                        error: (error) => observer.error(error),
                        complete: () => observer.complete(),
                    })
                        .add(() => {
                        if (!subject.observed) {
                            console.log(`Removing channel '${channel}'`);
                        }
                    });
                }
            });
        });
    }
    async Send(evt, _metadata) {
        // Dispatch the event to the subject for the specified channel
        if (__classPrivateFieldGet(this, _DevServerRealtime_eventSubjects, "f").has(evt.channel)) {
            __classPrivateFieldGet(this, _DevServerRealtime_eventSubjects, "f").get(evt.channel)?.next(evt);
            return Promise.resolve({});
        }
        throw new Error(`Not subscribed to channel '${evt.channel}'`);
    }
}
_DevServerRealtime_eventSubjects = new WeakMap();

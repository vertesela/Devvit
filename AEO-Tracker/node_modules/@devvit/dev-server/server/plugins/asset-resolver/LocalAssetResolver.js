var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LocalAssetResolver_projectPath, _LocalAssetResolver_assetsPath;
import path from 'node:path';
import tinyglob from 'tiny-glob';
import { isFile } from '../../io/file-util.js';
/**
 * @description LocalAssetResolver is a Node JS implementation of AssetResolver
 * that resolves assets from the local file system directly without looking at
 * the app's linkedbundle
 * @implements AssetResolver
 */
export class LocalAssetResolver {
    /**
     * @param projectPath The absolute path to the project directory
     * @param assetPath The absolute path to the asset directory
     */
    constructor(projectPath, assetPath) {
        _LocalAssetResolver_projectPath.set(this, void 0);
        _LocalAssetResolver_assetsPath.set(this, void 0);
        __classPrivateFieldSet(this, _LocalAssetResolver_projectPath, projectPath, "f");
        __classPrivateFieldSet(this, _LocalAssetResolver_assetsPath, assetPath, "f");
    }
    async GetAssetURL(request) {
        const { path: assetPath } = request;
        const url = path.join(__classPrivateFieldGet(this, _LocalAssetResolver_assetsPath, "f"), assetPath);
        if (!(await isFile(url))) {
            return {
                found: false,
                url: '',
            };
        }
        return {
            found: true,
            url: path.relative(__classPrivateFieldGet(this, _LocalAssetResolver_projectPath, "f"), url),
        };
    }
    async GetAssetURLs(request) {
        const { paths } = request;
        const res = {
            urls: {},
        };
        const globResults = await Promise.all(paths.map((p) => tinyglob(p, { cwd: __classPrivateFieldGet(this, _LocalAssetResolver_assetsPath, "f"), filesOnly: true })));
        globResults.forEach((globResult, i) => {
            if (globResult.length === 0) {
                res.urls[paths[i]] = {
                    found: false,
                    paths: [],
                };
            }
            else {
                res.urls[paths[i]] = {
                    found: true,
                    paths: globResult.map((p) => path.relative(__classPrivateFieldGet(this, _LocalAssetResolver_projectPath, "f"), path.join(__classPrivateFieldGet(this, _LocalAssetResolver_assetsPath, "f"), p))),
                };
            }
        });
        return res;
    }
}
_LocalAssetResolver_projectPath = new WeakMap(), _LocalAssetResolver_assetsPath = new WeakMap();

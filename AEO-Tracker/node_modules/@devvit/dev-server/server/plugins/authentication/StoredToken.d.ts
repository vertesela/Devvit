import type { StoredToken as StoredTokenProto } from '@devvit/protos';
import type { R2OAuthGrant } from '../../http/r2/oauth.js';
/**
 * JSON representation of a StoredToken (class). This base64-encodeded on disk.
 */
type StoredTokenJSON = {
    readonly refreshToken: string;
    readonly accessToken: string;
    /**
     * This field differs from R2OAuthGrant in name and time unit (millis here).
     */
    readonly expiresAt: number;
    readonly scope: string;
    readonly tokenType: string;
};
export declare class StoredToken implements Required<StoredTokenProto> {
    /** Grant must be recent for the expiration to be accurate. */
    static fromGrant(grant: R2OAuthGrant): StoredToken;
    /** Unpack base64 stringified JSON. */
    static fromBase64(base64: string): StoredToken | undefined;
    static fromJSON(token: StoredTokenJSON): StoredToken;
    readonly refreshToken: string;
    readonly accessToken: string;
    readonly expiresAt: Date;
    readonly scope: string;
    readonly tokenType: string;
    constructor(token: Readonly<Required<StoredTokenProto>>);
    hasScopes(scopes: string): boolean;
    isFresh(): boolean;
    toJSON(): StoredTokenJSON;
}
export {};
//# sourceMappingURL=StoredToken.d.ts.map
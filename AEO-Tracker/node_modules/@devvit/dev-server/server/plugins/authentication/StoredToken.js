import { isObject } from '@devvit/shared-types/isObject.js';
const TOKEN_FRESHNESS_BUFFER = 120000; // 2 minutes
export class StoredToken {
    /** Grant must be recent for the expiration to be accurate. */
    static fromGrant(grant) {
        return new StoredToken({
            accessToken: grant.access_token,
            refreshToken: grant.refresh_token,
            expiresAt: new Date(Date.now() + grant.expires_in * 1000),
            scope: grant.scope,
            tokenType: grant.token_type,
        });
    }
    /** Unpack base64 stringified JSON. */
    static fromBase64(base64) {
        let token;
        try {
            token = JSON.parse(Buffer.from(base64, 'base64').toString('utf8'));
        }
        catch {
            return undefined;
        }
        if (!isStoredTokenJSON(token)) {
            return undefined;
        }
        return this.fromJSON(token);
    }
    static fromJSON(token) {
        return new StoredToken({
            accessToken: token.accessToken,
            refreshToken: token.refreshToken,
            expiresAt: new Date(token.expiresAt),
            scope: token.scope,
            tokenType: token.tokenType,
        });
    }
    constructor(token) {
        this.refreshToken = token.refreshToken;
        this.accessToken = token.accessToken;
        this.expiresAt = token.expiresAt;
        this.scope = token.scope;
        this.tokenType = token.tokenType;
    }
    hasScopes(scopes) {
        const allowed = new Set(this.scope.split(':'));
        return scopes.split(':').every((scope) => allowed.has(scope));
    }
    isFresh() {
        // to-do: do we need TOKEN_FRESHNESS_BUFFER? It may be coupled to setTimeout()
        // logic in NodeFSAuthenticationPlugin?
        return Date.now() + TOKEN_FRESHNESS_BUFFER <= this.expiresAt.getTime();
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expiresAt: this.expiresAt.getTime(),
            scope: this.scope,
            tokenType: this.tokenType,
        };
    }
}
function isStoredTokenJSON(json) {
    return (isObject(json) &&
        typeof json.accessToken === 'string' &&
        typeof json.expiresAt === 'number' &&
        typeof json.refreshToken === 'string' &&
        typeof json.scope === 'string' &&
        json.tokenType === 'bearer');
}

import { isObject } from '@devvit/shared-types/isObject.js';
import fetch, { FormData } from 'node-fetch';
/**
 * Request permanent access.
 *
 * @arg authCode Authorization code given on user consent callback.
 * @arg redirectURI Where to redirect the user on successful grant; this is
 *                  often used to indicate workflow completion to the user.
 */
export async function fetchR2OAuthGrant(authCode, config, copyPaste) {
    const redirectUri = copyPaste ? config.copyPasteRedirectUri : config.redirectUri;
    const headers = copyPaste ? config.copyPasteClientHeaders : config.devvitOAuthClientHeaders;
    const data = new FormData();
    data.append('grant_type', 'authorization_code');
    data.append('code', authCode);
    data.append('redirect_uri', redirectUri);
    const rsp = await fetch(`${config.apiV1Url}/access_token`, {
        // eslint-disable-next-line @reddit/i18n-shreddit/no-unwrapped-strings
        method: 'POST',
        headers,
        body: data,
    });
    if (!rsp.ok)
        throw Error(`HTTP error ${rsp.status}: ${rsp.statusText}`);
    const grant = (await rsp.json());
    assertR2OAuthGrant(grant);
    return grant;
}
export async function fetchR2OAuthRefresh(config, copyPaste, refreshToken) {
    const headers = copyPaste ? config.copyPasteClientHeaders : config.devvitOAuthClientHeaders;
    const data = new FormData();
    data.append('grant_type', 'refresh_token');
    data.append('refresh_token', refreshToken);
    const rsp = await fetch(`${config.apiV1Url}/access_token`, {
        // eslint-disable-next-line @reddit/i18n-shreddit/no-unwrapped-strings
        method: 'POST',
        headers,
        body: data,
    });
    if (!rsp.ok)
        throw Error(`HTTP error ${rsp.status}: ${rsp.statusText}`);
    const refresh = (await rsp.json());
    assertR2OAuthGrant(refresh);
    return refresh;
}
function assertR2OAuthGrant(json) {
    if (!isObject(json) ||
        typeof json.access_token !== 'string' ||
        typeof json.expires_in !== 'number' ||
        typeof json.refresh_token !== 'string' ||
        typeof json.scope !== 'string' ||
        json.token_type !== 'bearer')
        throw Error('malformed Reddit API OAuth grant');
}

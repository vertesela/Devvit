import type { ActorSpec, CompileParams, Metadata } from '@devvit/protos';
import { CompileResponse } from '@devvit/protos';
import type { Namespace } from '@devvit/runtimes/common/envelope/Namespace.js';
import type { Disposable } from '@devvit/shared-types/Disposable.js';
import { Observable } from 'rxjs';
import type { BuildPack } from '../lib/BuildPack.js';
import type { TypeChecker } from './type-checkers/types.js';
export type WatcherOptions = ESBuildPackOptions;
export declare class Watcher implements Disposable {
    #private;
    /**
     * The default behavior is to externalize @devvit/protos. Set
     * disableExternDevvitProtos to bundle this large dependency.
     */
    constructor(namespace: Readonly<Namespace>, path: string, actorSpec: ActorSpec, options?: Readonly<WatcherOptions>);
    getObservable(): Observable<CompileResponse>;
    dispose(): Promise<void>;
}
type ESBuildPackOptions = {
    readonly disableExternDevvitProtos?: boolean | undefined;
    readonly typeChecker?: TypeChecker | undefined;
};
export declare class ESBuildPack implements BuildPack {
    #private;
    /**
     * The default behavior is to externalize @devvit/protos. Set
     * disableExternDevvitProtos to bundle this large dependency.
     */
    constructor(namespace: Readonly<Namespace>, options?: Readonly<ESBuildPackOptions>);
    Compile({ filename, minify, info }: CompileParams, _metadata: Metadata | undefined): Promise<CompileResponse>;
    dispose(): Promise<void>;
    Watch({ filename, info }: CompileParams, _metadata: Metadata | undefined): Observable<CompileResponse>;
}
export {};
//# sourceMappingURL=ESBuildPack.d.ts.map
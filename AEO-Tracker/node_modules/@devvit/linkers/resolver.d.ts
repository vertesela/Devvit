import type { Bundle, InspectorDescriptions } from '@devvit/protos';
import type { PackageQuery } from '@devvit/protos';
import { Resolution } from '@devvit/protos';
import type { CommonRuntime } from '@devvit/runtimes/common/runtime/CommonRuntime.js';
import { Empty } from '@devvit/protos';
import type { Metadata, Resolver } from '@devvit/protos';
/**
 * This keeps track of all of the bundles you've made, so that it can give them back to the Linker.
 */
export declare class InMemoryResolver implements Resolver {
    #private;
    static new(runtime: CommonRuntime): Promise<InMemoryResolver>;
    constructor(inspectorDescriptions: InspectorDescriptions);
    RegisterBundle(bundle: Bundle, _metadata: Metadata | undefined): Promise<Empty>;
    RegisterPlugins(inspectorDescriptions: InspectorDescriptions, _metadata: Metadata | undefined): Promise<Empty>;
    Resolve(query: PackageQuery, _metadata: Metadata | undefined): Promise<Resolution>;
}
//# sourceMappingURL=resolver.d.ts.map
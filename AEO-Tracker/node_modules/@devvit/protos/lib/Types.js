import { SerializableMethodDefinition, SerializableServiceDefinition, } from '../types/devvit/runtime/serializable.js';
import { messageTypeRegistry } from '../types/typeRegistry.js';
export const Definition = {
    toSerializable(definition) {
        if (isSerializableServiceDefinition(definition))
            return definition;
        return SerializableServiceDefinition.fromPartial({
            name: definition.name,
            fullName: definition.fullName,
            methods: Object.values(definition.methods).map((method) => {
                return SerializableMethodDefinition.fromPartial({
                    fullName: '/' + definition.fullName + '/' + method.name,
                    name: method.name,
                    requestStream: method.requestStream,
                    requestType: method.requestType.$type,
                    responseStream: method.responseStream,
                    responseType: method.responseType.$type,
                });
            }),
        });
    },
    /**
     * To maintain our backwards/forwards compatibility, this should always return the subset of the service
     * definition that exists in the type registry, and not e.g. throw errors if the type registry is missing.
     */
    fromSerializable(def) {
        const methods = {};
        Object.values(def.methods).forEach((method) => {
            // The key is lowercase. See Definition.methods.
            const reqType = messageTypeRegistry.get(method.requestType);
            const rspType = messageTypeRegistry.get(method.responseType);
            if (!reqType) {
                console.warn(`Request type ${method.requestType} not found, continuing...`);
                return;
            }
            if (!rspType) {
                console.warn(`Response type ${method.responseType} not found, continuing...`);
                return;
            }
            const name = method.name[0].toLocaleLowerCase() + method.name.slice(1);
            methods[name] = {
                name: method.name,
                requestType: reqType,
                requestStream: method.requestStream,
                responseType: rspType,
                responseStream: method.responseStream,
            };
        });
        return {
            fullName: def.fullName,
            name: def.name,
            methods: methods,
        };
    },
};
/**
 * API identifier and interface. Every Bundle implements a Definition and
 * multiple implementations may provide the same Definition. See
 * @devvit/protos and Devvit.Types.
 */
function isSerializableServiceDefinition(definition) {
    // Definition.methods is a record.
    return Array.isArray(definition.methods);
}

/**
 * #realtime.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
import { Empty } from '../../../google/protobuf/empty.js';
export interface RealtimeRequest {
    channels: string[];
}
export interface RealtimeEvent {
    /** The channel that received the message */
    channel: string;
    /** The data that was received */
    data?: any;
}
export declare const RealtimeRequest: {
    $type: "devvit.events.v1alpha.RealtimeRequest";
    encode(message: RealtimeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeRequest;
    fromJSON(object: any): RealtimeRequest;
    toJSON(message: RealtimeRequest): unknown;
    fromPartial<I extends {
        channels?: string[] | undefined;
    } & {
        channels?: (string[] & string[] & { [K in Exclude<keyof I["channels"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "channels">]: never; }>(object: I): RealtimeRequest;
};
export declare const RealtimeEvent: {
    $type: "devvit.events.v1alpha.RealtimeEvent";
    encode(message: RealtimeEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeEvent;
    fromJSON(object: any): RealtimeEvent;
    toJSON(message: RealtimeEvent): unknown;
    fromPartial<I extends {
        channel?: string | undefined;
        data?: any;
    } & {
        channel?: string | undefined;
        data?: any;
    } & { [K in Exclude<keyof I, "$type" | keyof RealtimeEvent>]: never; }>(object: I): RealtimeEvent;
};
export interface Realtime {
    Subscribe(request: RealtimeRequest, metadata?: Metadata): Observable<RealtimeEvent>;
    Send(request: RealtimeEvent, metadata?: Metadata): Promise<Empty>;
}
export declare class RealtimeClientImpl implements Realtime {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Subscribe(request: RealtimeRequest): Observable<RealtimeEvent>;
    Send(request: RealtimeEvent): Promise<Empty>;
}
export type RealtimeDefinition = typeof RealtimeDefinition;
export declare const RealtimeDefinition: {
    name: 'Realtime';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=realtime.d.ts.map
/**
 * #show_toast.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Toast } from '../../toast/toast.js';
/** Display a popup toast */
export interface ShowToastEffect {
    toast?: Toast;
}
/** Only fired if the toast has an action button and the user tapped it */
export interface ToastActionEvent {
}
export declare const ShowToastEffect: {
    $type: "devvit.ui.effects.v1alpha.ShowToastEffect";
    encode(message: ShowToastEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ShowToastEffect;
    fromJSON(object: any): ShowToastEffect;
    toJSON(message: ShowToastEffect): unknown;
    fromPartial<I extends {
        toast?: {
            text?: string | undefined;
            appearance?: import("../../toast/toast.js").ToastAppearance | undefined;
            leadingElement?: {
                icon?: string | undefined;
                emoji?: string | undefined;
                avatar?: string | undefined;
            } | undefined;
            trailingElement?: {
                label?: string | undefined;
                icon?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        toast?: ({
            text?: string | undefined;
            appearance?: import("../../toast/toast.js").ToastAppearance | undefined;
            leadingElement?: {
                icon?: string | undefined;
                emoji?: string | undefined;
                avatar?: string | undefined;
            } | undefined;
            trailingElement?: {
                label?: string | undefined;
                icon?: string | undefined;
            } | undefined;
        } & {
            text?: string | undefined;
            appearance?: import("../../toast/toast.js").ToastAppearance | undefined;
            leadingElement?: ({
                icon?: string | undefined;
                emoji?: string | undefined;
                avatar?: string | undefined;
            } & {
                icon?: string | undefined;
                emoji?: string | undefined;
                avatar?: string | undefined;
            } & { [K in Exclude<keyof I["toast"]["leadingElement"], "$type" | keyof import("../../toast/toast.js").ToastLeadingElement>]: never; }) | undefined;
            trailingElement?: ({
                label?: string | undefined;
                icon?: string | undefined;
            } & {
                label?: string | undefined;
                icon?: string | undefined;
            } & { [K_1 in Exclude<keyof I["toast"]["trailingElement"], "$type" | keyof import("../../toast/toast.js").ToastTrailingElement>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["toast"], "$type" | keyof Toast>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "toast">]: never; }>(object: I): ShowToastEffect;
};
export declare const ToastActionEvent: {
    $type: "devvit.ui.effects.v1alpha.ToastActionEvent";
    encode(_: ToastActionEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastActionEvent;
    fromJSON(_: any): ToastActionEvent;
    toJSON(_: ToastActionEvent): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): ToastActionEvent;
};
//# sourceMappingURL=show_toast.d.ts.map
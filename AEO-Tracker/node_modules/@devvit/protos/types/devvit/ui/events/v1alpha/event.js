/**
 * #event.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Struct } from '../../../../google/protobuf/struct.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { RealtimeSubscriptionEvent } from '../../effects/v1alpha/realtime_subscriptions.js';
import { FormSubmittedEvent } from '../../effects/v1alpha/show_form.js';
import { ToastActionEvent } from '../../effects/v1alpha/show_toast.js';
function createBaseUIEvent() {
    return {
        realtimeEvent: undefined,
        formSubmitted: undefined,
        toastAction: undefined,
        userAction: undefined,
        asyncRequest: undefined,
        asyncResponse: undefined,
        queue: undefined,
    };
}
export const UIEvent = {
    $type: "devvit.ui.events.v1alpha.UIEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.realtimeEvent !== undefined) {
            RealtimeSubscriptionEvent.encode(message.realtimeEvent, writer.uint32(18).fork()).ldelim();
        }
        if (message.formSubmitted !== undefined) {
            FormSubmittedEvent.encode(message.formSubmitted, writer.uint32(26).fork()).ldelim();
        }
        if (message.toastAction !== undefined) {
            ToastActionEvent.encode(message.toastAction, writer.uint32(34).fork()).ldelim();
        }
        if (message.userAction !== undefined) {
            UserAction.encode(message.userAction, writer.uint32(50).fork()).ldelim();
        }
        if (message.asyncRequest !== undefined) {
            AsyncRequest.encode(message.asyncRequest, writer.uint32(58).fork()).ldelim();
        }
        if (message.asyncResponse !== undefined) {
            AsyncResponse.encode(message.asyncResponse, writer.uint32(66).fork()).ldelim();
        }
        if (message.queue !== undefined) {
            StringValue.encode({ value: message.queue }, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.realtimeEvent = RealtimeSubscriptionEvent.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.formSubmitted = FormSubmittedEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.toastAction = ToastActionEvent.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.userAction = UserAction.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.asyncRequest = AsyncRequest.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.asyncResponse = AsyncResponse.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.queue = StringValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            realtimeEvent: isSet(object.realtimeEvent) ? RealtimeSubscriptionEvent.fromJSON(object.realtimeEvent) : undefined,
            formSubmitted: isSet(object.formSubmitted) ? FormSubmittedEvent.fromJSON(object.formSubmitted) : undefined,
            toastAction: isSet(object.toastAction) ? ToastActionEvent.fromJSON(object.toastAction) : undefined,
            userAction: isSet(object.userAction) ? UserAction.fromJSON(object.userAction) : undefined,
            asyncRequest: isSet(object.asyncRequest) ? AsyncRequest.fromJSON(object.asyncRequest) : undefined,
            asyncResponse: isSet(object.asyncResponse) ? AsyncResponse.fromJSON(object.asyncResponse) : undefined,
            queue: isSet(object.queue) ? String(object.queue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.realtimeEvent !== undefined &&
            (obj.realtimeEvent = message.realtimeEvent ? RealtimeSubscriptionEvent.toJSON(message.realtimeEvent) : undefined);
        message.formSubmitted !== undefined &&
            (obj.formSubmitted = message.formSubmitted ? FormSubmittedEvent.toJSON(message.formSubmitted) : undefined);
        message.toastAction !== undefined &&
            (obj.toastAction = message.toastAction ? ToastActionEvent.toJSON(message.toastAction) : undefined);
        message.userAction !== undefined &&
            (obj.userAction = message.userAction ? UserAction.toJSON(message.userAction) : undefined);
        message.asyncRequest !== undefined &&
            (obj.asyncRequest = message.asyncRequest ? AsyncRequest.toJSON(message.asyncRequest) : undefined);
        message.asyncResponse !== undefined &&
            (obj.asyncResponse = message.asyncResponse ? AsyncResponse.toJSON(message.asyncResponse) : undefined);
        message.queue !== undefined && (obj.queue = message.queue);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUIEvent();
        message.realtimeEvent = (object.realtimeEvent !== undefined && object.realtimeEvent !== null)
            ? RealtimeSubscriptionEvent.fromPartial(object.realtimeEvent)
            : undefined;
        message.formSubmitted = (object.formSubmitted !== undefined && object.formSubmitted !== null)
            ? FormSubmittedEvent.fromPartial(object.formSubmitted)
            : undefined;
        message.toastAction = (object.toastAction !== undefined && object.toastAction !== null)
            ? ToastActionEvent.fromPartial(object.toastAction)
            : undefined;
        message.userAction = (object.userAction !== undefined && object.userAction !== null)
            ? UserAction.fromPartial(object.userAction)
            : undefined;
        message.asyncRequest = (object.asyncRequest !== undefined && object.asyncRequest !== null)
            ? AsyncRequest.fromPartial(object.asyncRequest)
            : undefined;
        message.asyncResponse = (object.asyncResponse !== undefined && object.asyncResponse !== null)
            ? AsyncResponse.fromPartial(object.asyncResponse)
            : undefined;
        message.queue = object.queue ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.events.v1alpha.UIEvent", UIEvent);
function createBaseAsyncError() {
    return { message: "", details: "" };
}
export const AsyncError = {
    $type: "devvit.ui.events.v1alpha.AsyncError",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.details !== "") {
            writer.uint32(18).string(message.details);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                case 2:
                    message.details = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? String(object.message) : "",
            details: isSet(object.details) ? String(object.details) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.details !== undefined && (obj.details = message.details);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAsyncError();
        message.message = object.message ?? "";
        message.details = object.details ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.events.v1alpha.AsyncError", AsyncError);
function createBaseAsyncRequest() {
    return { requestId: "", data: undefined };
}
export const AsyncRequest = {
    $type: "devvit.ui.events.v1alpha.AsyncRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.data !== undefined && (obj.data = message.data);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAsyncRequest();
        message.requestId = object.requestId ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.events.v1alpha.AsyncRequest", AsyncRequest);
function createBaseAsyncResponse() {
    return { requestId: "", data: undefined, error: undefined };
}
export const AsyncResponse = {
    $type: "devvit.ui.events.v1alpha.AsyncResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            AsyncError.encode(message.error, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.error = AsyncError.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : "",
            data: isObject(object.data) ? object.data : undefined,
            error: isSet(object.error) ? AsyncError.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.data !== undefined && (obj.data = message.data);
        message.error !== undefined && (obj.error = message.error ? AsyncError.toJSON(message.error) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAsyncResponse();
        message.requestId = object.requestId ?? "";
        message.data = object.data ?? undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? AsyncError.fromPartial(object.error)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.events.v1alpha.AsyncResponse", AsyncResponse);
function createBaseUserAction() {
    return { actionId: "", data: undefined };
}
export const UserAction = {
    $type: "devvit.ui.events.v1alpha.UserAction",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actionId !== "") {
            writer.uint32(10).string(message.actionId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actionId = reader.string();
                    break;
                case 2:
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actionId: isSet(object.actionId) ? String(object.actionId) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.actionId !== undefined && (obj.actionId = message.actionId);
        message.data !== undefined && (obj.data = message.data);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUserAction();
        message.actionId = object.actionId ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.events.v1alpha.UserAction", UserAction);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

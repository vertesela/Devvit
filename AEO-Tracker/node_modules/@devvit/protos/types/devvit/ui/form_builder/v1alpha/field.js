/**
 * #field.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { formFieldTypeFromJSON, formFieldTypeToJSON } from './type.js';
import { FormFieldValue } from './value.js';
function createBaseFormField() {
    return {
        fieldId: "",
        fieldType: 0,
        label: "",
        helpText: undefined,
        defaultValue: undefined,
        required: undefined,
        disabled: undefined,
        fieldConfig: undefined,
        isSecret: undefined,
    };
}
export const FormField = {
    $type: "devvit.ui.form_builder.v1alpha.FormField",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fieldId !== "") {
            writer.uint32(10).string(message.fieldId);
        }
        if (message.fieldType !== 0) {
            writer.uint32(16).int32(message.fieldType);
        }
        if (message.label !== "") {
            writer.uint32(26).string(message.label);
        }
        if (message.helpText !== undefined) {
            writer.uint32(34).string(message.helpText);
        }
        if (message.defaultValue !== undefined) {
            FormFieldValue.encode(message.defaultValue, writer.uint32(42).fork()).ldelim();
        }
        if (message.required !== undefined) {
            writer.uint32(48).bool(message.required);
        }
        if (message.disabled !== undefined) {
            writer.uint32(56).bool(message.disabled);
        }
        if (message.fieldConfig !== undefined) {
            FieldConfig.encode(message.fieldConfig, writer.uint32(66).fork()).ldelim();
        }
        if (message.isSecret !== undefined) {
            writer.uint32(72).bool(message.isSecret);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormField();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fieldId = reader.string();
                    break;
                case 2:
                    message.fieldType = reader.int32();
                    break;
                case 3:
                    message.label = reader.string();
                    break;
                case 4:
                    message.helpText = reader.string();
                    break;
                case 5:
                    message.defaultValue = FormFieldValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.required = reader.bool();
                    break;
                case 7:
                    message.disabled = reader.bool();
                    break;
                case 8:
                    message.fieldConfig = FieldConfig.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.isSecret = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fieldId: isSet(object.fieldId) ? String(object.fieldId) : "",
            fieldType: isSet(object.fieldType) ? formFieldTypeFromJSON(object.fieldType) : 0,
            label: isSet(object.label) ? String(object.label) : "",
            helpText: isSet(object.helpText) ? String(object.helpText) : undefined,
            defaultValue: isSet(object.defaultValue) ? FormFieldValue.fromJSON(object.defaultValue) : undefined,
            required: isSet(object.required) ? Boolean(object.required) : undefined,
            disabled: isSet(object.disabled) ? Boolean(object.disabled) : undefined,
            fieldConfig: isSet(object.fieldConfig) ? FieldConfig.fromJSON(object.fieldConfig) : undefined,
            isSecret: isSet(object.isSecret) ? Boolean(object.isSecret) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.fieldId !== undefined && (obj.fieldId = message.fieldId);
        message.fieldType !== undefined && (obj.fieldType = formFieldTypeToJSON(message.fieldType));
        message.label !== undefined && (obj.label = message.label);
        message.helpText !== undefined && (obj.helpText = message.helpText);
        message.defaultValue !== undefined &&
            (obj.defaultValue = message.defaultValue ? FormFieldValue.toJSON(message.defaultValue) : undefined);
        message.required !== undefined && (obj.required = message.required);
        message.disabled !== undefined && (obj.disabled = message.disabled);
        message.fieldConfig !== undefined &&
            (obj.fieldConfig = message.fieldConfig ? FieldConfig.toJSON(message.fieldConfig) : undefined);
        message.isSecret !== undefined && (obj.isSecret = message.isSecret);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFormField();
        message.fieldId = object.fieldId ?? "";
        message.fieldType = object.fieldType ?? 0;
        message.label = object.label ?? "";
        message.helpText = object.helpText ?? undefined;
        message.defaultValue = (object.defaultValue !== undefined && object.defaultValue !== null)
            ? FormFieldValue.fromPartial(object.defaultValue)
            : undefined;
        message.required = object.required ?? undefined;
        message.disabled = object.disabled ?? undefined;
        message.fieldConfig = (object.fieldConfig !== undefined && object.fieldConfig !== null)
            ? FieldConfig.fromPartial(object.fieldConfig)
            : undefined;
        message.isSecret = object.isSecret ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FormField", FormField);
function createBaseFieldConfig() {
    return {
        stringConfig: undefined,
        paragraphConfig: undefined,
        numberConfig: undefined,
        booleanConfig: undefined,
        listConfig: undefined,
        selectionConfig: undefined,
        groupConfig: undefined,
    };
}
export const FieldConfig = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig",
    encode(message, writer = _m0.Writer.create()) {
        if (message.stringConfig !== undefined) {
            FieldConfig_String.encode(message.stringConfig, writer.uint32(10).fork()).ldelim();
        }
        if (message.paragraphConfig !== undefined) {
            FieldConfig_Paragraph.encode(message.paragraphConfig, writer.uint32(18).fork()).ldelim();
        }
        if (message.numberConfig !== undefined) {
            FieldConfig_Number.encode(message.numberConfig, writer.uint32(26).fork()).ldelim();
        }
        if (message.booleanConfig !== undefined) {
            FieldConfig_Boolean.encode(message.booleanConfig, writer.uint32(34).fork()).ldelim();
        }
        if (message.listConfig !== undefined) {
            FieldConfig_List.encode(message.listConfig, writer.uint32(42).fork()).ldelim();
        }
        if (message.selectionConfig !== undefined) {
            FieldConfig_Selection.encode(message.selectionConfig, writer.uint32(50).fork()).ldelim();
        }
        if (message.groupConfig !== undefined) {
            FieldConfig_Group.encode(message.groupConfig, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.stringConfig = FieldConfig_String.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.paragraphConfig = FieldConfig_Paragraph.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.numberConfig = FieldConfig_Number.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.booleanConfig = FieldConfig_Boolean.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.listConfig = FieldConfig_List.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.selectionConfig = FieldConfig_Selection.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.groupConfig = FieldConfig_Group.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            stringConfig: isSet(object.stringConfig) ? FieldConfig_String.fromJSON(object.stringConfig) : undefined,
            paragraphConfig: isSet(object.paragraphConfig)
                ? FieldConfig_Paragraph.fromJSON(object.paragraphConfig)
                : undefined,
            numberConfig: isSet(object.numberConfig) ? FieldConfig_Number.fromJSON(object.numberConfig) : undefined,
            booleanConfig: isSet(object.booleanConfig) ? FieldConfig_Boolean.fromJSON(object.booleanConfig) : undefined,
            listConfig: isSet(object.listConfig) ? FieldConfig_List.fromJSON(object.listConfig) : undefined,
            selectionConfig: isSet(object.selectionConfig)
                ? FieldConfig_Selection.fromJSON(object.selectionConfig)
                : undefined,
            groupConfig: isSet(object.groupConfig) ? FieldConfig_Group.fromJSON(object.groupConfig) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.stringConfig !== undefined &&
            (obj.stringConfig = message.stringConfig ? FieldConfig_String.toJSON(message.stringConfig) : undefined);
        message.paragraphConfig !== undefined &&
            (obj.paragraphConfig = message.paragraphConfig
                ? FieldConfig_Paragraph.toJSON(message.paragraphConfig)
                : undefined);
        message.numberConfig !== undefined &&
            (obj.numberConfig = message.numberConfig ? FieldConfig_Number.toJSON(message.numberConfig) : undefined);
        message.booleanConfig !== undefined &&
            (obj.booleanConfig = message.booleanConfig ? FieldConfig_Boolean.toJSON(message.booleanConfig) : undefined);
        message.listConfig !== undefined &&
            (obj.listConfig = message.listConfig ? FieldConfig_List.toJSON(message.listConfig) : undefined);
        message.selectionConfig !== undefined &&
            (obj.selectionConfig = message.selectionConfig
                ? FieldConfig_Selection.toJSON(message.selectionConfig)
                : undefined);
        message.groupConfig !== undefined &&
            (obj.groupConfig = message.groupConfig ? FieldConfig_Group.toJSON(message.groupConfig) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig();
        message.stringConfig = (object.stringConfig !== undefined && object.stringConfig !== null)
            ? FieldConfig_String.fromPartial(object.stringConfig)
            : undefined;
        message.paragraphConfig = (object.paragraphConfig !== undefined && object.paragraphConfig !== null)
            ? FieldConfig_Paragraph.fromPartial(object.paragraphConfig)
            : undefined;
        message.numberConfig = (object.numberConfig !== undefined && object.numberConfig !== null)
            ? FieldConfig_Number.fromPartial(object.numberConfig)
            : undefined;
        message.booleanConfig = (object.booleanConfig !== undefined && object.booleanConfig !== null)
            ? FieldConfig_Boolean.fromPartial(object.booleanConfig)
            : undefined;
        message.listConfig = (object.listConfig !== undefined && object.listConfig !== null)
            ? FieldConfig_List.fromPartial(object.listConfig)
            : undefined;
        message.selectionConfig = (object.selectionConfig !== undefined && object.selectionConfig !== null)
            ? FieldConfig_Selection.fromPartial(object.selectionConfig)
            : undefined;
        message.groupConfig = (object.groupConfig !== undefined && object.groupConfig !== null)
            ? FieldConfig_Group.fromPartial(object.groupConfig)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig", FieldConfig);
function createBaseFieldConfig_String() {
    return { minLength: undefined, maxLength: undefined, placeholder: undefined };
}
export const FieldConfig_String = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.String",
    encode(message, writer = _m0.Writer.create()) {
        if (message.minLength !== undefined) {
            writer.uint32(8).int32(message.minLength);
        }
        if (message.maxLength !== undefined) {
            writer.uint32(16).int32(message.maxLength);
        }
        if (message.placeholder !== undefined) {
            writer.uint32(26).string(message.placeholder);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_String();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.minLength = reader.int32();
                    break;
                case 2:
                    message.maxLength = reader.int32();
                    break;
                case 3:
                    message.placeholder = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            minLength: isSet(object.minLength) ? Number(object.minLength) : undefined,
            maxLength: isSet(object.maxLength) ? Number(object.maxLength) : undefined,
            placeholder: isSet(object.placeholder) ? String(object.placeholder) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.minLength !== undefined && (obj.minLength = Math.round(message.minLength));
        message.maxLength !== undefined && (obj.maxLength = Math.round(message.maxLength));
        message.placeholder !== undefined && (obj.placeholder = message.placeholder);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_String();
        message.minLength = object.minLength ?? undefined;
        message.maxLength = object.maxLength ?? undefined;
        message.placeholder = object.placeholder ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.String", FieldConfig_String);
function createBaseFieldConfig_Paragraph() {
    return { maxCharacters: undefined, lineHeight: undefined, placeholder: undefined };
}
export const FieldConfig_Paragraph = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Paragraph",
    encode(message, writer = _m0.Writer.create()) {
        if (message.maxCharacters !== undefined) {
            writer.uint32(8).int32(message.maxCharacters);
        }
        if (message.lineHeight !== undefined) {
            writer.uint32(16).int32(message.lineHeight);
        }
        if (message.placeholder !== undefined) {
            writer.uint32(26).string(message.placeholder);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Paragraph();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxCharacters = reader.int32();
                    break;
                case 2:
                    message.lineHeight = reader.int32();
                    break;
                case 3:
                    message.placeholder = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxCharacters: isSet(object.maxCharacters) ? Number(object.maxCharacters) : undefined,
            lineHeight: isSet(object.lineHeight) ? Number(object.lineHeight) : undefined,
            placeholder: isSet(object.placeholder) ? String(object.placeholder) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.maxCharacters !== undefined && (obj.maxCharacters = Math.round(message.maxCharacters));
        message.lineHeight !== undefined && (obj.lineHeight = Math.round(message.lineHeight));
        message.placeholder !== undefined && (obj.placeholder = message.placeholder);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_Paragraph();
        message.maxCharacters = object.maxCharacters ?? undefined;
        message.lineHeight = object.lineHeight ?? undefined;
        message.placeholder = object.placeholder ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Paragraph", FieldConfig_Paragraph);
function createBaseFieldConfig_Number() {
    return { step: undefined, min: undefined, max: undefined };
}
export const FieldConfig_Number = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Number",
    encode(message, writer = _m0.Writer.create()) {
        if (message.step !== undefined) {
            writer.uint32(9).double(message.step);
        }
        if (message.min !== undefined) {
            writer.uint32(17).double(message.min);
        }
        if (message.max !== undefined) {
            writer.uint32(25).double(message.max);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Number();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.step = reader.double();
                    break;
                case 2:
                    message.min = reader.double();
                    break;
                case 3:
                    message.max = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            step: isSet(object.step) ? Number(object.step) : undefined,
            min: isSet(object.min) ? Number(object.min) : undefined,
            max: isSet(object.max) ? Number(object.max) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.step !== undefined && (obj.step = message.step);
        message.min !== undefined && (obj.min = message.min);
        message.max !== undefined && (obj.max = message.max);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_Number();
        message.step = object.step ?? undefined;
        message.min = object.min ?? undefined;
        message.max = object.max ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Number", FieldConfig_Number);
function createBaseFieldConfig_Boolean() {
    return {};
}
export const FieldConfig_Boolean = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Boolean",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Boolean();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseFieldConfig_Boolean();
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Boolean", FieldConfig_Boolean);
function createBaseFieldConfig_List() {
    return { itemType: 0, itemConfig: undefined, minEntries: undefined, maxEntries: undefined, entryLabel: undefined };
}
export const FieldConfig_List = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.List",
    encode(message, writer = _m0.Writer.create()) {
        if (message.itemType !== 0) {
            writer.uint32(8).int32(message.itemType);
        }
        if (message.itemConfig !== undefined) {
            FieldConfig.encode(message.itemConfig, writer.uint32(18).fork()).ldelim();
        }
        if (message.minEntries !== undefined) {
            writer.uint32(24).int32(message.minEntries);
        }
        if (message.maxEntries !== undefined) {
            writer.uint32(32).int32(message.maxEntries);
        }
        if (message.entryLabel !== undefined) {
            writer.uint32(42).string(message.entryLabel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_List();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemType = reader.int32();
                    break;
                case 2:
                    message.itemConfig = FieldConfig.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.minEntries = reader.int32();
                    break;
                case 4:
                    message.maxEntries = reader.int32();
                    break;
                case 5:
                    message.entryLabel = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemType: isSet(object.itemType) ? formFieldTypeFromJSON(object.itemType) : 0,
            itemConfig: isSet(object.itemConfig) ? FieldConfig.fromJSON(object.itemConfig) : undefined,
            minEntries: isSet(object.minEntries) ? Number(object.minEntries) : undefined,
            maxEntries: isSet(object.maxEntries) ? Number(object.maxEntries) : undefined,
            entryLabel: isSet(object.entryLabel) ? String(object.entryLabel) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.itemType !== undefined && (obj.itemType = formFieldTypeToJSON(message.itemType));
        message.itemConfig !== undefined &&
            (obj.itemConfig = message.itemConfig ? FieldConfig.toJSON(message.itemConfig) : undefined);
        message.minEntries !== undefined && (obj.minEntries = Math.round(message.minEntries));
        message.maxEntries !== undefined && (obj.maxEntries = Math.round(message.maxEntries));
        message.entryLabel !== undefined && (obj.entryLabel = message.entryLabel);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_List();
        message.itemType = object.itemType ?? 0;
        message.itemConfig = (object.itemConfig !== undefined && object.itemConfig !== null)
            ? FieldConfig.fromPartial(object.itemConfig)
            : undefined;
        message.minEntries = object.minEntries ?? undefined;
        message.maxEntries = object.maxEntries ?? undefined;
        message.entryLabel = object.entryLabel ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.List", FieldConfig_List);
function createBaseFieldConfig_Selection() {
    return {
        choices: [],
        multiSelect: undefined,
        minSelections: undefined,
        maxSelections: undefined,
        renderAsList: undefined,
    };
}
export const FieldConfig_Selection = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Selection",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.choices) {
            FieldConfig_Selection_Item.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.multiSelect !== undefined) {
            writer.uint32(16).bool(message.multiSelect);
        }
        if (message.minSelections !== undefined) {
            writer.uint32(24).int32(message.minSelections);
        }
        if (message.maxSelections !== undefined) {
            writer.uint32(32).int32(message.maxSelections);
        }
        if (message.renderAsList !== undefined) {
            writer.uint32(40).bool(message.renderAsList);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Selection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.choices.push(FieldConfig_Selection_Item.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.multiSelect = reader.bool();
                    break;
                case 3:
                    message.minSelections = reader.int32();
                    break;
                case 4:
                    message.maxSelections = reader.int32();
                    break;
                case 5:
                    message.renderAsList = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            choices: Array.isArray(object?.choices)
                ? object.choices.map((e) => FieldConfig_Selection_Item.fromJSON(e))
                : [],
            multiSelect: isSet(object.multiSelect) ? Boolean(object.multiSelect) : undefined,
            minSelections: isSet(object.minSelections) ? Number(object.minSelections) : undefined,
            maxSelections: isSet(object.maxSelections) ? Number(object.maxSelections) : undefined,
            renderAsList: isSet(object.renderAsList) ? Boolean(object.renderAsList) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.choices) {
            obj.choices = message.choices.map((e) => e ? FieldConfig_Selection_Item.toJSON(e) : undefined);
        }
        else {
            obj.choices = [];
        }
        message.multiSelect !== undefined && (obj.multiSelect = message.multiSelect);
        message.minSelections !== undefined && (obj.minSelections = Math.round(message.minSelections));
        message.maxSelections !== undefined && (obj.maxSelections = Math.round(message.maxSelections));
        message.renderAsList !== undefined && (obj.renderAsList = message.renderAsList);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_Selection();
        message.choices = object.choices?.map((e) => FieldConfig_Selection_Item.fromPartial(e)) || [];
        message.multiSelect = object.multiSelect ?? undefined;
        message.minSelections = object.minSelections ?? undefined;
        message.maxSelections = object.maxSelections ?? undefined;
        message.renderAsList = object.renderAsList ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Selection", FieldConfig_Selection);
function createBaseFieldConfig_Selection_Item() {
    return { label: "", value: "" };
}
export const FieldConfig_Selection_Item = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Selection.Item",
    encode(message, writer = _m0.Writer.create()) {
        if (message.label !== "") {
            writer.uint32(10).string(message.label);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Selection_Item();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.label = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            label: isSet(object.label) ? String(object.label) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.label !== undefined && (obj.label = message.label);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_Selection_Item();
        message.label = object.label ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Selection.Item", FieldConfig_Selection_Item);
function createBaseFieldConfig_Group() {
    return { fields: [] };
}
export const FieldConfig_Group = {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Group",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.fields) {
            FormField.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFieldConfig_Group();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fields.push(FormField.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { fields: Array.isArray(object?.fields) ? object.fields.map((e) => FormField.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.fields) {
            obj.fields = message.fields.map((e) => e ? FormField.toJSON(e) : undefined);
        }
        else {
            obj.fields = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFieldConfig_Group();
        message.fields = object.fields?.map((e) => FormField.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.ui.form_builder.v1alpha.FieldConfig.Group", FieldConfig_Group);
function isSet(value) {
    return value !== null && value !== undefined;
}

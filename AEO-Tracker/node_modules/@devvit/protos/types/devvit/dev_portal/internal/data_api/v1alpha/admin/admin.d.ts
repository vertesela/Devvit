/**
 * #admin.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse } from '../../../../data_api/admin/auth/auth.js';
import { GetOrganizationByNameRequest, GetOrganizationByNameResponse } from '../../../../data_api/admin/organization/organization.js';
import { GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse } from '../../../../data_api/admin/subscription/subscription.js';
import { CreateFirehoseMonitorDataTokenRequest, GetFirehoseMonitorSubscriptionByNameRequest, GetFirehoseMonitorSubscriptionByNameResponse } from './firehose_monitor.js';
/** This is an internal service used for managing data tokens and subscriptions */
export interface InternalDataApiAdmin {
    /** Data Token */
    GetDataTokenById(request: GetDataTokenByIdRequest, metadata?: Metadata): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataTokensByOrganizationNameResponse>;
    /** Subscriptions */
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest, metadata?: Metadata): Promise<GetDataSubscriptionByIdResponse>;
    /** Firehose monitor utils */
    CreateFirehoseMonitorDataToken(request: CreateFirehoseMonitorDataTokenRequest, metadata?: Metadata): Promise<CreateDataTokenResponse>;
    GetFirehoseMonitorSubscriptionByName(request: GetFirehoseMonitorSubscriptionByNameRequest, metadata?: Metadata): Promise<GetFirehoseMonitorSubscriptionByNameResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
}
export declare class InternalDataApiAdminClientImpl implements InternalDataApiAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    CreateFirehoseMonitorDataToken(request: CreateFirehoseMonitorDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetFirehoseMonitorSubscriptionByName(request: GetFirehoseMonitorSubscriptionByNameRequest): Promise<GetFirehoseMonitorSubscriptionByNameResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
}
/** This is an internal service used for managing data tokens and subscriptions */
export type InternalDataApiAdminDefinition = typeof InternalDataApiAdminDefinition;
export declare const InternalDataApiAdminDefinition: {
    readonly name: "InternalDataApiAdmin";
    readonly fullName: "devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin";
    readonly methods: {
        /** Data Token */
        readonly getDataTokenById: {
            readonly name: "GetDataTokenById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdRequest";
                encode(message: GetDataTokenByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataTokenByIdRequest;
                fromJSON(object: any): GetDataTokenByIdRequest;
                toJSON(message: GetDataTokenByIdRequest): unknown;
                fromPartial<I extends {
                    id?: string | undefined;
                } & {
                    id?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): GetDataTokenByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdResponse";
                encode(message: GetDataTokenByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataTokenByIdResponse;
                fromJSON(object: any): GetDataTokenByIdResponse;
                toJSON(message: GetDataTokenByIdResponse): unknown;
                fromPartial<I_1 extends {
                    token?: {
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    } | undefined;
                } & {
                    token?: ({
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    } & { [K_1 in Exclude<keyof I_1["token"], "$type" | keyof import("../../../../../../../index.js").DataToken>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I_1, "$type" | "token">]: never; }>(object: I_1): GetDataTokenByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDataTokensByOrganizationName: {
            readonly name: "GetDataTokensByOrganizationName";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameRequest";
                encode(message: GetDataTokensByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataTokensByOrganizationNameRequest;
                fromJSON(object: any): GetDataTokensByOrganizationNameRequest;
                toJSON(message: GetDataTokensByOrganizationNameRequest): unknown;
                fromPartial<I_2 extends {
                    organizationName?: string | undefined;
                } & {
                    organizationName?: string | undefined;
                } & { [K_3 in Exclude<keyof I_2, "$type" | "organizationName">]: never; }>(object: I_2): GetDataTokensByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameResponse";
                encode(message: GetDataTokensByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataTokensByOrganizationNameResponse;
                fromJSON(object: any): GetDataTokensByOrganizationNameResponse;
                toJSON(message: GetDataTokensByOrganizationNameResponse): unknown;
                fromPartial<I_3 extends {
                    tokens?: {
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    }[] | undefined;
                } & {
                    tokens?: ({
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    }[] & ({
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    } & {
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    } & { [K_4 in Exclude<keyof I_3["tokens"][number], "$type" | keyof import("../../../../../../../index.js").DataToken>]: never; })[] & { [K_5 in Exclude<keyof I_3["tokens"], "$type" | keyof {
                        id?: string | undefined;
                        organizationId?: string | undefined;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_6 in Exclude<keyof I_3, "$type" | "tokens">]: never; }>(object: I_3): GetDataTokensByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Subscriptions */
        readonly getDataSubscriptionById: {
            readonly name: "GetDataSubscriptionById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest";
                encode(message: GetDataSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataSubscriptionByIdRequest;
                fromJSON(object: any): GetDataSubscriptionByIdRequest;
                toJSON(message: GetDataSubscriptionByIdRequest): unknown;
                fromPartial<I_4 extends {
                    subscriptionId?: string | undefined;
                } & {
                    subscriptionId?: string | undefined;
                } & { [K_7 in Exclude<keyof I_4, "$type" | "subscriptionId">]: never; }>(object: I_4): GetDataSubscriptionByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse";
                encode(message: GetDataSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDataSubscriptionByIdResponse;
                fromJSON(object: any): GetDataSubscriptionByIdResponse;
                toJSON(message: GetDataSubscriptionByIdResponse): unknown;
                fromPartial<I_5 extends {
                    subscription?: {
                        id?: string | undefined;
                        tier?: import("../../../../../options/options.js").DataTier | undefined;
                        events?: import("../../../../../options/options.js").FirehoseEvent[] | undefined;
                        subreddits?: string[] | undefined;
                        subredditRatings?: import("../../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                        organizationId?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                    } | undefined;
                } & {
                    subscription?: ({
                        id?: string | undefined;
                        tier?: import("../../../../../options/options.js").DataTier | undefined;
                        events?: import("../../../../../options/options.js").FirehoseEvent[] | undefined;
                        subreddits?: string[] | undefined;
                        subredditRatings?: import("../../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                        organizationId?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                    } & {
                        id?: string | undefined;
                        tier?: import("../../../../../options/options.js").DataTier | undefined;
                        events?: (import("../../../../../options/options.js").FirehoseEvent[] & import("../../../../../options/options.js").FirehoseEvent[] & { [K_8 in Exclude<keyof I_5["subscription"]["events"], "$type" | keyof import("../../../../../options/options.js").FirehoseEvent[]>]: never; }) | undefined;
                        subreddits?: (string[] & string[] & { [K_9 in Exclude<keyof I_5["subscription"]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
                        subredditRatings?: (import("../../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] & import("../../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] & { [K_10 in Exclude<keyof I_5["subscription"]["subredditRatings"], "$type" | keyof import("../../../../../reddit/v2alpha/subredditv2.js").SubredditRating[]>]: never; }) | undefined;
                        organizationId?: string | undefined;
                        name?: string | undefined;
                        description?: string | undefined;
                    } & { [K_11 in Exclude<keyof I_5["subscription"], "$type" | keyof import("../../../../../../../index.js").DataSubscription>]: never; }) | undefined;
                } & { [K_12 in Exclude<keyof I_5, "$type" | "subscription">]: never; }>(object: I_5): GetDataSubscriptionByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Firehose monitor utils */
        readonly createFirehoseMonitorDataToken: {
            readonly name: "CreateFirehoseMonitorDataToken";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.CreateFirehoseMonitorDataTokenRequest";
                encode(message: CreateFirehoseMonitorDataTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CreateFirehoseMonitorDataTokenRequest;
                fromJSON(object: any): CreateFirehoseMonitorDataTokenRequest;
                toJSON(message: CreateFirehoseMonitorDataTokenRequest): unknown;
                fromPartial<I_6 extends {
                    expiresIn?: {
                        seconds?: number | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } & {
                    expiresIn?: ({
                        seconds?: number | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: number | undefined;
                        nanos?: number | undefined;
                    } & { [K_13 in Exclude<keyof I_6["expiresIn"], "$type" | keyof import("../../../../../../../index.js").Duration>]: never; }) | undefined;
                } & { [K_14 in Exclude<keyof I_6, "$type" | "expiresIn">]: never; }>(object: I_6): CreateFirehoseMonitorDataTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.CreateDataTokenResponse";
                encode(message: CreateDataTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CreateDataTokenResponse;
                fromJSON(object: any): CreateDataTokenResponse;
                toJSON(message: CreateDataTokenResponse): unknown;
                fromPartial<I_7 extends {
                    token?: string | undefined;
                    expiresAt?: Date | undefined;
                } & {
                    token?: string | undefined;
                    expiresAt?: Date | undefined;
                } & { [K_15 in Exclude<keyof I_7, "$type" | keyof CreateDataTokenResponse>]: never; }>(object: I_7): CreateDataTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getFirehoseMonitorSubscriptionByName: {
            readonly name: "GetFirehoseMonitorSubscriptionByName";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.GetFirehoseMonitorSubscriptionByNameRequest";
                encode(message: GetFirehoseMonitorSubscriptionByNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetFirehoseMonitorSubscriptionByNameRequest;
                fromJSON(object: any): GetFirehoseMonitorSubscriptionByNameRequest;
                toJSON(message: GetFirehoseMonitorSubscriptionByNameRequest): unknown;
                fromPartial<I_8 extends {
                    name?: string | undefined;
                } & {
                    name?: string | undefined;
                } & { [K_16 in Exclude<keyof I_8, "$type" | "name">]: never; }>(object: I_8): GetFirehoseMonitorSubscriptionByNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.GetFirehoseMonitorSubscriptionByNameResponse";
                encode(message: GetFirehoseMonitorSubscriptionByNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetFirehoseMonitorSubscriptionByNameResponse;
                fromJSON(object: any): GetFirehoseMonitorSubscriptionByNameResponse; /** Subscriptions */
                toJSON(message: GetFirehoseMonitorSubscriptionByNameResponse): unknown;
                fromPartial<I_9 extends {
                    id?: string | undefined;
                } & {
                    id?: string | undefined;
                } & { [K_17 in Exclude<keyof I_9, "$type" | "id">]: never; }>(object: I_9): GetFirehoseMonitorSubscriptionByNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getOrganizationByName: {
            readonly name: "GetOrganizationByName";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameRequest";
                encode(message: GetOrganizationByNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetOrganizationByNameRequest;
                fromJSON(object: any): GetOrganizationByNameRequest;
                toJSON(message: GetOrganizationByNameRequest): unknown;
                fromPartial<I_10 extends {
                    name?: string | undefined;
                } & {
                    name?: string | undefined;
                } & { [K_18 in Exclude<keyof I_10, "$type" | "name">]: never; }>(object: I_10): GetOrganizationByNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameResponse";
                encode(message: GetOrganizationByNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetOrganizationByNameResponse;
                fromJSON(object: any): GetOrganizationByNameResponse;
                toJSON(message: GetOrganizationByNameResponse): unknown;
                fromPartial<I_11 extends {
                    organizationId?: string | undefined;
                    isInternal?: boolean | undefined;
                } & {
                    organizationId?: string | undefined;
                    isInternal?: boolean | undefined;
                } & { [K_19 in Exclude<keyof I_11, "$type" | keyof GetOrganizationByNameResponse>]: never; }>(object: I_11): GetOrganizationByNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=admin.d.ts.map
import { GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, CreateDataTokenResponse, } from '../../../../data_api/admin/auth/auth.js';
import { GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, } from '../../../../data_api/admin/subscription/subscription.js';
import { CreateFirehoseMonitorDataTokenRequest, GetFirehoseMonitorSubscriptionByNameRequest, GetFirehoseMonitorSubscriptionByNameResponse, } from './firehose_monitor.js';
import { GetOrganizationByNameRequest, GetOrganizationByNameResponse, } from '../../../../data_api/admin/organization/organization.js';
export class InternalDataApiAdminClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetDataTokenById.bind(this);
        this.GetDataTokensByOrganizationName.bind(this);
        this.GetDataSubscriptionById.bind(this);
        this.CreateFirehoseMonitorDataToken.bind(this);
        this.GetFirehoseMonitorSubscriptionByName.bind(this);
        this.GetOrganizationByName.bind(this);
    }
    GetDataTokenById(request) {
        const data = GetDataTokenByIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataTokenById', 'application/json', data);
        return promise.then((data) => GetDataTokenByIdResponse.fromJSON(data));
    }
    GetDataTokensByOrganizationName(request) {
        const data = GetDataTokensByOrganizationNameRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataTokensByOrganizationName', 'application/json', data);
        return promise.then((data) => GetDataTokensByOrganizationNameResponse.fromJSON(data));
    }
    GetDataSubscriptionById(request) {
        const data = GetDataSubscriptionByIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataSubscriptionById', 'application/json', data);
        return promise.then((data) => GetDataSubscriptionByIdResponse.fromJSON(data));
    }
    CreateFirehoseMonitorDataToken(request) {
        const data = CreateFirehoseMonitorDataTokenRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'CreateFirehoseMonitorDataToken', 'application/json', data);
        return promise.then((data) => CreateDataTokenResponse.fromJSON(data));
    }
    GetFirehoseMonitorSubscriptionByName(request) {
        const data = GetFirehoseMonitorSubscriptionByNameRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetFirehoseMonitorSubscriptionByName', 'application/json', data);
        return promise.then((data) => GetFirehoseMonitorSubscriptionByNameResponse.fromJSON(data));
    }
    GetOrganizationByName(request) {
        const data = GetOrganizationByNameRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetOrganizationByName', 'application/json', data);
        return promise.then((data) => GetOrganizationByNameResponse.fromJSON(data));
    }
}
export class InternalDataApiAdminClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetDataTokenById.bind(this);
        this.GetDataTokensByOrganizationName.bind(this);
        this.GetDataSubscriptionById.bind(this);
        this.CreateFirehoseMonitorDataToken.bind(this);
        this.GetFirehoseMonitorSubscriptionByName.bind(this);
        this.GetOrganizationByName.bind(this);
    }
    GetDataTokenById(request) {
        const data = GetDataTokenByIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataTokenById', 'application/protobuf', data);
        return promise.then((data) => GetDataTokenByIdResponse.decode(data));
    }
    GetDataTokensByOrganizationName(request) {
        const data = GetDataTokensByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataTokensByOrganizationName', 'application/protobuf', data);
        return promise.then((data) => GetDataTokensByOrganizationNameResponse.decode(data));
    }
    GetDataSubscriptionById(request) {
        const data = GetDataSubscriptionByIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetDataSubscriptionById', 'application/protobuf', data);
        return promise.then((data) => GetDataSubscriptionByIdResponse.decode(data));
    }
    CreateFirehoseMonitorDataToken(request) {
        const data = CreateFirehoseMonitorDataTokenRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'CreateFirehoseMonitorDataToken', 'application/protobuf', data);
        return promise.then((data) => CreateDataTokenResponse.decode(data));
    }
    GetFirehoseMonitorSubscriptionByName(request) {
        const data = GetFirehoseMonitorSubscriptionByNameRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetFirehoseMonitorSubscriptionByName', 'application/protobuf', data);
        return promise.then((data) => GetFirehoseMonitorSubscriptionByNameResponse.decode(data));
    }
    GetOrganizationByName(request) {
        const data = GetOrganizationByNameRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin', 'GetOrganizationByName', 'application/protobuf', data);
        return promise.then((data) => GetOrganizationByNameResponse.decode(data));
    }
}

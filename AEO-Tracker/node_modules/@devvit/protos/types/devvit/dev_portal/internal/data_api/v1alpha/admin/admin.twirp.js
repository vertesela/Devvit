import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, CreateDataTokenResponse, } from '../../../../data_api/admin/auth/auth.js';
import { GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, } from '../../../../data_api/admin/subscription/subscription.js';
import { CreateFirehoseMonitorDataTokenRequest, GetFirehoseMonitorSubscriptionByNameRequest, GetFirehoseMonitorSubscriptionByNameResponse, } from './firehose_monitor.js';
import { GetOrganizationByNameRequest, GetOrganizationByNameResponse, } from '../../../../data_api/admin/organization/organization.js';
export var InternalDataApiAdminMethod;
(function (InternalDataApiAdminMethod) {
    InternalDataApiAdminMethod["GetDataTokenById"] = "GetDataTokenById";
    InternalDataApiAdminMethod["GetDataTokensByOrganizationName"] = "GetDataTokensByOrganizationName";
    InternalDataApiAdminMethod["GetDataSubscriptionById"] = "GetDataSubscriptionById";
    InternalDataApiAdminMethod["CreateFirehoseMonitorDataToken"] = "CreateFirehoseMonitorDataToken";
    InternalDataApiAdminMethod["GetFirehoseMonitorSubscriptionByName"] = "GetFirehoseMonitorSubscriptionByName";
    InternalDataApiAdminMethod["GetOrganizationByName"] = "GetOrganizationByName";
})(InternalDataApiAdminMethod || (InternalDataApiAdminMethod = {}));
export const InternalDataApiAdminMethodList = [
    InternalDataApiAdminMethod.GetDataTokenById,
    InternalDataApiAdminMethod.GetDataTokensByOrganizationName,
    InternalDataApiAdminMethod.GetDataSubscriptionById,
    InternalDataApiAdminMethod.CreateFirehoseMonitorDataToken,
    InternalDataApiAdminMethod.GetFirehoseMonitorSubscriptionByName,
    InternalDataApiAdminMethod.GetOrganizationByName,
];
export function createInternalDataApiAdminServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.dev_portal.internal.data_api.v1alpha.admin',
        serviceName: 'InternalDataApiAdmin',
        methodList: InternalDataApiAdminMethodList,
        matchRoute: matchInternalDataApiAdminRoute,
    });
}
function matchInternalDataApiAdminRoute(method, events) {
    switch (method) {
        case 'GetDataTokenById':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetDataTokenById' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminGetDataTokenByIdRequest(ctx, service, data, interceptors);
            };
        case 'GetDataTokensByOrganizationName':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetDataTokensByOrganizationName' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminGetDataTokensByOrganizationNameRequest(ctx, service, data, interceptors);
            };
        case 'GetDataSubscriptionById':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetDataSubscriptionById' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminGetDataSubscriptionByIdRequest(ctx, service, data, interceptors);
            };
        case 'CreateFirehoseMonitorDataToken':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'CreateFirehoseMonitorDataToken' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminCreateFirehoseMonitorDataTokenRequest(ctx, service, data, interceptors);
            };
        case 'GetFirehoseMonitorSubscriptionByName':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetFirehoseMonitorSubscriptionByName' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameRequest(ctx, service, data, interceptors);
            };
        case 'GetOrganizationByName':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetOrganizationByName' };
                await events.onMatch(ctx);
                return handleInternalDataApiAdminGetOrganizationByNameRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminGetDataTokenByIdRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminGetDataTokenByIdJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminGetDataTokenByIdProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminGetDataTokensByOrganizationNameRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminGetDataTokensByOrganizationNameJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminGetDataTokensByOrganizationNameProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminGetDataSubscriptionByIdRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminGetDataSubscriptionByIdJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminGetDataSubscriptionByIdProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminCreateFirehoseMonitorDataTokenRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminCreateFirehoseMonitorDataTokenJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminCreateFirehoseMonitorDataTokenProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInternalDataApiAdminGetOrganizationByNameRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInternalDataApiAdminGetOrganizationByNameJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInternalDataApiAdminGetOrganizationByNameProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleInternalDataApiAdminGetDataTokenByIdJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetDataTokenByIdRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataTokenById(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataTokenById(ctx, request);
    }
    return JSON.stringify(GetDataTokenByIdResponse.toJSON(response));
}
async function handleInternalDataApiAdminGetDataTokensByOrganizationNameJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetDataTokensByOrganizationNameRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataTokensByOrganizationName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataTokensByOrganizationName(ctx, request);
    }
    return JSON.stringify(GetDataTokensByOrganizationNameResponse.toJSON(response));
}
async function handleInternalDataApiAdminGetDataSubscriptionByIdJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetDataSubscriptionByIdRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataSubscriptionById(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataSubscriptionById(ctx, request);
    }
    return JSON.stringify(GetDataSubscriptionByIdResponse.toJSON(response));
}
async function handleInternalDataApiAdminCreateFirehoseMonitorDataTokenJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CreateFirehoseMonitorDataTokenRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CreateFirehoseMonitorDataToken(ctx, inputReq);
        });
    }
    else {
        response = await service.CreateFirehoseMonitorDataToken(ctx, request);
    }
    return JSON.stringify(CreateDataTokenResponse.toJSON(response));
}
async function handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetFirehoseMonitorSubscriptionByNameRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetFirehoseMonitorSubscriptionByName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetFirehoseMonitorSubscriptionByName(ctx, request);
    }
    return JSON.stringify(GetFirehoseMonitorSubscriptionByNameResponse.toJSON(response));
}
async function handleInternalDataApiAdminGetOrganizationByNameJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetOrganizationByNameRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetOrganizationByName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetOrganizationByName(ctx, request);
    }
    return JSON.stringify(GetOrganizationByNameResponse.toJSON(response));
}
async function handleInternalDataApiAdminGetDataTokenByIdProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetDataTokenByIdRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataTokenById(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataTokenById(ctx, request);
    }
    return Buffer.from(GetDataTokenByIdResponse.encode(response).finish());
}
async function handleInternalDataApiAdminGetDataTokensByOrganizationNameProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetDataTokensByOrganizationNameRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataTokensByOrganizationName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataTokensByOrganizationName(ctx, request);
    }
    return Buffer.from(GetDataTokensByOrganizationNameResponse.encode(response).finish());
}
async function handleInternalDataApiAdminGetDataSubscriptionByIdProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetDataSubscriptionByIdRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetDataSubscriptionById(ctx, inputReq);
        });
    }
    else {
        response = await service.GetDataSubscriptionById(ctx, request);
    }
    return Buffer.from(GetDataSubscriptionByIdResponse.encode(response).finish());
}
async function handleInternalDataApiAdminCreateFirehoseMonitorDataTokenProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CreateFirehoseMonitorDataTokenRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CreateFirehoseMonitorDataToken(ctx, inputReq);
        });
    }
    else {
        response = await service.CreateFirehoseMonitorDataToken(ctx, request);
    }
    return Buffer.from(CreateDataTokenResponse.encode(response).finish());
}
async function handleInternalDataApiAdminGetFirehoseMonitorSubscriptionByNameProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetFirehoseMonitorSubscriptionByNameRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetFirehoseMonitorSubscriptionByName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetFirehoseMonitorSubscriptionByName(ctx, request);
    }
    return Buffer.from(GetFirehoseMonitorSubscriptionByNameResponse.encode(response).finish());
}
async function handleInternalDataApiAdminGetOrganizationByNameProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetOrganizationByNameRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetOrganizationByName(ctx, inputReq);
        });
    }
    else {
        response = await service.GetOrganizationByName(ctx, request);
    }
    return Buffer.from(GetOrganizationByNameResponse.encode(response).finish());
}

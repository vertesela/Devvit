import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { DevPortalAuthCanViewLogsRequest, DevPortalAuthorizationResponse, } from './authorization.js';
export var DevPortalAuthorizationMethod;
(function (DevPortalAuthorizationMethod) {
    DevPortalAuthorizationMethod["CanViewLogs"] = "CanViewLogs";
})(DevPortalAuthorizationMethod || (DevPortalAuthorizationMethod = {}));
export const DevPortalAuthorizationMethodList = [
    DevPortalAuthorizationMethod.CanViewLogs,
];
export function createDevPortalAuthorizationServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.dev_portal.internal.authorization.v1alpha',
        serviceName: 'DevPortalAuthorization',
        methodList: DevPortalAuthorizationMethodList,
        matchRoute: matchDevPortalAuthorizationRoute,
    });
}
function matchDevPortalAuthorizationRoute(method, events) {
    switch (method) {
        case 'CanViewLogs':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'CanViewLogs' };
                await events.onMatch(ctx);
                return handleDevPortalAuthorizationCanViewLogsRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleDevPortalAuthorizationCanViewLogsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleDevPortalAuthorizationCanViewLogsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleDevPortalAuthorizationCanViewLogsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleDevPortalAuthorizationCanViewLogsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = DevPortalAuthCanViewLogsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CanViewLogs(ctx, inputReq);
        });
    }
    else {
        response = await service.CanViewLogs(ctx, request);
    }
    return JSON.stringify(DevPortalAuthorizationResponse.toJSON(response));
}
async function handleDevPortalAuthorizationCanViewLogsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = DevPortalAuthCanViewLogsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CanViewLogs(ctx, inputReq);
        });
    }
    else {
        response = await service.CanViewLogs(ctx, request);
    }
    return Buffer.from(DevPortalAuthorizationResponse.encode(response).finish());
}

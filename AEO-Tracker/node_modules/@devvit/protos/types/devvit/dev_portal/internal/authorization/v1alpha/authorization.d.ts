/**
 * #authorization.ts
 *
 * @packageDocumentation
 */
import { Metadata } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { RemoteLogType } from '../../../../remote_logger/remote_logger.js';
/** An application version installed to a specific location */
export interface DevPortalAuthInstalledAppResource {
    app?: DevPortalAuthAppVersionResource;
    location?: DevPortalAuthLocationResource;
}
/** Represents a specific application version */
export interface DevPortalAuthAppVersionResource {
    /** The short app name (slug) */
    name: string;
    /** Semver of the application */
    version: string;
}
/** Represents a specific subreddit */
export interface DevPortalAuthLocationResource {
    /** t5_ for the subreddit or t2_ for user */
    id: string;
}
export interface DevPortalAuthCanViewLogsRequest {
    userId: string;
    /** Installation Id UUID */
    id: string | undefined;
    /** An app version + location combo */
    app?: DevPortalAuthInstalledAppResource | undefined;
    /**
     * The log stream type that will be read from. Admins may have access to more
     * types than other types of users.
     */
    type: RemoteLogType;
}
export interface DevPortalAuthorizationResponse {
    /** true if the requested action is allowed */
    allowed: boolean;
    /** a reason for the allow/deny. This is more likely present for the deny case. */
    reason: string;
}
export declare const DevPortalAuthInstalledAppResource: {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthInstalledAppResource";
    encode(message: DevPortalAuthInstalledAppResource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthInstalledAppResource;
    fromJSON(object: any): DevPortalAuthInstalledAppResource;
    toJSON(message: DevPortalAuthInstalledAppResource): unknown;
    fromPartial<I extends {
        app?: {
            name?: string | undefined;
            version?: string | undefined;
        } | undefined;
        location?: {
            id?: string | undefined;
        } | undefined;
    } & {
        app?: ({
            name?: string | undefined;
            version?: string | undefined;
        } & {
            name?: string | undefined;
            version?: string | undefined;
        } & { [K in Exclude<keyof I["app"], "$type" | keyof DevPortalAuthAppVersionResource>]: never; }) | undefined;
        location?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_1 in Exclude<keyof I["location"], "$type" | "id">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof DevPortalAuthInstalledAppResource>]: never; }>(object: I): DevPortalAuthInstalledAppResource;
};
export declare const DevPortalAuthAppVersionResource: {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthAppVersionResource";
    encode(message: DevPortalAuthAppVersionResource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthAppVersionResource;
    fromJSON(object: any): DevPortalAuthAppVersionResource;
    toJSON(message: DevPortalAuthAppVersionResource): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        version?: string | undefined;
    } & {
        name?: string | undefined;
        version?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DevPortalAuthAppVersionResource>]: never; }>(object: I): DevPortalAuthAppVersionResource;
};
export declare const DevPortalAuthLocationResource: {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthLocationResource";
    encode(message: DevPortalAuthLocationResource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthLocationResource;
    fromJSON(object: any): DevPortalAuthLocationResource;
    toJSON(message: DevPortalAuthLocationResource): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): DevPortalAuthLocationResource;
};
export declare const DevPortalAuthCanViewLogsRequest: {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthCanViewLogsRequest";
    encode(message: DevPortalAuthCanViewLogsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthCanViewLogsRequest;
    fromJSON(object: any): DevPortalAuthCanViewLogsRequest;
    toJSON(message: DevPortalAuthCanViewLogsRequest): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        id?: string | undefined;
        app?: {
            app?: {
                name?: string | undefined;
                version?: string | undefined;
            } | undefined;
            location?: {
                id?: string | undefined;
            } | undefined;
        } | undefined;
        type?: RemoteLogType | undefined;
    } & {
        userId?: string | undefined;
        id?: string | undefined;
        app?: ({
            app?: {
                name?: string | undefined;
                version?: string | undefined;
            } | undefined;
            location?: {
                id?: string | undefined;
            } | undefined;
        } & {
            app?: ({
                name?: string | undefined;
                version?: string | undefined;
            } & {
                name?: string | undefined;
                version?: string | undefined;
            } & { [K in Exclude<keyof I["app"]["app"], "$type" | keyof DevPortalAuthAppVersionResource>]: never; }) | undefined;
            location?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K_1 in Exclude<keyof I["app"]["location"], "$type" | "id">]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["app"], "$type" | keyof DevPortalAuthInstalledAppResource>]: never; }) | undefined;
        type?: RemoteLogType | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof DevPortalAuthCanViewLogsRequest>]: never; }>(object: I): DevPortalAuthCanViewLogsRequest;
};
export declare const DevPortalAuthorizationResponse: {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorizationResponse";
    encode(message: DevPortalAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthorizationResponse;
    fromJSON(object: any): DevPortalAuthorizationResponse;
    toJSON(message: DevPortalAuthorizationResponse): unknown;
    fromPartial<I extends {
        allowed?: boolean | undefined;
        reason?: string | undefined;
    } & {
        allowed?: boolean | undefined;
        reason?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DevPortalAuthorizationResponse>]: never; }>(object: I): DevPortalAuthorizationResponse;
};
export interface DevPortalAuthorization {
    /** Check if a user is allowed view logs */
    CanViewLogs(request: DevPortalAuthCanViewLogsRequest, metadata?: Metadata): Promise<DevPortalAuthorizationResponse>;
}
export declare class DevPortalAuthorizationClientImpl implements DevPortalAuthorization {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CanViewLogs(request: DevPortalAuthCanViewLogsRequest): Promise<DevPortalAuthorizationResponse>;
}
export type DevPortalAuthorizationDefinition = typeof DevPortalAuthorizationDefinition;
export declare const DevPortalAuthorizationDefinition: {
    readonly name: "DevPortalAuthorization";
    readonly fullName: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorization";
    readonly methods: {
        /** Check if a user is allowed view logs */
        readonly canViewLogs: {
            readonly name: "CanViewLogs";
            readonly requestType: {
                $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthCanViewLogsRequest";
                encode(message: DevPortalAuthCanViewLogsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthCanViewLogsRequest;
                fromJSON(object: any): DevPortalAuthCanViewLogsRequest;
                toJSON(message: DevPortalAuthCanViewLogsRequest): unknown;
                fromPartial<I extends {
                    userId?: string | undefined;
                    id?: string | undefined;
                    app?: {
                        app?: {
                            name?: string | undefined;
                            version?: string | undefined;
                        } | undefined;
                        location?: {
                            id?: string | undefined;
                        } | undefined;
                    } | undefined;
                    type?: RemoteLogType | undefined;
                } & {
                    userId?: string | undefined;
                    id?: string | undefined;
                    app?: ({
                        app?: {
                            name?: string | undefined;
                            version?: string | undefined;
                        } | undefined;
                        location?: {
                            id?: string | undefined;
                        } | undefined;
                    } & {
                        app?: ({
                            name?: string | undefined;
                            version?: string | undefined;
                        } & {
                            name?: string | undefined;
                            version?: string | undefined;
                        } & { [K in Exclude<keyof I["app"]["app"], "$type" | keyof DevPortalAuthAppVersionResource>]: never; }) | undefined;
                        location?: ({
                            id?: string | undefined;
                        } & {
                            id?: string | undefined;
                        } & { [K_1 in Exclude<keyof I["app"]["location"], "$type" | "id">]: never; }) | undefined;
                    } & { [K_2 in Exclude<keyof I["app"], "$type" | keyof DevPortalAuthInstalledAppResource>]: never; }) | undefined;
                    type?: RemoteLogType | undefined;
                } & { [K_3 in Exclude<keyof I, "$type" | keyof DevPortalAuthCanViewLogsRequest>]: never; }>(object: I): DevPortalAuthCanViewLogsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorizationResponse";
                encode(message: DevPortalAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DevPortalAuthorizationResponse;
                fromJSON(object: any): DevPortalAuthorizationResponse;
                toJSON(message: DevPortalAuthorizationResponse): unknown;
                fromPartial<I_1 extends {
                    allowed?: boolean | undefined;
                    reason?: string | undefined;
                } & {
                    allowed?: boolean | undefined;
                    reason?: string | undefined;
                } & { [K in Exclude<keyof I, "$type" | keyof DevPortalAuthorizationResponse>]: never; }>(object: I_1): DevPortalAuthorizationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=authorization.d.ts.map
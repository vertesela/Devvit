/**
 * #media.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
export var AssetStatus;
(function (AssetStatus) {
    AssetStatus[AssetStatus["MISSING"] = 0] = "MISSING";
    AssetStatus[AssetStatus["PROCESSING"] = 1] = "PROCESSING";
    AssetStatus[AssetStatus["READY"] = 2] = "READY";
    AssetStatus[AssetStatus["REJECTED"] = 3] = "REJECTED";
    AssetStatus[AssetStatus["ERROR"] = 4] = "ERROR";
    AssetStatus[AssetStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AssetStatus || (AssetStatus = {}));
export function assetStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "MISSING":
            return AssetStatus.MISSING;
        case 1:
        case "PROCESSING":
            return AssetStatus.PROCESSING;
        case 2:
        case "READY":
            return AssetStatus.READY;
        case 3:
        case "REJECTED":
            return AssetStatus.REJECTED;
        case 4:
        case "ERROR":
            return AssetStatus.ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AssetStatus.UNRECOGNIZED;
    }
}
export function assetStatusToJSON(object) {
    switch (object) {
        case AssetStatus.MISSING:
            return 0;
        case AssetStatus.PROCESSING:
            return 1;
        case AssetStatus.READY:
            return 2;
        case AssetStatus.REJECTED:
            return 3;
        case AssetStatus.ERROR:
            return 4;
        case AssetStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseUpdateAssetStatusRequest() {
    return { mediaId: "", newStatus: 0, url: "" };
}
export const UpdateAssetStatusRequest = {
    $type: "devvit.dev_portal.internal.media.UpdateAssetStatusRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.mediaId !== "") {
            writer.uint32(10).string(message.mediaId);
        }
        if (message.newStatus !== 0) {
            writer.uint32(16).int32(message.newStatus);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAssetStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mediaId = reader.string();
                    break;
                case 2:
                    message.newStatus = reader.int32();
                    break;
                case 3:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            mediaId: isSet(object.mediaId) ? String(object.mediaId) : "",
            newStatus: isSet(object.newStatus) ? assetStatusFromJSON(object.newStatus) : 0,
            url: isSet(object.url) ? String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.mediaId !== undefined && (obj.mediaId = message.mediaId);
        message.newStatus !== undefined && (obj.newStatus = assetStatusToJSON(message.newStatus));
        message.url !== undefined && (obj.url = message.url);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateAssetStatusRequest();
        message.mediaId = object.mediaId ?? "";
        message.newStatus = object.newStatus ?? 0;
        message.url = object.url ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.media.UpdateAssetStatusRequest", UpdateAssetStatusRequest);
function createBaseUpdateAssetStatusResponse() {
    return {};
}
export const UpdateAssetStatusResponse = {
    $type: "devvit.dev_portal.internal.media.UpdateAssetStatusResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAssetStatusResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseUpdateAssetStatusResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.media.UpdateAssetStatusResponse", UpdateAssetStatusResponse);
export class DevPortalMediaClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.internal.media.DevPortalMedia";
        this.rpc = rpc;
        this.UpdateAssetStatus = this.UpdateAssetStatus.bind(this);
    }
    UpdateAssetStatus(request) {
        const data = UpdateAssetStatusRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateAssetStatus", data);
        return promise.then((data) => UpdateAssetStatusResponse.decode(new _m0.Reader(data)));
    }
}
export const DevPortalMediaDefinition = {
    name: "DevPortalMedia",
    fullName: "devvit.dev_portal.internal.media.DevPortalMedia",
    methods: {
        /** Updates a media asset's status, if it's an asset dev-portal cares about */
        updateAssetStatus: {
            name: "UpdateAssetStatus",
            requestType: UpdateAssetStatusRequest,
            requestStream: false,
            responseType: UpdateAssetStatusResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #authorization.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { remoteLogTypeFromJSON, remoteLogTypeToJSON } from '../../../../remote_logger/remote_logger.js';
function createBaseDevPortalAuthInstalledAppResource() {
    return { app: undefined, location: undefined };
}
export const DevPortalAuthInstalledAppResource = {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthInstalledAppResource",
    encode(message, writer = _m0.Writer.create()) {
        if (message.app !== undefined) {
            DevPortalAuthAppVersionResource.encode(message.app, writer.uint32(10).fork()).ldelim();
        }
        if (message.location !== undefined) {
            DevPortalAuthLocationResource.encode(message.location, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevPortalAuthInstalledAppResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.app = DevPortalAuthAppVersionResource.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.location = DevPortalAuthLocationResource.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            app: isSet(object.app) ? DevPortalAuthAppVersionResource.fromJSON(object.app) : undefined,
            location: isSet(object.location) ? DevPortalAuthLocationResource.fromJSON(object.location) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.app !== undefined &&
            (obj.app = message.app ? DevPortalAuthAppVersionResource.toJSON(message.app) : undefined);
        message.location !== undefined &&
            (obj.location = message.location ? DevPortalAuthLocationResource.toJSON(message.location) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDevPortalAuthInstalledAppResource();
        message.app = (object.app !== undefined && object.app !== null)
            ? DevPortalAuthAppVersionResource.fromPartial(object.app)
            : undefined;
        message.location = (object.location !== undefined && object.location !== null)
            ? DevPortalAuthLocationResource.fromPartial(object.location)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthInstalledAppResource", DevPortalAuthInstalledAppResource);
function createBaseDevPortalAuthAppVersionResource() {
    return { name: "", version: "" };
}
export const DevPortalAuthAppVersionResource = {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthAppVersionResource",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevPortalAuthAppVersionResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            version: isSet(object.version) ? String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined && (obj.version = message.version);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDevPortalAuthAppVersionResource();
        message.name = object.name ?? "";
        message.version = object.version ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthAppVersionResource", DevPortalAuthAppVersionResource);
function createBaseDevPortalAuthLocationResource() {
    return { id: "" };
}
export const DevPortalAuthLocationResource = {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthLocationResource",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevPortalAuthLocationResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDevPortalAuthLocationResource();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthLocationResource", DevPortalAuthLocationResource);
function createBaseDevPortalAuthCanViewLogsRequest() {
    return { userId: "", id: undefined, app: undefined, type: 0 };
}
export const DevPortalAuthCanViewLogsRequest = {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthCanViewLogsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.id !== undefined) {
            writer.uint32(18).string(message.id);
        }
        if (message.app !== undefined) {
            DevPortalAuthInstalledAppResource.encode(message.app, writer.uint32(26).fork()).ldelim();
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevPortalAuthCanViewLogsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                case 3:
                    message.app = DevPortalAuthInstalledAppResource.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? String(object.userId) : "",
            id: isSet(object.id) ? String(object.id) : undefined,
            app: isSet(object.app) ? DevPortalAuthInstalledAppResource.fromJSON(object.app) : undefined,
            type: isSet(object.type) ? remoteLogTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        message.id !== undefined && (obj.id = message.id);
        message.app !== undefined &&
            (obj.app = message.app ? DevPortalAuthInstalledAppResource.toJSON(message.app) : undefined);
        message.type !== undefined && (obj.type = remoteLogTypeToJSON(message.type));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDevPortalAuthCanViewLogsRequest();
        message.userId = object.userId ?? "";
        message.id = object.id ?? undefined;
        message.app = (object.app !== undefined && object.app !== null)
            ? DevPortalAuthInstalledAppResource.fromPartial(object.app)
            : undefined;
        message.type = object.type ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthCanViewLogsRequest", DevPortalAuthCanViewLogsRequest);
function createBaseDevPortalAuthorizationResponse() {
    return { allowed: false, reason: "" };
}
export const DevPortalAuthorizationResponse = {
    $type: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorizationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.allowed === true) {
            writer.uint32(8).bool(message.allowed);
        }
        if (message.reason !== "") {
            writer.uint32(18).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevPortalAuthorizationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allowed = reader.bool();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            allowed: isSet(object.allowed) ? Boolean(object.allowed) : false,
            reason: isSet(object.reason) ? String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.allowed !== undefined && (obj.allowed = message.allowed);
        message.reason !== undefined && (obj.reason = message.reason);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDevPortalAuthorizationResponse();
        message.allowed = object.allowed ?? false;
        message.reason = object.reason ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorizationResponse", DevPortalAuthorizationResponse);
export class DevPortalAuthorizationClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorization";
        this.rpc = rpc;
        this.CanViewLogs = this.CanViewLogs.bind(this);
    }
    CanViewLogs(request) {
        const data = DevPortalAuthCanViewLogsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CanViewLogs", data);
        return promise.then((data) => DevPortalAuthorizationResponse.decode(new _m0.Reader(data)));
    }
}
export const DevPortalAuthorizationDefinition = {
    name: "DevPortalAuthorization",
    fullName: "devvit.dev_portal.internal.authorization.v1alpha.DevPortalAuthorization",
    methods: {
        /** Check if a user is allowed view logs */
        canViewLogs: {
            name: "CanViewLogs",
            requestType: DevPortalAuthCanViewLogsRequest,
            requestStream: false,
            responseType: DevPortalAuthorizationResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

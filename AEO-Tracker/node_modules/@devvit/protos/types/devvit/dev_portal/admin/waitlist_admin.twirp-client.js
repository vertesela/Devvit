import { SubmissionsRequest, SubmissionsResponse, SubmissionUpdateRequest, SubmissionUpdateResponse, SubmissionAddRequest, SubmissionAddResponse, } from './waitlist_admin.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { StringValue } from '../../../google/protobuf/wrappers.js';
export class WaitlistAdminClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetSubmissions.bind(this);
        this.UpdateSubmission.bind(this);
        this.AddSubmission.bind(this);
        this.ExportAsCSV.bind(this);
    }
    GetSubmissions(request) {
        const data = SubmissionsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'GetSubmissions', 'application/json', data);
        return promise.then((data) => SubmissionsResponse.fromJSON(data));
    }
    UpdateSubmission(request) {
        const data = SubmissionUpdateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'UpdateSubmission', 'application/json', data);
        return promise.then((data) => SubmissionUpdateResponse.fromJSON(data));
    }
    AddSubmission(request) {
        const data = SubmissionAddRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'AddSubmission', 'application/json', data);
        return promise.then((data) => SubmissionAddResponse.fromJSON(data));
    }
    ExportAsCSV(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'ExportAsCSV', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
}
export class WaitlistAdminClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetSubmissions.bind(this);
        this.UpdateSubmission.bind(this);
        this.AddSubmission.bind(this);
        this.ExportAsCSV.bind(this);
    }
    GetSubmissions(request) {
        const data = SubmissionsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'GetSubmissions', 'application/protobuf', data);
        return promise.then((data) => SubmissionsResponse.decode(data));
    }
    UpdateSubmission(request) {
        const data = SubmissionUpdateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'UpdateSubmission', 'application/protobuf', data);
        return promise.then((data) => SubmissionUpdateResponse.decode(data));
    }
    AddSubmission(request) {
        const data = SubmissionAddRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'AddSubmission', 'application/protobuf', data);
        return promise.then((data) => SubmissionAddResponse.decode(data));
    }
    ExportAsCSV(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.admin.WaitlistAdmin', 'ExportAsCSV', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
}

/**
 * #waitlist_admin.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { StringValue } from '../../../google/protobuf/wrappers.js';
export declare enum WaitlistStatus {
    PENDING = 0,
    ACCEPTED = 1,
    REJECTED = 2,
    REVOKED = 3,
    UNRECOGNIZED = -1
}
export declare function waitlistStatusFromJSON(object: any): WaitlistStatus;
export declare function waitlistStatusToJSON(object: WaitlistStatus): number;
export interface Submission {
    id: string;
    userId: string;
    userName: string;
    whatToBuild: string;
    botsBuilt: string;
    createdAt?: Date;
    updatedAt?: Date;
    status: WaitlistStatus;
    acceptedTermsVersion: number;
}
export interface SubmissionsRequest {
    limit: number;
    after?: Date;
    before?: Date;
    username?: string | undefined;
}
export interface SubmissionsResponse {
    submissions: Submission[];
    totalSubmissions: number;
    count: number;
    first?: Date;
    last?: Date;
}
export interface SubmissionUpdateRequest {
    id: string;
    status: WaitlistStatus;
}
export interface SubmissionUpdateResponse {
    success: boolean;
    message?: string;
}
export interface SubmissionAddRequest {
    /** Thing ID */
    userId?: string | undefined;
    /** Username */
    userName?: string | undefined;
}
export interface SubmissionAddResponse {
    success: boolean;
    message?: string;
}
export declare const Submission: {
    $type: "devvit.dev_portal.admin.Submission";
    encode(message: Submission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Submission;
    fromJSON(object: any): Submission;
    toJSON(message: Submission): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        userId?: string | undefined;
        userName?: string | undefined;
        whatToBuild?: string | undefined;
        botsBuilt?: string | undefined;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        status?: WaitlistStatus | undefined;
        acceptedTermsVersion?: number | undefined;
    } & {
        id?: string | undefined;
        userId?: string | undefined;
        userName?: string | undefined;
        whatToBuild?: string | undefined;
        botsBuilt?: string | undefined;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        status?: WaitlistStatus | undefined;
        acceptedTermsVersion?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof Submission>]: never; }>(object: I): Submission;
};
export declare const SubmissionsRequest: {
    $type: "devvit.dev_portal.admin.SubmissionsRequest";
    encode(message: SubmissionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsRequest;
    fromJSON(object: any): SubmissionsRequest;
    toJSON(message: SubmissionsRequest): unknown;
    fromPartial<I extends {
        limit?: number | undefined;
        after?: Date | undefined;
        before?: Date | undefined;
        username?: string | undefined;
    } & {
        limit?: number | undefined;
        after?: Date | undefined;
        before?: Date | undefined;
        username?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SubmissionsRequest>]: never; }>(object: I): SubmissionsRequest;
};
export declare const SubmissionsResponse: {
    $type: "devvit.dev_portal.admin.SubmissionsResponse";
    encode(message: SubmissionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsResponse;
    fromJSON(object: any): SubmissionsResponse;
    toJSON(message: SubmissionsResponse): unknown;
    fromPartial<I extends {
        submissions?: {
            id?: string | undefined;
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            status?: WaitlistStatus | undefined;
            acceptedTermsVersion?: number | undefined;
        }[] | undefined;
        totalSubmissions?: number | undefined;
        count?: number | undefined;
        first?: Date | undefined;
        last?: Date | undefined;
    } & {
        submissions?: ({
            id?: string | undefined;
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            status?: WaitlistStatus | undefined;
            acceptedTermsVersion?: number | undefined;
        }[] & ({
            id?: string | undefined;
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            status?: WaitlistStatus | undefined;
            acceptedTermsVersion?: number | undefined;
        } & {
            id?: string | undefined;
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            status?: WaitlistStatus | undefined;
            acceptedTermsVersion?: number | undefined;
        } & { [K in Exclude<keyof I["submissions"][number], "$type" | keyof Submission>]: never; })[] & { [K_1 in Exclude<keyof I["submissions"], "$type" | keyof {
            id?: string | undefined;
            userId?: string | undefined;
            userName?: string | undefined;
            whatToBuild?: string | undefined;
            botsBuilt?: string | undefined;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            status?: WaitlistStatus | undefined;
            acceptedTermsVersion?: number | undefined;
        }[]>]: never; }) | undefined;
        totalSubmissions?: number | undefined;
        count?: number | undefined;
        first?: Date | undefined;
        last?: Date | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof SubmissionsResponse>]: never; }>(object: I): SubmissionsResponse;
};
export declare const SubmissionUpdateRequest: {
    $type: "devvit.dev_portal.admin.SubmissionUpdateRequest";
    encode(message: SubmissionUpdateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateRequest;
    fromJSON(object: any): SubmissionUpdateRequest;
    toJSON(message: SubmissionUpdateRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        status?: WaitlistStatus | undefined;
    } & {
        id?: string | undefined;
        status?: WaitlistStatus | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SubmissionUpdateRequest>]: never; }>(object: I): SubmissionUpdateRequest;
};
export declare const SubmissionUpdateResponse: {
    $type: "devvit.dev_portal.admin.SubmissionUpdateResponse";
    encode(message: SubmissionUpdateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateResponse;
    fromJSON(object: any): SubmissionUpdateResponse;
    toJSON(message: SubmissionUpdateResponse): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        message?: string | undefined;
    } & {
        success?: boolean | undefined;
        message?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SubmissionUpdateResponse>]: never; }>(object: I): SubmissionUpdateResponse;
};
export declare const SubmissionAddRequest: {
    $type: "devvit.dev_portal.admin.SubmissionAddRequest";
    encode(message: SubmissionAddRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddRequest;
    fromJSON(object: any): SubmissionAddRequest;
    toJSON(message: SubmissionAddRequest): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        userName?: string | undefined;
    } & {
        userId?: string | undefined;
        userName?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SubmissionAddRequest>]: never; }>(object: I): SubmissionAddRequest;
};
export declare const SubmissionAddResponse: {
    $type: "devvit.dev_portal.admin.SubmissionAddResponse";
    encode(message: SubmissionAddResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddResponse;
    fromJSON(object: any): SubmissionAddResponse;
    toJSON(message: SubmissionAddResponse): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        message?: string | undefined;
    } & {
        success?: boolean | undefined;
        message?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SubmissionAddResponse>]: never; }>(object: I): SubmissionAddResponse;
};
export interface WaitlistAdmin {
    GetSubmissions(request: SubmissionsRequest, metadata?: Metadata): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest, metadata?: Metadata): Promise<SubmissionUpdateResponse>;
    AddSubmission(request: SubmissionAddRequest, metadata?: Metadata): Promise<SubmissionAddResponse>;
    ExportAsCSV(request: Empty, metadata?: Metadata): Promise<StringValue>;
}
export declare class WaitlistAdminClientImpl implements WaitlistAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubmissions(request: SubmissionsRequest): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest): Promise<SubmissionUpdateResponse>;
    AddSubmission(request: SubmissionAddRequest): Promise<SubmissionAddResponse>;
    ExportAsCSV(request: Empty): Promise<StringValue>;
}
export type WaitlistAdminDefinition = typeof WaitlistAdminDefinition;
export declare const WaitlistAdminDefinition: {
    name: 'WaitlistAdmin';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=waitlist_admin.d.ts.map
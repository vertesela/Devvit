/**
 * #nutrition.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
/**
 * Abstract plugin capabilities required by an app. Plugin usage is bucketed
 * coarsely by Definition.fullName and may change. This enumeration is to power
 * informative permission UI, not make platform security decisions. See the
 * nutritionCategoriesFromBundle() implementation for the current behavior.
 *
 * "Use" and "provides" terminology is loose. An app that _uses_ a scheduler
 * callback OR _provides_ the scheduler plugin is still categorized as
 * "SCHEDULER".
 *
 * See ActorType in packages/protos/src/index.ts. Beware: many of these
 * Defintions should never be Devvit apps.
 */
export var NutritionCategory;
(function (NutritionCategory) {
    /** UNCATEGORIZED - App may use uncategorized permissions. */
    NutritionCategory[NutritionCategory["UNCATEGORIZED"] = 0] = "UNCATEGORIZED";
    /** APP_TRIGGERS - App may execute when installed or upgraded. */
    NutritionCategory[NutritionCategory["APP_TRIGGERS"] = 1] = "APP_TRIGGERS";
    /** ASSETS - App may present predefined audio-visual media. */
    NutritionCategory[NutritionCategory["ASSETS"] = 2] = "ASSETS";
    /** DATA - App may read and write _app_ data to Reddit servers. */
    NutritionCategory[NutritionCategory["DATA"] = 3] = "DATA";
    /** HTTP - App may read and write _any_ data to and from the internet. */
    NutritionCategory[NutritionCategory["HTTP"] = 4] = "HTTP";
    /**
     * MODLOG - App may read and write data to Reddit moderator logs. Does not imply Reddit
     * API.
     */
    NutritionCategory[NutritionCategory["MODLOG"] = 5] = "MODLOG";
    /** REDDIT_API - App may read and write _any_ Reddit data. Does not imply HTTP. */
    NutritionCategory[NutritionCategory["REDDIT_API"] = 6] = "REDDIT_API";
    /**
     * REDDIT_TRIGGERS - App may observe Reddit events such as post creation, comment deletion, and
     * many more. Does not imply REDDIT_API.
     */
    NutritionCategory[NutritionCategory["REDDIT_TRIGGERS"] = 7] = "REDDIT_TRIGGERS";
    /** SCHEDULER - App may schedule itself for later execution. */
    NutritionCategory[NutritionCategory["SCHEDULER"] = 8] = "SCHEDULER";
    /**
     * UI - App may appear in subreddit, post, and comment menu entries, and custom
     * posts.
     */
    NutritionCategory[NutritionCategory["UI"] = 9] = "UI";
    /** MODERATOR - App may appear and act as a moderator on subreddits where it's installed. */
    NutritionCategory[NutritionCategory["MODERATOR"] = 10] = "MODERATOR";
    NutritionCategory[NutritionCategory["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NutritionCategory || (NutritionCategory = {}));
export function nutritionCategoryFromJSON(object) {
    switch (object) {
        case 0:
        case "UNCATEGORIZED":
            return NutritionCategory.UNCATEGORIZED;
        case 1:
        case "APP_TRIGGERS":
            return NutritionCategory.APP_TRIGGERS;
        case 2:
        case "ASSETS":
            return NutritionCategory.ASSETS;
        case 3:
        case "DATA":
            return NutritionCategory.DATA;
        case 4:
        case "HTTP":
            return NutritionCategory.HTTP;
        case 5:
        case "MODLOG":
            return NutritionCategory.MODLOG;
        case 6:
        case "REDDIT_API":
            return NutritionCategory.REDDIT_API;
        case 7:
        case "REDDIT_TRIGGERS":
            return NutritionCategory.REDDIT_TRIGGERS;
        case 8:
        case "SCHEDULER":
            return NutritionCategory.SCHEDULER;
        case 9:
        case "UI":
            return NutritionCategory.UI;
        case 10:
        case "MODERATOR":
            return NutritionCategory.MODERATOR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return NutritionCategory.UNRECOGNIZED;
    }
}
export function nutritionCategoryToJSON(object) {
    switch (object) {
        case NutritionCategory.UNCATEGORIZED:
            return 0;
        case NutritionCategory.APP_TRIGGERS:
            return 1;
        case NutritionCategory.ASSETS:
            return 2;
        case NutritionCategory.DATA:
            return 3;
        case NutritionCategory.HTTP:
            return 4;
        case NutritionCategory.MODLOG:
            return 5;
        case NutritionCategory.REDDIT_API:
            return 6;
        case NutritionCategory.REDDIT_TRIGGERS:
            return 7;
        case NutritionCategory.SCHEDULER:
            return 8;
        case NutritionCategory.UI:
            return 9;
        case NutritionCategory.MODERATOR:
            return 10;
        case NutritionCategory.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseGetNutritionByNameVersionRequest() {
    return { name: "", version: undefined };
}
export const GetNutritionByNameVersionRequest = {
    $type: "devvit.dev_portal.nutrition.GetNutritionByNameVersionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.version !== undefined) {
            writer.uint32(18).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNutritionByNameVersionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            version: isSet(object.version) ? String(object.version) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined && (obj.version = message.version);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetNutritionByNameVersionRequest();
        message.name = object.name ?? "";
        message.version = object.version ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.nutrition.GetNutritionByNameVersionRequest", GetNutritionByNameVersionRequest);
function createBaseMultipleNutritionCategories() {
    return { categories: [] };
}
export const MultipleNutritionCategories = {
    $type: "devvit.dev_portal.nutrition.MultipleNutritionCategories",
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.categories) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultipleNutritionCategories();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.categories.push(reader.int32());
                        }
                    }
                    else {
                        message.categories.push(reader.int32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            categories: Array.isArray(object?.categories)
                ? object.categories.map((e) => nutritionCategoryFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.categories) {
            obj.categories = message.categories.map((e) => nutritionCategoryToJSON(e));
        }
        else {
            obj.categories = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMultipleNutritionCategories();
        message.categories = object.categories?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.nutrition.MultipleNutritionCategories", MultipleNutritionCategories);
function isSet(value) {
    return value !== null && value !== undefined;
}

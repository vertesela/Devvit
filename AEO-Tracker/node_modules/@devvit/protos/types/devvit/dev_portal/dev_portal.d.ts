/**
 * #dev_portal.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../google/protobuf/empty.js';
import { Value } from '../../google/protobuf/struct.js';
import { UUID } from '../uuid.js';
import { AppAccountExistsRequest, AppAccountExistsResponse, AppCreationRequest, AppExistsRequest, AppExistsResponse, AppSearchRequest, AppSearchResponse, AppUpdateRequest, CheckIfMediaExistsRequest, CheckIfMediaExistsResponse, CreateAppAccountRequest, CreateAppAccountResponse, FullAppInfo, GetAllWithOwnerRequest, GetAppBySlugRequest, GetPopularAppsRequest, RecoverAppAccountRequest, UnpublishAppRequest, UploadNewMediaRequest, UploadNewMediaResponse } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { GetAppSettingsFormRequest, GetAppSettingsFormResponse, GetAppSettingsRequest, GetAppSettingsResponse, UpdateAppSettingsRequest, UpdateAppSettingsResponse, ValidateAppSettingsFormRequest, ValidateAppSettingsFormResponse } from './app_settings/app_settings.js';
import { AppSlugAndVersion, AppVersionCreationRequest, AppVersionUpdateRequest, FullAppVersionInfo, GetAppVersionBundleResponse, ValidInstallLocationsRequest, ValidInstallLocationsResponse } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { GetAuditLogEventsRequest, GetAuditLogEventsResponse } from './data_api/admin/audit/audit.js';
import { CreateDataTokenRequest, CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, RevokeDataTokenByIdRequest, RevokeDataTokenByIdResponse } from './data_api/admin/auth/auth.js';
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse } from './data_api/admin/organization/organization.js';
import { CreateDataSubscriptionRequest, CreateDataSubscriptionResponse, DeleteDataSubscriptionRequest, DeleteDataSubscriptionResponse, GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, GetDataSubscriptionsByOrganizationNameRequest, GetDataSubscriptionsByOrganizationNameResponse, UpdateDataSubscriptionRequest, UpdateDataSubscriptionResponse } from './data_api/admin/subscription/subscription.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { FullInstallationInfo, GetAllWithAppResponse, GetAllWithInstallerRequest, GetAllWithInstallLocationRequest, GetByAppNameAndInstallLocationRequest, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationCreationRequest, InstallationUpdateRequest, InstallationUpgradeManyRequest, InstallationUpgradeManyResponse, InstallationUpgradeRequest, MultipleInstallationsResponse } from './installation/installation.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse } from './installation_settings/installation_settings.js';
import { GetNutritionByNameVersionRequest, MultipleNutritionCategories } from './nutrition/nutrition.js';
export interface App {
    Create(request: AppCreationRequest, metadata?: Metadata): Promise<AppInfo>;
    Search(request: AppSearchRequest, metadata?: Metadata): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest, metadata?: Metadata): Promise<FullAppInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    /** Get the X most popular apps, as determined by number of installations. */
    GetPopularApps(request: GetPopularAppsRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest, metadata?: Metadata): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest, metadata?: Metadata): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest, metadata?: Metadata): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest, metadata?: Metadata): Promise<Empty>;
    Exists(request: AppExistsRequest, metadata?: Metadata): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest, metadata?: Metadata): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest, metadata?: Metadata): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest, metadata?: Metadata): Promise<AppInfo>;
}
export declare class AppClientImpl implements App {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest): Promise<AppInfo>;
}
export type AppDefinition = typeof AppDefinition;
export declare const AppDefinition: {
    name: 'App';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface AppVersion {
    Create(request: AppVersionCreationRequest, metadata?: Metadata): Promise<AppVersionInfo>;
    Get(request: UUID, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion, metadata?: Metadata): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest, metadata?: Metadata): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID, metadata?: Metadata): Promise<GetAppVersionBundleResponse>;
    /**
     * Get app nutritional labels by app name (slug) and optional version (1.2.3,
     * 1.2.3.4, latest). Unlike SemVer, latest includes pre-release versions, not
     * just stable.
     */
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest, metadata?: Metadata): Promise<MultipleNutritionCategories>;
    /** Get app nutritional labels by app version id */
    GetNutritionByAppVersionId(request: UUID, metadata?: Metadata): Promise<MultipleNutritionCategories>;
}
export declare class AppVersionClientImpl implements AppVersion {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(request: UUID): Promise<MultipleNutritionCategories>;
}
export type AppVersionDefinition = typeof AppVersionDefinition;
export declare const AppVersionDefinition: {
    name: 'AppVersion';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface Installations {
    Create(request: InstallationCreationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: UUID, metadata?: Metadata): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest, metadata?: Metadata): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest, metadata?: Metadata): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    Remove(request: UUID, metadata?: Metadata): Promise<Empty>;
}
export declare class InstallationsClientImpl implements Installations {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
export type InstallationsDefinition = typeof InstallationsDefinition;
export declare const InstallationsDefinition: {
    name: 'Installations';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface Feedback {
    Create(request: CreateFeedbackRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class FeedbackClientImpl implements Feedback {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
export type FeedbackDefinition = typeof FeedbackDefinition;
export declare const FeedbackDefinition: {
    name: 'Feedback';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface DataApiAdmin {
    /** Data Token */
    CreateDataToken(request: CreateDataTokenRequest, metadata?: Metadata): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest, metadata?: Metadata): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest, metadata?: Metadata): Promise<RevokeDataTokenByIdResponse>;
    /** Data Subscription */
    CreateDataSubscription(request: CreateDataSubscriptionRequest, metadata?: Metadata): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest, metadata?: Metadata): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest, metadata?: Metadata): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest, metadata?: Metadata): Promise<DeleteDataSubscriptionResponse>;
    /** Organizations */
    CreateOrganization(request: CreateOrganizationRequest, metadata?: Metadata): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest, metadata?: Metadata): Promise<GetOrganizationsResponse>;
    /** Audit Log */
    GetAuditLogEvents(request: GetAuditLogEventsRequest, metadata?: Metadata): Promise<GetAuditLogEventsResponse>;
}
export declare class DataApiAdminClientImpl implements DataApiAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreateDataToken(request: CreateDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(request: CreateDataSubscriptionRequest): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(request: GetAuditLogEventsRequest): Promise<GetAuditLogEventsResponse>;
}
export type DataApiAdminDefinition = typeof DataApiAdminDefinition;
export declare const DataApiAdminDefinition: {
    name: 'DataApiAdmin';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
/** A service to handle client-side events. */
export interface Events {
    /** Fire off a client-side event */
    SendEvent(request: Value, metadata?: Metadata): Promise<Empty>;
}
export declare class EventsClientImpl implements Events {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    SendEvent(request: Value): Promise<Empty>;
}
/** A service to handle client-side events. */
export type EventsDefinition = typeof EventsDefinition;
export declare const EventsDefinition: {
    name: 'Events';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface DevPortalInstallationSettings {
    GetForm(request: GetInstallationSettingsFormRequest, metadata?: Metadata): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest, metadata?: Metadata): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest, metadata?: Metadata): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest, metadata?: Metadata): Promise<UpdateInstallationSettingsResponse>;
}
export declare class DevPortalInstallationSettingsClientImpl implements DevPortalInstallationSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export type DevPortalInstallationSettingsDefinition = typeof DevPortalInstallationSettingsDefinition;
export declare const DevPortalInstallationSettingsDefinition: {
    name: 'DevPortalInstallationSettings';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface DevPortalAppSettings {
    GetForm(request: GetAppSettingsFormRequest, metadata?: Metadata): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest, metadata?: Metadata): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest, metadata?: Metadata): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest, metadata?: Metadata): Promise<UpdateAppSettingsResponse>;
}
export declare class DevPortalAppSettingsClientImpl implements DevPortalAppSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetForm(request: GetAppSettingsFormRequest): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest): Promise<UpdateAppSettingsResponse>;
}
export type DevPortalAppSettingsDefinition = typeof DevPortalAppSettingsDefinition;
export declare const DevPortalAppSettingsDefinition: {
    name: 'DevPortalAppSettings';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=dev_portal.d.ts.map
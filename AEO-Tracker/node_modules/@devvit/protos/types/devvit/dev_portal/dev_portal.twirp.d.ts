/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { AppCreationRequest, AppSearchRequest, AppSearchResponse, GetAppBySlugRequest, FullAppInfo, GetAllWithOwnerRequest, GetPopularAppsRequest, CheckIfMediaExistsRequest, CheckIfMediaExistsResponse, UploadNewMediaRequest, UploadNewMediaResponse, AppUpdateRequest, UnpublishAppRequest, AppExistsRequest, AppExistsResponse, AppAccountExistsRequest, AppAccountExistsResponse, CreateAppAccountRequest, CreateAppAccountResponse, RecoverAppAccountRequest } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { UUID } from '../uuid.js';
import { GetAllWithInstallLocationRequest, GetAllWithInstallerRequest, InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, MultipleInstallationsResponse, GetAllWithAppResponse, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationUpgradeRequest, InstallationUpgradeManyRequest, InstallationUpgradeManyResponse, InstallationUpdateRequest } from './installation/installation.js';
import { Empty } from '../../google/protobuf/empty.js';
import { AppVersionCreationRequest, FullAppVersionInfo, AppSlugAndVersion, AppVersionUpdateRequest, ValidInstallLocationsRequest, ValidInstallLocationsResponse, GetAppVersionBundleResponse } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { GetNutritionByNameVersionRequest, MultipleNutritionCategories } from './nutrition/nutrition.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { CreateDataTokenRequest, CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, RevokeDataTokenByIdRequest, RevokeDataTokenByIdResponse } from './data_api/admin/auth/auth.js';
import { CreateDataSubscriptionRequest, CreateDataSubscriptionResponse, GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, GetDataSubscriptionsByOrganizationNameRequest, GetDataSubscriptionsByOrganizationNameResponse, UpdateDataSubscriptionRequest, UpdateDataSubscriptionResponse, DeleteDataSubscriptionRequest, DeleteDataSubscriptionResponse } from './data_api/admin/subscription/subscription.js';
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse } from './data_api/admin/organization/organization.js';
import { GetAuditLogEventsRequest, GetAuditLogEventsResponse } from './data_api/admin/audit/audit.js';
import { Value } from '../../google/protobuf/struct.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse } from './installation_settings/installation_settings.js';
import { GetAppSettingsFormRequest, GetAppSettingsFormResponse, ValidateAppSettingsFormRequest, ValidateAppSettingsFormResponse, GetAppSettingsRequest, GetAppSettingsResponse, UpdateAppSettingsRequest, UpdateAppSettingsResponse } from './app_settings/app_settings.js';
export interface AppTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: AppCreationRequest): Promise<AppInfo>;
    Search(ctx: T, request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(ctx: T, request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(ctx: T, request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(ctx: T, request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(ctx: T, request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(ctx: T, request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(ctx: T, request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    CheckIfMediaExists(ctx: T, request: CheckIfMediaExistsRequest): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(ctx: T, request: UploadNewMediaRequest): Promise<UploadNewMediaResponse>;
    Update(ctx: T, request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(ctx: T, request: UnpublishAppRequest): Promise<Empty>;
    Exists(ctx: T, request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(ctx: T, request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
    CreateAppAccount(ctx: T, request: CreateAppAccountRequest): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(ctx: T, request: RecoverAppAccountRequest): Promise<AppInfo>;
}
export declare enum AppMethod {
    Create = "Create",
    Search = "Search",
    GetBySlug = "GetBySlug",
    GetByUUID = "GetByUUID",
    GetAllWithLocation = "GetAllWithLocation",
    GetAllWithInstaller = "GetAllWithInstaller",
    GetAllWithOwner = "GetAllWithOwner",
    GetPopularApps = "GetPopularApps",
    CheckIfMediaExists = "CheckIfMediaExists",
    UploadNewMedia = "UploadNewMedia",
    Update = "Update",
    Unpublish = "Unpublish",
    Exists = "Exists",
    AppAccountExists = "AppAccountExists",
    CreateAppAccount = "CreateAppAccount",
    RecoverAppAccount = "RecoverAppAccount"
}
export declare const AppMethodList: AppMethod[];
export declare function createAppServer<T extends TwirpContext = TwirpContext>(service: AppTwirp<T>): TwirpServer<AppTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface AppVersionTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(ctx: T, request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(ctx: T, request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(ctx: T, request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(ctx: T, request: ValidInstallLocationsRequest): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(ctx: T, request: UUID): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(ctx: T, request: GetNutritionByNameVersionRequest): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(ctx: T, request: UUID): Promise<MultipleNutritionCategories>;
}
export declare enum AppVersionMethod {
    Create = "Create",
    Get = "Get",
    GetBySlugAndVersionNumber = "GetBySlugAndVersionNumber",
    Update = "Update",
    GetValidInstallLocations = "GetValidInstallLocations",
    GetAppVersionBundle = "GetAppVersionBundle",
    GetNutritionByNameVersion = "GetNutritionByNameVersion",
    GetNutritionByAppVersionId = "GetNutritionByAppVersionId"
}
export declare const AppVersionMethodList: AppVersionMethod[];
export declare function createAppVersionServer<T extends TwirpContext = TwirpContext>(service: AppVersionTwirp<T>): TwirpServer<AppVersionTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface InstallationsTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(ctx: T, request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(ctx: T, request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(ctx: T, request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(ctx: T, request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(ctx: T, request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(ctx: T, request: UUID): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(ctx: T, request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(ctx: T, request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    UpgradeMany(ctx: T, request: InstallationUpgradeManyRequest): Promise<InstallationUpgradeManyResponse>;
    Update(ctx: T, request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(ctx: T, request: UUID): Promise<Empty>;
}
export declare enum InstallationsMethod {
    Create = "Create",
    GetByUUID = "GetByUUID",
    GetByAppNameAndInstallLocation = "GetByAppNameAndInstallLocation",
    GetAllWithInstallLocation = "GetAllWithInstallLocation",
    GetAllWithInstaller = "GetAllWithInstaller",
    GetAllWithVersionUUID = "GetAllWithVersionUUID",
    GetAllWithApp = "GetAllWithApp",
    GetInstallationHistory = "GetInstallationHistory",
    Upgrade = "Upgrade",
    UpgradeMany = "UpgradeMany",
    Update = "Update",
    Remove = "Remove"
}
export declare const InstallationsMethodList: InstallationsMethod[];
export declare function createInstallationsServer<T extends TwirpContext = TwirpContext>(service: InstallationsTwirp<T>): TwirpServer<InstallationsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface FeedbackTwirp<T extends TwirpContext = TwirpContext> {
    Create(ctx: T, request: CreateFeedbackRequest): Promise<Empty>;
}
export declare enum FeedbackMethod {
    Create = "Create"
}
export declare const FeedbackMethodList: FeedbackMethod[];
export declare function createFeedbackServer<T extends TwirpContext = TwirpContext>(service: FeedbackTwirp<T>): TwirpServer<FeedbackTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface DataApiAdminTwirp<T extends TwirpContext = TwirpContext> {
    CreateDataToken(ctx: T, request: CreateDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetDataTokenById(ctx: T, request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(ctx: T, request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(ctx: T, request: RevokeDataTokenByIdRequest): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(ctx: T, request: CreateDataSubscriptionRequest): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(ctx: T, request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(ctx: T, request: GetDataSubscriptionsByOrganizationNameRequest): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(ctx: T, request: UpdateDataSubscriptionRequest): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(ctx: T, request: DeleteDataSubscriptionRequest): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(ctx: T, request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(ctx: T, request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(ctx: T, request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(ctx: T, request: GetAuditLogEventsRequest): Promise<GetAuditLogEventsResponse>;
}
export declare enum DataApiAdminMethod {
    CreateDataToken = "CreateDataToken",
    GetDataTokenById = "GetDataTokenById",
    GetDataTokensByOrganizationName = "GetDataTokensByOrganizationName",
    RevokeDataTokenById = "RevokeDataTokenById",
    CreateDataSubscription = "CreateDataSubscription",
    GetDataSubscriptionById = "GetDataSubscriptionById",
    GetDataSubscriptionsByOrganizationName = "GetDataSubscriptionsByOrganizationName",
    UpdateDataSubscription = "UpdateDataSubscription",
    DeleteDataSubscription = "DeleteDataSubscription",
    CreateOrganization = "CreateOrganization",
    GetOrganizationByName = "GetOrganizationByName",
    GetOrganizations = "GetOrganizations",
    GetAuditLogEvents = "GetAuditLogEvents"
}
export declare const DataApiAdminMethodList: DataApiAdminMethod[];
export declare function createDataApiAdminServer<T extends TwirpContext = TwirpContext>(service: DataApiAdminTwirp<T>): TwirpServer<DataApiAdminTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface EventsTwirp<T extends TwirpContext = TwirpContext> {
    SendEvent(ctx: T, request: Value): Promise<Empty>;
}
export declare enum EventsMethod {
    SendEvent = "SendEvent"
}
export declare const EventsMethodList: EventsMethod[];
export declare function createEventsServer<T extends TwirpContext = TwirpContext>(service: EventsTwirp<T>): TwirpServer<EventsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface DevPortalInstallationSettingsTwirp<T extends TwirpContext = TwirpContext> {
    GetForm(ctx: T, request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(ctx: T, request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(ctx: T, request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(ctx: T, request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare enum DevPortalInstallationSettingsMethod {
    GetForm = "GetForm",
    ValidateForm = "ValidateForm",
    GetSettings = "GetSettings",
    UpdateSettings = "UpdateSettings"
}
export declare const DevPortalInstallationSettingsMethodList: DevPortalInstallationSettingsMethod[];
export declare function createDevPortalInstallationSettingsServer<T extends TwirpContext = TwirpContext>(service: DevPortalInstallationSettingsTwirp<T>): TwirpServer<DevPortalInstallationSettingsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface DevPortalAppSettingsTwirp<T extends TwirpContext = TwirpContext> {
    GetForm(ctx: T, request: GetAppSettingsFormRequest): Promise<GetAppSettingsFormResponse>;
    ValidateForm(ctx: T, request: ValidateAppSettingsFormRequest): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(ctx: T, request: GetAppSettingsRequest): Promise<GetAppSettingsResponse>;
    UpdateSettings(ctx: T, request: UpdateAppSettingsRequest): Promise<UpdateAppSettingsResponse>;
}
export declare enum DevPortalAppSettingsMethod {
    GetForm = "GetForm",
    ValidateForm = "ValidateForm",
    GetSettings = "GetSettings",
    UpdateSettings = "UpdateSettings"
}
export declare const DevPortalAppSettingsMethodList: DevPortalAppSettingsMethod[];
export declare function createDevPortalAppSettingsServer<T extends TwirpContext = TwirpContext>(service: DevPortalAppSettingsTwirp<T>): TwirpServer<DevPortalAppSettingsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=dev_portal.twirp.d.ts.map
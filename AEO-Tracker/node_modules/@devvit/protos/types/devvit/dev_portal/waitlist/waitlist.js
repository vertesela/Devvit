/**
 * #waitlist.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { StringValue } from '../../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { waitlistStatusFromJSON, waitlistStatusToJSON } from '../admin/waitlist_admin.js';
export var ProgrammingExperienceLevel;
(function (ProgrammingExperienceLevel) {
    ProgrammingExperienceLevel[ProgrammingExperienceLevel["BEGINNER"] = 0] = "BEGINNER";
    ProgrammingExperienceLevel[ProgrammingExperienceLevel["PROFICIENT"] = 1] = "PROFICIENT";
    ProgrammingExperienceLevel[ProgrammingExperienceLevel["EXPERT"] = 2] = "EXPERT";
    ProgrammingExperienceLevel[ProgrammingExperienceLevel["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ProgrammingExperienceLevel || (ProgrammingExperienceLevel = {}));
export function programmingExperienceLevelFromJSON(object) {
    switch (object) {
        case 0:
        case "BEGINNER":
            return ProgrammingExperienceLevel.BEGINNER;
        case 1:
        case "PROFICIENT":
            return ProgrammingExperienceLevel.PROFICIENT;
        case 2:
        case "EXPERT":
            return ProgrammingExperienceLevel.EXPERT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ProgrammingExperienceLevel.UNRECOGNIZED;
    }
}
export function programmingExperienceLevelToJSON(object) {
    switch (object) {
        case ProgrammingExperienceLevel.BEGINNER:
            return 0;
        case ProgrammingExperienceLevel.PROFICIENT:
            return 1;
        case ProgrammingExperienceLevel.EXPERT:
            return 2;
        case ProgrammingExperienceLevel.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseIsCurrentUserRegisteredResponse() {
    return { isRegistered: false, response: undefined, waitlistStatus: 0 };
}
export const IsCurrentUserRegisteredResponse = {
    $type: "devvit.dev_portal.waitlist.IsCurrentUserRegisteredResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.isRegistered === true) {
            writer.uint32(8).bool(message.isRegistered);
        }
        if (message.response !== undefined) {
            WaitlistRegisterUserRequest.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.waitlistStatus !== 0) {
            writer.uint32(24).int32(message.waitlistStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsCurrentUserRegisteredResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isRegistered = reader.bool();
                    break;
                case 2:
                    message.response = WaitlistRegisterUserRequest.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.waitlistStatus = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            isRegistered: isSet(object.isRegistered) ? Boolean(object.isRegistered) : false,
            response: isSet(object.response) ? WaitlistRegisterUserRequest.fromJSON(object.response) : undefined,
            waitlistStatus: isSet(object.waitlistStatus) ? waitlistStatusFromJSON(object.waitlistStatus) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.isRegistered !== undefined && (obj.isRegistered = message.isRegistered);
        message.response !== undefined &&
            (obj.response = message.response ? WaitlistRegisterUserRequest.toJSON(message.response) : undefined);
        message.waitlistStatus !== undefined && (obj.waitlistStatus = waitlistStatusToJSON(message.waitlistStatus));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseIsCurrentUserRegisteredResponse();
        message.isRegistered = object.isRegistered ?? false;
        message.response = (object.response !== undefined && object.response !== null)
            ? WaitlistRegisterUserRequest.fromPartial(object.response)
            : undefined;
        message.waitlistStatus = object.waitlistStatus ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.waitlist.IsCurrentUserRegisteredResponse", IsCurrentUserRegisteredResponse);
function createBaseWaitlistRegisterUserRequest() {
    return { userId: "", userName: "", whatToBuild: "", botsBuilt: undefined, programmingExperience: {}, appsWanted: "" };
}
export const WaitlistRegisterUserRequest = {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.userName !== "") {
            writer.uint32(18).string(message.userName);
        }
        if (message.whatToBuild !== "") {
            writer.uint32(26).string(message.whatToBuild);
        }
        if (message.botsBuilt !== undefined) {
            StringValue.encode({ value: message.botsBuilt }, writer.uint32(42).fork()).ldelim();
        }
        Object.entries(message.programmingExperience).forEach(([key, value]) => {
            WaitlistRegisterUserRequest_ProgrammingExperienceEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        if (message.appsWanted !== "") {
            writer.uint32(58).string(message.appsWanted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWaitlistRegisterUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.userName = reader.string();
                    break;
                case 3:
                    message.whatToBuild = reader.string();
                    break;
                case 5:
                    message.botsBuilt = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 6:
                    const entry6 = WaitlistRegisterUserRequest_ProgrammingExperienceEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.programmingExperience[entry6.key] = entry6.value;
                    }
                    break;
                case 7:
                    message.appsWanted = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? String(object.userId) : "",
            userName: isSet(object.userName) ? String(object.userName) : "",
            whatToBuild: isSet(object.whatToBuild) ? String(object.whatToBuild) : "",
            botsBuilt: isSet(object.botsBuilt) ? String(object.botsBuilt) : undefined,
            programmingExperience: isObject(object.programmingExperience)
                ? Object.entries(object.programmingExperience).reduce((acc, [key, value]) => {
                    acc[key] = programmingExperienceLevelFromJSON(value);
                    return acc;
                }, {})
                : {},
            appsWanted: isSet(object.appsWanted) ? String(object.appsWanted) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        message.userName !== undefined && (obj.userName = message.userName);
        message.whatToBuild !== undefined && (obj.whatToBuild = message.whatToBuild);
        message.botsBuilt !== undefined && (obj.botsBuilt = message.botsBuilt);
        obj.programmingExperience = {};
        if (message.programmingExperience) {
            Object.entries(message.programmingExperience).forEach(([k, v]) => {
                obj.programmingExperience[k] = programmingExperienceLevelToJSON(v);
            });
        }
        message.appsWanted !== undefined && (obj.appsWanted = message.appsWanted);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseWaitlistRegisterUserRequest();
        message.userId = object.userId ?? "";
        message.userName = object.userName ?? "";
        message.whatToBuild = object.whatToBuild ?? "";
        message.botsBuilt = object.botsBuilt ?? undefined;
        message.programmingExperience = Object.entries(object.programmingExperience ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.appsWanted = object.appsWanted ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.waitlist.WaitlistRegisterUserRequest", WaitlistRegisterUserRequest);
function createBaseWaitlistRegisterUserRequest_ProgrammingExperienceEntry() {
    return { key: "", value: 0 };
}
export const WaitlistRegisterUserRequest_ProgrammingExperienceEntry = {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserRequest.ProgrammingExperienceEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWaitlistRegisterUserRequest_ProgrammingExperienceEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? programmingExperienceLevelFromJSON(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = programmingExperienceLevelToJSON(message.value));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseWaitlistRegisterUserRequest_ProgrammingExperienceEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.waitlist.WaitlistRegisterUserRequest.ProgrammingExperienceEntry", WaitlistRegisterUserRequest_ProgrammingExperienceEntry);
function createBaseWaitlistRegisterUserResponse() {
    return { success: false, message: undefined };
}
export const WaitlistRegisterUserResponse = {
    $type: "devvit.dev_portal.waitlist.WaitlistRegisterUserResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== undefined) {
            StringValue.encode({ value: message.message }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWaitlistRegisterUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.message = StringValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            message: isSet(object.message) ? String(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseWaitlistRegisterUserResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.waitlist.WaitlistRegisterUserResponse", WaitlistRegisterUserResponse);
function createBaseGetCurrentUserStatusResponse() {
    return { waitlistStatus: 0, acceptedTermsVersion: 0, currentTermsVersion: 0 };
}
export const GetCurrentUserStatusResponse = {
    $type: "devvit.dev_portal.waitlist.GetCurrentUserStatusResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.waitlistStatus !== 0) {
            writer.uint32(8).int32(message.waitlistStatus);
        }
        if (message.acceptedTermsVersion !== 0) {
            writer.uint32(16).int32(message.acceptedTermsVersion);
        }
        if (message.currentTermsVersion !== 0) {
            writer.uint32(24).int32(message.currentTermsVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCurrentUserStatusResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.waitlistStatus = reader.int32();
                    break;
                case 2:
                    message.acceptedTermsVersion = reader.int32();
                    break;
                case 3:
                    message.currentTermsVersion = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            waitlistStatus: isSet(object.waitlistStatus) ? waitlistStatusFromJSON(object.waitlistStatus) : 0,
            acceptedTermsVersion: isSet(object.acceptedTermsVersion) ? Number(object.acceptedTermsVersion) : 0,
            currentTermsVersion: isSet(object.currentTermsVersion) ? Number(object.currentTermsVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.waitlistStatus !== undefined && (obj.waitlistStatus = waitlistStatusToJSON(message.waitlistStatus));
        message.acceptedTermsVersion !== undefined && (obj.acceptedTermsVersion = Math.round(message.acceptedTermsVersion));
        message.currentTermsVersion !== undefined && (obj.currentTermsVersion = Math.round(message.currentTermsVersion));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetCurrentUserStatusResponse();
        message.waitlistStatus = object.waitlistStatus ?? 0;
        message.acceptedTermsVersion = object.acceptedTermsVersion ?? 0;
        message.currentTermsVersion = object.currentTermsVersion ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.waitlist.GetCurrentUserStatusResponse", GetCurrentUserStatusResponse);
export class WaitlistClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.dev_portal.waitlist.Waitlist";
        this.rpc = rpc;
        this.IsCurrentUserRegistered = this.IsCurrentUserRegistered.bind(this);
        this.RegisterUser = this.RegisterUser.bind(this);
        this.GetCurrentUserStatus = this.GetCurrentUserStatus.bind(this);
        this.AcceptTermsAndConditions = this.AcceptTermsAndConditions.bind(this);
    }
    IsCurrentUserRegistered(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsCurrentUserRegistered", data);
        return promise.then((data) => IsCurrentUserRegisteredResponse.decode(new _m0.Reader(data)));
    }
    RegisterUser(request) {
        const data = WaitlistRegisterUserRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterUser", data);
        return promise.then((data) => WaitlistRegisterUserResponse.decode(new _m0.Reader(data)));
    }
    GetCurrentUserStatus(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCurrentUserStatus", data);
        return promise.then((data) => GetCurrentUserStatusResponse.decode(new _m0.Reader(data)));
    }
    AcceptTermsAndConditions(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "AcceptTermsAndConditions", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const WaitlistDefinition = {
    name: "Waitlist",
    fullName: "devvit.dev_portal.waitlist.Waitlist",
    methods: {
        isCurrentUserRegistered: {
            name: "IsCurrentUserRegistered",
            requestType: Empty,
            requestStream: false,
            responseType: IsCurrentUserRegisteredResponse,
            responseStream: false,
            options: {},
        },
        registerUser: {
            name: "RegisterUser",
            requestType: WaitlistRegisterUserRequest,
            requestStream: false,
            responseType: WaitlistRegisterUserResponse,
            responseStream: false,
            options: {},
        },
        getCurrentUserStatus: {
            name: "GetCurrentUserStatus",
            requestType: Empty,
            requestStream: false,
            responseType: GetCurrentUserStatusResponse,
            responseStream: false,
            options: {},
        },
        acceptTermsAndConditions: {
            name: "AcceptTermsAndConditions",
            requestType: Empty,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

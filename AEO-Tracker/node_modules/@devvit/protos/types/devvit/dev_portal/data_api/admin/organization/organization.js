/**
 * #organization.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { Organization } from '../../../../data/api/v1alpha/admin.js';
function createBaseCreateOrganizationRequest() {
    return { name: "" };
}
export const CreateOrganizationRequest = {
    $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateOrganizationRequest();
        message.name = object.name ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.CreateOrganizationRequest", CreateOrganizationRequest);
function createBaseCreateOrganizationResponse() {
    return { organizationId: "", name: "" };
}
export const CreateOrganizationResponse = {
    $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationId !== "") {
            writer.uint32(10).string(message.organizationId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrganizationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizationId = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationId: isSet(object.organizationId) ? String(object.organizationId) : "",
            name: isSet(object.name) ? String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.organizationId !== undefined && (obj.organizationId = message.organizationId);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateOrganizationResponse();
        message.organizationId = object.organizationId ?? "";
        message.name = object.name ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.CreateOrganizationResponse", CreateOrganizationResponse);
function createBaseGetOrganizationByNameRequest() {
    return { name: "" };
}
export const GetOrganizationByNameRequest = {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByNameRequest();
        message.name = object.name ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameRequest", GetOrganizationByNameRequest);
function createBaseGetOrganizationByNameResponse() {
    return { organizationId: "", isInternal: false };
}
export const GetOrganizationByNameResponse = {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationId !== "") {
            writer.uint32(10).string(message.organizationId);
        }
        if (message.isInternal === true) {
            writer.uint32(16).bool(message.isInternal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizationId = reader.string();
                    break;
                case 2:
                    message.isInternal = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationId: isSet(object.organizationId) ? String(object.organizationId) : "",
            isInternal: isSet(object.isInternal) ? Boolean(object.isInternal) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.organizationId !== undefined && (obj.organizationId = message.organizationId);
        message.isInternal !== undefined && (obj.isInternal = message.isInternal);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByNameResponse();
        message.organizationId = object.organizationId ?? "";
        message.isInternal = object.isInternal ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameResponse", GetOrganizationByNameResponse);
function createBaseGetOrganizationsRequest() {
    return {};
}
export const GetOrganizationsRequest = {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetOrganizationsRequest();
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.GetOrganizationsRequest", GetOrganizationsRequest);
function createBaseGetOrganizationsResponse() {
    return { organizations: [] };
}
export const GetOrganizationsResponse = {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.organizations) {
            Organization.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizations.push(Organization.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizations: Array.isArray(object?.organizations)
                ? object.organizations.map((e) => Organization.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizations) {
            obj.organizations = message.organizations.map((e) => e ? Organization.toJSON(e) : undefined);
        }
        else {
            obj.organizations = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationsResponse();
        message.organizations = object.organizations?.map((e) => Organization.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.organization.GetOrganizationsResponse", GetOrganizationsResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}

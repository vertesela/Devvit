/**
 * #auth.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Duration } from '../../../../../google/protobuf/duration.js';
import { Timestamp } from '../../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { DataToken } from '../../../../data/api/v1alpha/admin.js';
function createBaseCreateDataTokenRequest() {
    return { organizationName: "", expiresIn: undefined };
}
export const CreateDataTokenRequest = {
    $type: "devvit.dev_portal.data_api.admin.auth.CreateDataTokenRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        if (message.expiresIn !== undefined) {
            Duration.encode(message.expiresIn, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizationName = reader.string();
                    break;
                case 2:
                    message.expiresIn = Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationName: isSet(object.organizationName) ? String(object.organizationName) : "",
            expiresIn: isSet(object.expiresIn) ? Duration.fromJSON(object.expiresIn) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.organizationName !== undefined && (obj.organizationName = message.organizationName);
        message.expiresIn !== undefined &&
            (obj.expiresIn = message.expiresIn ? Duration.toJSON(message.expiresIn) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateDataTokenRequest();
        message.organizationName = object.organizationName ?? "";
        message.expiresIn = (object.expiresIn !== undefined && object.expiresIn !== null)
            ? Duration.fromPartial(object.expiresIn)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.CreateDataTokenRequest", CreateDataTokenRequest);
function createBaseCreateDataTokenResponse() {
    return { token: "", expiresAt: undefined };
}
export const CreateDataTokenResponse = {
    $type: "devvit.dev_portal.data_api.admin.auth.CreateDataTokenResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.expiresAt !== undefined) {
            Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? String(object.token) : "",
            expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.token !== undefined && (obj.token = message.token);
        message.expiresAt !== undefined && (obj.expiresAt = message.expiresAt.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateDataTokenResponse();
        message.token = object.token ?? "";
        message.expiresAt = object.expiresAt ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.CreateDataTokenResponse", CreateDataTokenResponse);
function createBaseGetDataTokenByIdRequest() {
    return { id: "" };
}
export const GetDataTokenByIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataTokenByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataTokenByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdRequest", GetDataTokenByIdRequest);
function createBaseGetDataTokenByIdResponse() {
    return { token: undefined };
}
export const GetDataTokenByIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== undefined) {
            DataToken.encode(message.token, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataTokenByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = DataToken.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? DataToken.fromJSON(object.token) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.token !== undefined && (obj.token = message.token ? DataToken.toJSON(message.token) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataTokenByIdResponse();
        message.token = (object.token !== undefined && object.token !== null)
            ? DataToken.fromPartial(object.token)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdResponse", GetDataTokenByIdResponse);
function createBaseGetDataTokensByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetDataTokensByOrganizationNameRequest = {
    $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataTokensByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.organizationName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.organizationName !== undefined && (obj.organizationName = message.organizationName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataTokensByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameRequest", GetDataTokensByOrganizationNameRequest);
function createBaseGetDataTokensByOrganizationNameResponse() {
    return { tokens: [] };
}
export const GetDataTokensByOrganizationNameResponse = {
    $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.tokens) {
            DataToken.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataTokensByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokens.push(DataToken.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { tokens: Array.isArray(object?.tokens) ? object.tokens.map((e) => DataToken.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokens) {
            obj.tokens = message.tokens.map((e) => e ? DataToken.toJSON(e) : undefined);
        }
        else {
            obj.tokens = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetDataTokensByOrganizationNameResponse();
        message.tokens = object.tokens?.map((e) => DataToken.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameResponse", GetDataTokensByOrganizationNameResponse);
function createBaseRevokeDataTokenByIdRequest() {
    return { tokenId: "" };
}
export const RevokeDataTokenByIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeDataTokenByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { tokenId: isSet(object.tokenId) ? String(object.tokenId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.tokenId !== undefined && (obj.tokenId = message.tokenId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRevokeDataTokenByIdRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdRequest", RevokeDataTokenByIdRequest);
function createBaseRevokeDataTokenByIdResponse() {
    return {};
}
export const RevokeDataTokenByIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeDataTokenByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseRevokeDataTokenByIdResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdResponse", RevokeDataTokenByIdResponse);
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #organization.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Organization } from '../../../../data/api/v1alpha/admin.js';
export interface CreateOrganizationRequest {
    name: string;
}
export interface CreateOrganizationResponse {
    organizationId: string;
    name: string;
}
export interface GetOrganizationByNameRequest {
    name: string;
}
export interface GetOrganizationByNameResponse {
    organizationId: string;
    isInternal: boolean;
}
export interface GetOrganizationsRequest {
}
export interface GetOrganizationsResponse {
    organizations: Organization[];
}
export declare const CreateOrganizationRequest: {
    $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationRequest";
    encode(message: CreateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrganizationRequest;
    fromJSON(object: any): CreateOrganizationRequest;
    toJSON(message: CreateOrganizationRequest): unknown;
    fromPartial<I extends {
        name?: string | undefined;
    } & {
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "name">]: never; }>(object: I): CreateOrganizationRequest;
};
export declare const CreateOrganizationResponse: {
    $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationResponse";
    encode(message: CreateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrganizationResponse;
    fromJSON(object: any): CreateOrganizationResponse;
    toJSON(message: CreateOrganizationResponse): unknown;
    fromPartial<I extends {
        organizationId?: string | undefined;
        name?: string | undefined;
    } & {
        organizationId?: string | undefined;
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CreateOrganizationResponse>]: never; }>(object: I): CreateOrganizationResponse;
};
export declare const GetOrganizationByNameRequest: {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameRequest";
    encode(message: GetOrganizationByNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationByNameRequest;
    fromJSON(object: any): GetOrganizationByNameRequest;
    toJSON(message: GetOrganizationByNameRequest): unknown;
    fromPartial<I extends {
        name?: string | undefined;
    } & {
        name?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "name">]: never; }>(object: I): GetOrganizationByNameRequest;
};
export declare const GetOrganizationByNameResponse: {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameResponse";
    encode(message: GetOrganizationByNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationByNameResponse;
    fromJSON(object: any): GetOrganizationByNameResponse;
    toJSON(message: GetOrganizationByNameResponse): unknown;
    fromPartial<I extends {
        organizationId?: string | undefined;
        isInternal?: boolean | undefined;
    } & {
        organizationId?: string | undefined;
        isInternal?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof GetOrganizationByNameResponse>]: never; }>(object: I): GetOrganizationByNameResponse;
};
export declare const GetOrganizationsRequest: {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsRequest";
    encode(_: GetOrganizationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationsRequest;
    fromJSON(_: any): GetOrganizationsRequest;
    toJSON(_: GetOrganizationsRequest): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): GetOrganizationsRequest;
};
export declare const GetOrganizationsResponse: {
    $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsResponse";
    encode(message: GetOrganizationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationsResponse;
    fromJSON(object: any): GetOrganizationsResponse;
    toJSON(message: GetOrganizationsResponse): unknown;
    fromPartial<I extends {
        organizations?: {
            id?: string | undefined;
            name?: string | undefined;
            subscriptions?: {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[] | undefined;
            tokens?: {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        organizations?: ({
            id?: string | undefined;
            name?: string | undefined;
            subscriptions?: {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[] | undefined;
            tokens?: {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            id?: string | undefined;
            name?: string | undefined;
            subscriptions?: {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[] | undefined;
            tokens?: {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[] | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            subscriptions?: ({
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[] & ({
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            } & {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: (import("../../../../options/options.js").FirehoseEvent[] & import("../../../../options/options.js").FirehoseEvent[] & { [K in Exclude<keyof I["organizations"][number]["subscriptions"][number]["events"], "$type" | keyof import("../../../../options/options.js").FirehoseEvent[]>]: never; }) | undefined;
                subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["organizations"][number]["subscriptions"][number]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
                subredditRatings?: (import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] & import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] & { [K_2 in Exclude<keyof I["organizations"][number]["subscriptions"][number]["subredditRatings"], "$type" | keyof import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[]>]: never; }) | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            } & { [K_3 in Exclude<keyof I["organizations"][number]["subscriptions"][number], "$type" | keyof import("../../../../data/api/v1alpha/admin.js").DataSubscription>]: never; })[] & { [K_4 in Exclude<keyof I["organizations"][number]["subscriptions"], "$type" | keyof {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[]>]: never; }) | undefined;
            tokens?: ({
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[] & ({
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            } & {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            } & { [K_5 in Exclude<keyof I["organizations"][number]["tokens"][number], "$type" | keyof import("../../../../data/api/v1alpha/admin.js").DataToken>]: never; })[] & { [K_6 in Exclude<keyof I["organizations"][number]["tokens"], "$type" | keyof {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["organizations"][number], "$type" | keyof Organization>]: never; })[] & { [K_8 in Exclude<keyof I["organizations"], "$type" | keyof {
            id?: string | undefined;
            name?: string | undefined;
            subscriptions?: {
                id?: string | undefined;
                tier?: import("../../../../options/options.js").DataTier | undefined;
                events?: import("../../../../options/options.js").FirehoseEvent[] | undefined;
                subreddits?: string[] | undefined;
                subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[] | undefined;
                organizationId?: string | undefined;
                name?: string | undefined;
                description?: string | undefined;
            }[] | undefined;
            tokens?: {
                id?: string | undefined;
                organizationId?: string | undefined;
                createdAt?: Date | undefined;
                expiresAt?: Date | undefined;
                isRevoked?: boolean | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I, "$type" | "organizations">]: never; }>(object: I): GetOrganizationsResponse;
};
//# sourceMappingURL=organization.d.ts.map
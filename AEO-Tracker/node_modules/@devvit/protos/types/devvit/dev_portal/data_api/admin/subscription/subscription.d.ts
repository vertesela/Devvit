/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { DataSubscription } from '../../../../data/api/v1alpha/admin.js';
import { DataTier, FirehoseEvent } from '../../../../options/options.js';
import { SubredditRating } from '../../../../reddit/v2alpha/subredditv2.js';
/** region Subscription messages */
export interface CreateDataSubscriptionRequest {
    tier: DataTier;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    customer: string;
    name: string;
    description?: string | undefined;
}
export interface CreateDataSubscriptionResponse {
    subscription?: DataSubscription;
}
export interface GetDataSubscriptionByIdRequest {
    subscriptionId: string;
}
export interface GetDataSubscriptionByIdResponse {
    subscription?: DataSubscription;
}
export interface GetDataSubscriptionsByOrganizationNameRequest {
    organizationName: string;
}
export interface GetDataSubscriptionsByOrganizationNameResponse {
    subscriptions: DataSubscription[];
}
export interface UpdateDataSubscriptionRequest {
    /** Id of the subscription to update */
    subscriptionId: string;
    /** New name of the subscription */
    name?: string | undefined;
    /** New description of the subscription */
    description?: string | undefined;
    /** New data tier of the subscription. */
    tier?: DataTier | undefined;
    /** New events. Will overwrite the array of existing events. */
    events: FirehoseEvent[];
    /** New subreddits. Will overwrite the array of existing subreddits. */
    subreddits: string[];
    /** New subreddit ratings. Will overwrite the array of existing subreddit ratings. */
    subredditRatings: SubredditRating[];
}
export interface UpdateDataSubscriptionResponse {
    subscription?: DataSubscription;
}
export interface DeleteDataSubscriptionRequest {
    subscriptionId: string;
}
export interface DeleteDataSubscriptionResponse {
}
export declare const CreateDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest";
    encode(message: CreateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateDataSubscriptionRequest;
    fromJSON(object: any): CreateDataSubscriptionRequest;
    toJSON(message: CreateDataSubscriptionRequest): unknown;
    fromPartial<I extends {
        tier?: DataTier | undefined;
        events?: FirehoseEvent[] | undefined;
        subreddits?: string[] | undefined;
        subredditRatings?: SubredditRating[] | undefined;
        customer?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
    } & {
        tier?: DataTier | undefined;
        events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
        subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
        subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
        customer?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof CreateDataSubscriptionRequest>]: never; }>(object: I): CreateDataSubscriptionRequest;
};
export declare const CreateDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse";
    encode(message: CreateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateDataSubscriptionResponse;
    fromJSON(object: any): CreateDataSubscriptionResponse;
    toJSON(message: CreateDataSubscriptionResponse): unknown;
    fromPartial<I extends {
        subscription?: {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } | undefined;
    } & {
        subscription?: ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["subscription"]["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
            subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscription"]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
            subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subscription"]["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & { [K_3 in Exclude<keyof I["subscription"], "$type" | keyof DataSubscription>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | "subscription">]: never; }>(object: I): CreateDataSubscriptionResponse;
};
export declare const GetDataSubscriptionByIdRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest";
    encode(message: GetDataSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionByIdRequest;
    fromJSON(object: any): GetDataSubscriptionByIdRequest;
    toJSON(message: GetDataSubscriptionByIdRequest): unknown;
    fromPartial<I extends {
        subscriptionId?: string | undefined;
    } & {
        subscriptionId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subscriptionId">]: never; }>(object: I): GetDataSubscriptionByIdRequest;
};
export declare const GetDataSubscriptionByIdResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse";
    encode(message: GetDataSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionByIdResponse;
    fromJSON(object: any): GetDataSubscriptionByIdResponse;
    toJSON(message: GetDataSubscriptionByIdResponse): unknown;
    fromPartial<I extends {
        subscription?: {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } | undefined;
    } & {
        subscription?: ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["subscription"]["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
            subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscription"]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
            subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subscription"]["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & { [K_3 in Exclude<keyof I["subscription"], "$type" | keyof DataSubscription>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | "subscription">]: never; }>(object: I): GetDataSubscriptionByIdResponse;
};
export declare const GetDataSubscriptionsByOrganizationNameRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest";
    encode(message: GetDataSubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionsByOrganizationNameRequest;
    fromJSON(object: any): GetDataSubscriptionsByOrganizationNameRequest;
    toJSON(message: GetDataSubscriptionsByOrganizationNameRequest): unknown;
    fromPartial<I extends {
        organizationName?: string | undefined;
    } & {
        organizationName?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "organizationName">]: never; }>(object: I): GetDataSubscriptionsByOrganizationNameRequest;
};
export declare const GetDataSubscriptionsByOrganizationNameResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse";
    encode(message: GetDataSubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionsByOrganizationNameResponse;
    fromJSON(object: any): GetDataSubscriptionsByOrganizationNameResponse;
    toJSON(message: GetDataSubscriptionsByOrganizationNameResponse): unknown;
    fromPartial<I extends {
        subscriptions?: {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[] | undefined;
    } & {
        subscriptions?: ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[] & ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["subscriptions"][number]["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
            subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscriptions"][number]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
            subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subscriptions"][number]["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & { [K_3 in Exclude<keyof I["subscriptions"][number], "$type" | keyof DataSubscription>]: never; })[] & { [K_4 in Exclude<keyof I["subscriptions"], "$type" | keyof {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | "subscriptions">]: never; }>(object: I): GetDataSubscriptionsByOrganizationNameResponse;
};
export declare const UpdateDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest";
    encode(message: UpdateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDataSubscriptionRequest;
    fromJSON(object: any): UpdateDataSubscriptionRequest;
    toJSON(message: UpdateDataSubscriptionRequest): unknown;
    fromPartial<I extends {
        subscriptionId?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        tier?: DataTier | undefined;
        events?: FirehoseEvent[] | undefined;
        subreddits?: string[] | undefined;
        subredditRatings?: SubredditRating[] | undefined;
    } & {
        subscriptionId?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        tier?: DataTier | undefined;
        events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
        subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
        subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof UpdateDataSubscriptionRequest>]: never; }>(object: I): UpdateDataSubscriptionRequest;
};
export declare const UpdateDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse";
    encode(message: UpdateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDataSubscriptionResponse;
    fromJSON(object: any): UpdateDataSubscriptionResponse;
    toJSON(message: UpdateDataSubscriptionResponse): unknown;
    fromPartial<I extends {
        subscription?: {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } | undefined;
    } & {
        subscription?: ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["subscription"]["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
            subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscription"]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
            subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subscription"]["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & { [K_3 in Exclude<keyof I["subscription"], "$type" | keyof DataSubscription>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | "subscription">]: never; }>(object: I): UpdateDataSubscriptionResponse;
};
export declare const DeleteDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest";
    encode(message: DeleteDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDataSubscriptionRequest;
    fromJSON(object: any): DeleteDataSubscriptionRequest;
    toJSON(message: DeleteDataSubscriptionRequest): unknown;
    fromPartial<I extends {
        subscriptionId?: string | undefined;
    } & {
        subscriptionId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subscriptionId">]: never; }>(object: I): DeleteDataSubscriptionRequest;
};
export declare const DeleteDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse";
    encode(_: DeleteDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDataSubscriptionResponse;
    fromJSON(_: any): DeleteDataSubscriptionResponse;
    toJSON(_: DeleteDataSubscriptionResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): DeleteDataSubscriptionResponse;
};
//# sourceMappingURL=subscription.d.ts.map
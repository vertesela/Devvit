import { RemoteLogMessage, RemoteLogPutResponse, RemoteLogQuery } from './remote_logger.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface RemoteLogPublisherClient {
    Put(request: RemoteLogMessage): Promise<RemoteLogPutResponse>;
}
export declare class RemoteLogPublisherClientJSON implements RemoteLogPublisherClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Put(request: RemoteLogMessage): Promise<RemoteLogPutResponse>;
}
export declare class RemoteLogPublisherClientProtobuf implements RemoteLogPublisherClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Put(request: RemoteLogMessage): Promise<RemoteLogPutResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface RemoteLogConsumerClient {
    Tail(request: RemoteLogQuery): Promise<RemoteLogMessage>;
}
export declare class RemoteLogConsumerClientJSON implements RemoteLogConsumerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Tail(request: RemoteLogQuery): Promise<RemoteLogMessage>;
}
export declare class RemoteLogConsumerClientProtobuf implements RemoteLogConsumerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Tail(request: RemoteLogQuery): Promise<RemoteLogMessage>;
}
export {};
//# sourceMappingURL=remote_logger.twirp-client.d.ts.map
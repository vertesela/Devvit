/**
 * #remote_logger.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
import { LogErrorMessage, LogEventMessage, LogMessage } from '../plugin/logger/logger.js';
export declare enum RemoteLogType {
    LOG = 0,
    ERROR = 1,
    EVENT = 2,
    UNRECOGNIZED = -1
}
export declare function remoteLogTypeFromJSON(object: any): RemoteLogType;
export declare function remoteLogTypeToJSON(object: RemoteLogType): number;
export interface RemoteLogPutResponse {
}
export interface KeepAliveMessage {
    timestamp?: Date;
}
export interface RemoteLogMessage {
    log?: LogMessage | undefined;
    error?: LogErrorMessage | undefined;
    keepalive?: KeepAliveMessage | undefined;
    event?: LogEventMessage | undefined;
}
/** Filter on installation ID (encoded subreddit name AND app name). */
export interface RemoteLogInstallationFilter {
    installationId: string;
}
/**
 * Filter on subreddit name and / or app name. Not all combinations are
 * available on all streams.
 */
export interface RemoteLogSubredditAppNameFilter {
    subreddit: string;
    appName: string;
}
export interface RemoteLogQuery {
    installation?: RemoteLogInstallationFilter | undefined;
    subredditAppName?: RemoteLogSubredditAppNameFilter | undefined;
    type: RemoteLogType;
    since?: Date;
}
export declare const RemoteLogPutResponse: {
    $type: "devvit.remote_logger.RemoteLogPutResponse";
    encode(_: RemoteLogPutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogPutResponse;
    fromJSON(_: any): RemoteLogPutResponse;
    toJSON(_: RemoteLogPutResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): RemoteLogPutResponse;
};
export declare const KeepAliveMessage: {
    $type: "devvit.remote_logger.KeepAliveMessage";
    encode(message: KeepAliveMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeepAliveMessage;
    fromJSON(object: any): KeepAliveMessage;
    toJSON(message: KeepAliveMessage): unknown;
    fromPartial<I extends {
        timestamp?: Date | undefined;
    } & {
        timestamp?: Date | undefined;
    } & { [K in Exclude<keyof I, "$type" | "timestamp">]: never; }>(object: I): KeepAliveMessage;
};
export declare const RemoteLogMessage: {
    $type: "devvit.remote_logger.RemoteLogMessage";
    encode(message: RemoteLogMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessage;
    fromJSON(object: any): RemoteLogMessage;
    toJSON(message: RemoteLogMessage): unknown;
    fromPartial<I extends {
        log?: {
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        } | undefined;
        error?: {
            message?: string | undefined;
            name?: string | undefined;
            fileName?: string | undefined;
            lineNumber?: number | undefined;
            columnNumber?: number | undefined;
            stack?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        } | undefined;
        keepalive?: {
            timestamp?: Date | undefined;
        } | undefined;
        event?: {
            type?: string | undefined;
            timestamp?: Date | undefined;
            labels?: {
                [x: string]: string | undefined;
            } | undefined;
            data?: {
                [x: string]: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        log?: ({
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        } & {
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: (string[] & string[] & { [K in Exclude<keyof I["log"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["log"], "$type" | keyof LogMessage>]: never; }) | undefined;
        error?: ({
            message?: string | undefined;
            name?: string | undefined;
            fileName?: string | undefined;
            lineNumber?: number | undefined;
            columnNumber?: number | undefined;
            stack?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        } & {
            message?: string | undefined;
            name?: string | undefined;
            fileName?: string | undefined;
            lineNumber?: number | undefined;
            columnNumber?: number | undefined;
            stack?: string | undefined;
            timestamp?: Date | undefined;
            tags?: (string[] & string[] & { [K_2 in Exclude<keyof I["error"]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["error"], "$type" | keyof LogErrorMessage>]: never; }) | undefined;
        keepalive?: ({
            timestamp?: Date | undefined;
        } & {
            timestamp?: Date | undefined;
        } & { [K_4 in Exclude<keyof I["keepalive"], "$type" | "timestamp">]: never; }) | undefined;
        event?: ({
            type?: string | undefined;
            timestamp?: Date | undefined;
            labels?: {
                [x: string]: string | undefined;
            } | undefined;
            data?: {
                [x: string]: string | undefined;
            } | undefined;
        } & {
            type?: string | undefined;
            timestamp?: Date | undefined;
            labels?: ({
                [x: string]: string | undefined;
            } & {
                [x: string]: string | undefined;
            } & { [K_5 in Exclude<keyof I["event"]["labels"], string | number>]: never; }) | undefined;
            data?: ({
                [x: string]: string | undefined;
            } & {
                [x: string]: string | undefined;
            } & { [K_6 in Exclude<keyof I["event"]["data"], string | number>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["event"], "$type" | keyof LogEventMessage>]: never; }) | undefined;
    } & { [K_8 in Exclude<keyof I, "$type" | keyof RemoteLogMessage>]: never; }>(object: I): RemoteLogMessage;
};
export declare const RemoteLogInstallationFilter: {
    $type: "devvit.remote_logger.RemoteLogInstallationFilter";
    encode(message: RemoteLogInstallationFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogInstallationFilter;
    fromJSON(object: any): RemoteLogInstallationFilter;
    toJSON(message: RemoteLogInstallationFilter): unknown;
    fromPartial<I extends {
        installationId?: string | undefined;
    } & {
        installationId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "installationId">]: never; }>(object: I): RemoteLogInstallationFilter;
};
export declare const RemoteLogSubredditAppNameFilter: {
    $type: "devvit.remote_logger.RemoteLogSubredditAppNameFilter";
    encode(message: RemoteLogSubredditAppNameFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogSubredditAppNameFilter;
    fromJSON(object: any): RemoteLogSubredditAppNameFilter;
    toJSON(message: RemoteLogSubredditAppNameFilter): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
        appName?: string | undefined;
    } & {
        subreddit?: string | undefined;
        appName?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RemoteLogSubredditAppNameFilter>]: never; }>(object: I): RemoteLogSubredditAppNameFilter;
};
export declare const RemoteLogQuery: {
    $type: "devvit.remote_logger.RemoteLogQuery";
    encode(message: RemoteLogQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogQuery;
    fromJSON(object: any): RemoteLogQuery;
    toJSON(message: RemoteLogQuery): unknown;
    fromPartial<I extends {
        installation?: {
            installationId?: string | undefined;
        } | undefined;
        subredditAppName?: {
            subreddit?: string | undefined;
            appName?: string | undefined;
        } | undefined;
        type?: RemoteLogType | undefined;
        since?: Date | undefined;
    } & {
        installation?: ({
            installationId?: string | undefined;
        } & {
            installationId?: string | undefined;
        } & { [K in Exclude<keyof I["installation"], "$type" | "installationId">]: never; }) | undefined;
        subredditAppName?: ({
            subreddit?: string | undefined;
            appName?: string | undefined;
        } & {
            subreddit?: string | undefined;
            appName?: string | undefined;
        } & { [K_1 in Exclude<keyof I["subredditAppName"], "$type" | keyof RemoteLogSubredditAppNameFilter>]: never; }) | undefined;
        type?: RemoteLogType | undefined;
        since?: Date | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof RemoteLogQuery>]: never; }>(object: I): RemoteLogQuery;
};
export interface RemoteLogPublisher {
    Put(request: RemoteLogMessage, metadata?: Metadata): Promise<RemoteLogPutResponse>;
}
export declare class RemoteLogPublisherClientImpl implements RemoteLogPublisher {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: RemoteLogMessage): Promise<RemoteLogPutResponse>;
}
export type RemoteLogPublisherDefinition = typeof RemoteLogPublisherDefinition;
export declare const RemoteLogPublisherDefinition: {
    name: 'RemoteLogPublisher';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface RemoteLogConsumer {
    Tail(request: RemoteLogQuery, metadata?: Metadata): Observable<RemoteLogMessage>;
}
export declare class RemoteLogConsumerClientImpl implements RemoteLogConsumer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Tail(request: RemoteLogQuery): Observable<RemoteLogMessage>;
}
export type RemoteLogConsumerDefinition = typeof RemoteLogConsumerDefinition;
export declare const RemoteLogConsumerDefinition: {
    name: 'RemoteLogConsumer';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=remote_logger.d.ts.map
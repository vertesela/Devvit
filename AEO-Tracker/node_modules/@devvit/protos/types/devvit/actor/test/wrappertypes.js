/**
 * #wrappertypes.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { BoolValue, DoubleValue, FloatValue, Int32Value, Int64Value, StringValue, UInt32Value, UInt64Value, } from '../../../google/protobuf/wrappers.js';
export class WrapperTypesClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.test.WrapperTypes";
        this.rpc = rpc;
        this.StringRequest = this.StringRequest.bind(this);
        this.BoolRequest = this.BoolRequest.bind(this);
        this.Int32Request = this.Int32Request.bind(this);
        this.UInt32Request = this.UInt32Request.bind(this);
        this.Int64Request = this.Int64Request.bind(this);
        this.UInt64Request = this.UInt64Request.bind(this);
        this.FloatRequest = this.FloatRequest.bind(this);
        this.DoubleRequest = this.DoubleRequest.bind(this);
    }
    StringRequest(request) {
        const data = StringValue.encode(request).finish();
        const promise = this.rpc.request(this.service, "StringRequest", data);
        return promise.then((data) => StringValue.decode(new _m0.Reader(data)));
    }
    BoolRequest(request) {
        const data = BoolValue.encode(request).finish();
        const promise = this.rpc.request(this.service, "BoolRequest", data);
        return promise.then((data) => BoolValue.decode(new _m0.Reader(data)));
    }
    Int32Request(request) {
        const data = Int32Value.encode(request).finish();
        const promise = this.rpc.request(this.service, "Int32Request", data);
        return promise.then((data) => Int32Value.decode(new _m0.Reader(data)));
    }
    UInt32Request(request) {
        const data = UInt32Value.encode(request).finish();
        const promise = this.rpc.request(this.service, "UInt32Request", data);
        return promise.then((data) => UInt32Value.decode(new _m0.Reader(data)));
    }
    Int64Request(request) {
        const data = Int64Value.encode(request).finish();
        const promise = this.rpc.request(this.service, "Int64Request", data);
        return promise.then((data) => Int64Value.decode(new _m0.Reader(data)));
    }
    UInt64Request(request) {
        const data = UInt64Value.encode(request).finish();
        const promise = this.rpc.request(this.service, "UInt64Request", data);
        return promise.then((data) => UInt64Value.decode(new _m0.Reader(data)));
    }
    FloatRequest(request) {
        const data = FloatValue.encode(request).finish();
        const promise = this.rpc.request(this.service, "FloatRequest", data);
        return promise.then((data) => FloatValue.decode(new _m0.Reader(data)));
    }
    DoubleRequest(request) {
        const data = DoubleValue.encode(request).finish();
        const promise = this.rpc.request(this.service, "DoubleRequest", data);
        return promise.then((data) => DoubleValue.decode(new _m0.Reader(data)));
    }
}
export const WrapperTypesDefinition = {
    name: "WrapperTypes",
    fullName: "devvit.actor.test.WrapperTypes",
    methods: {
        stringRequest: {
            name: "StringRequest",
            requestType: StringValue,
            requestStream: false,
            responseType: StringValue,
            responseStream: false,
            options: {},
        },
        boolRequest: {
            name: "BoolRequest",
            requestType: BoolValue,
            requestStream: false,
            responseType: BoolValue,
            responseStream: false,
            options: {},
        },
        int32Request: {
            name: "Int32Request",
            requestType: Int32Value,
            requestStream: false,
            responseType: Int32Value,
            responseStream: false,
            options: {},
        },
        uInt32Request: {
            name: "UInt32Request",
            requestType: UInt32Value,
            requestStream: false,
            responseType: UInt32Value,
            responseStream: false,
            options: {},
        },
        int64Request: {
            name: "Int64Request",
            requestType: Int64Value,
            requestStream: false,
            responseType: Int64Value,
            responseStream: false,
            options: {},
        },
        uInt64Request: {
            name: "UInt64Request",
            requestType: UInt64Value,
            requestStream: false,
            responseType: UInt64Value,
            responseStream: false,
            options: {},
        },
        floatRequest: {
            name: "FloatRequest",
            requestType: FloatValue,
            requestStream: false,
            responseType: FloatValue,
            responseStream: false,
            options: {},
        },
        doubleRequest: {
            name: "DoubleRequest",
            requestType: DoubleValue,
            requestStream: false,
            responseType: DoubleValue,
            responseStream: false,
            options: {},
        },
    },
};

/**
 * #streams.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
export interface TestMessage {
    number: number;
}
export declare const TestMessage: {
    $type: "devvit.actor.test.TestMessage";
    encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
    fromJSON(object: any): TestMessage;
    toJSON(message: TestMessage): unknown;
    fromPartial<I extends {
        number?: number | undefined;
    } & {
        number?: number | undefined;
    } & { [K in Exclude<keyof I, "number" | "$type">]: never; }>(object: I): TestMessage;
};
/** This is a test definition useful to figure out that streams are working well. */
export interface Streams {
    /**
     * this copies messages from the request stream to the response stream.
     * It could also represent a filtering process (i.e. every odd number)
     */
    Transform(request: Observable<TestMessage>, metadata?: Metadata): Observable<TestMessage>;
    /**
     * This takes a stream of messages and returns a single response.
     * A canonical implementation would be a sum() function.
     */
    Aggregate(request: Observable<TestMessage>, metadata?: Metadata): Promise<TestMessage>;
    /**
     * This takes a single message and returns a stream of messages.  Think
     * range()
     */
    Enumerate(request: TestMessage, metadata?: Metadata): Observable<TestMessage>;
}
export declare class StreamsClientImpl implements Streams {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Transform(request: Observable<TestMessage>): Observable<TestMessage>;
    Aggregate(request: Observable<TestMessage>): Promise<TestMessage>;
    Enumerate(request: TestMessage): Observable<TestMessage>;
}
/** This is a test definition useful to figure out that streams are working well. */
export type StreamsDefinition = typeof StreamsDefinition;
export declare const StreamsDefinition: {
    name: 'Streams';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=streams.d.ts.map
/**
 * #step.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Comment } from '../../../reddit/comment.js';
import { Post } from '../../../reddit/post.js';
import { User } from '../../../reddit/user.js';
/** A description of a single Step, to be run in a sequence in an Automation */
export interface StepDescription {
    /** The actor hostname to be invoked for the step. Must be in the format <actor_name>@<version> */
    actor: string;
    /** configuration data that is sent to the step */
    config?: {
        [key: string]: any;
    };
}
/** Data from previous steps and config data for the step */
export interface StepInput {
    /** Configuration for the step. The shape of this struct will be dictated by the actor's config */
    config?: {
        [key: string]: any;
    };
    /** Custom data that came from the previous step in the automation */
    prev?: {
        [key: string]: any;
    };
}
/** Data going into an automation step with a comment */
export interface StepCommentInput {
    /** The step input */
    input?: StepInput;
    /** The Comment data from the trigger. */
    comment?: Comment;
}
/** Data going into of an automation step with a post */
export interface StepPostInput {
    /** The step input */
    input?: StepInput;
    /** The Post data from the trigger. */
    post?: Post;
}
/** Data going into of an automation step with a user */
export interface StepUserInput {
    /** The step input */
    input?: StepInput;
    /** The User data from the trigger. */
    user?: User;
}
/** The result of a step */
export interface StepResult {
    /** The output of the step. This will also be passed to the next step as prev */
    output?: {
        [key: string]: any;
    };
    /** Whether the automation should stop or not. If false, continue on to the next step. If true, stop the automation. */
    stop: boolean;
}
/** A report of an individual step execution, to be returned from the AutomationEngine */
export interface StepReport {
    /** The actor that was invoked. Must be in the format <actor_name>@<version> */
    actor: string;
    /** Message provided by actor. If success is false, this could display output from an error, if any. */
    message: string;
    /** How long in milliseconds the step ran. This is a float to represent microseconds as well. */
    duration: number;
    /** Whether the step was a success or failure/error. If true, the next step will be executed. */
    success: boolean;
    /** The result data from the step */
    data?: StepResult;
}
export declare const StepDescription: {
    $type: "devvit.actor.automation.v1alpha.StepDescription";
    encode(message: StepDescription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepDescription;
    fromJSON(object: any): StepDescription;
    toJSON(message: StepDescription): unknown;
    fromPartial<I extends {
        actor?: string | undefined;
        config?: {
            [x: string]: any;
        } | undefined;
    } & {
        actor?: string | undefined;
        config?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["config"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof StepDescription>]: never; }>(object: I): StepDescription;
};
export declare const StepInput: {
    $type: "devvit.actor.automation.v1alpha.StepInput";
    encode(message: StepInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepInput;
    fromJSON(object: any): StepInput;
    toJSON(message: StepInput): unknown;
    fromPartial<I extends {
        config?: {
            [x: string]: any;
        } | undefined;
        prev?: {
            [x: string]: any;
        } | undefined;
    } & {
        config?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["config"], string | number>]: never; }) | undefined;
        prev?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K_1 in Exclude<keyof I["prev"], string | number>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof StepInput>]: never; }>(object: I): StepInput;
};
export declare const StepCommentInput: {
    $type: "devvit.actor.automation.v1alpha.StepCommentInput";
    encode(message: StepCommentInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepCommentInput;
    fromJSON(object: any): StepCommentInput;
    toJSON(message: StepCommentInput): unknown;
    fromPartial<I extends {
        input?: {
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } | undefined;
        comment?: {
            allAwardings?: {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            associatedAward?: string | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: {
                e?: string | undefined;
                t?: string | undefined;
            }[] | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: string[] | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            body?: string | undefined;
            bodyHtml?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            collapsed?: boolean | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            collapsedReason?: string | undefined;
            collapsedReasonCode?: string | undefined;
            commentType?: string | undefined;
            controversiality?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            depth?: number | undefined;
            distinguished?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isSubmitter?: boolean | undefined;
            likes?: boolean | undefined;
            linkId?: string | undefined;
            locked?: boolean | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: any[][] | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numReports?: number | undefined;
            parentId?: string | undefined;
            permalink?: string | undefined;
            removalReason?: string | undefined;
            removed?: boolean | undefined;
            replies?: string | undefined;
            reportReasons?: string[] | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            scoreHidden?: boolean | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            stickied?: boolean | undefined;
            subreddit?: string | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditType?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: string[] | undefined;
            unrepliableReason?: string | undefined;
            ups?: number | undefined;
            userReports?: any[][] | undefined;
            count?: number | undefined;
            children?: string[] | undefined;
            banInfo?: {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
        } | undefined;
    } & {
        input?: ({
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } & {
            config?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["input"]["config"], string | number>]: never; }) | undefined;
            prev?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_1 in Exclude<keyof I["input"]["prev"], string | number>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["input"], "$type" | keyof StepInput>]: never; }) | undefined;
        comment?: ({
            allAwardings?: {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            associatedAward?: string | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: {
                e?: string | undefined;
                t?: string | undefined;
            }[] | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: string[] | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            body?: string | undefined;
            bodyHtml?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            collapsed?: boolean | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            collapsedReason?: string | undefined;
            collapsedReasonCode?: string | undefined;
            commentType?: string | undefined;
            controversiality?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            depth?: number | undefined;
            distinguished?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isSubmitter?: boolean | undefined;
            likes?: boolean | undefined;
            linkId?: string | undefined;
            locked?: boolean | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: any[][] | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numReports?: number | undefined;
            parentId?: string | undefined;
            permalink?: string | undefined;
            removalReason?: string | undefined;
            removed?: boolean | undefined;
            replies?: string | undefined;
            reportReasons?: string[] | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            scoreHidden?: boolean | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            stickied?: boolean | undefined;
            subreddit?: string | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditType?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: string[] | undefined;
            unrepliableReason?: string | undefined;
            ups?: number | undefined;
            userReports?: any[][] | undefined;
            count?: number | undefined;
            children?: string[] | undefined;
            banInfo?: {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
        } & {
            allAwardings?: ({
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] & ({
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            } & {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] & ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & { [K_3 in Exclude<keyof I["comment"]["allAwardings"][number]["resizedIcons"][number], "$type" | keyof import("../../../reddit/common.js").Awarding_Icon>]: never; })[] & { [K_4 in Exclude<keyof I["comment"]["allAwardings"][number]["resizedIcons"], "$type" | keyof {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[]>]: never; }) | undefined;
                resizedStaticIcons?: ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] & ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & { [K_5 in Exclude<keyof I["comment"]["allAwardings"][number]["resizedStaticIcons"][number], "$type" | keyof import("../../../reddit/common.js").Awarding_Icon>]: never; })[] & { [K_6 in Exclude<keyof I["comment"]["allAwardings"][number]["resizedStaticIcons"], "$type" | keyof {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[]>]: never; }) | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            } & { [K_7 in Exclude<keyof I["comment"]["allAwardings"][number], "$type" | keyof import("../../../reddit/common.js").Awarding>]: never; })[] & { [K_8 in Exclude<keyof I["comment"]["allAwardings"], "$type" | keyof {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[]>]: never; }) | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            associatedAward?: string | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: ({
                e?: string | undefined;
                t?: string | undefined;
            }[] & ({
                e?: string | undefined;
                t?: string | undefined;
            } & {
                e?: string | undefined;
                t?: string | undefined;
            } & { [K_9 in Exclude<keyof I["comment"]["authorFlairRichtext"][number], "$type" | keyof import("../../../reddit/common.js").AuthorFlairRichText>]: never; })[] & { [K_10 in Exclude<keyof I["comment"]["authorFlairRichtext"], "$type" | keyof {
                e?: string | undefined;
                t?: string | undefined;
            }[]>]: never; }) | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: (string[] & string[] & { [K_11 in Exclude<keyof I["comment"]["awarders"], "$type" | keyof string[]>]: never; }) | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            body?: string | undefined;
            bodyHtml?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            collapsed?: boolean | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            collapsedReason?: string | undefined;
            collapsedReasonCode?: string | undefined;
            commentType?: string | undefined;
            controversiality?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            depth?: number | undefined;
            distinguished?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: ({
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } & {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } & { [K_12 in Exclude<keyof I["comment"]["gildings"], "$type" | keyof import("../../../reddit/common.js").Gildings>]: never; }) | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isSubmitter?: boolean | undefined;
            likes?: boolean | undefined;
            linkId?: string | undefined;
            locked?: boolean | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: (any[][] & (any[] & any[] & { [K_13 in Exclude<keyof I["comment"]["modReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_14 in Exclude<keyof I["comment"]["modReports"], "$type" | keyof any[][]>]: never; }) | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numReports?: number | undefined;
            parentId?: string | undefined;
            permalink?: string | undefined;
            removalReason?: string | undefined;
            removed?: boolean | undefined;
            replies?: string | undefined;
            reportReasons?: (string[] & string[] & { [K_15 in Exclude<keyof I["comment"]["reportReasons"], "$type" | keyof string[]>]: never; }) | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            scoreHidden?: boolean | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            stickied?: boolean | undefined;
            subreddit?: string | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditType?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: (string[] & string[] & { [K_16 in Exclude<keyof I["comment"]["treatmentTags"], "$type" | keyof string[]>]: never; }) | undefined;
            unrepliableReason?: string | undefined;
            ups?: number | undefined;
            userReports?: (any[][] & (any[] & any[] & { [K_17 in Exclude<keyof I["comment"]["userReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_18 in Exclude<keyof I["comment"]["userReports"], "$type" | keyof any[][]>]: never; }) | undefined;
            count?: number | undefined;
            children?: (string[] & string[] & { [K_19 in Exclude<keyof I["comment"]["children"], "$type" | keyof string[]>]: never; }) | undefined;
            banInfo?: ({
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } & {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } & { [K_20 in Exclude<keyof I["comment"]["banInfo"], "$type" | keyof import("../../../reddit/common.js").BanInfo>]: never; }) | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
        } & { [K_21 in Exclude<keyof I["comment"], "$type" | keyof Comment>]: never; }) | undefined;
    } & { [K_22 in Exclude<keyof I, "$type" | keyof StepCommentInput>]: never; }>(object: I): StepCommentInput;
};
export declare const StepPostInput: {
    $type: "devvit.actor.automation.v1alpha.StepPostInput";
    encode(message: StepPostInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepPostInput;
    fromJSON(object: any): StepPostInput;
    toJSON(message: StepPostInput): unknown;
    fromPartial<I extends {
        input?: {
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } | undefined;
        post?: {
            allAwardings?: {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] | undefined;
            allowLiveComments?: boolean | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: {
                e?: string | undefined;
                t?: string | undefined;
            }[] | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: string[] | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            category?: string | undefined;
            clicked?: boolean | undefined;
            contentCategories?: string[] | undefined;
            contestMode?: boolean | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            discussionType?: string | undefined;
            distinguished?: string | undefined;
            domain?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } | undefined;
            hidden?: boolean | undefined;
            hideScore?: boolean | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isCreatedFromAdsUi?: boolean | undefined;
            isCrosspostable?: boolean | undefined;
            isMeta?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isRedditMediaDomain?: boolean | undefined;
            isRobotIndexable?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            likes?: boolean | undefined;
            linkFlairBackgroundColor?: string | undefined;
            linkFlairCssClass?: string | undefined;
            linkFlairRichtext?: string[] | undefined;
            linkFlairTextColor?: string | undefined;
            linkFlairText?: string | undefined;
            linkFlairType?: string | undefined;
            locked?: boolean | undefined;
            mediaEmbed?: {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } | undefined;
            mediaOnly?: boolean | undefined;
            media?: {
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: any[][] | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numComments?: number | undefined;
            numCrossposts?: number | undefined;
            numDuplicates?: number | undefined;
            numReports?: number | undefined;
            over18?: boolean | undefined;
            parentWhitelistStatus?: string | undefined;
            permalink?: string | undefined;
            pinned?: boolean | undefined;
            postHint?: string | undefined;
            preview?: {
                enabled?: boolean | undefined;
                images?: {
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            pwls?: number | undefined;
            quarantine?: boolean | undefined;
            removalReason?: string | undefined;
            removedByCategory?: string | undefined;
            removedBy?: string | undefined;
            removed?: boolean | undefined;
            reportReasons?: string[] | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            secureMediaEmbed?: {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } | undefined;
            secureMedia?: {
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } | undefined;
            selftextHtml?: string | undefined;
            selftext?: string | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            spoiler?: boolean | undefined;
            stickied?: boolean | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditSubscribers?: number | undefined;
            subredditType?: string | undefined;
            subreddit?: string | undefined;
            suggestedSort?: string | undefined;
            thumbnailHeight?: number | undefined;
            thumbnailWidth?: number | undefined;
            thumbnail?: string | undefined;
            title?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: string[] | undefined;
            ups?: number | undefined;
            upvoteRatio?: number | undefined;
            urlOverriddenByDest?: string | undefined;
            url?: string | undefined;
            userReports?: any[][] | undefined;
            viewCount?: number | undefined;
            visited?: boolean | undefined;
            whitelistStatus?: string | undefined;
            wls?: number | undefined;
            linkFlairTemplateId?: string | undefined;
            crowdControlLevel?: number | undefined;
            isGallery?: boolean | undefined;
            isLiveStream?: boolean | undefined;
            isMetaDiscussion?: boolean | undefined;
            oembed?: {
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                description?: string | undefined;
                title?: string | undefined;
            } | undefined;
            banInfo?: {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
            gallery?: {
                body?: string | undefined;
                domain?: string | undefined;
                url?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        input?: ({
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } & {
            config?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["input"]["config"], string | number>]: never; }) | undefined;
            prev?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_1 in Exclude<keyof I["input"]["prev"], string | number>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["input"], "$type" | keyof StepInput>]: never; }) | undefined;
        post?: ({
            allAwardings?: {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] | undefined;
            allowLiveComments?: boolean | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: {
                e?: string | undefined;
                t?: string | undefined;
            }[] | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: string[] | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            category?: string | undefined;
            clicked?: boolean | undefined;
            contentCategories?: string[] | undefined;
            contestMode?: boolean | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            discussionType?: string | undefined;
            distinguished?: string | undefined;
            domain?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } | undefined;
            hidden?: boolean | undefined;
            hideScore?: boolean | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isCreatedFromAdsUi?: boolean | undefined;
            isCrosspostable?: boolean | undefined;
            isMeta?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isRedditMediaDomain?: boolean | undefined;
            isRobotIndexable?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            likes?: boolean | undefined;
            linkFlairBackgroundColor?: string | undefined;
            linkFlairCssClass?: string | undefined;
            linkFlairRichtext?: string[] | undefined;
            linkFlairTextColor?: string | undefined;
            linkFlairText?: string | undefined;
            linkFlairType?: string | undefined;
            locked?: boolean | undefined;
            mediaEmbed?: {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } | undefined;
            mediaOnly?: boolean | undefined;
            media?: {
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: any[][] | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numComments?: number | undefined;
            numCrossposts?: number | undefined;
            numDuplicates?: number | undefined;
            numReports?: number | undefined;
            over18?: boolean | undefined;
            parentWhitelistStatus?: string | undefined;
            permalink?: string | undefined;
            pinned?: boolean | undefined;
            postHint?: string | undefined;
            preview?: {
                enabled?: boolean | undefined;
                images?: {
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            pwls?: number | undefined;
            quarantine?: boolean | undefined;
            removalReason?: string | undefined;
            removedByCategory?: string | undefined;
            removedBy?: string | undefined;
            removed?: boolean | undefined;
            reportReasons?: string[] | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            secureMediaEmbed?: {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } | undefined;
            secureMedia?: {
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } | undefined;
            selftextHtml?: string | undefined;
            selftext?: string | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            spoiler?: boolean | undefined;
            stickied?: boolean | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditSubscribers?: number | undefined;
            subredditType?: string | undefined;
            subreddit?: string | undefined;
            suggestedSort?: string | undefined;
            thumbnailHeight?: number | undefined;
            thumbnailWidth?: number | undefined;
            thumbnail?: string | undefined;
            title?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: string[] | undefined;
            ups?: number | undefined;
            upvoteRatio?: number | undefined;
            urlOverriddenByDest?: string | undefined;
            url?: string | undefined;
            userReports?: any[][] | undefined;
            viewCount?: number | undefined;
            visited?: boolean | undefined;
            whitelistStatus?: string | undefined;
            wls?: number | undefined;
            linkFlairTemplateId?: string | undefined;
            crowdControlLevel?: number | undefined;
            isGallery?: boolean | undefined;
            isLiveStream?: boolean | undefined;
            isMetaDiscussion?: boolean | undefined;
            oembed?: {
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                description?: string | undefined;
                title?: string | undefined;
            } | undefined;
            banInfo?: {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
            gallery?: {
                body?: string | undefined;
                domain?: string | undefined;
                url?: string | undefined;
            } | undefined;
        } & {
            allAwardings?: ({
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[] & ({
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            } & {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] & ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & { [K_3 in Exclude<keyof I["post"]["allAwardings"][number]["resizedIcons"][number], "$type" | keyof import("../../../reddit/common.js").Awarding_Icon>]: never; })[] & { [K_4 in Exclude<keyof I["post"]["allAwardings"][number]["resizedIcons"], "$type" | keyof {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[]>]: never; }) | undefined;
                resizedStaticIcons?: ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] & ({
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                } & { [K_5 in Exclude<keyof I["post"]["allAwardings"][number]["resizedStaticIcons"][number], "$type" | keyof import("../../../reddit/common.js").Awarding_Icon>]: never; })[] & { [K_6 in Exclude<keyof I["post"]["allAwardings"][number]["resizedStaticIcons"], "$type" | keyof {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[]>]: never; }) | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            } & { [K_7 in Exclude<keyof I["post"]["allAwardings"][number], "$type" | keyof import("../../../reddit/common.js").Awarding>]: never; })[] & { [K_8 in Exclude<keyof I["post"]["allAwardings"], "$type" | keyof {
                awardSubType?: string | undefined;
                awardType?: string | undefined;
                awardingsRequiredToGrantBenefits?: number | undefined;
                coinPrice?: number | undefined;
                coinReward?: number | undefined;
                count?: number | undefined;
                daysOfDripExtension?: number | undefined;
                daysOfPremium?: number | undefined;
                description?: string | undefined;
                endDate?: string | undefined;
                giverCoinReward?: number | undefined;
                iconFormat?: string | undefined;
                iconHeight?: number | undefined;
                iconUrl?: string | undefined;
                iconWidth?: number | undefined;
                id?: string | undefined;
                isEnabled?: boolean | undefined;
                isNew?: boolean | undefined;
                name?: string | undefined;
                pennyDonate?: number | undefined;
                pennyPrice?: number | undefined;
                resizedIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                resizedStaticIcons?: {
                    height?: number | undefined;
                    url?: string | undefined;
                    width?: number | undefined;
                }[] | undefined;
                startDate?: string | undefined;
                staticIconHeight?: number | undefined;
                staticIconUrl?: string | undefined;
                staticIconWidth?: number | undefined;
                stickyDurationSeconds?: number | undefined;
                subredditCoinReward?: number | undefined;
                subredditId?: string | undefined;
                tiersByRequiredAwardings?: string | undefined;
            }[]>]: never; }) | undefined;
            allowLiveComments?: boolean | undefined;
            approved?: boolean | undefined;
            approvedAtUtc?: number | undefined;
            approvedBy?: string | undefined;
            archived?: boolean | undefined;
            author?: string | undefined;
            authorFlairBackgroundColor?: string | undefined;
            authorFlairCssClass?: string | undefined;
            authorFlairRichtext?: ({
                e?: string | undefined;
                t?: string | undefined;
            }[] & ({
                e?: string | undefined;
                t?: string | undefined;
            } & {
                e?: string | undefined;
                t?: string | undefined;
            } & { [K_9 in Exclude<keyof I["post"]["authorFlairRichtext"][number], "$type" | keyof import("../../../reddit/common.js").AuthorFlairRichText>]: never; })[] & { [K_10 in Exclude<keyof I["post"]["authorFlairRichtext"], "$type" | keyof {
                e?: string | undefined;
                t?: string | undefined;
            }[]>]: never; }) | undefined;
            authorFlairTemplateId?: string | undefined;
            authorFlairText?: string | undefined;
            authorFlairTextColor?: string | undefined;
            authorFlairType?: string | undefined;
            authorFullname?: string | undefined;
            authorIsBlocked?: boolean | undefined;
            authorPatreonFlair?: boolean | undefined;
            authorPremium?: boolean | undefined;
            awarders?: (string[] & string[] & { [K_11 in Exclude<keyof I["post"]["awarders"], "$type" | keyof string[]>]: never; }) | undefined;
            bannedAtUtc?: number | undefined;
            bannedBy?: string | undefined;
            canGild?: boolean | undefined;
            canModPost?: boolean | undefined;
            category?: string | undefined;
            clicked?: boolean | undefined;
            contentCategories?: (string[] & string[] & { [K_12 in Exclude<keyof I["post"]["contentCategories"], "$type" | keyof string[]>]: never; }) | undefined;
            contestMode?: boolean | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            discussionType?: string | undefined;
            distinguished?: string | undefined;
            domain?: string | undefined;
            downs?: number | undefined;
            edited?: boolean | undefined;
            gilded?: number | undefined;
            gildings?: ({
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } & {
                gid1?: number | undefined;
                gid2?: number | undefined;
                gid3?: number | undefined;
            } & { [K_13 in Exclude<keyof I["post"]["gildings"], "$type" | keyof import("../../../reddit/common.js").Gildings>]: never; }) | undefined;
            hidden?: boolean | undefined;
            hideScore?: boolean | undefined;
            id?: string | undefined;
            ignoreReports?: boolean | undefined;
            isCreatedFromAdsUi?: boolean | undefined;
            isCrosspostable?: boolean | undefined;
            isMeta?: boolean | undefined;
            isOriginalContent?: boolean | undefined;
            isRedditMediaDomain?: boolean | undefined;
            isRobotIndexable?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            likes?: boolean | undefined;
            linkFlairBackgroundColor?: string | undefined;
            linkFlairCssClass?: string | undefined;
            linkFlairRichtext?: (string[] & string[] & { [K_14 in Exclude<keyof I["post"]["linkFlairRichtext"], "$type" | keyof string[]>]: never; }) | undefined;
            linkFlairTextColor?: string | undefined;
            linkFlairText?: string | undefined;
            linkFlairType?: string | undefined;
            locked?: boolean | undefined;
            mediaEmbed?: ({
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } & {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } & { [K_15 in Exclude<keyof I["post"]["mediaEmbed"], "$type" | keyof import("../../../reddit/common.js").MediaEmbed>]: never; }) | undefined;
            mediaOnly?: boolean | undefined;
            media?: ({
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } & {
                redditVideo?: ({
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } & {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } & { [K_16 in Exclude<keyof I["post"]["media"]["redditVideo"], "$type" | keyof import("../../../reddit/post.js").Media_RedditVideo>]: never; }) | undefined;
            } & { [K_17 in Exclude<keyof I["post"]["media"], "$type" | "redditVideo">]: never; }) | undefined;
            modNote?: string | undefined;
            modReasonBy?: string | undefined;
            modReasonTitle?: string | undefined;
            modReports?: (any[][] & (any[] & any[] & { [K_18 in Exclude<keyof I["post"]["modReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_19 in Exclude<keyof I["post"]["modReports"], "$type" | keyof any[][]>]: never; }) | undefined;
            name?: string | undefined;
            noFollow?: boolean | undefined;
            numComments?: number | undefined;
            numCrossposts?: number | undefined;
            numDuplicates?: number | undefined;
            numReports?: number | undefined;
            over18?: boolean | undefined;
            parentWhitelistStatus?: string | undefined;
            permalink?: string | undefined;
            pinned?: boolean | undefined;
            postHint?: string | undefined;
            preview?: ({
                enabled?: boolean | undefined;
                images?: {
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                }[] | undefined;
            } & {
                enabled?: boolean | undefined;
                images?: ({
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                }[] & ({
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                } & {
                    id?: string | undefined;
                    resolutions?: ({
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] & ({
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & { [K_20 in Exclude<keyof I["post"]["preview"]["images"][number]["resolutions"][number], "$type" | keyof import("../../../reddit/post.js").Preview_PreviewImage_Image>]: never; })[] & { [K_21 in Exclude<keyof I["post"]["preview"]["images"][number]["resolutions"], "$type" | keyof {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[]>]: never; }) | undefined;
                    source?: ({
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & { [K_22 in Exclude<keyof I["post"]["preview"]["images"][number]["source"], "$type" | keyof import("../../../reddit/post.js").Preview_PreviewImage_Image>]: never; }) | undefined;
                    variants?: ({
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } & { [K_23 in Exclude<keyof I["post"]["preview"]["images"][number]["variants"], "$type" | keyof import("../../../reddit/post.js").Preview_PreviewImage_Image>]: never; }) | undefined;
                } & { [K_24 in Exclude<keyof I["post"]["preview"]["images"][number], "$type" | keyof import("../../../reddit/post.js").Preview_PreviewImage>]: never; })[] & { [K_25 in Exclude<keyof I["post"]["preview"]["images"], "$type" | keyof {
                    id?: string | undefined;
                    resolutions?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    }[] | undefined;
                    source?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                    variants?: {
                        height?: number | undefined;
                        url?: string | undefined;
                        width?: number | undefined;
                    } | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_26 in Exclude<keyof I["post"]["preview"], "$type" | keyof import("../../../reddit/post.js").Preview>]: never; }) | undefined;
            pwls?: number | undefined;
            quarantine?: boolean | undefined;
            removalReason?: string | undefined;
            removedByCategory?: string | undefined;
            removedBy?: string | undefined;
            removed?: boolean | undefined;
            reportReasons?: (string[] & string[] & { [K_27 in Exclude<keyof I["post"]["reportReasons"], "$type" | keyof string[]>]: never; }) | undefined;
            rteMode?: string | undefined;
            saved?: boolean | undefined;
            score?: number | undefined;
            secureMediaEmbed?: ({
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } & {
                content?: string | undefined;
                width?: number | undefined;
                height?: number | undefined;
                sandbox?: boolean | undefined;
                scrolling?: boolean | undefined;
                publicThumbnailUrl?: string | undefined;
            } & { [K_28 in Exclude<keyof I["post"]["secureMediaEmbed"], "$type" | keyof import("../../../reddit/common.js").MediaEmbed>]: never; }) | undefined;
            secureMedia?: ({
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } | undefined;
            } & {
                redditVideo?: ({
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } & {
                    bitrateKbps?: number | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    scrubberMediaUrl?: string | undefined;
                    transcodingStatus?: string | undefined;
                    width?: number | undefined;
                } & { [K_29 in Exclude<keyof I["post"]["secureMedia"]["redditVideo"], "$type" | keyof import("../../../reddit/post.js").Media_RedditVideo>]: never; }) | undefined;
            } & { [K_30 in Exclude<keyof I["post"]["secureMedia"], "$type" | "redditVideo">]: never; }) | undefined;
            selftextHtml?: string | undefined;
            selftext?: string | undefined;
            sendReplies?: boolean | undefined;
            spam?: boolean | undefined;
            spoiler?: boolean | undefined;
            stickied?: boolean | undefined;
            subredditId?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            subredditSubscribers?: number | undefined;
            subredditType?: string | undefined;
            subreddit?: string | undefined;
            suggestedSort?: string | undefined;
            thumbnailHeight?: number | undefined;
            thumbnailWidth?: number | undefined;
            thumbnail?: string | undefined;
            title?: string | undefined;
            topAwardedType?: string | undefined;
            totalAwardsReceived?: number | undefined;
            treatmentTags?: (string[] & string[] & { [K_31 in Exclude<keyof I["post"]["treatmentTags"], "$type" | keyof string[]>]: never; }) | undefined;
            ups?: number | undefined;
            upvoteRatio?: number | undefined;
            urlOverriddenByDest?: string | undefined;
            url?: string | undefined;
            userReports?: (any[][] & (any[] & any[] & { [K_32 in Exclude<keyof I["post"]["userReports"][number], "$type" | keyof any[]>]: never; })[] & { [K_33 in Exclude<keyof I["post"]["userReports"], "$type" | keyof any[][]>]: never; }) | undefined;
            viewCount?: number | undefined;
            visited?: boolean | undefined;
            whitelistStatus?: string | undefined;
            wls?: number | undefined;
            linkFlairTemplateId?: string | undefined;
            crowdControlLevel?: number | undefined;
            isGallery?: boolean | undefined;
            isLiveStream?: boolean | undefined;
            isMetaDiscussion?: boolean | undefined;
            oembed?: ({
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                description?: string | undefined;
                title?: string | undefined;
            } & {
                authorName?: string | undefined;
                authorUrl?: string | undefined;
                description?: string | undefined;
                title?: string | undefined;
            } & { [K_34 in Exclude<keyof I["post"]["oembed"], "$type" | keyof import("../../../reddit/post.js").OEmbed>]: never; }) | undefined;
            banInfo?: ({
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } & {
                auto?: boolean | undefined;
                bannedAt?: number | undefined;
                banner?: string | undefined;
                moderatorBanned?: boolean | undefined;
                note?: string | undefined;
                unbanner?: string | undefined;
                unbannedAt?: number | undefined;
                resetUsed?: boolean | undefined;
                reasonId?: string | undefined;
                reasonTitle?: string | undefined;
                reasonMessage?: string | undefined;
                reasonBy?: string | undefined;
                modNote?: string | undefined;
                banAllTriggered?: boolean | undefined;
                subredditMessage?: string | undefined;
                removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction | undefined;
            } & { [K_35 in Exclude<keyof I["post"]["banInfo"], "$type" | keyof import("../../../reddit/common.js").BanInfo>]: never; }) | undefined;
            markedSpam?: boolean | undefined;
            verdict?: string | undefined;
            gallery?: ({
                body?: string | undefined;
                domain?: string | undefined;
                url?: string | undefined;
            } & {
                body?: string | undefined;
                domain?: string | undefined;
                url?: string | undefined;
            } & { [K_36 in Exclude<keyof I["post"]["gallery"], "$type" | keyof import("../../../reddit/post.js").RedditPostGallery>]: never; }) | undefined;
        } & { [K_37 in Exclude<keyof I["post"], "$type" | keyof Post>]: never; }) | undefined;
    } & { [K_38 in Exclude<keyof I, "$type" | keyof StepPostInput>]: never; }>(object: I): StepPostInput;
};
export declare const StepUserInput: {
    $type: "devvit.actor.automation.v1alpha.StepUserInput";
    encode(message: StepUserInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepUserInput;
    fromJSON(object: any): StepUserInput;
    toJSON(message: StepUserInput): unknown;
    fromPartial<I extends {
        input?: {
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } | undefined;
        user?: {
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: number[] | undefined;
            subreddit?: {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } | undefined;
    } & {
        input?: ({
            config?: {
                [x: string]: any;
            } | undefined;
            prev?: {
                [x: string]: any;
            } | undefined;
        } & {
            config?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["input"]["config"], string | number>]: never; }) | undefined;
            prev?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K_1 in Exclude<keyof I["input"]["prev"], string | number>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["input"], "$type" | keyof StepInput>]: never; }) | undefined;
        user?: ({
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: number[] | undefined;
            subreddit?: {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } & {
            acceptChats?: boolean | undefined;
            acceptFollowers?: boolean | undefined;
            acceptPms?: boolean | undefined;
            awardeeKarma?: number | undefined;
            awarderKarma?: number | undefined;
            canCreateSubreddit?: boolean | undefined;
            canEditName?: boolean | undefined;
            coins?: number | undefined;
            commentKarma?: number | undefined;
            created?: number | undefined;
            createdUtc?: number | undefined;
            features?: ({
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                mwebXpromoRevampV3?: {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } & {
                awardsOnStreams?: boolean | undefined;
                canMakeMobileTestBuildPurchases?: boolean | undefined;
                chatGroupRollout?: boolean | undefined;
                chatSubreddit?: boolean | undefined;
                chatUserSettings?: boolean | undefined;
                chat?: boolean | undefined;
                cookieConsentBanner?: boolean | undefined;
                crosspostNotif?: boolean | undefined;
                crowdControlForPost?: boolean | undefined;
                customFeedImage?: boolean | undefined;
                doNotTrack?: boolean | undefined;
                expensiveCoinsPackage?: boolean | undefined;
                isEmailPermissionRequired?: boolean | undefined;
                liveComments?: boolean | undefined;
                liveOrangereds?: boolean | undefined;
                modAwards?: boolean | undefined;
                modServiceMuteReads?: boolean | undefined;
                modServiceMuteWrites?: boolean | undefined;
                modlogCopyrightRemoval?: boolean | undefined;
                mwebNsfwXpromo?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K_3 in Exclude<keyof I["user"]["features"]["mwebNsfwXpromo"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                mwebXpromoRevampV2?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K_4 in Exclude<keyof I["user"]["features"]["mwebXpromoRevampV2"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                mwebXpromoRevampV3?: ({
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & {
                    experimentId?: number | undefined;
                    owner?: string | undefined;
                    variant?: string | undefined;
                } & { [K_5 in Exclude<keyof I["user"]["features"]["mwebXpromoRevampV3"], "$type" | keyof import("../../../reddit/user.js").UserFeatures_Experiment>]: never; }) | undefined;
                noreferrerToNoopener?: boolean | undefined;
                pollsMobile?: boolean | undefined;
                premiumSubscriptionsTable?: boolean | undefined;
                promotedTrendBlanks?: boolean | undefined;
                resizedStylesImages?: boolean | undefined;
                showAmpLink?: boolean | undefined;
                showNpsSurvey?: boolean | undefined;
                spezModal?: boolean | undefined;
                usePrefAccountDeployment?: boolean | undefined;
                userFlairMigrationTesting?: boolean | undefined;
                webhookConfig?: boolean | undefined;
            } & { [K_6 in Exclude<keyof I["user"]["features"], "$type" | keyof import("../../../reddit/user.js").UserFeatures>]: never; }) | undefined;
            forcePasswordReset?: boolean | undefined;
            goldCreddits?: number | undefined;
            goldExpiration?: string | undefined;
            hasAndroidSubscription?: boolean | undefined;
            hasExternalAccount?: boolean | undefined;
            hasGoldSubscription?: boolean | undefined;
            hasIosSubscription?: boolean | undefined;
            hasMail?: boolean | undefined;
            hasModMail?: boolean | undefined;
            hasPaypalSubscription?: boolean | undefined;
            hasStripeSubscription?: boolean | undefined;
            hasSubscribed?: boolean | undefined;
            hasSubscribedToPremium?: boolean | undefined;
            hasVerifiedEmail?: boolean | undefined;
            hasVisitedNewProfile?: boolean | undefined;
            hideFromRobots?: boolean | undefined;
            iconImg?: string | undefined;
            id?: string | undefined;
            inBeta?: boolean | undefined;
            inChat?: boolean | undefined;
            inRedesignBeta?: boolean | undefined;
            inboxCount?: number | undefined;
            isBlocked?: boolean | undefined;
            isEmployee?: boolean | undefined;
            isFriend?: boolean | undefined;
            isGold?: boolean | undefined;
            isMod?: boolean | undefined;
            isSponsor?: boolean | undefined;
            isSuspended?: boolean | undefined;
            linkKarma?: number | undefined;
            modhash?: string | undefined;
            name?: string | undefined;
            newModmailExists?: boolean | undefined;
            numFriends?: number | undefined;
            over18?: boolean | undefined;
            passwordSet?: boolean | undefined;
            prefAutoplay?: boolean | undefined;
            prefClickgadget?: number | undefined;
            prefGeopopular?: string | undefined;
            prefNightmode?: boolean | undefined;
            prefNoProfanity?: boolean | undefined;
            prefShowPresence?: boolean | undefined;
            prefShowSnoovatar?: boolean | undefined;
            prefShowTrending?: boolean | undefined;
            prefShowTwitter?: boolean | undefined;
            prefTopKarmaSubreddits?: boolean | undefined;
            prefVideoAutoplay?: boolean | undefined;
            snoovatarImg?: string | undefined;
            snoovatarSize?: (number[] & number[] & { [K_7 in Exclude<keyof I["user"]["snoovatarSize"], "$type" | keyof number[]>]: never; }) | undefined;
            subreddit?: ({
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: string[] | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: number[] | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: {
                    allowedMediaTypes?: string[] | undefined;
                } | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: number[] | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: number[] | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: number[] | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: string[] | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: {
                    e?: string | undefined;
                    t?: string | undefined;
                }[] | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: {
                    bodyRestrictionPolicy?: string | undefined;
                } | undefined;
                userIsMuted?: boolean | undefined;
            } & {
                acceptFollowers?: boolean | undefined;
                accountsActiveIsFuzzed?: boolean | undefined;
                accountsActive?: number | undefined;
                activeUserCount?: number | undefined;
                advertiserCategory?: string | undefined;
                allOriginalContent?: boolean | undefined;
                allowChatPostCreation?: boolean | undefined;
                allowDiscovery?: boolean | undefined;
                allowGalleries?: boolean | undefined;
                allowImages?: boolean | undefined;
                allowPolls?: boolean | undefined;
                allowPredictionContributors?: boolean | undefined;
                allowPredictionsTournament?: boolean | undefined;
                allowPredictions?: boolean | undefined;
                allowTalks?: boolean | undefined;
                allowVideogifs?: boolean | undefined;
                allowVideos?: boolean | undefined;
                allowedMediaInComments?: (string[] & string[] & { [K_8 in Exclude<keyof I["user"]["subreddit"]["allowedMediaInComments"], "$type" | keyof string[]>]: never; }) | undefined;
                bannerBackgroundColor?: string | undefined;
                bannerBackgroundImage?: string | undefined;
                bannerImg?: string | undefined;
                bannerSize?: (number[] & number[] & { [K_9 in Exclude<keyof I["user"]["subreddit"]["bannerSize"], "$type" | keyof number[]>]: never; }) | undefined;
                canAssignLinkFlair?: boolean | undefined;
                canAssignUserFlair?: boolean | undefined;
                coins?: number | undefined;
                collapseDeletedComments?: boolean | undefined;
                commentContributionSettings?: ({
                    allowedMediaTypes?: string[] | undefined;
                } & {
                    allowedMediaTypes?: (string[] & string[] & { [K_10 in Exclude<keyof I["user"]["subreddit"]["commentContributionSettings"]["allowedMediaTypes"], "$type" | keyof string[]>]: never; }) | undefined;
                } & { [K_11 in Exclude<keyof I["user"]["subreddit"]["commentContributionSettings"], "$type" | "allowedMediaTypes">]: never; }) | undefined;
                commentScoreHideMins?: number | undefined;
                communityIcon?: string | undefined;
                communityReviewed?: boolean | undefined;
                contentCategory?: string | undefined;
                createdUtc?: number | undefined;
                created?: number | undefined;
                defaultSet?: boolean | undefined;
                description?: string | undefined;
                descriptionHtml?: string | undefined;
                disableContributorRequests?: boolean | undefined;
                displayName?: string | undefined;
                displayNamePrefixed?: string | undefined;
                emojisCustomSize?: (number[] & number[] & { [K_12 in Exclude<keyof I["user"]["subreddit"]["emojisCustomSize"], "$type" | keyof number[]>]: never; }) | undefined;
                emojisEnabled?: boolean | undefined;
                freeFormReports?: boolean | undefined;
                hasMenuWidget?: boolean | undefined;
                headerImg?: string | undefined;
                headerSize?: (number[] & number[] & { [K_13 in Exclude<keyof I["user"]["subreddit"]["headerSize"], "$type" | keyof number[]>]: never; }) | undefined;
                headerTitle?: string | undefined;
                hideAds?: boolean | undefined;
                iconColor?: string | undefined;
                iconImg?: string | undefined;
                iconSize?: (number[] & number[] & { [K_14 in Exclude<keyof I["user"]["subreddit"]["iconSize"], "$type" | keyof number[]>]: never; }) | undefined;
                id?: string | undefined;
                isChatPostFeatureEnabled?: boolean | undefined;
                isCrosspostableSubreddit?: boolean | undefined;
                isDefaultBanner?: boolean | undefined;
                isDefaultIcon?: boolean | undefined;
                isEnrolledInNewModmail?: boolean | undefined;
                keyColor?: string | undefined;
                lang?: string | undefined;
                linkFlairEnabled?: boolean | undefined;
                linkFlairPosition?: string | undefined;
                mobileBannerImage?: string | undefined;
                name?: string | undefined;
                notificationLevel?: string | undefined;
                originalContentTagEnabled?: string | undefined;
                over18?: boolean | undefined;
                predictionLeaderboardEntryType?: string | undefined;
                previousNames?: (string[] & string[] & { [K_15 in Exclude<keyof I["user"]["subreddit"]["previousNames"], "$type" | keyof string[]>]: never; }) | undefined;
                primaryColor?: string | undefined;
                publicDescription?: string | undefined;
                publicDescriptionHtml?: string | undefined;
                publicTraffic?: boolean | undefined;
                quarantine?: boolean | undefined;
                restrictCommenting?: boolean | undefined;
                restrictPosting?: boolean | undefined;
                shouldArchivePosts?: boolean | undefined;
                shouldShowMediaInCommentsSetting?: boolean | undefined;
                showMedia?: boolean | undefined;
                showMediaPreview?: boolean | undefined;
                spoilersEnabled?: boolean | undefined;
                submissionType?: string | undefined;
                submitLinkLabel?: string | undefined;
                submitText?: string | undefined;
                submitTextHtml?: string | undefined;
                submitTextLabel?: string | undefined;
                subredditType?: string | undefined;
                subscribers?: number | undefined;
                suggestedCommentSort?: string | undefined;
                title?: string | undefined;
                url?: string | undefined;
                userCanFlairInSr?: boolean | undefined;
                userFlairBackgroundColor?: string | undefined;
                userFlairCssClass?: string | undefined;
                userFlairEnabledInSr?: boolean | undefined;
                userFlairPosition?: string | undefined;
                userFlairRichtext?: ({
                    e?: string | undefined;
                    t?: string | undefined;
                }[] & ({
                    e?: string | undefined;
                    t?: string | undefined;
                } & {
                    e?: string | undefined;
                    t?: string | undefined;
                } & { [K_16 in Exclude<keyof I["user"]["subreddit"]["userFlairRichtext"][number], "$type" | keyof import("../../../reddit/common.js").UserFlairRichtext>]: never; })[] & { [K_17 in Exclude<keyof I["user"]["subreddit"]["userFlairRichtext"], "$type" | keyof {
                    e?: string | undefined;
                    t?: string | undefined;
                }[]>]: never; }) | undefined;
                userFlairTemplateId?: string | undefined;
                userFlairText?: string | undefined;
                userFlairTextColor?: string | undefined;
                userFlairType?: string | undefined;
                userHasFavorited?: boolean | undefined;
                userIsBanned?: boolean | undefined;
                userIsContributor?: boolean | undefined;
                userIsModerator?: boolean | undefined;
                userIsSubscriber?: boolean | undefined;
                userSrFlairEnabled?: boolean | undefined;
                userSrThemeEnabled?: boolean | undefined;
                videostreamLinksCount?: number | undefined;
                whitelistStatus?: string | undefined;
                wikiEnabled?: boolean | undefined;
                wls?: number | undefined;
                markedSpam?: boolean | undefined;
                postRequirements?: ({
                    bodyRestrictionPolicy?: string | undefined;
                } & {
                    bodyRestrictionPolicy?: string | undefined;
                } & { [K_18 in Exclude<keyof I["user"]["subreddit"]["postRequirements"], "$type" | "bodyRestrictionPolicy">]: never; }) | undefined;
                userIsMuted?: boolean | undefined;
            } & { [K_19 in Exclude<keyof I["user"]["subreddit"], "$type" | keyof import("../../../reddit/subreddit.js").Subreddit>]: never; }) | undefined;
            suspensionExpirationUtc?: string | undefined;
            totalKarma?: number | undefined;
            verified?: boolean | undefined;
            hasPhoneNumber?: boolean | undefined;
            subredditsModerated?: number | undefined;
            hasMetaSubscription?: boolean | undefined;
            metaSubscriptionAge?: number | undefined;
            metaPointsBalance?: string | undefined;
            metaLockedPointsBalance?: string | undefined;
            commentSubredditKarma?: number | undefined;
            postSubredditKarma?: number | undefined;
            markedSpam?: boolean | undefined;
            isSubredditProxyAccount?: boolean | undefined;
        } & { [K_20 in Exclude<keyof I["user"], "$type" | keyof User>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I, "$type" | keyof StepUserInput>]: never; }>(object: I): StepUserInput;
};
export declare const StepResult: {
    $type: "devvit.actor.automation.v1alpha.StepResult";
    encode(message: StepResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepResult;
    fromJSON(object: any): StepResult;
    toJSON(message: StepResult): unknown;
    fromPartial<I extends {
        output?: {
            [x: string]: any;
        } | undefined;
        stop?: boolean | undefined;
    } & {
        output?: ({
            [x: string]: any;
        } & {
            [x: string]: any;
        } & { [K in Exclude<keyof I["output"], string | number>]: never; }) | undefined;
        stop?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof StepResult>]: never; }>(object: I): StepResult;
};
export declare const StepReport: {
    $type: "devvit.actor.automation.v1alpha.StepReport";
    encode(message: StepReport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepReport;
    fromJSON(object: any): StepReport;
    toJSON(message: StepReport): unknown;
    fromPartial<I extends {
        actor?: string | undefined;
        message?: string | undefined;
        duration?: number | undefined;
        success?: boolean | undefined;
        data?: {
            output?: {
                [x: string]: any;
            } | undefined;
            stop?: boolean | undefined;
        } | undefined;
    } & {
        actor?: string | undefined;
        message?: string | undefined;
        duration?: number | undefined;
        success?: boolean | undefined;
        data?: ({
            output?: {
                [x: string]: any;
            } | undefined;
            stop?: boolean | undefined;
        } & {
            output?: ({
                [x: string]: any;
            } & {
                [x: string]: any;
            } & { [K in Exclude<keyof I["data"]["output"], string | number>]: never; }) | undefined;
            stop?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["data"], "$type" | keyof StepResult>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof StepReport>]: never; }>(object: I): StepReport;
};
/** Interface for an step that will receive a comment as input and be executed from the AutomationEngine. */
export interface CommentStep {
    Invoke(request: StepCommentInput, metadata?: Metadata): Promise<StepResult>;
}
export declare class CommentStepClientImpl implements CommentStep {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Invoke(request: StepCommentInput): Promise<StepResult>;
}
/** Interface for an step that will receive a comment as input and be executed from the AutomationEngine. */
export type CommentStepDefinition = typeof CommentStepDefinition;
export declare const CommentStepDefinition: {
    name: 'CommentStep';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
/** Interface for an step that will receive a post as input and be executed from the AutomationEngine. */
export interface PostStep {
    Invoke(request: StepPostInput, metadata?: Metadata): Promise<StepResult>;
}
export declare class PostStepClientImpl implements PostStep {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Invoke(request: StepPostInput): Promise<StepResult>;
}
/** Interface for an step that will receive a post as input and be executed from the AutomationEngine. */
export type PostStepDefinition = typeof PostStepDefinition;
export declare const PostStepDefinition: {
    name: 'PostStep';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
/** Interface for an step that will receive a user as input and be executed from the AutomationEngine. */
export interface UserStep {
    Invoke(request: StepUserInput, metadata?: Metadata): Promise<StepResult>;
}
export declare class UserStepClientImpl implements UserStep {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Invoke(request: StepUserInput): Promise<StepResult>;
}
/** Interface for an step that will receive a user as input and be executed from the AutomationEngine. */
export type UserStepDefinition = typeof UserStepDefinition;
export declare const UserStepDefinition: {
    name: 'UserStep';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=step.d.ts.map
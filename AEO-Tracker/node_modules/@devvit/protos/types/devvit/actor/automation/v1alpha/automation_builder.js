/**
 * #automation_builder.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { ConfigForm } from '../../user_configurable/user_configurable.js';
import { Automation } from './automation.js';
import { Trigger, triggerTypeFromJSON, triggerTypeToJSON } from './trigger.js';
/** The type of step it is. Used to filter list request */
export var StepType;
(function (StepType) {
    /** ACTION - Action type step */
    StepType[StepType["ACTION"] = 0] = "ACTION";
    /** FILTER - Filter type step1 */
    StepType[StepType["FILTER"] = 1] = "FILTER";
    StepType[StepType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StepType || (StepType = {}));
export function stepTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTION":
            return StepType.ACTION;
        case 1:
        case "FILTER":
            return StepType.FILTER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StepType.UNRECOGNIZED;
    }
}
export function stepTypeToJSON(object) {
    switch (object) {
        case StepType.ACTION:
            return 0;
        case StepType.FILTER:
            return 1;
        case StepType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseGetTriggersRequest() {
    return {};
}
export const GetTriggersRequest = {
    $type: "devvit.actor.automation.v1alpha.GetTriggersRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTriggersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetTriggersRequest();
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.GetTriggersRequest", GetTriggersRequest);
function createBaseListStepsRequest() {
    return { location: "", triggerType: 0, stepType: 0 };
}
export const ListStepsRequest = {
    $type: "devvit.actor.automation.v1alpha.ListStepsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.location !== "") {
            writer.uint32(10).string(message.location);
        }
        if (message.triggerType !== 0) {
            writer.uint32(16).int32(message.triggerType);
        }
        if (message.stepType !== 0) {
            writer.uint32(24).int32(message.stepType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListStepsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.location = reader.string();
                    break;
                case 2:
                    message.triggerType = reader.int32();
                    break;
                case 3:
                    message.stepType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            location: isSet(object.location) ? String(object.location) : "",
            triggerType: isSet(object.triggerType) ? triggerTypeFromJSON(object.triggerType) : 0,
            stepType: isSet(object.stepType) ? stepTypeFromJSON(object.stepType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.location !== undefined && (obj.location = message.location);
        message.triggerType !== undefined && (obj.triggerType = triggerTypeToJSON(message.triggerType));
        message.stepType !== undefined && (obj.stepType = stepTypeToJSON(message.stepType));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseListStepsRequest();
        message.location = object.location ?? "";
        message.triggerType = object.triggerType ?? 0;
        message.stepType = object.stepType ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.ListStepsRequest", ListStepsRequest);
function createBaseListAutomationRequest() {
    return { location: "" };
}
export const ListAutomationRequest = {
    $type: "devvit.actor.automation.v1alpha.ListAutomationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.location !== "") {
            writer.uint32(10).string(message.location);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAutomationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.location = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { location: isSet(object.location) ? String(object.location) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.location !== undefined && (obj.location = message.location);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseListAutomationRequest();
        message.location = object.location ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.ListAutomationRequest", ListAutomationRequest);
function createBaseStepActor() {
    return { actor: "", label: "", description: "", type: 0 };
}
export const StepActor = {
    $type: "devvit.actor.automation.v1alpha.StepActor",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== "") {
            writer.uint32(10).string(message.actor);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStepActor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actor = reader.string();
                    break;
                case 2:
                    message.label = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? String(object.actor) : "",
            label: isSet(object.label) ? String(object.label) : "",
            description: isSet(object.description) ? String(object.description) : "",
            type: isSet(object.type) ? stepTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.actor !== undefined && (obj.actor = message.actor);
        message.label !== undefined && (obj.label = message.label);
        message.description !== undefined && (obj.description = message.description);
        message.type !== undefined && (obj.type = stepTypeToJSON(message.type));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStepActor();
        message.actor = object.actor ?? "";
        message.label = object.label ?? "";
        message.description = object.description ?? "";
        message.type = object.type ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.StepActor", StepActor);
function createBaseActorList() {
    return { actors: [] };
}
export const ActorList = {
    $type: "devvit.actor.automation.v1alpha.ActorList",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.actors) {
            StepActor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actors.push(StepActor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { actors: Array.isArray(object?.actors) ? object.actors.map((e) => StepActor.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.actors) {
            obj.actors = message.actors.map((e) => e ? StepActor.toJSON(e) : undefined);
        }
        else {
            obj.actors = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseActorList();
        message.actors = object.actors?.map((e) => StepActor.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.ActorList", ActorList);
function createBaseAutomationList() {
    return { automations: [] };
}
export const AutomationList = {
    $type: "devvit.actor.automation.v1alpha.AutomationList",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.automations) {
            Automation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.automations.push(Automation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            automations: Array.isArray(object?.automations) ? object.automations.map((e) => Automation.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.automations) {
            obj.automations = message.automations.map((e) => e ? Automation.toJSON(e) : undefined);
        }
        else {
            obj.automations = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAutomationList();
        message.automations = object.automations?.map((e) => Automation.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.AutomationList", AutomationList);
function createBaseTriggerList() {
    return { triggers: [] };
}
export const TriggerList = {
    $type: "devvit.actor.automation.v1alpha.TriggerList",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.triggers) {
            Trigger.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.triggers.push(Trigger.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { triggers: Array.isArray(object?.triggers) ? object.triggers.map((e) => Trigger.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.triggers) {
            obj.triggers = message.triggers.map((e) => e ? Trigger.toJSON(e) : undefined);
        }
        else {
            obj.triggers = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerList();
        message.triggers = object.triggers?.map((e) => Trigger.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.TriggerList", TriggerList);
function createBaseUpdateAutomationRequest() {
    return { automation: undefined, location: "" };
}
export const UpdateAutomationRequest = {
    $type: "devvit.actor.automation.v1alpha.UpdateAutomationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.automation !== undefined) {
            Automation.encode(message.automation, writer.uint32(10).fork()).ldelim();
        }
        if (message.location !== "") {
            writer.uint32(18).string(message.location);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAutomationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.automation = Automation.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.location = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            automation: isSet(object.automation) ? Automation.fromJSON(object.automation) : undefined,
            location: isSet(object.location) ? String(object.location) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.automation !== undefined &&
            (obj.automation = message.automation ? Automation.toJSON(message.automation) : undefined);
        message.location !== undefined && (obj.location = message.location);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUpdateAutomationRequest();
        message.automation = (object.automation !== undefined && object.automation !== null)
            ? Automation.fromPartial(object.automation)
            : undefined;
        message.location = object.location ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.UpdateAutomationRequest", UpdateAutomationRequest);
function createBaseGetStepFormRequest() {
    return { actor: "" };
}
export const GetStepFormRequest = {
    $type: "devvit.actor.automation.v1alpha.GetStepFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== "") {
            writer.uint32(10).string(message.actor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetStepFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { actor: isSet(object.actor) ? String(object.actor) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.actor !== undefined && (obj.actor = message.actor);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetStepFormRequest();
        message.actor = object.actor ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.automation.v1alpha.GetStepFormRequest", GetStepFormRequest);
export class AutomationBuilderClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.automation.v1alpha.AutomationBuilder";
        this.rpc = rpc;
        this.GetTriggers = this.GetTriggers.bind(this);
        this.ListSteps = this.ListSteps.bind(this);
        this.ListAutomations = this.ListAutomations.bind(this);
        this.UpdateAutomation = this.UpdateAutomation.bind(this);
        this.GetStepForm = this.GetStepForm.bind(this);
    }
    GetTriggers(request) {
        const data = GetTriggersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetTriggers", data);
        return promise.then((data) => TriggerList.decode(new _m0.Reader(data)));
    }
    ListSteps(request) {
        const data = ListStepsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListSteps", data);
        return promise.then((data) => ActorList.decode(new _m0.Reader(data)));
    }
    ListAutomations(request) {
        const data = ListAutomationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListAutomations", data);
        return promise.then((data) => AutomationList.decode(new _m0.Reader(data)));
    }
    UpdateAutomation(request) {
        const data = UpdateAutomationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateAutomation", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    GetStepForm(request) {
        const data = GetStepFormRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStepForm", data);
        return promise.then((data) => ConfigForm.decode(new _m0.Reader(data)));
    }
}
export const AutomationBuilderDefinition = {
    name: "AutomationBuilder",
    fullName: "devvit.actor.automation.v1alpha.AutomationBuilder",
    methods: {
        /** Looks up all registered Triggers from the database */
        getTriggers: {
            name: "GetTriggers",
            requestType: GetTriggersRequest,
            requestStream: false,
            responseType: TriggerList,
            responseStream: false,
            options: {},
        },
        /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
        listSteps: {
            name: "ListSteps",
            requestType: ListStepsRequest,
            requestStream: false,
            responseType: ActorList,
            responseStream: false,
            options: {},
        },
        /** Get all automations for a given location (subreddit) */
        listAutomations: {
            name: "ListAutomations",
            requestType: ListAutomationRequest,
            requestStream: false,
            responseType: AutomationList,
            responseStream: false,
            options: {},
        },
        /** Updates an automation. Will create a new automation if ID isn't set */
        updateAutomation: {
            name: "UpdateAutomation",
            requestType: UpdateAutomationRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** Get form layout for step */
        getStepForm: {
            name: "GetStepForm",
            requestType: GetStepFormRequest,
            requestStream: false,
            responseType: ConfigForm,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

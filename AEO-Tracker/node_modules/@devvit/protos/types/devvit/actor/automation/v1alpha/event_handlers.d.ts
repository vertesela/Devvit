/**
 * #event_handlers.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { AccountDelete, AppInstall, AppUpgrade, CommentApprove, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostApprove, PostCreate, PostDelete, PostFlairUpdate, PostReport, PostSubmit, PostUpdate, SubredditSubscribe } from '../../../events/v1alpha/events.js';
import { ModAction } from '../../../reddit/v2alpha/modaction.js';
import { ModMail } from '../../../reddit/v2alpha/modmail.js';
/** This needs to rectified with StepResult at some point */
export interface HandlerResult {
}
export declare const HandlerResult: {
    $type: "devvit.actor.automation.v1alpha.HandlerResult";
    encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
    fromJSON(_: any): HandlerResult;
    toJSON(_: HandlerResult): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): HandlerResult;
};
export interface OnPostSubmit {
    OnPostSubmit(request: PostSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostSubmitClientImpl implements OnPostSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostSubmit(request: PostSubmit): Promise<HandlerResult>;
}
export type OnPostSubmitDefinition = typeof OnPostSubmitDefinition;
export declare const OnPostSubmitDefinition: {
    name: 'OnPostSubmit';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostCreate {
    OnPostCreate(request: PostCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostCreateClientImpl implements OnPostCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostCreate(request: PostCreate): Promise<HandlerResult>;
}
export type OnPostCreateDefinition = typeof OnPostCreateDefinition;
export declare const OnPostCreateDefinition: {
    name: 'OnPostCreate';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostUpdate {
    OnPostUpdate(request: PostUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostUpdateClientImpl implements OnPostUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostUpdate(request: PostUpdate): Promise<HandlerResult>;
}
export type OnPostUpdateDefinition = typeof OnPostUpdateDefinition;
export declare const OnPostUpdateDefinition: {
    name: 'OnPostUpdate';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostReport {
    OnPostReport(request: PostReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostReportClientImpl implements OnPostReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostReport(request: PostReport): Promise<HandlerResult>;
}
export type OnPostReportDefinition = typeof OnPostReportDefinition;
export declare const OnPostReportDefinition: {
    name: 'OnPostReport';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostFlairUpdate {
    OnPostFlairUpdate(request: PostFlairUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostFlairUpdateClientImpl implements OnPostFlairUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostFlairUpdate(request: PostFlairUpdate): Promise<HandlerResult>;
}
export type OnPostFlairUpdateDefinition = typeof OnPostFlairUpdateDefinition;
export declare const OnPostFlairUpdateDefinition: {
    name: 'OnPostFlairUpdate';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostDelete {
    OnPostDelete(request: PostDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostDeleteClientImpl implements OnPostDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostDelete(request: PostDelete): Promise<HandlerResult>;
}
export type OnPostDeleteDefinition = typeof OnPostDeleteDefinition;
export declare const OnPostDeleteDefinition: {
    name: 'OnPostDelete';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnPostApprove {
    OnPostApprove(request: PostApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnPostApproveClientImpl implements OnPostApprove {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostApprove(request: PostApprove): Promise<HandlerResult>;
}
export type OnPostApproveDefinition = typeof OnPostApproveDefinition;
export declare const OnPostApproveDefinition: {
    name: 'OnPostApprove';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentSubmit {
    OnCommentSubmit(request: CommentSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentSubmitClientImpl implements OnCommentSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentSubmit(request: CommentSubmit): Promise<HandlerResult>;
}
export type OnCommentSubmitDefinition = typeof OnCommentSubmitDefinition;
export declare const OnCommentSubmitDefinition: {
    name: 'OnCommentSubmit';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentCreate {
    OnCommentCreate(request: CommentCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentCreateClientImpl implements OnCommentCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentCreate(request: CommentCreate): Promise<HandlerResult>;
}
export type OnCommentCreateDefinition = typeof OnCommentCreateDefinition;
export declare const OnCommentCreateDefinition: {
    name: 'OnCommentCreate';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentUpdate {
    OnCommentUpdate(request: CommentUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentUpdateClientImpl implements OnCommentUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentUpdate(request: CommentUpdate): Promise<HandlerResult>;
}
export type OnCommentUpdateDefinition = typeof OnCommentUpdateDefinition;
export declare const OnCommentUpdateDefinition: {
    name: 'OnCommentUpdate';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentReport {
    OnCommentReport(request: CommentReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentReportClientImpl implements OnCommentReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentReport(request: CommentReport): Promise<HandlerResult>;
}
export type OnCommentReportDefinition = typeof OnCommentReportDefinition;
export declare const OnCommentReportDefinition: {
    name: 'OnCommentReport';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentDelete {
    OnCommentDelete(request: CommentDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentDeleteClientImpl implements OnCommentDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentDelete(request: CommentDelete): Promise<HandlerResult>;
}
export type OnCommentDeleteDefinition = typeof OnCommentDeleteDefinition;
export declare const OnCommentDeleteDefinition: {
    name: 'OnCommentDelete';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnCommentApprove {
    OnCommentApprove(request: CommentApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnCommentApproveClientImpl implements OnCommentApprove {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentApprove(request: CommentApprove): Promise<HandlerResult>;
}
export type OnCommentApproveDefinition = typeof OnCommentApproveDefinition;
export declare const OnCommentApproveDefinition: {
    name: 'OnCommentApprove';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnSubredditSubscribe {
    OnSubredditSubscribe(request: SubredditSubscribe, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnSubredditSubscribeClientImpl implements OnSubredditSubscribe {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnSubredditSubscribe(request: SubredditSubscribe): Promise<HandlerResult>;
}
export type OnSubredditSubscribeDefinition = typeof OnSubredditSubscribeDefinition;
export declare const OnSubredditSubscribeDefinition: {
    name: 'OnSubredditSubscribe';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnAppInstall {
    OnAppInstall(request: AppInstall, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAppInstallClientImpl implements OnAppInstall {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppInstall(request: AppInstall): Promise<HandlerResult>;
}
export type OnAppInstallDefinition = typeof OnAppInstallDefinition;
export declare const OnAppInstallDefinition: {
    name: 'OnAppInstall';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnAppUpgrade {
    OnAppUpgrade(request: AppUpgrade, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAppUpgradeClientImpl implements OnAppUpgrade {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppUpgrade(request: AppUpgrade): Promise<HandlerResult>;
}
export type OnAppUpgradeDefinition = typeof OnAppUpgradeDefinition;
export declare const OnAppUpgradeDefinition: {
    name: 'OnAppUpgrade';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnModAction {
    OnModAction(request: ModAction, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnModActionClientImpl implements OnModAction {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModAction(request: ModAction): Promise<HandlerResult>;
}
export type OnModActionDefinition = typeof OnModActionDefinition;
export declare const OnModActionDefinition: {
    name: 'OnModAction';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnModMail {
    OnModMail(request: ModMail, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnModMailClientImpl implements OnModMail {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModMail(request: ModMail): Promise<HandlerResult>;
}
export type OnModMailDefinition = typeof OnModMailDefinition;
export declare const OnModMailDefinition: {
    name: 'OnModMail';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface OnAccountDelete {
    OnAccountDelete(request: AccountDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare class OnAccountDeleteClientImpl implements OnAccountDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAccountDelete(request: AccountDelete): Promise<HandlerResult>;
}
export type OnAccountDeleteDefinition = typeof OnAccountDeleteDefinition;
export declare const OnAccountDeleteDefinition: {
    name: 'OnAccountDelete';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=event_handlers.d.ts.map
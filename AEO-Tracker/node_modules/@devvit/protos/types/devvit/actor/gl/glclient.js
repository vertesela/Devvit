/**
 * #glclient.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseConfigMessage() {
    return { width: 0, height: 0 };
}
export const ConfigMessage = {
    $type: "devvit.actor.gl.ConfigMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.width !== 0) {
            writer.uint32(8).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(16).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.width = reader.int32();
                    break;
                case 2:
                    message.height = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            width: isSet(object.width) ? Number(object.width) : 0,
            height: isSet(object.height) ? Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.width !== undefined && (obj.width = Math.round(message.width));
        message.height !== undefined && (obj.height = Math.round(message.height));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseConfigMessage();
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.gl.ConfigMessage", ConfigMessage);
function createBaseTickMessage() {
    return {};
}
export const TickMessage = {
    $type: "devvit.actor.gl.TickMessage",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTickMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseTickMessage();
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.gl.TickMessage", TickMessage);
function createBaseInputMessage() {
    return {};
}
export const InputMessage = {
    $type: "devvit.actor.gl.InputMessage",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInputMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseInputMessage();
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.gl.InputMessage", InputMessage);
export class GLClientClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.gl.GLClient";
        this.rpc = rpc;
        this.OnConfig = this.OnConfig.bind(this);
        this.OnFrameTick = this.OnFrameTick.bind(this);
        this.OnInput = this.OnInput.bind(this);
    }
    OnConfig(request) {
        const data = ConfigMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnConfig", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    OnFrameTick(request) {
        const data = TickMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnFrameTick", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    OnInput(request) {
        const data = InputMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnInput", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const GLClientDefinition = {
    name: "GLClient",
    fullName: "devvit.actor.gl.GLClient",
    methods: {
        onConfig: {
            name: "OnConfig",
            requestType: ConfigMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        onFrameTick: {
            name: "OnFrameTick",
            requestType: TickMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        onInput: {
            name: "OnInput",
            requestType: InputMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

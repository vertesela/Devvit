/**
 * #bot.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseCommandDescription() {
    return { name: "", command: "", description: "", usage: "" };
}
export const CommandDescription = {
    $type: "devvit.actor.bot.CommandDescription",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.command !== "") {
            writer.uint32(18).string(message.command);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.usage !== "") {
            writer.uint32(34).string(message.usage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.command = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.usage = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            command: isSet(object.command) ? String(object.command) : "",
            description: isSet(object.description) ? String(object.description) : "",
            usage: isSet(object.usage) ? String(object.usage) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.command !== undefined && (obj.command = message.command);
        message.description !== undefined && (obj.description = message.description);
        message.usage !== undefined && (obj.usage = message.usage);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommandDescription();
        message.name = object.name ?? "";
        message.command = object.command ?? "";
        message.description = object.description ?? "";
        message.usage = object.usage ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.bot.CommandDescription", CommandDescription);
function createBaseCommandsList() {
    return { commands: [] };
}
export const CommandsList = {
    $type: "devvit.actor.bot.CommandsList",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.commands) {
            CommandDescription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandsList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.commands.push(CommandDescription.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            commands: Array.isArray(object?.commands) ? object.commands.map((e) => CommandDescription.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commands) {
            obj.commands = message.commands.map((e) => e ? CommandDescription.toJSON(e) : undefined);
        }
        else {
            obj.commands = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommandsList();
        message.commands = object.commands?.map((e) => CommandDescription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.bot.CommandsList", CommandsList);
function createBaseCommandContext() {
    return { user: "", subreddit: "", post: "", comment: "" };
}
export const CommandContext = {
    $type: "devvit.actor.bot.CommandContext",
    encode(message, writer = _m0.Writer.create()) {
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        if (message.subreddit !== "") {
            writer.uint32(18).string(message.subreddit);
        }
        if (message.post !== "") {
            writer.uint32(26).string(message.post);
        }
        if (message.comment !== "") {
            writer.uint32(34).string(message.comment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                case 2:
                    message.subreddit = reader.string();
                    break;
                case 3:
                    message.post = reader.string();
                    break;
                case 4:
                    message.comment = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? String(object.user) : "",
            subreddit: isSet(object.subreddit) ? String(object.subreddit) : "",
            post: isSet(object.post) ? String(object.post) : "",
            comment: isSet(object.comment) ? String(object.comment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user);
        message.subreddit !== undefined && (obj.subreddit = message.subreddit);
        message.post !== undefined && (obj.post = message.post);
        message.comment !== undefined && (obj.comment = message.comment);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommandContext();
        message.user = object.user ?? "";
        message.subreddit = object.subreddit ?? "";
        message.post = object.post ?? "";
        message.comment = object.comment ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.bot.CommandContext", CommandContext);
function createBaseCommandRequest() {
    return { context: undefined, command: "", args: "" };
}
export const CommandRequest = {
    $type: "devvit.actor.bot.CommandRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.context !== undefined) {
            CommandContext.encode(message.context, writer.uint32(10).fork()).ldelim();
        }
        if (message.command !== "") {
            writer.uint32(18).string(message.command);
        }
        if (message.args !== "") {
            writer.uint32(26).string(message.args);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.context = CommandContext.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.command = reader.string();
                    break;
                case 3:
                    message.args = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            context: isSet(object.context) ? CommandContext.fromJSON(object.context) : undefined,
            command: isSet(object.command) ? String(object.command) : "",
            args: isSet(object.args) ? String(object.args) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.context !== undefined &&
            (obj.context = message.context ? CommandContext.toJSON(message.context) : undefined);
        message.command !== undefined && (obj.command = message.command);
        message.args !== undefined && (obj.args = message.args);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCommandRequest();
        message.context = (object.context !== undefined && object.context !== null)
            ? CommandContext.fromPartial(object.context)
            : undefined;
        message.command = object.command ?? "";
        message.args = object.args ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.actor.bot.CommandRequest", CommandRequest);
export class BotClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.actor.bot.Bot";
        this.rpc = rpc;
        this.GetCommands = this.GetCommands.bind(this);
        this.OnCommand = this.OnCommand.bind(this);
    }
    GetCommands(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCommands", data);
        return promise.then((data) => CommandsList.decode(new _m0.Reader(data)));
    }
    OnCommand(request) {
        const data = CommandRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommand", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const BotDefinition = {
    name: "Bot",
    fullName: "devvit.actor.bot.Bot",
    methods: {
        getCommands: {
            name: "GetCommands",
            requestType: Empty,
            requestStream: false,
            responseType: CommandsList,
            responseStream: false,
            options: {},
        },
        onCommand: {
            name: "OnCommand",
            requestType: CommandRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

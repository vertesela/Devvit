/**
 * #instance_settings.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { GetFieldsRequest, GetFieldsResponse, ValidateFormRequest, ValidateFormResponse } from './shared.js';
/**
 * Define settings scoped to a single instance of your app.
 * Useful for multi-instanced apps such as custom posts, where each post is configured by the user
 * when they create the post.  These values will _not_ be shared between instances.
 * Load the saved values with the Settings plugin.
 */
export interface InstanceSettings {
    /** Requested by the platform when rendering the form to configure this actor */
    GetSettingsFields(request: GetFieldsRequest, metadata?: Metadata): Promise<GetFieldsResponse>;
    /** Called by the platform to allow more advanced verification of fields */
    ValidateForm(request: ValidateFormRequest, metadata?: Metadata): Promise<ValidateFormResponse>;
}
export declare class InstanceSettingsClientImpl implements InstanceSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSettingsFields(request: GetFieldsRequest): Promise<GetFieldsResponse>;
    ValidateForm(request: ValidateFormRequest): Promise<ValidateFormResponse>;
}
/**
 * Define settings scoped to a single instance of your app.
 * Useful for multi-instanced apps such as custom posts, where each post is configured by the user
 * when they create the post.  These values will _not_ be shared between instances.
 * Load the saved values with the Settings plugin.
 */
export type InstanceSettingsDefinition = typeof InstanceSettingsDefinition;
export declare const InstanceSettingsDefinition: {
    name: 'InstanceSettings';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=instance_settings.d.ts.map
/**
 * #hello.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface PingMessage {
    message: string;
    delayMillis: number;
    successProbability: number;
}
export declare const PingMessage: {
    $type: "devvit.actor.hello.PingMessage";
    encode(message: PingMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PingMessage;
    fromJSON(object: any): PingMessage;
    toJSON(message: PingMessage): unknown;
    fromPartial<I extends {
        message?: string | undefined;
        delayMillis?: number | undefined;
        successProbability?: number | undefined;
    } & {
        message?: string | undefined;
        delayMillis?: number | undefined;
        successProbability?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof PingMessage>]: never; }>(object: I): PingMessage;
};
/**
 * hello is a ping service, with various conditions applied to how it succeeds
 * and fails
 */
export interface Hello {
    Ping(request: PingMessage, metadata?: Metadata): Promise<PingMessage>;
}
export declare class HelloClientImpl implements Hello {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Ping(request: PingMessage): Promise<PingMessage>;
}
/**
 * hello is a ping service, with various conditions applied to how it succeeds
 * and fails
 */
export type HelloDefinition = typeof HelloDefinition;
export declare const HelloDefinition: {
    name: 'Hello';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=hello.d.ts.map
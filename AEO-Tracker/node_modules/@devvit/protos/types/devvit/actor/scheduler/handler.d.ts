/**
 * #handler.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../google/protobuf/empty.js';
import { ScheduledAction } from './action.js';
/**
 * Actors must implement this interface to use the Scheduler.
 * HandleScheduledAction will be called by the Scheduler at the specified time.
 */
export interface SchedulerHandler {
    HandleScheduledAction(request: ScheduledAction, metadata?: Metadata): Promise<Empty>;
}
export declare class SchedulerHandlerClientImpl implements SchedulerHandler {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    HandleScheduledAction(request: ScheduledAction): Promise<Empty>;
}
/**
 * Actors must implement this interface to use the Scheduler.
 * HandleScheduledAction will be called by the Scheduler at the specified time.
 */
export type SchedulerHandlerDefinition = typeof SchedulerHandlerDefinition;
export declare const SchedulerHandlerDefinition: {
    name: 'SchedulerHandler';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=handler.d.ts.map
/**
 * #admin.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Duration } from '../../../../google/protobuf/duration.js';
import { Timestamp } from '../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { dataTierFromJSON, dataTierToJSON, firehoseEventFromJSON, firehoseEventToJSON, } from '../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON } from '../../../reddit/v2alpha/subredditv2.js';
function createBaseDataToken() {
    return { id: "", organizationId: "", createdAt: undefined, expiresAt: undefined, isRevoked: false };
}
export const DataToken = {
    $type: "devvit.data.api.v1alpha.DataToken",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.organizationId !== "") {
            writer.uint32(18).string(message.organizationId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.expiresAt !== undefined) {
            Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.isRevoked === true) {
            writer.uint32(40).bool(message.isRevoked);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.organizationId = reader.string();
                    break;
                case 3:
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.isRevoked = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            organizationId: isSet(object.organizationId) ? String(object.organizationId) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
            isRevoked: isSet(object.isRevoked) ? Boolean(object.isRevoked) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.organizationId !== undefined && (obj.organizationId = message.organizationId);
        message.createdAt !== undefined && (obj.createdAt = message.createdAt.toISOString());
        message.expiresAt !== undefined && (obj.expiresAt = message.expiresAt.toISOString());
        message.isRevoked !== undefined && (obj.isRevoked = message.isRevoked);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDataToken();
        message.id = object.id ?? "";
        message.organizationId = object.organizationId ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.expiresAt = object.expiresAt ?? undefined;
        message.isRevoked = object.isRevoked ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.DataToken", DataToken);
function createBaseDataSubscription() {
    return {
        id: "",
        tier: 0,
        events: [],
        subreddits: [],
        subredditRatings: [],
        organizationId: "",
        name: "",
        description: undefined,
    };
}
export const DataSubscription = {
    $type: "devvit.data.api.v1alpha.DataSubscription",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.tier !== 0) {
            writer.uint32(16).int32(message.tier);
        }
        writer.uint32(26).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(34).string(v);
        }
        writer.uint32(42).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.organizationId !== "") {
            writer.uint32(50).string(message.organizationId);
        }
        if (message.name !== "") {
            writer.uint32(58).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.tier = reader.int32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                    }
                    else {
                        message.events.push(reader.int32());
                    }
                    break;
                case 4:
                    message.subreddits.push(reader.string());
                    break;
                case 5:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                    }
                    else {
                        message.subredditRatings.push(reader.int32());
                    }
                    break;
                case 6:
                    message.organizationId = reader.string();
                    break;
                case 7:
                    message.name = reader.string();
                    break;
                case 8:
                    message.description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            tier: isSet(object.tier) ? dataTierFromJSON(object.tier) : 0,
            events: Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: Array.isArray(object?.subreddits) ? object.subreddits.map((e) => String(e)) : [],
            subredditRatings: Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
            organizationId: isSet(object.organizationId) ? String(object.organizationId) : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.tier !== undefined && (obj.tier = dataTierToJSON(message.tier));
        if (message.events) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        else {
            obj.events = [];
        }
        if (message.subreddits) {
            obj.subreddits = message.subreddits.map((e) => e);
        }
        else {
            obj.subreddits = [];
        }
        if (message.subredditRatings) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        else {
            obj.subredditRatings = [];
        }
        message.organizationId !== undefined && (obj.organizationId = message.organizationId);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDataSubscription();
        message.id = object.id ?? "";
        message.tier = object.tier ?? 0;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        message.organizationId = object.organizationId ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.DataSubscription", DataSubscription);
function createBaseOrganization() {
    return { id: "", name: "", subscriptions: [], tokens: [] };
}
export const Organization = {
    $type: "devvit.data.api.v1alpha.Organization",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.subscriptions) {
            DataSubscription.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.tokens) {
            DataToken.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.subscriptions.push(DataSubscription.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.tokens.push(DataToken.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            subscriptions: Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => DataSubscription.fromJSON(e))
                : [],
            tokens: Array.isArray(object?.tokens) ? object.tokens.map((e) => DataToken.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        if (message.subscriptions) {
            obj.subscriptions = message.subscriptions.map((e) => e ? DataSubscription.toJSON(e) : undefined);
        }
        else {
            obj.subscriptions = [];
        }
        if (message.tokens) {
            obj.tokens = message.tokens.map((e) => e ? DataToken.toJSON(e) : undefined);
        }
        else {
            obj.tokens = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseOrganization();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.subscriptions = object.subscriptions?.map((e) => DataSubscription.fromPartial(e)) || [];
        message.tokens = object.tokens?.map((e) => DataToken.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.Organization", Organization);
function createBaseDataApiAuthTokenRequest() {
    return { customer: "", expiresIn: undefined };
}
export const DataApiAuthTokenRequest = {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.customer !== "") {
            writer.uint32(10).string(message.customer);
        }
        if (message.expiresIn !== undefined) {
            Duration.encode(message.expiresIn, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataApiAuthTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.customer = reader.string();
                    break;
                case 2:
                    message.expiresIn = Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            customer: isSet(object.customer) ? String(object.customer) : "",
            expiresIn: isSet(object.expiresIn) ? Duration.fromJSON(object.expiresIn) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.customer !== undefined && (obj.customer = message.customer);
        message.expiresIn !== undefined &&
            (obj.expiresIn = message.expiresIn ? Duration.toJSON(message.expiresIn) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDataApiAuthTokenRequest();
        message.customer = object.customer ?? "";
        message.expiresIn = (object.expiresIn !== undefined && object.expiresIn !== null)
            ? Duration.fromPartial(object.expiresIn)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.DataApiAuthTokenRequest", DataApiAuthTokenRequest);
function createBaseDataApiAuthTokenResponse() {
    return { id: "", token: "", expiresAt: undefined };
}
export const DataApiAuthTokenResponse = {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.expiresAt !== undefined) {
            Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataApiAuthTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.token = reader.string();
                    break;
                case 3:
                    message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            token: isSet(object.token) ? String(object.token) : "",
            expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.token !== undefined && (obj.token = message.token);
        message.expiresAt !== undefined && (obj.expiresAt = message.expiresAt.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDataApiAuthTokenResponse();
        message.id = object.id ?? "";
        message.token = object.token ?? "";
        message.expiresAt = object.expiresAt ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.data.api.v1alpha.DataApiAuthTokenResponse", DataApiAuthTokenResponse);
export class DataApiAuthTokenIssuerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.data.api.v1alpha.DataApiAuthTokenIssuer";
        this.rpc = rpc;
        this.GenerateAuthToken = this.GenerateAuthToken.bind(this);
    }
    GenerateAuthToken(request) {
        const data = DataApiAuthTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GenerateAuthToken", data);
        return promise.then((data) => DataApiAuthTokenResponse.decode(new _m0.Reader(data)));
    }
}
export const DataApiAuthTokenIssuerDefinition = {
    name: "DataApiAuthTokenIssuer",
    fullName: "devvit.data.api.v1alpha.DataApiAuthTokenIssuer",
    methods: {
        generateAuthToken: {
            name: "GenerateAuthToken",
            requestType: DataApiAuthTokenRequest,
            requestStream: false,
            responseType: DataApiAuthTokenResponse,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

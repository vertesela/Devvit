/**
 * #admin.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Duration } from '../../../../google/protobuf/duration.js';
import { DataTier, FirehoseEvent } from '../../../options/options.js';
import { SubredditRating } from '../../../reddit/v2alpha/subredditv2.js';
export interface DataToken {
    id: string;
    organizationId: string;
    createdAt?: Date;
    expiresAt?: Date;
    isRevoked: boolean;
}
export interface DataSubscription {
    id: string;
    tier: DataTier;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    organizationId: string;
    name: string;
    description?: string | undefined;
}
export interface Organization {
    id: string;
    name: string;
    subscriptions: DataSubscription[];
    tokens: DataToken[];
}
export interface DataApiAuthTokenRequest {
    customer: string;
    expiresIn?: Duration;
}
export interface DataApiAuthTokenResponse {
    id: string;
    token: string;
    expiresAt?: Date;
}
export declare const DataToken: {
    $type: "devvit.data.api.v1alpha.DataToken";
    encode(message: DataToken, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataToken;
    fromJSON(object: any): DataToken;
    toJSON(message: DataToken): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        organizationId?: string | undefined;
        createdAt?: Date | undefined;
        expiresAt?: Date | undefined;
        isRevoked?: boolean | undefined;
    } & {
        id?: string | undefined;
        organizationId?: string | undefined;
        createdAt?: Date | undefined;
        expiresAt?: Date | undefined;
        isRevoked?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DataToken>]: never; }>(object: I): DataToken;
};
export declare const DataSubscription: {
    $type: "devvit.data.api.v1alpha.DataSubscription";
    encode(message: DataSubscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscription;
    fromJSON(object: any): DataSubscription;
    toJSON(message: DataSubscription): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        tier?: DataTier | undefined;
        events?: FirehoseEvent[] | undefined;
        subreddits?: string[] | undefined;
        subredditRatings?: SubredditRating[] | undefined;
        organizationId?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
    } & {
        id?: string | undefined;
        tier?: DataTier | undefined;
        events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
        subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
        subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
        organizationId?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof DataSubscription>]: never; }>(object: I): DataSubscription;
};
export declare const Organization: {
    $type: "devvit.data.api.v1alpha.Organization";
    encode(message: Organization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization;
    fromJSON(object: any): Organization;
    toJSON(message: Organization): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        name?: string | undefined;
        subscriptions?: {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[] | undefined;
        tokens?: {
            id?: string | undefined;
            organizationId?: string | undefined;
            createdAt?: Date | undefined;
            expiresAt?: Date | undefined;
            isRevoked?: boolean | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        name?: string | undefined;
        subscriptions?: ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[] & ({
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: (FirehoseEvent[] & FirehoseEvent[] & { [K in Exclude<keyof I["subscriptions"][number]["events"], "$type" | keyof FirehoseEvent[]>]: never; }) | undefined;
            subreddits?: (string[] & string[] & { [K_1 in Exclude<keyof I["subscriptions"][number]["subreddits"], "$type" | keyof string[]>]: never; }) | undefined;
            subredditRatings?: (SubredditRating[] & SubredditRating[] & { [K_2 in Exclude<keyof I["subscriptions"][number]["subredditRatings"], "$type" | keyof SubredditRating[]>]: never; }) | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        } & { [K_3 in Exclude<keyof I["subscriptions"][number], "$type" | keyof DataSubscription>]: never; })[] & { [K_4 in Exclude<keyof I["subscriptions"], "$type" | keyof {
            id?: string | undefined;
            tier?: DataTier | undefined;
            events?: FirehoseEvent[] | undefined;
            subreddits?: string[] | undefined;
            subredditRatings?: SubredditRating[] | undefined;
            organizationId?: string | undefined;
            name?: string | undefined;
            description?: string | undefined;
        }[]>]: never; }) | undefined;
        tokens?: ({
            id?: string | undefined;
            organizationId?: string | undefined;
            createdAt?: Date | undefined;
            expiresAt?: Date | undefined;
            isRevoked?: boolean | undefined;
        }[] & ({
            id?: string | undefined;
            organizationId?: string | undefined;
            createdAt?: Date | undefined;
            expiresAt?: Date | undefined;
            isRevoked?: boolean | undefined;
        } & {
            id?: string | undefined;
            organizationId?: string | undefined;
            createdAt?: Date | undefined;
            expiresAt?: Date | undefined;
            isRevoked?: boolean | undefined;
        } & { [K_5 in Exclude<keyof I["tokens"][number], "$type" | keyof DataToken>]: never; })[] & { [K_6 in Exclude<keyof I["tokens"], "$type" | keyof {
            id?: string | undefined;
            organizationId?: string | undefined;
            createdAt?: Date | undefined;
            expiresAt?: Date | undefined;
            isRevoked?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I, "$type" | keyof Organization>]: never; }>(object: I): Organization;
};
export declare const DataApiAuthTokenRequest: {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenRequest";
    encode(message: DataApiAuthTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenRequest;
    fromJSON(object: any): DataApiAuthTokenRequest;
    toJSON(message: DataApiAuthTokenRequest): unknown;
    fromPartial<I extends {
        customer?: string | undefined;
        expiresIn?: {
            seconds?: number | undefined;
            nanos?: number | undefined;
        } | undefined;
    } & {
        customer?: string | undefined;
        expiresIn?: ({
            seconds?: number | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: number | undefined;
            nanos?: number | undefined;
        } & { [K in Exclude<keyof I["expiresIn"], "$type" | keyof Duration>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof DataApiAuthTokenRequest>]: never; }>(object: I): DataApiAuthTokenRequest;
};
export declare const DataApiAuthTokenResponse: {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenResponse";
    encode(message: DataApiAuthTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenResponse;
    fromJSON(object: any): DataApiAuthTokenResponse;
    toJSON(message: DataApiAuthTokenResponse): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        token?: string | undefined;
        expiresAt?: Date | undefined;
    } & {
        id?: string | undefined;
        token?: string | undefined;
        expiresAt?: Date | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DataApiAuthTokenResponse>]: never; }>(object: I): DataApiAuthTokenResponse;
};
/** DataApiAuthTokenIssuer is the service that issues auth tokens for the data api */
export interface DataApiAuthTokenIssuer {
    GenerateAuthToken(request: DataApiAuthTokenRequest, metadata?: Metadata): Promise<DataApiAuthTokenResponse>;
}
export declare class DataApiAuthTokenIssuerClientImpl implements DataApiAuthTokenIssuer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GenerateAuthToken(request: DataApiAuthTokenRequest): Promise<DataApiAuthTokenResponse>;
}
/** DataApiAuthTokenIssuer is the service that issues auth tokens for the data api */
export type DataApiAuthTokenIssuerDefinition = typeof DataApiAuthTokenIssuerDefinition;
export declare const DataApiAuthTokenIssuerDefinition: {
    name: 'DataApiAuthTokenIssuer';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=admin.d.ts.map
/**
 * #options.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/**
 * Data Tier defines the level of data delivered to the client
 * FIRST_DATA_TIER is the least amount of data, THIRD_DATA_TIER is the most
 */
export declare enum DataTier {
    UNKNOWN_DATA_TIER = 0,
    FIRST_DATA_TIER = 1,
    SECOND_DATA_TIER = 2,
    THIRD_DATA_TIER = 3,
    UNRECOGNIZED = -1
}
export declare function dataTierFromJSON(object: any): DataTier;
export declare function dataTierToJSON(object: DataTier): number;
export declare enum Selector {
    /** @deprecated */
    DEFAULT = 0,
    /** @deprecated */
    TARGET_USER = 1,
    /**
     * MOD_ACTION_TYPE - TODO(logan.hanks): Replace this with a field path string
     *
     * @deprecated
     */
    MOD_ACTION_TYPE = 2,
    UNRECOGNIZED = -1
}
export declare function selectorFromJSON(object: any): Selector;
export declare function selectorToJSON(object: Selector): number;
export declare enum DeliveryLocation {
    UNKNOWN_DELIVERY_LOCATION = 0,
    GATEWAY = 1,
    FIREHOSE = 2,
    UNRECOGNIZED = -1
}
export declare function deliveryLocationFromJSON(object: any): DeliveryLocation;
export declare function deliveryLocationToJSON(object: DeliveryLocation): number;
/**
 * Event types for firehose
 * Also maps directly to the stream name in redis
 */
export declare enum FirehoseEvent {
    UNKNOWN_FIREHOSE_EVENT = 0,
    POST_CREATE = 1,
    POST_EDIT = 2,
    POST_DELETE = 3,
    COMMENT_CREATE = 4,
    COMMENT_EDIT = 5,
    COMMENT_DELETE = 6,
    VOTE = 7,
    MOD_ACTION = 8,
    ACCOUNT_DELETE = 9,
    ERROR = 10,
    WARNING = 11,
    POST_APPROVE = 12,
    COMMENT_APPROVE = 13,
    UNRECOGNIZED = -1
}
export declare function firehoseEventFromJSON(object: any): FirehoseEvent;
export declare function firehoseEventToJSON(object: FirehoseEvent): number;
export interface EventSpec {
    source: string;
    action: string;
    noun: string;
}
/**
 * Delivery locations for events from snooron-worker
 * Nested in a msg since proto doesn't like repeated enums
 */
export interface DeliverTo {
    to: DeliveryLocation[];
}
export declare const EventSpec: {
    $type: "devvit.options.EventSpec";
    encode(message: EventSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventSpec;
    fromJSON(object: any): EventSpec;
    toJSON(message: EventSpec): unknown;
    fromPartial<I extends {
        source?: string | undefined;
        action?: string | undefined;
        noun?: string | undefined;
    } & {
        source?: string | undefined;
        action?: string | undefined;
        noun?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof EventSpec>]: never; }>(object: I): EventSpec;
};
export declare const DeliverTo: {
    $type: "devvit.options.DeliverTo";
    encode(message: DeliverTo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeliverTo;
    fromJSON(object: any): DeliverTo;
    toJSON(message: DeliverTo): unknown;
    fromPartial<I extends {
        to?: DeliveryLocation[] | undefined;
    } & {
        to?: (DeliveryLocation[] & DeliveryLocation[] & { [K in Exclude<keyof I["to"], "$type" | keyof DeliveryLocation[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "to">]: never; }>(object: I): DeliverTo;
};
//# sourceMappingURL=options.d.ts.map
/**
 * #options.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
/**
 * Data Tier defines the level of data delivered to the client
 * FIRST_DATA_TIER is the least amount of data, THIRD_DATA_TIER is the most
 */
export var DataTier;
(function (DataTier) {
    DataTier[DataTier["UNKNOWN_DATA_TIER"] = 0] = "UNKNOWN_DATA_TIER";
    DataTier[DataTier["FIRST_DATA_TIER"] = 1] = "FIRST_DATA_TIER";
    DataTier[DataTier["SECOND_DATA_TIER"] = 2] = "SECOND_DATA_TIER";
    DataTier[DataTier["THIRD_DATA_TIER"] = 3] = "THIRD_DATA_TIER";
    DataTier[DataTier["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DataTier || (DataTier = {}));
export function dataTierFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_DATA_TIER":
            return DataTier.UNKNOWN_DATA_TIER;
        case 1:
        case "FIRST_DATA_TIER":
            return DataTier.FIRST_DATA_TIER;
        case 2:
        case "SECOND_DATA_TIER":
            return DataTier.SECOND_DATA_TIER;
        case 3:
        case "THIRD_DATA_TIER":
            return DataTier.THIRD_DATA_TIER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DataTier.UNRECOGNIZED;
    }
}
export function dataTierToJSON(object) {
    switch (object) {
        case DataTier.UNKNOWN_DATA_TIER:
            return 0;
        case DataTier.FIRST_DATA_TIER:
            return 1;
        case DataTier.SECOND_DATA_TIER:
            return 2;
        case DataTier.THIRD_DATA_TIER:
            return 3;
        case DataTier.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var Selector;
(function (Selector) {
    /** @deprecated */
    Selector[Selector["DEFAULT"] = 0] = "DEFAULT";
    /** @deprecated */
    Selector[Selector["TARGET_USER"] = 1] = "TARGET_USER";
    /**
     * MOD_ACTION_TYPE - TODO(logan.hanks): Replace this with a field path string
     *
     * @deprecated
     */
    Selector[Selector["MOD_ACTION_TYPE"] = 2] = "MOD_ACTION_TYPE";
    Selector[Selector["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Selector || (Selector = {}));
export function selectorFromJSON(object) {
    switch (object) {
        case 0:
        case "DEFAULT":
            return Selector.DEFAULT;
        case 1:
        case "TARGET_USER":
            return Selector.TARGET_USER;
        case 2:
        case "MOD_ACTION_TYPE":
            return Selector.MOD_ACTION_TYPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Selector.UNRECOGNIZED;
    }
}
export function selectorToJSON(object) {
    switch (object) {
        case Selector.DEFAULT:
            return 0;
        case Selector.TARGET_USER:
            return 1;
        case Selector.MOD_ACTION_TYPE:
            return 2;
        case Selector.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var DeliveryLocation;
(function (DeliveryLocation) {
    DeliveryLocation[DeliveryLocation["UNKNOWN_DELIVERY_LOCATION"] = 0] = "UNKNOWN_DELIVERY_LOCATION";
    DeliveryLocation[DeliveryLocation["GATEWAY"] = 1] = "GATEWAY";
    DeliveryLocation[DeliveryLocation["FIREHOSE"] = 2] = "FIREHOSE";
    DeliveryLocation[DeliveryLocation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DeliveryLocation || (DeliveryLocation = {}));
export function deliveryLocationFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_DELIVERY_LOCATION":
            return DeliveryLocation.UNKNOWN_DELIVERY_LOCATION;
        case 1:
        case "GATEWAY":
            return DeliveryLocation.GATEWAY;
        case 2:
        case "FIREHOSE":
            return DeliveryLocation.FIREHOSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DeliveryLocation.UNRECOGNIZED;
    }
}
export function deliveryLocationToJSON(object) {
    switch (object) {
        case DeliveryLocation.UNKNOWN_DELIVERY_LOCATION:
            return 0;
        case DeliveryLocation.GATEWAY:
            return 1;
        case DeliveryLocation.FIREHOSE:
            return 2;
        case DeliveryLocation.UNRECOGNIZED:
        default:
            return -1;
    }
}
/**
 * Event types for firehose
 * Also maps directly to the stream name in redis
 */
export var FirehoseEvent;
(function (FirehoseEvent) {
    FirehoseEvent[FirehoseEvent["UNKNOWN_FIREHOSE_EVENT"] = 0] = "UNKNOWN_FIREHOSE_EVENT";
    FirehoseEvent[FirehoseEvent["POST_CREATE"] = 1] = "POST_CREATE";
    FirehoseEvent[FirehoseEvent["POST_EDIT"] = 2] = "POST_EDIT";
    FirehoseEvent[FirehoseEvent["POST_DELETE"] = 3] = "POST_DELETE";
    FirehoseEvent[FirehoseEvent["COMMENT_CREATE"] = 4] = "COMMENT_CREATE";
    FirehoseEvent[FirehoseEvent["COMMENT_EDIT"] = 5] = "COMMENT_EDIT";
    FirehoseEvent[FirehoseEvent["COMMENT_DELETE"] = 6] = "COMMENT_DELETE";
    FirehoseEvent[FirehoseEvent["VOTE"] = 7] = "VOTE";
    FirehoseEvent[FirehoseEvent["MOD_ACTION"] = 8] = "MOD_ACTION";
    FirehoseEvent[FirehoseEvent["ACCOUNT_DELETE"] = 9] = "ACCOUNT_DELETE";
    FirehoseEvent[FirehoseEvent["ERROR"] = 10] = "ERROR";
    FirehoseEvent[FirehoseEvent["WARNING"] = 11] = "WARNING";
    FirehoseEvent[FirehoseEvent["POST_APPROVE"] = 12] = "POST_APPROVE";
    FirehoseEvent[FirehoseEvent["COMMENT_APPROVE"] = 13] = "COMMENT_APPROVE";
    FirehoseEvent[FirehoseEvent["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FirehoseEvent || (FirehoseEvent = {}));
export function firehoseEventFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_FIREHOSE_EVENT":
            return FirehoseEvent.UNKNOWN_FIREHOSE_EVENT;
        case 1:
        case "POST_CREATE":
            return FirehoseEvent.POST_CREATE;
        case 2:
        case "POST_EDIT":
            return FirehoseEvent.POST_EDIT;
        case 3:
        case "POST_DELETE":
            return FirehoseEvent.POST_DELETE;
        case 4:
        case "COMMENT_CREATE":
            return FirehoseEvent.COMMENT_CREATE;
        case 5:
        case "COMMENT_EDIT":
            return FirehoseEvent.COMMENT_EDIT;
        case 6:
        case "COMMENT_DELETE":
            return FirehoseEvent.COMMENT_DELETE;
        case 7:
        case "VOTE":
            return FirehoseEvent.VOTE;
        case 8:
        case "MOD_ACTION":
            return FirehoseEvent.MOD_ACTION;
        case 9:
        case "ACCOUNT_DELETE":
            return FirehoseEvent.ACCOUNT_DELETE;
        case 10:
        case "ERROR":
            return FirehoseEvent.ERROR;
        case 11:
        case "WARNING":
            return FirehoseEvent.WARNING;
        case 12:
        case "POST_APPROVE":
            return FirehoseEvent.POST_APPROVE;
        case 13:
        case "COMMENT_APPROVE":
            return FirehoseEvent.COMMENT_APPROVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FirehoseEvent.UNRECOGNIZED;
    }
}
export function firehoseEventToJSON(object) {
    switch (object) {
        case FirehoseEvent.UNKNOWN_FIREHOSE_EVENT:
            return 0;
        case FirehoseEvent.POST_CREATE:
            return 1;
        case FirehoseEvent.POST_EDIT:
            return 2;
        case FirehoseEvent.POST_DELETE:
            return 3;
        case FirehoseEvent.COMMENT_CREATE:
            return 4;
        case FirehoseEvent.COMMENT_EDIT:
            return 5;
        case FirehoseEvent.COMMENT_DELETE:
            return 6;
        case FirehoseEvent.VOTE:
            return 7;
        case FirehoseEvent.MOD_ACTION:
            return 8;
        case FirehoseEvent.ACCOUNT_DELETE:
            return 9;
        case FirehoseEvent.ERROR:
            return 10;
        case FirehoseEvent.WARNING:
            return 11;
        case FirehoseEvent.POST_APPROVE:
            return 12;
        case FirehoseEvent.COMMENT_APPROVE:
            return 13;
        case FirehoseEvent.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseEventSpec() {
    return { source: "", action: "", noun: "" };
}
export const EventSpec = {
    $type: "devvit.options.EventSpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.source !== "") {
            writer.uint32(10).string(message.source);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.noun !== "") {
            writer.uint32(26).string(message.noun);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.source = reader.string();
                    break;
                case 2:
                    message.action = reader.string();
                    break;
                case 3:
                    message.noun = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            source: isSet(object.source) ? String(object.source) : "",
            action: isSet(object.action) ? String(object.action) : "",
            noun: isSet(object.noun) ? String(object.noun) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.source !== undefined && (obj.source = message.source);
        message.action !== undefined && (obj.action = message.action);
        message.noun !== undefined && (obj.noun = message.noun);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSpec();
        message.source = object.source ?? "";
        message.action = object.action ?? "";
        message.noun = object.noun ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.options.EventSpec", EventSpec);
function createBaseDeliverTo() {
    return { to: [] };
}
export const DeliverTo = {
    $type: "devvit.options.DeliverTo",
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.to) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeliverTo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.to.push(reader.int32());
                        }
                    }
                    else {
                        message.to.push(reader.int32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { to: Array.isArray(object?.to) ? object.to.map((e) => deliveryLocationFromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.to) {
            obj.to = message.to.map((e) => deliveryLocationToJSON(e));
        }
        else {
            obj.to = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDeliverTo();
        message.to = object.to?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.options.DeliverTo", DeliverTo);
function isSet(value) {
    return value !== null && value !== undefined;
}

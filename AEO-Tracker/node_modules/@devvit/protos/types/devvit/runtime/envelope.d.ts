/**
 * #envelope.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Strings } from './runtime_common.js';
export interface Envelope {
    /**
     * Should be unique per-envelope. May remain the same for
     * envelopes that are mutated and forwarded along because
     * they are considered logically the same envelope.
     * Populated when the Envelope first gets post()ed to a central dispatcher.
     * Only to be used for debugging and repeat dispatch suppression.
     */
    id: string;
    src: string;
    dst: string;
    /**
     * The method has this format:
     *
     *   /<Definition.fullName>/<MethodDefinition.name>
     *
     * See EnvelopeUtil.envelopeMethod().
     */
    method: string;
    streamId: string;
    traceId: string;
    /**
     * When success is true and message is present, message adheres to the method
     * request / response type. When success is false, message's type is unknown.
     * In TypeScript only, messages are usually of type UnknownMessage.
     */
    success: boolean;
    message?: any;
    request: boolean;
    complete: boolean;
    /**
     * Must be consistent per streamId.  Can be omitted from subsequent
     * messages.
     */
    metadata: {
        [key: string]: Strings;
    };
}
export interface Envelope_MetadataEntry {
    key: string;
    value?: Strings;
}
export declare const Envelope: {
    $type: "devvit.runtime.Envelope";
    encode(message: Envelope, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Envelope;
    fromJSON(object: any): Envelope;
    toJSON(message: Envelope): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        src?: string | undefined;
        dst?: string | undefined;
        method?: string | undefined;
        streamId?: string | undefined;
        traceId?: string | undefined;
        success?: boolean | undefined;
        message?: any;
        request?: boolean | undefined;
        complete?: boolean | undefined;
        metadata?: {
            [x: string]: {
                values?: string[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        id?: string | undefined;
        src?: string | undefined;
        dst?: string | undefined;
        method?: string | undefined;
        streamId?: string | undefined;
        traceId?: string | undefined;
        success?: boolean | undefined;
        message?: any;
        request?: boolean | undefined;
        complete?: boolean | undefined;
        metadata?: ({
            [x: string]: {
                values?: string[] | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                values?: string[] | undefined;
            } & {
                values?: (string[] & string[] & { [K in Exclude<keyof I["metadata"][string]["values"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["metadata"][string], "$type" | "values">]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["metadata"], string | number>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof Envelope>]: never; }>(object: I): Envelope;
};
export declare const Envelope_MetadataEntry: {
    $type: "devvit.runtime.Envelope.MetadataEntry";
    encode(message: Envelope_MetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Envelope_MetadataEntry;
    fromJSON(object: any): Envelope_MetadataEntry;
    toJSON(message: Envelope_MetadataEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: {
            values?: string[] | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            values?: string[] | undefined;
        } & {
            values?: (string[] & string[] & { [K in Exclude<keyof I["value"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["value"], "$type" | "values">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof Envelope_MetadataEntry>]: never; }>(object: I): Envelope_MetadataEntry;
};
//# sourceMappingURL=envelope.d.ts.map
/**
 * #runtime_common.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Value } from '../../google/protobuf/struct.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
function createBaseAck() {
    return { success: false, messages: [] };
}
export const Ack = {
    $type: "devvit.runtime.Ack",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        for (const v of message.messages) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.messages.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            messages: Array.isArray(object?.messages) ? object.messages.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        if (message.messages) {
            obj.messages = message.messages.map((e) => e);
        }
        else {
            obj.messages = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAck();
        message.success = object.success ?? false;
        message.messages = object.messages?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.Ack", Ack);
function createBaseDebug() {
    return { message: undefined };
}
export const Debug = {
    $type: "devvit.runtime.Debug",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== undefined) {
            Value.encode(Value.wrap(message.message), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebug();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = Value.unwrap(Value.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object?.message) ? object.message : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDebug();
        message.message = object.message ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.Debug", Debug);
function createBaseStrings() {
    return { values: [] };
}
export const Strings = {
    $type: "devvit.runtime.Strings",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStrings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.values.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { values: Array.isArray(object?.values) ? object.values.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.values) {
            obj.values = message.values.map((e) => e);
        }
        else {
            obj.values = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStrings();
        message.values = object.values?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.Strings", Strings);
function createBaseStr() {
    return { value: "" };
}
export const Str = {
    $type: "devvit.runtime.Str",
    encode(message, writer = _m0.Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStr();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStr();
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.Str", Str);
function isSet(value) {
    return value !== null && value !== undefined;
}

/**
 * #serializable.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
function createBaseSerializableServiceDefinition() {
    return { fullName: "", methods: [], name: "", version: "" };
}
export const SerializableServiceDefinition = {
    $type: "devvit.runtime.SerializableServiceDefinition",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fullName !== "") {
            writer.uint32(10).string(message.fullName);
        }
        for (const v of message.methods) {
            SerializableMethodDefinition.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.version !== "") {
            writer.uint32(34).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSerializableServiceDefinition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullName = reader.string();
                    break;
                case 2:
                    message.methods.push(SerializableMethodDefinition.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fullName: isSet(object.fullName) ? String(object.fullName) : "",
            methods: Array.isArray(object?.methods)
                ? object.methods.map((e) => SerializableMethodDefinition.fromJSON(e))
                : [],
            name: isSet(object.name) ? String(object.name) : "",
            version: isSet(object.version) ? String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.fullName !== undefined && (obj.fullName = message.fullName);
        if (message.methods) {
            obj.methods = message.methods.map((e) => e ? SerializableMethodDefinition.toJSON(e) : undefined);
        }
        else {
            obj.methods = [];
        }
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined && (obj.version = message.version);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSerializableServiceDefinition();
        message.fullName = object.fullName ?? "";
        message.methods = object.methods?.map((e) => SerializableMethodDefinition.fromPartial(e)) || [];
        message.name = object.name ?? "";
        message.version = object.version ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.SerializableServiceDefinition", SerializableServiceDefinition);
function createBaseSerializableMethodDefinition() {
    return { fullName: "", name: "", requestStream: false, responseStream: false, requestType: "", responseType: "" };
}
export const SerializableMethodDefinition = {
    $type: "devvit.runtime.SerializableMethodDefinition",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fullName !== "") {
            writer.uint32(10).string(message.fullName);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.requestStream === true) {
            writer.uint32(24).bool(message.requestStream);
        }
        if (message.responseStream === true) {
            writer.uint32(32).bool(message.responseStream);
        }
        if (message.requestType !== "") {
            writer.uint32(42).string(message.requestType);
        }
        if (message.responseType !== "") {
            writer.uint32(50).string(message.responseType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSerializableMethodDefinition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullName = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.requestStream = reader.bool();
                    break;
                case 4:
                    message.responseStream = reader.bool();
                    break;
                case 5:
                    message.requestType = reader.string();
                    break;
                case 6:
                    message.responseType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fullName: isSet(object.fullName) ? String(object.fullName) : "",
            name: isSet(object.name) ? String(object.name) : "",
            requestStream: isSet(object.requestStream) ? Boolean(object.requestStream) : false,
            responseStream: isSet(object.responseStream) ? Boolean(object.responseStream) : false,
            requestType: isSet(object.requestType) ? String(object.requestType) : "",
            responseType: isSet(object.responseType) ? String(object.responseType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.fullName !== undefined && (obj.fullName = message.fullName);
        message.name !== undefined && (obj.name = message.name);
        message.requestStream !== undefined && (obj.requestStream = message.requestStream);
        message.responseStream !== undefined && (obj.responseStream = message.responseStream);
        message.requestType !== undefined && (obj.requestType = message.requestType);
        message.responseType !== undefined && (obj.responseType = message.responseType);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSerializableMethodDefinition();
        message.fullName = object.fullName ?? "";
        message.name = object.name ?? "";
        message.requestStream = object.requestStream ?? false;
        message.responseStream = object.responseStream ?? false;
        message.requestType = object.requestType ?? "";
        message.responseType = object.responseType ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.runtime.SerializableMethodDefinition", SerializableMethodDefinition);
function isSet(value) {
    return value !== null && value !== undefined;
}

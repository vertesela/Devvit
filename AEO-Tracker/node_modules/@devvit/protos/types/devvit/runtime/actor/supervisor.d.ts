/**
 * #supervisor.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { LinkedBundle } from '../bundle.js';
import { Envelope } from '../envelope.js';
export interface UnloadRequest {
    force: boolean;
    hostname: string;
}
export declare const UnloadRequest: {
    $type: "devvit.runtime.actor.UnloadRequest";
    encode(message: UnloadRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnloadRequest;
    fromJSON(object: any): UnloadRequest;
    toJSON(message: UnloadRequest): unknown;
    fromPartial<I extends {
        force?: boolean | undefined;
        hostname?: string | undefined;
    } & {
        force?: boolean | undefined;
        hostname?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UnloadRequest>]: never; }>(object: I): UnloadRequest;
};
/**
 * Root Worker, responsible for RPC and loading additional Workers
 * local://supervisor
 */
export interface Supervisor {
    /**
     * Transform an incoming envelope.
     *
     * Because the input and outputs are Envelopes, they are actually Envelopes
     * wrapped in Envelopes. That is, Envelope.message is an Envelope. The outer
     * Envelope.success flag indicates filter status.
     */
    Filter(request: Envelope, metadata?: Metadata): Promise<Envelope>;
    /** Unpacks and loads each bundled Actor into their own Workers */
    Load(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    /** Unloads the actor at the provided URI, and unloads dependencies if needed */
    Unload(request: UnloadRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class SupervisorClientImpl implements Supervisor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Filter(request: Envelope): Promise<Envelope>;
    Load(request: LinkedBundle): Promise<Empty>;
    Unload(request: UnloadRequest): Promise<Empty>;
}
/**
 * Root Worker, responsible for RPC and loading additional Workers
 * local://supervisor
 */
export type SupervisorDefinition = typeof SupervisorDefinition;
export declare const SupervisorDefinition: {
    name: 'Supervisor';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=supervisor.d.ts.map
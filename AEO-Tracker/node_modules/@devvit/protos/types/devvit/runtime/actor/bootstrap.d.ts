/**
 * #bootstrap.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../google/protobuf/empty.js';
import { LinkedBundle } from '../bundle.js';
/** Bootstraper used to load an actual Actor into the Worker */
export interface BootstrapActor {
    /** Loads an Actor into the Worker and binds its service to a URL */
    LoadActor(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    IsResponding(request: Empty, metadata?: Metadata): Promise<Empty>;
}
export declare class BootstrapActorClientImpl implements BootstrapActor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    LoadActor(request: LinkedBundle): Promise<Empty>;
    IsResponding(request: Empty): Promise<Empty>;
}
/** Bootstraper used to load an actual Actor into the Worker */
export type BootstrapActorDefinition = typeof BootstrapActorDefinition;
export declare const BootstrapActorDefinition: {
    name: 'BootstrapActor';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=bootstrap.d.ts.map
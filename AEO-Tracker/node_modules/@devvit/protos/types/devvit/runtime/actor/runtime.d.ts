/**
 * #runtime.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { LinkedBundle } from '../bundle.js';
export interface WorkerQuery {
    hostname: string;
}
export declare const WorkerQuery: {
    $type: "devvit.runtime.actor.WorkerQuery";
    encode(message: WorkerQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WorkerQuery;
    fromJSON(object: any): WorkerQuery;
    toJSON(message: WorkerQuery): unknown;
    fromPartial<I extends {
        hostname?: string | undefined;
    } & {
        hostname?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "hostname">]: never; }>(object: I): WorkerQuery;
};
/** Native implementation, spawns/terminates Workers. */
export interface RuntimeActor {
    NewWorker(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    TerminateWorker(request: WorkerQuery, metadata?: Metadata): Promise<Empty>;
}
export declare class RuntimeActorClientImpl implements RuntimeActor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    NewWorker(request: LinkedBundle): Promise<Empty>;
    TerminateWorker(request: WorkerQuery): Promise<Empty>;
}
/** Native implementation, spawns/terminates Workers. */
export type RuntimeActorDefinition = typeof RuntimeActorDefinition;
export declare const RuntimeActorDefinition: {
    name: 'RuntimeActor';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=runtime.d.ts.map
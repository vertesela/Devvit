/**
 * #bootstrap.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { LinkedBundle } from '../bundle.js';
export class BootstrapActorClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.runtime.actor.BootstrapActor";
        this.rpc = rpc;
        this.LoadActor = this.LoadActor.bind(this);
        this.IsResponding = this.IsResponding.bind(this);
    }
    LoadActor(request) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "LoadActor", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    IsResponding(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "IsResponding", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const BootstrapActorDefinition = {
    name: "BootstrapActor",
    fullName: "devvit.runtime.actor.BootstrapActor",
    methods: {
        /** Loads an Actor into the Worker and binds its service to a URL */
        loadActor: {
            name: "LoadActor",
            requestType: LinkedBundle,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        isResponding: {
            name: "IsResponding",
            requestType: Empty,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};

/**
 * #flair.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseLinkFlairV2() {
    return { text: "", cssClass: "", backgroundColor: "", templateId: "", textColor: "" };
}
export const LinkFlairV2 = {
    $type: "devvit.reddit.v2alpha.LinkFlairV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.cssClass !== "") {
            writer.uint32(18).string(message.cssClass);
        }
        if (message.backgroundColor !== "") {
            writer.uint32(26).string(message.backgroundColor);
        }
        if (message.templateId !== "") {
            writer.uint32(34).string(message.templateId);
        }
        if (message.textColor !== "") {
            writer.uint32(42).string(message.textColor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkFlairV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.text = reader.string();
                    break;
                case 2:
                    message.cssClass = reader.string();
                    break;
                case 3:
                    message.backgroundColor = reader.string();
                    break;
                case 4:
                    message.templateId = reader.string();
                    break;
                case 5:
                    message.textColor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? String(object.text) : "",
            cssClass: isSet(object.cssClass) ? String(object.cssClass) : "",
            backgroundColor: isSet(object.backgroundColor) ? String(object.backgroundColor) : "",
            templateId: isSet(object.templateId) ? String(object.templateId) : "",
            textColor: isSet(object.textColor) ? String(object.textColor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.text !== undefined && (obj.text = message.text);
        message.cssClass !== undefined && (obj.cssClass = message.cssClass);
        message.backgroundColor !== undefined && (obj.backgroundColor = message.backgroundColor);
        message.templateId !== undefined && (obj.templateId = message.templateId);
        message.textColor !== undefined && (obj.textColor = message.textColor);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLinkFlairV2();
        message.text = object.text ?? "";
        message.cssClass = object.cssClass ?? "";
        message.backgroundColor = object.backgroundColor ?? "";
        message.templateId = object.templateId ?? "";
        message.textColor = object.textColor ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.LinkFlairV2", LinkFlairV2);
function createBaseUserFlairV2() {
    return {
        userId: "",
        subredditId: "",
        text: "",
        cssClass: "",
        templateId: "",
        textColor: "",
        backgroundColor: "",
        enabled: false,
    };
}
export const UserFlairV2 = {
    $type: "devvit.reddit.v2alpha.UserFlairV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.subredditId !== "") {
            writer.uint32(18).string(message.subredditId);
        }
        if (message.text !== "") {
            writer.uint32(26).string(message.text);
        }
        if (message.cssClass !== "") {
            writer.uint32(34).string(message.cssClass);
        }
        if (message.templateId !== "") {
            writer.uint32(42).string(message.templateId);
        }
        if (message.textColor !== "") {
            writer.uint32(50).string(message.textColor);
        }
        if (message.backgroundColor !== "") {
            writer.uint32(58).string(message.backgroundColor);
        }
        if (message.enabled === true) {
            writer.uint32(64).bool(message.enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserFlairV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.subredditId = reader.string();
                    break;
                case 3:
                    message.text = reader.string();
                    break;
                case 4:
                    message.cssClass = reader.string();
                    break;
                case 5:
                    message.templateId = reader.string();
                    break;
                case 6:
                    message.textColor = reader.string();
                    break;
                case 7:
                    message.backgroundColor = reader.string();
                    break;
                case 8:
                    message.enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? String(object.userId) : "",
            subredditId: isSet(object.subredditId) ? String(object.subredditId) : "",
            text: isSet(object.text) ? String(object.text) : "",
            cssClass: isSet(object.cssClass) ? String(object.cssClass) : "",
            templateId: isSet(object.templateId) ? String(object.templateId) : "",
            textColor: isSet(object.textColor) ? String(object.textColor) : "",
            backgroundColor: isSet(object.backgroundColor) ? String(object.backgroundColor) : "",
            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.userId !== undefined && (obj.userId = message.userId);
        message.subredditId !== undefined && (obj.subredditId = message.subredditId);
        message.text !== undefined && (obj.text = message.text);
        message.cssClass !== undefined && (obj.cssClass = message.cssClass);
        message.templateId !== undefined && (obj.templateId = message.templateId);
        message.textColor !== undefined && (obj.textColor = message.textColor);
        message.backgroundColor !== undefined && (obj.backgroundColor = message.backgroundColor);
        message.enabled !== undefined && (obj.enabled = message.enabled);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUserFlairV2();
        message.userId = object.userId ?? "";
        message.subredditId = object.subredditId ?? "";
        message.text = object.text ?? "";
        message.cssClass = object.cssClass ?? "";
        message.templateId = object.templateId ?? "";
        message.textColor = object.textColor ?? "";
        message.backgroundColor = object.backgroundColor ?? "";
        message.enabled = object.enabled ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.UserFlairV2", UserFlairV2);
function isSet(value) {
    return value !== null && value !== undefined;
}

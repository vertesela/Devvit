/**
 * #modmail.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Timestamp } from '../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { SubredditV2 } from './subredditv2.js';
import { UserV2 } from './userv2.js';
function createBaseModMail() {
    return {
        messageAuthor: undefined,
        createdAt: undefined,
        messageAuthorType: "",
        conversationState: "",
        conversationType: "",
        isAutoGenerated: false,
        conversationSubreddit: undefined,
        destinationSubreddit: undefined,
        conversationId: "",
        messageId: "",
    };
}
export const ModMail = {
    $type: "devvit.reddit.v2alpha.ModMail",
    encode(message, writer = _m0.Writer.create()) {
        if (message.messageAuthor !== undefined) {
            UserV2.encode(message.messageAuthor, writer.uint32(10).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.messageAuthorType !== "") {
            writer.uint32(34).string(message.messageAuthorType);
        }
        if (message.conversationState !== "") {
            writer.uint32(50).string(message.conversationState);
        }
        if (message.conversationType !== "") {
            writer.uint32(58).string(message.conversationType);
        }
        if (message.isAutoGenerated === true) {
            writer.uint32(64).bool(message.isAutoGenerated);
        }
        if (message.conversationSubreddit !== undefined) {
            SubredditV2.encode(message.conversationSubreddit, writer.uint32(74).fork()).ldelim();
        }
        if (message.destinationSubreddit !== undefined) {
            SubredditV2.encode(message.destinationSubreddit, writer.uint32(98).fork()).ldelim();
        }
        if (message.conversationId !== "") {
            writer.uint32(82).string(message.conversationId);
        }
        if (message.messageId !== "") {
            writer.uint32(90).string(message.messageId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModMail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messageAuthor = UserV2.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.messageAuthorType = reader.string();
                    break;
                case 6:
                    message.conversationState = reader.string();
                    break;
                case 7:
                    message.conversationType = reader.string();
                    break;
                case 8:
                    message.isAutoGenerated = reader.bool();
                    break;
                case 9:
                    message.conversationSubreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.destinationSubreddit = SubredditV2.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.conversationId = reader.string();
                    break;
                case 11:
                    message.messageId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageAuthor: isSet(object.messageAuthor) ? UserV2.fromJSON(object.messageAuthor) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            messageAuthorType: isSet(object.messageAuthorType) ? String(object.messageAuthorType) : "",
            conversationState: isSet(object.conversationState) ? String(object.conversationState) : "",
            conversationType: isSet(object.conversationType) ? String(object.conversationType) : "",
            isAutoGenerated: isSet(object.isAutoGenerated) ? Boolean(object.isAutoGenerated) : false,
            conversationSubreddit: isSet(object.conversationSubreddit)
                ? SubredditV2.fromJSON(object.conversationSubreddit)
                : undefined,
            destinationSubreddit: isSet(object.destinationSubreddit)
                ? SubredditV2.fromJSON(object.destinationSubreddit)
                : undefined,
            conversationId: isSet(object.conversationId) ? String(object.conversationId) : "",
            messageId: isSet(object.messageId) ? String(object.messageId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.messageAuthor !== undefined &&
            (obj.messageAuthor = message.messageAuthor ? UserV2.toJSON(message.messageAuthor) : undefined);
        message.createdAt !== undefined && (obj.createdAt = message.createdAt.toISOString());
        message.messageAuthorType !== undefined && (obj.messageAuthorType = message.messageAuthorType);
        message.conversationState !== undefined && (obj.conversationState = message.conversationState);
        message.conversationType !== undefined && (obj.conversationType = message.conversationType);
        message.isAutoGenerated !== undefined && (obj.isAutoGenerated = message.isAutoGenerated);
        message.conversationSubreddit !== undefined && (obj.conversationSubreddit = message.conversationSubreddit
            ? SubredditV2.toJSON(message.conversationSubreddit)
            : undefined);
        message.destinationSubreddit !== undefined && (obj.destinationSubreddit = message.destinationSubreddit
            ? SubredditV2.toJSON(message.destinationSubreddit)
            : undefined);
        message.conversationId !== undefined && (obj.conversationId = message.conversationId);
        message.messageId !== undefined && (obj.messageId = message.messageId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseModMail();
        message.messageAuthor = (object.messageAuthor !== undefined && object.messageAuthor !== null)
            ? UserV2.fromPartial(object.messageAuthor)
            : undefined;
        message.createdAt = object.createdAt ?? undefined;
        message.messageAuthorType = object.messageAuthorType ?? "";
        message.conversationState = object.conversationState ?? "";
        message.conversationType = object.conversationType ?? "";
        message.isAutoGenerated = object.isAutoGenerated ?? false;
        message.conversationSubreddit =
            (object.conversationSubreddit !== undefined && object.conversationSubreddit !== null)
                ? SubredditV2.fromPartial(object.conversationSubreddit)
                : undefined;
        message.destinationSubreddit = (object.destinationSubreddit !== undefined && object.destinationSubreddit !== null)
            ? SubredditV2.fromPartial(object.destinationSubreddit)
            : undefined;
        message.conversationId = object.conversationId ?? "";
        message.messageId = object.messageId ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.ModMail", ModMail);
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

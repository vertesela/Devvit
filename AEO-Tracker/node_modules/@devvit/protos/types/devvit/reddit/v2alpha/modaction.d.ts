/**
 * #modaction.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { CommentV2 } from './commentv2.js';
import { PostV2 } from './postv2.js';
import { SubredditV2 } from './subredditv2.js';
import { UserV2 } from './userv2.js';
export declare enum ModActionType {
    UNKNOWN = 0,
    REMOVE_POST = 1,
    REMOVE_COMMENT = 2,
    APPROVE_POST = 3,
    APPROVE_COMMENT = 4,
    EDIT_POST_FLAIR = 5,
    EDIT_USER_FLAIR = 6,
    LOCK_POST = 7,
    LOCK_COMMENT = 8,
    SPAM_POST = 9,
    SPAM_COMMENT = 10,
    DISTINGUISH_POST = 11,
    DISTINGUISH_COMMENT = 12,
    STICKY_POST = 13,
    STICKY_COMMENT = 14,
    UNRECOGNIZED = -1
}
export declare function modActionTypeFromJSON(object: any): ModActionType;
export declare function modActionTypeToJSON(object: ModActionType): number;
export interface ModAction {
    /**
     * Replaces the action_type enum. The same string used internally (e.g. "removelink")
     * Marking as optional only for typescript compatibility (public-api).
     */
    action?: string | undefined;
    actionedAt?: Date;
    subreddit?: SubredditV2;
    moderator?: UserV2;
    targetUser?: UserV2;
    targetComment?: CommentV2 | undefined;
    targetPost?: PostV2 | undefined;
}
export declare const ModAction: {
    $type: "devvit.reddit.v2alpha.ModAction";
    encode(message: ModAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModAction;
    fromJSON(object: any): ModAction;
    toJSON(message: ModAction): unknown;
    fromPartial<I extends {
        action?: string | undefined;
        actionedAt?: Date | undefined;
        subreddit?: {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("./subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
            topics?: string[] | undefined;
            rating?: import("./subredditv2.js").SubredditRating | undefined;
            subscribersCount?: number | undefined;
            permalink?: string | undefined;
        } | undefined;
        moderator?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            karma?: number | undefined;
        } | undefined;
        targetUser?: {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            karma?: number | undefined;
        } | undefined;
        targetComment?: {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            createdAt?: number | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            languageCode?: string | undefined;
            lastModifiedAt?: number | undefined;
            gilded?: boolean | undefined;
            score?: number | undefined;
            permalink?: string | undefined;
            hasMedia?: boolean | undefined;
            postId?: string | undefined;
            subredditId?: string | undefined;
        } | undefined;
        targetPost?: {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("./postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("./postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            languageCode?: string | undefined;
            updatedAt?: number | undefined;
            gildings?: number | undefined;
            score?: number | undefined;
            numComments?: number | undefined;
            thumbnail?: string | undefined;
            media?: {
                type?: string | undefined;
                oembed?: {
                    type?: string | undefined;
                    version?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorName?: string | undefined;
                    authorUrl?: string | undefined;
                    providerName?: string | undefined;
                    providerUrl?: string | undefined;
                    thumbnailUrl?: string | undefined;
                    thumbnailWidth?: number | undefined;
                    thumbnailHeight?: number | undefined;
                    html?: string | undefined;
                    width?: number | undefined;
                    height?: number | undefined;
                } | undefined;
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    width?: number | undefined;
                    scrubberMediaUrl?: string | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    transcodingStatus?: string | undefined;
                } | undefined;
            } | undefined;
            crosspostParentId?: string | undefined;
            permalink?: string | undefined;
            isPoll?: boolean | undefined;
            isPromoted?: boolean | undefined;
            isMultiMedia?: boolean | undefined;
        } | undefined;
    } & {
        action?: string | undefined;
        actionedAt?: Date | undefined;
        subreddit?: ({
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("./subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
            topics?: string[] | undefined;
            rating?: import("./subredditv2.js").SubredditRating | undefined;
            subscribersCount?: number | undefined;
            permalink?: string | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            nsfw?: boolean | undefined;
            type?: import("./subredditv2.js").SubredditType | undefined;
            spam?: boolean | undefined;
            quarantined?: boolean | undefined;
            topics?: (string[] & string[] & { [K in Exclude<keyof I["subreddit"]["topics"], "$type" | keyof string[]>]: never; }) | undefined;
            rating?: import("./subredditv2.js").SubredditRating | undefined;
            subscribersCount?: number | undefined;
            permalink?: string | undefined;
        } & { [K_1 in Exclude<keyof I["subreddit"], "$type" | keyof SubredditV2>]: never; }) | undefined;
        moderator?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            karma?: number | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_2 in Exclude<keyof I["moderator"]["flair"], "$type" | keyof import("./flair.js").UserFlairV2>]: never; }) | undefined;
            karma?: number | undefined;
        } & { [K_3 in Exclude<keyof I["moderator"], "$type" | keyof UserV2>]: never; }) | undefined;
        targetUser?: ({
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            karma?: number | undefined;
        } & {
            id?: string | undefined;
            name?: string | undefined;
            isGold?: boolean | undefined;
            snoovatarImage?: string | undefined;
            url?: string | undefined;
            spam?: boolean | undefined;
            banned?: boolean | undefined;
            flair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_4 in Exclude<keyof I["targetUser"]["flair"], "$type" | keyof import("./flair.js").UserFlairV2>]: never; }) | undefined;
            karma?: number | undefined;
        } & { [K_5 in Exclude<keyof I["targetUser"], "$type" | keyof UserV2>]: never; }) | undefined;
        targetComment?: ({
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            createdAt?: number | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            languageCode?: string | undefined;
            lastModifiedAt?: number | undefined;
            gilded?: boolean | undefined;
            score?: number | undefined;
            permalink?: string | undefined;
            hasMedia?: boolean | undefined;
            postId?: string | undefined;
            subredditId?: string | undefined;
        } & {
            id?: string | undefined;
            parentId?: string | undefined;
            body?: string | undefined;
            author?: string | undefined;
            numReports?: number | undefined;
            collapsedBecauseCrowdControl?: boolean | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            createdAt?: number | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            languageCode?: string | undefined;
            lastModifiedAt?: number | undefined;
            gilded?: boolean | undefined;
            score?: number | undefined;
            permalink?: string | undefined;
            hasMedia?: boolean | undefined;
            postId?: string | undefined;
            subredditId?: string | undefined;
        } & { [K_6 in Exclude<keyof I["targetComment"], "$type" | keyof CommentV2>]: never; }) | undefined;
        targetPost?: ({
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("./postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("./postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } | undefined;
            authorFlair?: {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            languageCode?: string | undefined;
            updatedAt?: number | undefined;
            gildings?: number | undefined;
            score?: number | undefined;
            numComments?: number | undefined;
            thumbnail?: string | undefined;
            media?: {
                type?: string | undefined;
                oembed?: {
                    type?: string | undefined;
                    version?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorName?: string | undefined;
                    authorUrl?: string | undefined;
                    providerName?: string | undefined;
                    providerUrl?: string | undefined;
                    thumbnailUrl?: string | undefined;
                    thumbnailWidth?: number | undefined;
                    thumbnailHeight?: number | undefined;
                    html?: string | undefined;
                    width?: number | undefined;
                    height?: number | undefined;
                } | undefined;
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    width?: number | undefined;
                    scrubberMediaUrl?: string | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    transcodingStatus?: string | undefined;
                } | undefined;
            } | undefined;
            crosspostParentId?: string | undefined;
            permalink?: string | undefined;
            isPoll?: boolean | undefined;
            isPromoted?: boolean | undefined;
            isMultiMedia?: boolean | undefined;
        } & {
            id?: string | undefined;
            title?: string | undefined;
            selftext?: string | undefined;
            nsfw?: boolean | undefined;
            authorId?: string | undefined;
            crowdControlLevel?: import("./postv2.js").CrowdControlLevel | undefined;
            numReports?: number | undefined;
            isGallery?: boolean | undefined;
            isMeta?: boolean | undefined;
            createdAt?: number | undefined;
            isApproved?: boolean | undefined;
            isArchived?: boolean | undefined;
            distinguished?: import("./postv2.js").DistinguishType | undefined;
            ignoreReports?: boolean | undefined;
            isSelf?: boolean | undefined;
            isVideo?: boolean | undefined;
            isLocked?: boolean | undefined;
            isSpoiler?: boolean | undefined;
            subredditId?: string | undefined;
            upvotes?: number | undefined;
            downvotes?: number | undefined;
            url?: string | undefined;
            isSticky?: boolean | undefined;
            linkFlair?: ({
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & {
                text?: string | undefined;
                cssClass?: string | undefined;
                backgroundColor?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
            } & { [K_7 in Exclude<keyof I["targetPost"]["linkFlair"], "$type" | keyof import("./flair.js").LinkFlairV2>]: never; }) | undefined;
            authorFlair?: ({
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & {
                userId?: string | undefined;
                subredditId?: string | undefined;
                text?: string | undefined;
                cssClass?: string | undefined;
                templateId?: string | undefined;
                textColor?: string | undefined;
                backgroundColor?: string | undefined;
                enabled?: boolean | undefined;
            } & { [K_8 in Exclude<keyof I["targetPost"]["authorFlair"], "$type" | keyof import("./flair.js").UserFlairV2>]: never; }) | undefined;
            spam?: boolean | undefined;
            deleted?: boolean | undefined;
            languageCode?: string | undefined;
            updatedAt?: number | undefined;
            gildings?: number | undefined;
            score?: number | undefined;
            numComments?: number | undefined;
            thumbnail?: string | undefined;
            media?: ({
                type?: string | undefined;
                oembed?: {
                    type?: string | undefined;
                    version?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorName?: string | undefined;
                    authorUrl?: string | undefined;
                    providerName?: string | undefined;
                    providerUrl?: string | undefined;
                    thumbnailUrl?: string | undefined;
                    thumbnailWidth?: number | undefined;
                    thumbnailHeight?: number | undefined;
                    html?: string | undefined;
                    width?: number | undefined;
                    height?: number | undefined;
                } | undefined;
                redditVideo?: {
                    bitrateKbps?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    width?: number | undefined;
                    scrubberMediaUrl?: string | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    transcodingStatus?: string | undefined;
                } | undefined;
            } & {
                type?: string | undefined;
                oembed?: ({
                    type?: string | undefined;
                    version?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorName?: string | undefined;
                    authorUrl?: string | undefined;
                    providerName?: string | undefined;
                    providerUrl?: string | undefined;
                    thumbnailUrl?: string | undefined;
                    thumbnailWidth?: number | undefined;
                    thumbnailHeight?: number | undefined;
                    html?: string | undefined;
                    width?: number | undefined;
                    height?: number | undefined;
                } & {
                    type?: string | undefined;
                    version?: string | undefined;
                    title?: string | undefined;
                    description?: string | undefined;
                    authorName?: string | undefined;
                    authorUrl?: string | undefined;
                    providerName?: string | undefined;
                    providerUrl?: string | undefined;
                    thumbnailUrl?: string | undefined;
                    thumbnailWidth?: number | undefined;
                    thumbnailHeight?: number | undefined;
                    html?: string | undefined;
                    width?: number | undefined;
                    height?: number | undefined;
                } & { [K_9 in Exclude<keyof I["targetPost"]["media"]["oembed"], "$type" | keyof import("./postv2.js").Oembed>]: never; }) | undefined;
                redditVideo?: ({
                    bitrateKbps?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    width?: number | undefined;
                    scrubberMediaUrl?: string | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    transcodingStatus?: string | undefined;
                } & {
                    bitrateKbps?: number | undefined;
                    fallbackUrl?: string | undefined;
                    height?: number | undefined;
                    width?: number | undefined;
                    scrubberMediaUrl?: string | undefined;
                    dashUrl?: string | undefined;
                    duration?: number | undefined;
                    hlsUrl?: string | undefined;
                    isGif?: boolean | undefined;
                    transcodingStatus?: string | undefined;
                } & { [K_10 in Exclude<keyof I["targetPost"]["media"]["redditVideo"], "$type" | keyof import("./postv2.js").RedditVideo>]: never; }) | undefined;
            } & { [K_11 in Exclude<keyof I["targetPost"]["media"], "$type" | keyof import("./postv2.js").MediaObject>]: never; }) | undefined;
            crosspostParentId?: string | undefined;
            permalink?: string | undefined;
            isPoll?: boolean | undefined;
            isPromoted?: boolean | undefined;
            isMultiMedia?: boolean | undefined;
        } & { [K_12 in Exclude<keyof I["targetPost"], "$type" | keyof PostV2>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I, "$type" | keyof ModAction>]: never; }>(object: I): ModAction;
};
//# sourceMappingURL=modaction.d.ts.map
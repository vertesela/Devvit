/**
 * #userv2.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { UserFlairV2 } from './flair.js';
function createBaseUserV2() {
    return {
        id: "",
        name: "",
        isGold: false,
        snoovatarImage: "",
        url: "",
        spam: false,
        banned: false,
        flair: undefined,
        karma: 0,
    };
}
export const UserV2 = {
    $type: "devvit.reddit.v2alpha.UserV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.isGold === true) {
            writer.uint32(24).bool(message.isGold);
        }
        if (message.snoovatarImage !== "") {
            writer.uint32(34).string(message.snoovatarImage);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        if (message.spam === true) {
            writer.uint32(48).bool(message.spam);
        }
        if (message.banned === true) {
            writer.uint32(56).bool(message.banned);
        }
        if (message.flair !== undefined) {
            UserFlairV2.encode(message.flair, writer.uint32(66).fork()).ldelim();
        }
        if (message.karma !== 0) {
            writer.uint32(72).int64(message.karma);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.isGold = reader.bool();
                    break;
                case 4:
                    message.snoovatarImage = reader.string();
                    break;
                case 5:
                    message.url = reader.string();
                    break;
                case 6:
                    message.spam = reader.bool();
                    break;
                case 7:
                    message.banned = reader.bool();
                    break;
                case 8:
                    message.flair = UserFlairV2.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.karma = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            isGold: isSet(object.isGold) ? Boolean(object.isGold) : false,
            snoovatarImage: isSet(object.snoovatarImage) ? String(object.snoovatarImage) : "",
            url: isSet(object.url) ? String(object.url) : "",
            spam: isSet(object.spam) ? Boolean(object.spam) : false,
            banned: isSet(object.banned) ? Boolean(object.banned) : false,
            flair: isSet(object.flair) ? UserFlairV2.fromJSON(object.flair) : undefined,
            karma: isSet(object.karma) ? Number(object.karma) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.isGold !== undefined && (obj.isGold = message.isGold);
        message.snoovatarImage !== undefined && (obj.snoovatarImage = message.snoovatarImage);
        message.url !== undefined && (obj.url = message.url);
        message.spam !== undefined && (obj.spam = message.spam);
        message.banned !== undefined && (obj.banned = message.banned);
        message.flair !== undefined && (obj.flair = message.flair ? UserFlairV2.toJSON(message.flair) : undefined);
        message.karma !== undefined && (obj.karma = Math.round(message.karma));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseUserV2();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.isGold = object.isGold ?? false;
        message.snoovatarImage = object.snoovatarImage ?? "";
        message.url = object.url ?? "";
        message.spam = object.spam ?? false;
        message.banned = object.banned ?? false;
        message.flair = (object.flair !== undefined && object.flair !== null)
            ? UserFlairV2.fromPartial(object.flair)
            : undefined;
        message.karma = object.karma ?? 0;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.v2alpha.UserV2", UserV2);
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

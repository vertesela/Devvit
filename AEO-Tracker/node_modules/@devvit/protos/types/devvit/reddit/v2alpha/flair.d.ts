/**
 * #flair.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export interface LinkFlairV2 {
    text: string;
    cssClass: string;
    backgroundColor: string;
    templateId: string;
    textColor: string;
}
export interface UserFlairV2 {
    userId: string;
    subredditId: string;
    text: string;
    cssClass: string;
    templateId: string;
    textColor: string;
    backgroundColor: string;
    enabled: boolean;
}
export declare const LinkFlairV2: {
    $type: "devvit.reddit.v2alpha.LinkFlairV2";
    encode(message: LinkFlairV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkFlairV2;
    fromJSON(object: any): LinkFlairV2;
    toJSON(message: LinkFlairV2): unknown;
    fromPartial<I extends {
        text?: string | undefined;
        cssClass?: string | undefined;
        backgroundColor?: string | undefined;
        templateId?: string | undefined;
        textColor?: string | undefined;
    } & {
        text?: string | undefined;
        cssClass?: string | undefined;
        backgroundColor?: string | undefined;
        templateId?: string | undefined;
        textColor?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof LinkFlairV2>]: never; }>(object: I): LinkFlairV2;
};
export declare const UserFlairV2: {
    $type: "devvit.reddit.v2alpha.UserFlairV2";
    encode(message: UserFlairV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFlairV2;
    fromJSON(object: any): UserFlairV2;
    toJSON(message: UserFlairV2): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        subredditId?: string | undefined;
        text?: string | undefined;
        cssClass?: string | undefined;
        templateId?: string | undefined;
        textColor?: string | undefined;
        backgroundColor?: string | undefined;
        enabled?: boolean | undefined;
    } & {
        userId?: string | undefined;
        subredditId?: string | undefined;
        text?: string | undefined;
        cssClass?: string | undefined;
        templateId?: string | undefined;
        textColor?: string | undefined;
        backgroundColor?: string | undefined;
        enabled?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UserFlairV2>]: never; }>(object: I): UserFlairV2;
};
//# sourceMappingURL=flair.d.ts.map
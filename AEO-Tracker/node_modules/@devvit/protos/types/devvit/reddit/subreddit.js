/**
 * #subreddit.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { BoolValue, Int32Value, StringValue } from '../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../typeRegistry.js';
import { CommentContributionSettings, UserFlairRichtext } from './common.js';
function createBaseSubreddit() {
    return {
        acceptFollowers: undefined,
        accountsActiveIsFuzzed: undefined,
        accountsActive: undefined,
        activeUserCount: undefined,
        advertiserCategory: undefined,
        allOriginalContent: undefined,
        allowChatPostCreation: undefined,
        allowDiscovery: undefined,
        allowGalleries: undefined,
        allowImages: undefined,
        allowPolls: undefined,
        allowPredictionContributors: undefined,
        allowPredictionsTournament: undefined,
        allowPredictions: undefined,
        allowTalks: undefined,
        allowVideogifs: undefined,
        allowVideos: undefined,
        allowedMediaInComments: [],
        bannerBackgroundColor: undefined,
        bannerBackgroundImage: undefined,
        bannerImg: undefined,
        bannerSize: [],
        canAssignLinkFlair: undefined,
        canAssignUserFlair: undefined,
        coins: undefined,
        collapseDeletedComments: undefined,
        commentContributionSettings: undefined,
        commentScoreHideMins: undefined,
        communityIcon: undefined,
        communityReviewed: undefined,
        contentCategory: undefined,
        createdUtc: undefined,
        created: undefined,
        defaultSet: undefined,
        description: undefined,
        descriptionHtml: undefined,
        disableContributorRequests: undefined,
        displayName: undefined,
        displayNamePrefixed: undefined,
        emojisCustomSize: [],
        emojisEnabled: undefined,
        freeFormReports: undefined,
        hasMenuWidget: undefined,
        headerImg: undefined,
        headerSize: [],
        headerTitle: undefined,
        hideAds: undefined,
        iconColor: undefined,
        iconImg: undefined,
        iconSize: [],
        id: undefined,
        isChatPostFeatureEnabled: undefined,
        isCrosspostableSubreddit: undefined,
        isDefaultBanner: undefined,
        isDefaultIcon: undefined,
        isEnrolledInNewModmail: undefined,
        keyColor: undefined,
        lang: undefined,
        linkFlairEnabled: undefined,
        linkFlairPosition: undefined,
        mobileBannerImage: undefined,
        name: undefined,
        notificationLevel: undefined,
        originalContentTagEnabled: undefined,
        over18: undefined,
        predictionLeaderboardEntryType: undefined,
        previousNames: [],
        primaryColor: undefined,
        publicDescription: undefined,
        publicDescriptionHtml: undefined,
        publicTraffic: undefined,
        quarantine: undefined,
        restrictCommenting: undefined,
        restrictPosting: undefined,
        shouldArchivePosts: undefined,
        shouldShowMediaInCommentsSetting: undefined,
        showMedia: undefined,
        showMediaPreview: undefined,
        spoilersEnabled: undefined,
        submissionType: undefined,
        submitLinkLabel: undefined,
        submitText: undefined,
        submitTextHtml: undefined,
        submitTextLabel: undefined,
        subredditType: undefined,
        subscribers: undefined,
        suggestedCommentSort: undefined,
        title: undefined,
        url: undefined,
        userCanFlairInSr: undefined,
        userFlairBackgroundColor: undefined,
        userFlairCssClass: undefined,
        userFlairEnabledInSr: undefined,
        userFlairPosition: undefined,
        userFlairRichtext: [],
        userFlairTemplateId: undefined,
        userFlairText: undefined,
        userFlairTextColor: undefined,
        userFlairType: undefined,
        userHasFavorited: undefined,
        userIsBanned: undefined,
        userIsContributor: undefined,
        userIsModerator: undefined,
        userIsSubscriber: undefined,
        userSrFlairEnabled: undefined,
        userSrThemeEnabled: undefined,
        videostreamLinksCount: undefined,
        whitelistStatus: undefined,
        wikiEnabled: undefined,
        wls: undefined,
        markedSpam: undefined,
        postRequirements: undefined,
        userIsMuted: false,
    };
}
export const Subreddit = {
    $type: "devvit.reddit.Subreddit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.acceptFollowers !== undefined) {
            BoolValue.encode({ value: message.acceptFollowers }, writer.uint32(10).fork()).ldelim();
        }
        if (message.accountsActiveIsFuzzed !== undefined) {
            BoolValue.encode({ value: message.accountsActiveIsFuzzed }, writer.uint32(18).fork()).ldelim();
        }
        if (message.accountsActive !== undefined) {
            Int32Value.encode({ value: message.accountsActive }, writer.uint32(26).fork()).ldelim();
        }
        if (message.activeUserCount !== undefined) {
            Int32Value.encode({ value: message.activeUserCount }, writer.uint32(34).fork()).ldelim();
        }
        if (message.advertiserCategory !== undefined) {
            StringValue.encode({ value: message.advertiserCategory }, writer.uint32(42).fork()).ldelim();
        }
        if (message.allOriginalContent !== undefined) {
            BoolValue.encode({ value: message.allOriginalContent }, writer.uint32(50).fork()).ldelim();
        }
        if (message.allowChatPostCreation !== undefined) {
            BoolValue.encode({ value: message.allowChatPostCreation }, writer.uint32(58).fork()).ldelim();
        }
        if (message.allowDiscovery !== undefined) {
            BoolValue.encode({ value: message.allowDiscovery }, writer.uint32(66).fork()).ldelim();
        }
        if (message.allowGalleries !== undefined) {
            BoolValue.encode({ value: message.allowGalleries }, writer.uint32(74).fork()).ldelim();
        }
        if (message.allowImages !== undefined) {
            BoolValue.encode({ value: message.allowImages }, writer.uint32(82).fork()).ldelim();
        }
        if (message.allowPolls !== undefined) {
            BoolValue.encode({ value: message.allowPolls }, writer.uint32(90).fork()).ldelim();
        }
        if (message.allowPredictionContributors !== undefined) {
            BoolValue.encode({ value: message.allowPredictionContributors }, writer.uint32(98).fork()).ldelim();
        }
        if (message.allowPredictionsTournament !== undefined) {
            BoolValue.encode({ value: message.allowPredictionsTournament }, writer.uint32(106).fork()).ldelim();
        }
        if (message.allowPredictions !== undefined) {
            BoolValue.encode({ value: message.allowPredictions }, writer.uint32(114).fork()).ldelim();
        }
        if (message.allowTalks !== undefined) {
            BoolValue.encode({ value: message.allowTalks }, writer.uint32(122).fork()).ldelim();
        }
        if (message.allowVideogifs !== undefined) {
            BoolValue.encode({ value: message.allowVideogifs }, writer.uint32(130).fork()).ldelim();
        }
        if (message.allowVideos !== undefined) {
            BoolValue.encode({ value: message.allowVideos }, writer.uint32(138).fork()).ldelim();
        }
        for (const v of message.allowedMediaInComments) {
            StringValue.encode({ value: v }, writer.uint32(146).fork()).ldelim();
        }
        if (message.bannerBackgroundColor !== undefined) {
            StringValue.encode({ value: message.bannerBackgroundColor }, writer.uint32(154).fork()).ldelim();
        }
        if (message.bannerBackgroundImage !== undefined) {
            StringValue.encode({ value: message.bannerBackgroundImage }, writer.uint32(162).fork()).ldelim();
        }
        if (message.bannerImg !== undefined) {
            StringValue.encode({ value: message.bannerImg }, writer.uint32(170).fork()).ldelim();
        }
        for (const v of message.bannerSize) {
            Int32Value.encode({ value: v }, writer.uint32(178).fork()).ldelim();
        }
        if (message.canAssignLinkFlair !== undefined) {
            BoolValue.encode({ value: message.canAssignLinkFlair }, writer.uint32(186).fork()).ldelim();
        }
        if (message.canAssignUserFlair !== undefined) {
            BoolValue.encode({ value: message.canAssignUserFlair }, writer.uint32(194).fork()).ldelim();
        }
        if (message.coins !== undefined) {
            Int32Value.encode({ value: message.coins }, writer.uint32(202).fork()).ldelim();
        }
        if (message.collapseDeletedComments !== undefined) {
            BoolValue.encode({ value: message.collapseDeletedComments }, writer.uint32(210).fork()).ldelim();
        }
        if (message.commentContributionSettings !== undefined) {
            CommentContributionSettings.encode(message.commentContributionSettings, writer.uint32(218).fork()).ldelim();
        }
        if (message.commentScoreHideMins !== undefined) {
            Int32Value.encode({ value: message.commentScoreHideMins }, writer.uint32(226).fork()).ldelim();
        }
        if (message.communityIcon !== undefined) {
            StringValue.encode({ value: message.communityIcon }, writer.uint32(234).fork()).ldelim();
        }
        if (message.communityReviewed !== undefined) {
            BoolValue.encode({ value: message.communityReviewed }, writer.uint32(242).fork()).ldelim();
        }
        if (message.contentCategory !== undefined) {
            StringValue.encode({ value: message.contentCategory }, writer.uint32(250).fork()).ldelim();
        }
        if (message.createdUtc !== undefined) {
            Int32Value.encode({ value: message.createdUtc }, writer.uint32(258).fork()).ldelim();
        }
        if (message.created !== undefined) {
            Int32Value.encode({ value: message.created }, writer.uint32(266).fork()).ldelim();
        }
        if (message.defaultSet !== undefined) {
            BoolValue.encode({ value: message.defaultSet }, writer.uint32(274).fork()).ldelim();
        }
        if (message.description !== undefined) {
            StringValue.encode({ value: message.description }, writer.uint32(282).fork()).ldelim();
        }
        if (message.descriptionHtml !== undefined) {
            StringValue.encode({ value: message.descriptionHtml }, writer.uint32(290).fork()).ldelim();
        }
        if (message.disableContributorRequests !== undefined) {
            BoolValue.encode({ value: message.disableContributorRequests }, writer.uint32(298).fork()).ldelim();
        }
        if (message.displayName !== undefined) {
            StringValue.encode({ value: message.displayName }, writer.uint32(306).fork()).ldelim();
        }
        if (message.displayNamePrefixed !== undefined) {
            StringValue.encode({ value: message.displayNamePrefixed }, writer.uint32(314).fork()).ldelim();
        }
        for (const v of message.emojisCustomSize) {
            Int32Value.encode({ value: v }, writer.uint32(322).fork()).ldelim();
        }
        if (message.emojisEnabled !== undefined) {
            BoolValue.encode({ value: message.emojisEnabled }, writer.uint32(330).fork()).ldelim();
        }
        if (message.freeFormReports !== undefined) {
            BoolValue.encode({ value: message.freeFormReports }, writer.uint32(338).fork()).ldelim();
        }
        if (message.hasMenuWidget !== undefined) {
            BoolValue.encode({ value: message.hasMenuWidget }, writer.uint32(346).fork()).ldelim();
        }
        if (message.headerImg !== undefined) {
            StringValue.encode({ value: message.headerImg }, writer.uint32(354).fork()).ldelim();
        }
        for (const v of message.headerSize) {
            Int32Value.encode({ value: v }, writer.uint32(362).fork()).ldelim();
        }
        if (message.headerTitle !== undefined) {
            StringValue.encode({ value: message.headerTitle }, writer.uint32(370).fork()).ldelim();
        }
        if (message.hideAds !== undefined) {
            BoolValue.encode({ value: message.hideAds }, writer.uint32(378).fork()).ldelim();
        }
        if (message.iconColor !== undefined) {
            StringValue.encode({ value: message.iconColor }, writer.uint32(386).fork()).ldelim();
        }
        if (message.iconImg !== undefined) {
            StringValue.encode({ value: message.iconImg }, writer.uint32(394).fork()).ldelim();
        }
        for (const v of message.iconSize) {
            Int32Value.encode({ value: v }, writer.uint32(402).fork()).ldelim();
        }
        if (message.id !== undefined) {
            StringValue.encode({ value: message.id }, writer.uint32(410).fork()).ldelim();
        }
        if (message.isChatPostFeatureEnabled !== undefined) {
            BoolValue.encode({ value: message.isChatPostFeatureEnabled }, writer.uint32(418).fork()).ldelim();
        }
        if (message.isCrosspostableSubreddit !== undefined) {
            BoolValue.encode({ value: message.isCrosspostableSubreddit }, writer.uint32(426).fork()).ldelim();
        }
        if (message.isDefaultBanner !== undefined) {
            BoolValue.encode({ value: message.isDefaultBanner }, writer.uint32(434).fork()).ldelim();
        }
        if (message.isDefaultIcon !== undefined) {
            BoolValue.encode({ value: message.isDefaultIcon }, writer.uint32(442).fork()).ldelim();
        }
        if (message.isEnrolledInNewModmail !== undefined) {
            BoolValue.encode({ value: message.isEnrolledInNewModmail }, writer.uint32(450).fork()).ldelim();
        }
        if (message.keyColor !== undefined) {
            StringValue.encode({ value: message.keyColor }, writer.uint32(458).fork()).ldelim();
        }
        if (message.lang !== undefined) {
            StringValue.encode({ value: message.lang }, writer.uint32(466).fork()).ldelim();
        }
        if (message.linkFlairEnabled !== undefined) {
            BoolValue.encode({ value: message.linkFlairEnabled }, writer.uint32(474).fork()).ldelim();
        }
        if (message.linkFlairPosition !== undefined) {
            StringValue.encode({ value: message.linkFlairPosition }, writer.uint32(482).fork()).ldelim();
        }
        if (message.mobileBannerImage !== undefined) {
            StringValue.encode({ value: message.mobileBannerImage }, writer.uint32(490).fork()).ldelim();
        }
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(498).fork()).ldelim();
        }
        if (message.notificationLevel !== undefined) {
            StringValue.encode({ value: message.notificationLevel }, writer.uint32(506).fork()).ldelim();
        }
        if (message.originalContentTagEnabled !== undefined) {
            StringValue.encode({ value: message.originalContentTagEnabled }, writer.uint32(514).fork()).ldelim();
        }
        if (message.over18 !== undefined) {
            BoolValue.encode({ value: message.over18 }, writer.uint32(522).fork()).ldelim();
        }
        if (message.predictionLeaderboardEntryType !== undefined) {
            StringValue.encode({ value: message.predictionLeaderboardEntryType }, writer.uint32(530).fork()).ldelim();
        }
        for (const v of message.previousNames) {
            StringValue.encode({ value: v }, writer.uint32(538).fork()).ldelim();
        }
        if (message.primaryColor !== undefined) {
            StringValue.encode({ value: message.primaryColor }, writer.uint32(546).fork()).ldelim();
        }
        if (message.publicDescription !== undefined) {
            StringValue.encode({ value: message.publicDescription }, writer.uint32(554).fork()).ldelim();
        }
        if (message.publicDescriptionHtml !== undefined) {
            StringValue.encode({ value: message.publicDescriptionHtml }, writer.uint32(562).fork()).ldelim();
        }
        if (message.publicTraffic !== undefined) {
            BoolValue.encode({ value: message.publicTraffic }, writer.uint32(570).fork()).ldelim();
        }
        if (message.quarantine !== undefined) {
            BoolValue.encode({ value: message.quarantine }, writer.uint32(578).fork()).ldelim();
        }
        if (message.restrictCommenting !== undefined) {
            BoolValue.encode({ value: message.restrictCommenting }, writer.uint32(586).fork()).ldelim();
        }
        if (message.restrictPosting !== undefined) {
            BoolValue.encode({ value: message.restrictPosting }, writer.uint32(594).fork()).ldelim();
        }
        if (message.shouldArchivePosts !== undefined) {
            BoolValue.encode({ value: message.shouldArchivePosts }, writer.uint32(602).fork()).ldelim();
        }
        if (message.shouldShowMediaInCommentsSetting !== undefined) {
            BoolValue.encode({ value: message.shouldShowMediaInCommentsSetting }, writer.uint32(610).fork()).ldelim();
        }
        if (message.showMedia !== undefined) {
            BoolValue.encode({ value: message.showMedia }, writer.uint32(618).fork()).ldelim();
        }
        if (message.showMediaPreview !== undefined) {
            BoolValue.encode({ value: message.showMediaPreview }, writer.uint32(626).fork()).ldelim();
        }
        if (message.spoilersEnabled !== undefined) {
            BoolValue.encode({ value: message.spoilersEnabled }, writer.uint32(634).fork()).ldelim();
        }
        if (message.submissionType !== undefined) {
            StringValue.encode({ value: message.submissionType }, writer.uint32(642).fork()).ldelim();
        }
        if (message.submitLinkLabel !== undefined) {
            StringValue.encode({ value: message.submitLinkLabel }, writer.uint32(650).fork()).ldelim();
        }
        if (message.submitText !== undefined) {
            StringValue.encode({ value: message.submitText }, writer.uint32(658).fork()).ldelim();
        }
        if (message.submitTextHtml !== undefined) {
            StringValue.encode({ value: message.submitTextHtml }, writer.uint32(666).fork()).ldelim();
        }
        if (message.submitTextLabel !== undefined) {
            StringValue.encode({ value: message.submitTextLabel }, writer.uint32(674).fork()).ldelim();
        }
        if (message.subredditType !== undefined) {
            StringValue.encode({ value: message.subredditType }, writer.uint32(682).fork()).ldelim();
        }
        if (message.subscribers !== undefined) {
            Int32Value.encode({ value: message.subscribers }, writer.uint32(690).fork()).ldelim();
        }
        if (message.suggestedCommentSort !== undefined) {
            StringValue.encode({ value: message.suggestedCommentSort }, writer.uint32(698).fork()).ldelim();
        }
        if (message.title !== undefined) {
            StringValue.encode({ value: message.title }, writer.uint32(706).fork()).ldelim();
        }
        if (message.url !== undefined) {
            StringValue.encode({ value: message.url }, writer.uint32(714).fork()).ldelim();
        }
        if (message.userCanFlairInSr !== undefined) {
            BoolValue.encode({ value: message.userCanFlairInSr }, writer.uint32(722).fork()).ldelim();
        }
        if (message.userFlairBackgroundColor !== undefined) {
            StringValue.encode({ value: message.userFlairBackgroundColor }, writer.uint32(730).fork()).ldelim();
        }
        if (message.userFlairCssClass !== undefined) {
            StringValue.encode({ value: message.userFlairCssClass }, writer.uint32(738).fork()).ldelim();
        }
        if (message.userFlairEnabledInSr !== undefined) {
            BoolValue.encode({ value: message.userFlairEnabledInSr }, writer.uint32(746).fork()).ldelim();
        }
        if (message.userFlairPosition !== undefined) {
            StringValue.encode({ value: message.userFlairPosition }, writer.uint32(754).fork()).ldelim();
        }
        for (const v of message.userFlairRichtext) {
            UserFlairRichtext.encode(v, writer.uint32(762).fork()).ldelim();
        }
        if (message.userFlairTemplateId !== undefined) {
            StringValue.encode({ value: message.userFlairTemplateId }, writer.uint32(770).fork()).ldelim();
        }
        if (message.userFlairText !== undefined) {
            StringValue.encode({ value: message.userFlairText }, writer.uint32(778).fork()).ldelim();
        }
        if (message.userFlairTextColor !== undefined) {
            StringValue.encode({ value: message.userFlairTextColor }, writer.uint32(786).fork()).ldelim();
        }
        if (message.userFlairType !== undefined) {
            StringValue.encode({ value: message.userFlairType }, writer.uint32(794).fork()).ldelim();
        }
        if (message.userHasFavorited !== undefined) {
            BoolValue.encode({ value: message.userHasFavorited }, writer.uint32(802).fork()).ldelim();
        }
        if (message.userIsBanned !== undefined) {
            BoolValue.encode({ value: message.userIsBanned }, writer.uint32(810).fork()).ldelim();
        }
        if (message.userIsContributor !== undefined) {
            BoolValue.encode({ value: message.userIsContributor }, writer.uint32(818).fork()).ldelim();
        }
        if (message.userIsModerator !== undefined) {
            BoolValue.encode({ value: message.userIsModerator }, writer.uint32(826).fork()).ldelim();
        }
        if (message.userIsSubscriber !== undefined) {
            BoolValue.encode({ value: message.userIsSubscriber }, writer.uint32(842).fork()).ldelim();
        }
        if (message.userSrFlairEnabled !== undefined) {
            BoolValue.encode({ value: message.userSrFlairEnabled }, writer.uint32(850).fork()).ldelim();
        }
        if (message.userSrThemeEnabled !== undefined) {
            BoolValue.encode({ value: message.userSrThemeEnabled }, writer.uint32(858).fork()).ldelim();
        }
        if (message.videostreamLinksCount !== undefined) {
            Int32Value.encode({ value: message.videostreamLinksCount }, writer.uint32(866).fork()).ldelim();
        }
        if (message.whitelistStatus !== undefined) {
            StringValue.encode({ value: message.whitelistStatus }, writer.uint32(874).fork()).ldelim();
        }
        if (message.wikiEnabled !== undefined) {
            BoolValue.encode({ value: message.wikiEnabled }, writer.uint32(882).fork()).ldelim();
        }
        if (message.wls !== undefined) {
            Int32Value.encode({ value: message.wls }, writer.uint32(890).fork()).ldelim();
        }
        if (message.markedSpam !== undefined) {
            BoolValue.encode({ value: message.markedSpam }, writer.uint32(898).fork()).ldelim();
        }
        if (message.postRequirements !== undefined) {
            Subreddit_PostRequirements.encode(message.postRequirements, writer.uint32(906).fork()).ldelim();
        }
        if (message.userIsMuted === true) {
            writer.uint32(912).bool(message.userIsMuted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubreddit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.acceptFollowers = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 2:
                    message.accountsActiveIsFuzzed = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.accountsActive = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.activeUserCount = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 5:
                    message.advertiserCategory = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 6:
                    message.allOriginalContent = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 7:
                    message.allowChatPostCreation = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 8:
                    message.allowDiscovery = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 9:
                    message.allowGalleries = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 10:
                    message.allowImages = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 11:
                    message.allowPolls = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 12:
                    message.allowPredictionContributors = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 13:
                    message.allowPredictionsTournament = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 14:
                    message.allowPredictions = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 15:
                    message.allowTalks = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 16:
                    message.allowVideogifs = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 17:
                    message.allowVideos = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 18:
                    message.allowedMediaInComments.push(StringValue.decode(reader, reader.uint32()).value);
                    break;
                case 19:
                    message.bannerBackgroundColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 20:
                    message.bannerBackgroundImage = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 21:
                    message.bannerImg = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 22:
                    message.bannerSize.push(Int32Value.decode(reader, reader.uint32()).value);
                    break;
                case 23:
                    message.canAssignLinkFlair = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 24:
                    message.canAssignUserFlair = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 25:
                    message.coins = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 26:
                    message.collapseDeletedComments = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 27:
                    message.commentContributionSettings = CommentContributionSettings.decode(reader, reader.uint32());
                    break;
                case 28:
                    message.commentScoreHideMins = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 29:
                    message.communityIcon = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 30:
                    message.communityReviewed = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 31:
                    message.contentCategory = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 32:
                    message.createdUtc = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 33:
                    message.created = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 34:
                    message.defaultSet = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 35:
                    message.description = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 36:
                    message.descriptionHtml = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 37:
                    message.disableContributorRequests = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 38:
                    message.displayName = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 39:
                    message.displayNamePrefixed = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 40:
                    message.emojisCustomSize.push(Int32Value.decode(reader, reader.uint32()).value);
                    break;
                case 41:
                    message.emojisEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 42:
                    message.freeFormReports = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 43:
                    message.hasMenuWidget = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 44:
                    message.headerImg = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 45:
                    message.headerSize.push(Int32Value.decode(reader, reader.uint32()).value);
                    break;
                case 46:
                    message.headerTitle = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 47:
                    message.hideAds = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 48:
                    message.iconColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 49:
                    message.iconImg = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 50:
                    message.iconSize.push(Int32Value.decode(reader, reader.uint32()).value);
                    break;
                case 51:
                    message.id = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 52:
                    message.isChatPostFeatureEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 53:
                    message.isCrosspostableSubreddit = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 54:
                    message.isDefaultBanner = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 55:
                    message.isDefaultIcon = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 56:
                    message.isEnrolledInNewModmail = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 57:
                    message.keyColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 58:
                    message.lang = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 59:
                    message.linkFlairEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 60:
                    message.linkFlairPosition = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 61:
                    message.mobileBannerImage = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 62:
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 63:
                    message.notificationLevel = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 64:
                    message.originalContentTagEnabled = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 65:
                    message.over18 = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 66:
                    message.predictionLeaderboardEntryType = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 67:
                    message.previousNames.push(StringValue.decode(reader, reader.uint32()).value);
                    break;
                case 68:
                    message.primaryColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 69:
                    message.publicDescription = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 70:
                    message.publicDescriptionHtml = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 71:
                    message.publicTraffic = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 72:
                    message.quarantine = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 73:
                    message.restrictCommenting = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 74:
                    message.restrictPosting = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 75:
                    message.shouldArchivePosts = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 76:
                    message.shouldShowMediaInCommentsSetting = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 77:
                    message.showMedia = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 78:
                    message.showMediaPreview = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 79:
                    message.spoilersEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 80:
                    message.submissionType = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 81:
                    message.submitLinkLabel = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 82:
                    message.submitText = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 83:
                    message.submitTextHtml = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 84:
                    message.submitTextLabel = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 85:
                    message.subredditType = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 86:
                    message.subscribers = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 87:
                    message.suggestedCommentSort = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 88:
                    message.title = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 89:
                    message.url = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 90:
                    message.userCanFlairInSr = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 91:
                    message.userFlairBackgroundColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 92:
                    message.userFlairCssClass = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 93:
                    message.userFlairEnabledInSr = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 94:
                    message.userFlairPosition = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 95:
                    message.userFlairRichtext.push(UserFlairRichtext.decode(reader, reader.uint32()));
                    break;
                case 96:
                    message.userFlairTemplateId = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 97:
                    message.userFlairText = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 98:
                    message.userFlairTextColor = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 99:
                    message.userFlairType = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 100:
                    message.userHasFavorited = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 101:
                    message.userIsBanned = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 102:
                    message.userIsContributor = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 103:
                    message.userIsModerator = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 105:
                    message.userIsSubscriber = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 106:
                    message.userSrFlairEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 107:
                    message.userSrThemeEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 108:
                    message.videostreamLinksCount = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 109:
                    message.whitelistStatus = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 110:
                    message.wikiEnabled = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 111:
                    message.wls = Int32Value.decode(reader, reader.uint32()).value;
                    break;
                case 112:
                    message.markedSpam = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 113:
                    message.postRequirements = Subreddit_PostRequirements.decode(reader, reader.uint32());
                    break;
                case 114:
                    message.userIsMuted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            acceptFollowers: isSet(object.acceptFollowers) ? Boolean(object.acceptFollowers) : undefined,
            accountsActiveIsFuzzed: isSet(object.accountsActiveIsFuzzed) ? Boolean(object.accountsActiveIsFuzzed) : undefined,
            accountsActive: isSet(object.accountsActive) ? Number(object.accountsActive) : undefined,
            activeUserCount: isSet(object.activeUserCount) ? Number(object.activeUserCount) : undefined,
            advertiserCategory: isSet(object.advertiserCategory) ? String(object.advertiserCategory) : undefined,
            allOriginalContent: isSet(object.allOriginalContent) ? Boolean(object.allOriginalContent) : undefined,
            allowChatPostCreation: isSet(object.allowChatPostCreation) ? Boolean(object.allowChatPostCreation) : undefined,
            allowDiscovery: isSet(object.allowDiscovery) ? Boolean(object.allowDiscovery) : undefined,
            allowGalleries: isSet(object.allowGalleries) ? Boolean(object.allowGalleries) : undefined,
            allowImages: isSet(object.allowImages) ? Boolean(object.allowImages) : undefined,
            allowPolls: isSet(object.allowPolls) ? Boolean(object.allowPolls) : undefined,
            allowPredictionContributors: isSet(object.allowPredictionContributors)
                ? Boolean(object.allowPredictionContributors)
                : undefined,
            allowPredictionsTournament: isSet(object.allowPredictionsTournament)
                ? Boolean(object.allowPredictionsTournament)
                : undefined,
            allowPredictions: isSet(object.allowPredictions) ? Boolean(object.allowPredictions) : undefined,
            allowTalks: isSet(object.allowTalks) ? Boolean(object.allowTalks) : undefined,
            allowVideogifs: isSet(object.allowVideogifs) ? Boolean(object.allowVideogifs) : undefined,
            allowVideos: isSet(object.allowVideos) ? Boolean(object.allowVideos) : undefined,
            allowedMediaInComments: Array.isArray(object?.allowedMediaInComments)
                ? object.allowedMediaInComments.map((e) => String(e))
                : [],
            bannerBackgroundColor: isSet(object.bannerBackgroundColor) ? String(object.bannerBackgroundColor) : undefined,
            bannerBackgroundImage: isSet(object.bannerBackgroundImage) ? String(object.bannerBackgroundImage) : undefined,
            bannerImg: isSet(object.bannerImg) ? String(object.bannerImg) : undefined,
            bannerSize: Array.isArray(object?.bannerSize) ? object.bannerSize.map((e) => Number(e)) : [],
            canAssignLinkFlair: isSet(object.canAssignLinkFlair) ? Boolean(object.canAssignLinkFlair) : undefined,
            canAssignUserFlair: isSet(object.canAssignUserFlair) ? Boolean(object.canAssignUserFlair) : undefined,
            coins: isSet(object.coins) ? Number(object.coins) : undefined,
            collapseDeletedComments: isSet(object.collapseDeletedComments)
                ? Boolean(object.collapseDeletedComments)
                : undefined,
            commentContributionSettings: isSet(object.commentContributionSettings)
                ? CommentContributionSettings.fromJSON(object.commentContributionSettings)
                : undefined,
            commentScoreHideMins: isSet(object.commentScoreHideMins) ? Number(object.commentScoreHideMins) : undefined,
            communityIcon: isSet(object.communityIcon) ? String(object.communityIcon) : undefined,
            communityReviewed: isSet(object.communityReviewed) ? Boolean(object.communityReviewed) : undefined,
            contentCategory: isSet(object.contentCategory) ? String(object.contentCategory) : undefined,
            createdUtc: isSet(object.createdUtc) ? Number(object.createdUtc) : undefined,
            created: isSet(object.created) ? Number(object.created) : undefined,
            defaultSet: isSet(object.defaultSet) ? Boolean(object.defaultSet) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            descriptionHtml: isSet(object.descriptionHtml) ? String(object.descriptionHtml) : undefined,
            disableContributorRequests: isSet(object.disableContributorRequests)
                ? Boolean(object.disableContributorRequests)
                : undefined,
            displayName: isSet(object.displayName) ? String(object.displayName) : undefined,
            displayNamePrefixed: isSet(object.displayNamePrefixed) ? String(object.displayNamePrefixed) : undefined,
            emojisCustomSize: Array.isArray(object?.emojisCustomSize)
                ? object.emojisCustomSize.map((e) => Number(e))
                : [],
            emojisEnabled: isSet(object.emojisEnabled) ? Boolean(object.emojisEnabled) : undefined,
            freeFormReports: isSet(object.freeFormReports) ? Boolean(object.freeFormReports) : undefined,
            hasMenuWidget: isSet(object.hasMenuWidget) ? Boolean(object.hasMenuWidget) : undefined,
            headerImg: isSet(object.headerImg) ? String(object.headerImg) : undefined,
            headerSize: Array.isArray(object?.headerSize) ? object.headerSize.map((e) => Number(e)) : [],
            headerTitle: isSet(object.headerTitle) ? String(object.headerTitle) : undefined,
            hideAds: isSet(object.hideAds) ? Boolean(object.hideAds) : undefined,
            iconColor: isSet(object.iconColor) ? String(object.iconColor) : undefined,
            iconImg: isSet(object.iconImg) ? String(object.iconImg) : undefined,
            iconSize: Array.isArray(object?.iconSize) ? object.iconSize.map((e) => Number(e)) : [],
            id: isSet(object.id) ? String(object.id) : undefined,
            isChatPostFeatureEnabled: isSet(object.isChatPostFeatureEnabled)
                ? Boolean(object.isChatPostFeatureEnabled)
                : undefined,
            isCrosspostableSubreddit: isSet(object.isCrosspostableSubreddit)
                ? Boolean(object.isCrosspostableSubreddit)
                : undefined,
            isDefaultBanner: isSet(object.isDefaultBanner) ? Boolean(object.isDefaultBanner) : undefined,
            isDefaultIcon: isSet(object.isDefaultIcon) ? Boolean(object.isDefaultIcon) : undefined,
            isEnrolledInNewModmail: isSet(object.isEnrolledInNewModmail) ? Boolean(object.isEnrolledInNewModmail) : undefined,
            keyColor: isSet(object.keyColor) ? String(object.keyColor) : undefined,
            lang: isSet(object.lang) ? String(object.lang) : undefined,
            linkFlairEnabled: isSet(object.linkFlairEnabled) ? Boolean(object.linkFlairEnabled) : undefined,
            linkFlairPosition: isSet(object.linkFlairPosition) ? String(object.linkFlairPosition) : undefined,
            mobileBannerImage: isSet(object.mobileBannerImage) ? String(object.mobileBannerImage) : undefined,
            name: isSet(object.name) ? String(object.name) : undefined,
            notificationLevel: isSet(object.notificationLevel) ? String(object.notificationLevel) : undefined,
            originalContentTagEnabled: isSet(object.originalContentTagEnabled)
                ? String(object.originalContentTagEnabled)
                : undefined,
            over18: isSet(object.over18) ? Boolean(object.over18) : undefined,
            predictionLeaderboardEntryType: isSet(object.predictionLeaderboardEntryType)
                ? String(object.predictionLeaderboardEntryType)
                : undefined,
            previousNames: Array.isArray(object?.previousNames)
                ? object.previousNames.map((e) => String(e))
                : [],
            primaryColor: isSet(object.primaryColor) ? String(object.primaryColor) : undefined,
            publicDescription: isSet(object.publicDescription) ? String(object.publicDescription) : undefined,
            publicDescriptionHtml: isSet(object.publicDescriptionHtml) ? String(object.publicDescriptionHtml) : undefined,
            publicTraffic: isSet(object.publicTraffic) ? Boolean(object.publicTraffic) : undefined,
            quarantine: isSet(object.quarantine) ? Boolean(object.quarantine) : undefined,
            restrictCommenting: isSet(object.restrictCommenting) ? Boolean(object.restrictCommenting) : undefined,
            restrictPosting: isSet(object.restrictPosting) ? Boolean(object.restrictPosting) : undefined,
            shouldArchivePosts: isSet(object.shouldArchivePosts) ? Boolean(object.shouldArchivePosts) : undefined,
            shouldShowMediaInCommentsSetting: isSet(object.shouldShowMediaInCommentsSetting)
                ? Boolean(object.shouldShowMediaInCommentsSetting)
                : undefined,
            showMedia: isSet(object.showMedia) ? Boolean(object.showMedia) : undefined,
            showMediaPreview: isSet(object.showMediaPreview) ? Boolean(object.showMediaPreview) : undefined,
            spoilersEnabled: isSet(object.spoilersEnabled) ? Boolean(object.spoilersEnabled) : undefined,
            submissionType: isSet(object.submissionType) ? String(object.submissionType) : undefined,
            submitLinkLabel: isSet(object.submitLinkLabel) ? String(object.submitLinkLabel) : undefined,
            submitText: isSet(object.submitText) ? String(object.submitText) : undefined,
            submitTextHtml: isSet(object.submitTextHtml) ? String(object.submitTextHtml) : undefined,
            submitTextLabel: isSet(object.submitTextLabel) ? String(object.submitTextLabel) : undefined,
            subredditType: isSet(object.subredditType) ? String(object.subredditType) : undefined,
            subscribers: isSet(object.subscribers) ? Number(object.subscribers) : undefined,
            suggestedCommentSort: isSet(object.suggestedCommentSort) ? String(object.suggestedCommentSort) : undefined,
            title: isSet(object.title) ? String(object.title) : undefined,
            url: isSet(object.url) ? String(object.url) : undefined,
            userCanFlairInSr: isSet(object.userCanFlairInSr) ? Boolean(object.userCanFlairInSr) : undefined,
            userFlairBackgroundColor: isSet(object.userFlairBackgroundColor)
                ? String(object.userFlairBackgroundColor)
                : undefined,
            userFlairCssClass: isSet(object.userFlairCssClass) ? String(object.userFlairCssClass) : undefined,
            userFlairEnabledInSr: isSet(object.userFlairEnabledInSr) ? Boolean(object.userFlairEnabledInSr) : undefined,
            userFlairPosition: isSet(object.userFlairPosition) ? String(object.userFlairPosition) : undefined,
            userFlairRichtext: Array.isArray(object?.userFlairRichtext)
                ? object.userFlairRichtext.map((e) => UserFlairRichtext.fromJSON(e))
                : [],
            userFlairTemplateId: isSet(object.userFlairTemplateId) ? String(object.userFlairTemplateId) : undefined,
            userFlairText: isSet(object.userFlairText) ? String(object.userFlairText) : undefined,
            userFlairTextColor: isSet(object.userFlairTextColor) ? String(object.userFlairTextColor) : undefined,
            userFlairType: isSet(object.userFlairType) ? String(object.userFlairType) : undefined,
            userHasFavorited: isSet(object.userHasFavorited) ? Boolean(object.userHasFavorited) : undefined,
            userIsBanned: isSet(object.userIsBanned) ? Boolean(object.userIsBanned) : undefined,
            userIsContributor: isSet(object.userIsContributor) ? Boolean(object.userIsContributor) : undefined,
            userIsModerator: isSet(object.userIsModerator) ? Boolean(object.userIsModerator) : undefined,
            userIsSubscriber: isSet(object.userIsSubscriber) ? Boolean(object.userIsSubscriber) : undefined,
            userSrFlairEnabled: isSet(object.userSrFlairEnabled) ? Boolean(object.userSrFlairEnabled) : undefined,
            userSrThemeEnabled: isSet(object.userSrThemeEnabled) ? Boolean(object.userSrThemeEnabled) : undefined,
            videostreamLinksCount: isSet(object.videostreamLinksCount) ? Number(object.videostreamLinksCount) : undefined,
            whitelistStatus: isSet(object.whitelistStatus) ? String(object.whitelistStatus) : undefined,
            wikiEnabled: isSet(object.wikiEnabled) ? Boolean(object.wikiEnabled) : undefined,
            wls: isSet(object.wls) ? Number(object.wls) : undefined,
            markedSpam: isSet(object.markedSpam) ? Boolean(object.markedSpam) : undefined,
            postRequirements: isSet(object.postRequirements)
                ? Subreddit_PostRequirements.fromJSON(object.postRequirements)
                : undefined,
            userIsMuted: isSet(object.userIsMuted) ? Boolean(object.userIsMuted) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.acceptFollowers !== undefined && (obj.acceptFollowers = message.acceptFollowers);
        message.accountsActiveIsFuzzed !== undefined && (obj.accountsActiveIsFuzzed = message.accountsActiveIsFuzzed);
        message.accountsActive !== undefined && (obj.accountsActive = message.accountsActive);
        message.activeUserCount !== undefined && (obj.activeUserCount = message.activeUserCount);
        message.advertiserCategory !== undefined && (obj.advertiserCategory = message.advertiserCategory);
        message.allOriginalContent !== undefined && (obj.allOriginalContent = message.allOriginalContent);
        message.allowChatPostCreation !== undefined && (obj.allowChatPostCreation = message.allowChatPostCreation);
        message.allowDiscovery !== undefined && (obj.allowDiscovery = message.allowDiscovery);
        message.allowGalleries !== undefined && (obj.allowGalleries = message.allowGalleries);
        message.allowImages !== undefined && (obj.allowImages = message.allowImages);
        message.allowPolls !== undefined && (obj.allowPolls = message.allowPolls);
        message.allowPredictionContributors !== undefined &&
            (obj.allowPredictionContributors = message.allowPredictionContributors);
        message.allowPredictionsTournament !== undefined &&
            (obj.allowPredictionsTournament = message.allowPredictionsTournament);
        message.allowPredictions !== undefined && (obj.allowPredictions = message.allowPredictions);
        message.allowTalks !== undefined && (obj.allowTalks = message.allowTalks);
        message.allowVideogifs !== undefined && (obj.allowVideogifs = message.allowVideogifs);
        message.allowVideos !== undefined && (obj.allowVideos = message.allowVideos);
        if (message.allowedMediaInComments) {
            obj.allowedMediaInComments = message.allowedMediaInComments.map((e) => e);
        }
        else {
            obj.allowedMediaInComments = [];
        }
        message.bannerBackgroundColor !== undefined && (obj.bannerBackgroundColor = message.bannerBackgroundColor);
        message.bannerBackgroundImage !== undefined && (obj.bannerBackgroundImage = message.bannerBackgroundImage);
        message.bannerImg !== undefined && (obj.bannerImg = message.bannerImg);
        if (message.bannerSize) {
            obj.bannerSize = message.bannerSize.map((e) => e);
        }
        else {
            obj.bannerSize = [];
        }
        message.canAssignLinkFlair !== undefined && (obj.canAssignLinkFlair = message.canAssignLinkFlair);
        message.canAssignUserFlair !== undefined && (obj.canAssignUserFlair = message.canAssignUserFlair);
        message.coins !== undefined && (obj.coins = message.coins);
        message.collapseDeletedComments !== undefined && (obj.collapseDeletedComments = message.collapseDeletedComments);
        message.commentContributionSettings !== undefined &&
            (obj.commentContributionSettings = message.commentContributionSettings
                ? CommentContributionSettings.toJSON(message.commentContributionSettings)
                : undefined);
        message.commentScoreHideMins !== undefined && (obj.commentScoreHideMins = message.commentScoreHideMins);
        message.communityIcon !== undefined && (obj.communityIcon = message.communityIcon);
        message.communityReviewed !== undefined && (obj.communityReviewed = message.communityReviewed);
        message.contentCategory !== undefined && (obj.contentCategory = message.contentCategory);
        message.createdUtc !== undefined && (obj.createdUtc = message.createdUtc);
        message.created !== undefined && (obj.created = message.created);
        message.defaultSet !== undefined && (obj.defaultSet = message.defaultSet);
        message.description !== undefined && (obj.description = message.description);
        message.descriptionHtml !== undefined && (obj.descriptionHtml = message.descriptionHtml);
        message.disableContributorRequests !== undefined &&
            (obj.disableContributorRequests = message.disableContributorRequests);
        message.displayName !== undefined && (obj.displayName = message.displayName);
        message.displayNamePrefixed !== undefined && (obj.displayNamePrefixed = message.displayNamePrefixed);
        if (message.emojisCustomSize) {
            obj.emojisCustomSize = message.emojisCustomSize.map((e) => e);
        }
        else {
            obj.emojisCustomSize = [];
        }
        message.emojisEnabled !== undefined && (obj.emojisEnabled = message.emojisEnabled);
        message.freeFormReports !== undefined && (obj.freeFormReports = message.freeFormReports);
        message.hasMenuWidget !== undefined && (obj.hasMenuWidget = message.hasMenuWidget);
        message.headerImg !== undefined && (obj.headerImg = message.headerImg);
        if (message.headerSize) {
            obj.headerSize = message.headerSize.map((e) => e);
        }
        else {
            obj.headerSize = [];
        }
        message.headerTitle !== undefined && (obj.headerTitle = message.headerTitle);
        message.hideAds !== undefined && (obj.hideAds = message.hideAds);
        message.iconColor !== undefined && (obj.iconColor = message.iconColor);
        message.iconImg !== undefined && (obj.iconImg = message.iconImg);
        if (message.iconSize) {
            obj.iconSize = message.iconSize.map((e) => e);
        }
        else {
            obj.iconSize = [];
        }
        message.id !== undefined && (obj.id = message.id);
        message.isChatPostFeatureEnabled !== undefined && (obj.isChatPostFeatureEnabled = message.isChatPostFeatureEnabled);
        message.isCrosspostableSubreddit !== undefined && (obj.isCrosspostableSubreddit = message.isCrosspostableSubreddit);
        message.isDefaultBanner !== undefined && (obj.isDefaultBanner = message.isDefaultBanner);
        message.isDefaultIcon !== undefined && (obj.isDefaultIcon = message.isDefaultIcon);
        message.isEnrolledInNewModmail !== undefined && (obj.isEnrolledInNewModmail = message.isEnrolledInNewModmail);
        message.keyColor !== undefined && (obj.keyColor = message.keyColor);
        message.lang !== undefined && (obj.lang = message.lang);
        message.linkFlairEnabled !== undefined && (obj.linkFlairEnabled = message.linkFlairEnabled);
        message.linkFlairPosition !== undefined && (obj.linkFlairPosition = message.linkFlairPosition);
        message.mobileBannerImage !== undefined && (obj.mobileBannerImage = message.mobileBannerImage);
        message.name !== undefined && (obj.name = message.name);
        message.notificationLevel !== undefined && (obj.notificationLevel = message.notificationLevel);
        message.originalContentTagEnabled !== undefined &&
            (obj.originalContentTagEnabled = message.originalContentTagEnabled);
        message.over18 !== undefined && (obj.over18 = message.over18);
        message.predictionLeaderboardEntryType !== undefined &&
            (obj.predictionLeaderboardEntryType = message.predictionLeaderboardEntryType);
        if (message.previousNames) {
            obj.previousNames = message.previousNames.map((e) => e);
        }
        else {
            obj.previousNames = [];
        }
        message.primaryColor !== undefined && (obj.primaryColor = message.primaryColor);
        message.publicDescription !== undefined && (obj.publicDescription = message.publicDescription);
        message.publicDescriptionHtml !== undefined && (obj.publicDescriptionHtml = message.publicDescriptionHtml);
        message.publicTraffic !== undefined && (obj.publicTraffic = message.publicTraffic);
        message.quarantine !== undefined && (obj.quarantine = message.quarantine);
        message.restrictCommenting !== undefined && (obj.restrictCommenting = message.restrictCommenting);
        message.restrictPosting !== undefined && (obj.restrictPosting = message.restrictPosting);
        message.shouldArchivePosts !== undefined && (obj.shouldArchivePosts = message.shouldArchivePosts);
        message.shouldShowMediaInCommentsSetting !== undefined &&
            (obj.shouldShowMediaInCommentsSetting = message.shouldShowMediaInCommentsSetting);
        message.showMedia !== undefined && (obj.showMedia = message.showMedia);
        message.showMediaPreview !== undefined && (obj.showMediaPreview = message.showMediaPreview);
        message.spoilersEnabled !== undefined && (obj.spoilersEnabled = message.spoilersEnabled);
        message.submissionType !== undefined && (obj.submissionType = message.submissionType);
        message.submitLinkLabel !== undefined && (obj.submitLinkLabel = message.submitLinkLabel);
        message.submitText !== undefined && (obj.submitText = message.submitText);
        message.submitTextHtml !== undefined && (obj.submitTextHtml = message.submitTextHtml);
        message.submitTextLabel !== undefined && (obj.submitTextLabel = message.submitTextLabel);
        message.subredditType !== undefined && (obj.subredditType = message.subredditType);
        message.subscribers !== undefined && (obj.subscribers = message.subscribers);
        message.suggestedCommentSort !== undefined && (obj.suggestedCommentSort = message.suggestedCommentSort);
        message.title !== undefined && (obj.title = message.title);
        message.url !== undefined && (obj.url = message.url);
        message.userCanFlairInSr !== undefined && (obj.userCanFlairInSr = message.userCanFlairInSr);
        message.userFlairBackgroundColor !== undefined && (obj.userFlairBackgroundColor = message.userFlairBackgroundColor);
        message.userFlairCssClass !== undefined && (obj.userFlairCssClass = message.userFlairCssClass);
        message.userFlairEnabledInSr !== undefined && (obj.userFlairEnabledInSr = message.userFlairEnabledInSr);
        message.userFlairPosition !== undefined && (obj.userFlairPosition = message.userFlairPosition);
        if (message.userFlairRichtext) {
            obj.userFlairRichtext = message.userFlairRichtext.map((e) => e ? UserFlairRichtext.toJSON(e) : undefined);
        }
        else {
            obj.userFlairRichtext = [];
        }
        message.userFlairTemplateId !== undefined && (obj.userFlairTemplateId = message.userFlairTemplateId);
        message.userFlairText !== undefined && (obj.userFlairText = message.userFlairText);
        message.userFlairTextColor !== undefined && (obj.userFlairTextColor = message.userFlairTextColor);
        message.userFlairType !== undefined && (obj.userFlairType = message.userFlairType);
        message.userHasFavorited !== undefined && (obj.userHasFavorited = message.userHasFavorited);
        message.userIsBanned !== undefined && (obj.userIsBanned = message.userIsBanned);
        message.userIsContributor !== undefined && (obj.userIsContributor = message.userIsContributor);
        message.userIsModerator !== undefined && (obj.userIsModerator = message.userIsModerator);
        message.userIsSubscriber !== undefined && (obj.userIsSubscriber = message.userIsSubscriber);
        message.userSrFlairEnabled !== undefined && (obj.userSrFlairEnabled = message.userSrFlairEnabled);
        message.userSrThemeEnabled !== undefined && (obj.userSrThemeEnabled = message.userSrThemeEnabled);
        message.videostreamLinksCount !== undefined && (obj.videostreamLinksCount = message.videostreamLinksCount);
        message.whitelistStatus !== undefined && (obj.whitelistStatus = message.whitelistStatus);
        message.wikiEnabled !== undefined && (obj.wikiEnabled = message.wikiEnabled);
        message.wls !== undefined && (obj.wls = message.wls);
        message.markedSpam !== undefined && (obj.markedSpam = message.markedSpam);
        message.postRequirements !== undefined && (obj.postRequirements = message.postRequirements
            ? Subreddit_PostRequirements.toJSON(message.postRequirements)
            : undefined);
        message.userIsMuted !== undefined && (obj.userIsMuted = message.userIsMuted);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSubreddit();
        message.acceptFollowers = object.acceptFollowers ?? undefined;
        message.accountsActiveIsFuzzed = object.accountsActiveIsFuzzed ?? undefined;
        message.accountsActive = object.accountsActive ?? undefined;
        message.activeUserCount = object.activeUserCount ?? undefined;
        message.advertiserCategory = object.advertiserCategory ?? undefined;
        message.allOriginalContent = object.allOriginalContent ?? undefined;
        message.allowChatPostCreation = object.allowChatPostCreation ?? undefined;
        message.allowDiscovery = object.allowDiscovery ?? undefined;
        message.allowGalleries = object.allowGalleries ?? undefined;
        message.allowImages = object.allowImages ?? undefined;
        message.allowPolls = object.allowPolls ?? undefined;
        message.allowPredictionContributors = object.allowPredictionContributors ?? undefined;
        message.allowPredictionsTournament = object.allowPredictionsTournament ?? undefined;
        message.allowPredictions = object.allowPredictions ?? undefined;
        message.allowTalks = object.allowTalks ?? undefined;
        message.allowVideogifs = object.allowVideogifs ?? undefined;
        message.allowVideos = object.allowVideos ?? undefined;
        message.allowedMediaInComments = object.allowedMediaInComments?.map((e) => e) || [];
        message.bannerBackgroundColor = object.bannerBackgroundColor ?? undefined;
        message.bannerBackgroundImage = object.bannerBackgroundImage ?? undefined;
        message.bannerImg = object.bannerImg ?? undefined;
        message.bannerSize = object.bannerSize?.map((e) => e) || [];
        message.canAssignLinkFlair = object.canAssignLinkFlair ?? undefined;
        message.canAssignUserFlair = object.canAssignUserFlair ?? undefined;
        message.coins = object.coins ?? undefined;
        message.collapseDeletedComments = object.collapseDeletedComments ?? undefined;
        message.commentContributionSettings =
            (object.commentContributionSettings !== undefined && object.commentContributionSettings !== null)
                ? CommentContributionSettings.fromPartial(object.commentContributionSettings)
                : undefined;
        message.commentScoreHideMins = object.commentScoreHideMins ?? undefined;
        message.communityIcon = object.communityIcon ?? undefined;
        message.communityReviewed = object.communityReviewed ?? undefined;
        message.contentCategory = object.contentCategory ?? undefined;
        message.createdUtc = object.createdUtc ?? undefined;
        message.created = object.created ?? undefined;
        message.defaultSet = object.defaultSet ?? undefined;
        message.description = object.description ?? undefined;
        message.descriptionHtml = object.descriptionHtml ?? undefined;
        message.disableContributorRequests = object.disableContributorRequests ?? undefined;
        message.displayName = object.displayName ?? undefined;
        message.displayNamePrefixed = object.displayNamePrefixed ?? undefined;
        message.emojisCustomSize = object.emojisCustomSize?.map((e) => e) || [];
        message.emojisEnabled = object.emojisEnabled ?? undefined;
        message.freeFormReports = object.freeFormReports ?? undefined;
        message.hasMenuWidget = object.hasMenuWidget ?? undefined;
        message.headerImg = object.headerImg ?? undefined;
        message.headerSize = object.headerSize?.map((e) => e) || [];
        message.headerTitle = object.headerTitle ?? undefined;
        message.hideAds = object.hideAds ?? undefined;
        message.iconColor = object.iconColor ?? undefined;
        message.iconImg = object.iconImg ?? undefined;
        message.iconSize = object.iconSize?.map((e) => e) || [];
        message.id = object.id ?? undefined;
        message.isChatPostFeatureEnabled = object.isChatPostFeatureEnabled ?? undefined;
        message.isCrosspostableSubreddit = object.isCrosspostableSubreddit ?? undefined;
        message.isDefaultBanner = object.isDefaultBanner ?? undefined;
        message.isDefaultIcon = object.isDefaultIcon ?? undefined;
        message.isEnrolledInNewModmail = object.isEnrolledInNewModmail ?? undefined;
        message.keyColor = object.keyColor ?? undefined;
        message.lang = object.lang ?? undefined;
        message.linkFlairEnabled = object.linkFlairEnabled ?? undefined;
        message.linkFlairPosition = object.linkFlairPosition ?? undefined;
        message.mobileBannerImage = object.mobileBannerImage ?? undefined;
        message.name = object.name ?? undefined;
        message.notificationLevel = object.notificationLevel ?? undefined;
        message.originalContentTagEnabled = object.originalContentTagEnabled ?? undefined;
        message.over18 = object.over18 ?? undefined;
        message.predictionLeaderboardEntryType = object.predictionLeaderboardEntryType ?? undefined;
        message.previousNames = object.previousNames?.map((e) => e) || [];
        message.primaryColor = object.primaryColor ?? undefined;
        message.publicDescription = object.publicDescription ?? undefined;
        message.publicDescriptionHtml = object.publicDescriptionHtml ?? undefined;
        message.publicTraffic = object.publicTraffic ?? undefined;
        message.quarantine = object.quarantine ?? undefined;
        message.restrictCommenting = object.restrictCommenting ?? undefined;
        message.restrictPosting = object.restrictPosting ?? undefined;
        message.shouldArchivePosts = object.shouldArchivePosts ?? undefined;
        message.shouldShowMediaInCommentsSetting = object.shouldShowMediaInCommentsSetting ?? undefined;
        message.showMedia = object.showMedia ?? undefined;
        message.showMediaPreview = object.showMediaPreview ?? undefined;
        message.spoilersEnabled = object.spoilersEnabled ?? undefined;
        message.submissionType = object.submissionType ?? undefined;
        message.submitLinkLabel = object.submitLinkLabel ?? undefined;
        message.submitText = object.submitText ?? undefined;
        message.submitTextHtml = object.submitTextHtml ?? undefined;
        message.submitTextLabel = object.submitTextLabel ?? undefined;
        message.subredditType = object.subredditType ?? undefined;
        message.subscribers = object.subscribers ?? undefined;
        message.suggestedCommentSort = object.suggestedCommentSort ?? undefined;
        message.title = object.title ?? undefined;
        message.url = object.url ?? undefined;
        message.userCanFlairInSr = object.userCanFlairInSr ?? undefined;
        message.userFlairBackgroundColor = object.userFlairBackgroundColor ?? undefined;
        message.userFlairCssClass = object.userFlairCssClass ?? undefined;
        message.userFlairEnabledInSr = object.userFlairEnabledInSr ?? undefined;
        message.userFlairPosition = object.userFlairPosition ?? undefined;
        message.userFlairRichtext = object.userFlairRichtext?.map((e) => UserFlairRichtext.fromPartial(e)) || [];
        message.userFlairTemplateId = object.userFlairTemplateId ?? undefined;
        message.userFlairText = object.userFlairText ?? undefined;
        message.userFlairTextColor = object.userFlairTextColor ?? undefined;
        message.userFlairType = object.userFlairType ?? undefined;
        message.userHasFavorited = object.userHasFavorited ?? undefined;
        message.userIsBanned = object.userIsBanned ?? undefined;
        message.userIsContributor = object.userIsContributor ?? undefined;
        message.userIsModerator = object.userIsModerator ?? undefined;
        message.userIsSubscriber = object.userIsSubscriber ?? undefined;
        message.userSrFlairEnabled = object.userSrFlairEnabled ?? undefined;
        message.userSrThemeEnabled = object.userSrThemeEnabled ?? undefined;
        message.videostreamLinksCount = object.videostreamLinksCount ?? undefined;
        message.whitelistStatus = object.whitelistStatus ?? undefined;
        message.wikiEnabled = object.wikiEnabled ?? undefined;
        message.wls = object.wls ?? undefined;
        message.markedSpam = object.markedSpam ?? undefined;
        message.postRequirements = (object.postRequirements !== undefined && object.postRequirements !== null)
            ? Subreddit_PostRequirements.fromPartial(object.postRequirements)
            : undefined;
        message.userIsMuted = object.userIsMuted ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.Subreddit", Subreddit);
function createBaseSubreddit_PostRequirements() {
    return { bodyRestrictionPolicy: undefined };
}
export const Subreddit_PostRequirements = {
    $type: "devvit.reddit.Subreddit.PostRequirements",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bodyRestrictionPolicy !== undefined) {
            StringValue.encode({ value: message.bodyRestrictionPolicy }, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubreddit_PostRequirements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bodyRestrictionPolicy = StringValue.decode(reader, reader.uint32()).value;
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bodyRestrictionPolicy: isSet(object.bodyRestrictionPolicy) ? String(object.bodyRestrictionPolicy) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bodyRestrictionPolicy !== undefined && (obj.bodyRestrictionPolicy = message.bodyRestrictionPolicy);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSubreddit_PostRequirements();
        message.bodyRestrictionPolicy = object.bodyRestrictionPolicy ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.reddit.Subreddit.PostRequirements", Subreddit_PostRequirements);
function isSet(value) {
    return value !== null && value !== undefined;
}

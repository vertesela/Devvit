/**
 * #users_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { BoolValue } from '../../../../google/protobuf/wrappers.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { BlockUserRequest, BlockUserResponse, FriendRequest, GeneralFriendResponse, GenericUsersRequest, ReportUserRequest, SetPermissionsRequest, UnfriendRequest, UpdateFriendRelationshipRequest, UserAboutRequest, UserAboutResponse, UserDataByAccountIdsRequest, UserDataByAccountIdsResponse, UsernameAvailableRequest, UserTrophiesResponse, UserWhereRequest } from './users_msg.js';
/**
 * USERS - https://www.reddit.com/dev/api#section_users
 * Note: all endpoints require oauth
 */
export interface Users {
    /** https://www.reddit.com/dev/api#POST_api_block_user */
    BlockUser(request: BlockUserRequest, metadata?: Metadata): Promise<BlockUserResponse>;
    /** https://www.reddit.com/dev/api#POST_api_friend */
    Friend(request: FriendRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_report_user */
    ReportUser(request: ReportUserRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_setpermissions */
    SetPermissions(request: SetPermissionsRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_unfriend */
    Unfriend(request: UnfriendRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_api_user_data_by_account_ids */
    UserDataByAccountIds(request: UserDataByAccountIdsRequest, metadata?: Metadata): Promise<UserDataByAccountIdsResponse>;
    /** https://www.reddit.com/dev/api#GET_api_username_available */
    UsernameAvailable(request: UsernameAvailableRequest, metadata?: Metadata): Promise<BoolValue>;
    /** https://www.reddit.com/dev/api#DELETE_api_v1_me_friends_username */
    UnfriendUser(request: GenericUsersRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_api_v1_me_friends_username */
    GetFriendInformation(request: GenericUsersRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    /** https://www.reddit.com/dev/api#PUT_api_v1_me_friends_username */
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    /** https://www.reddit.com/dev/api#GET_api_v1_user_username_trophies */
    UserTrophies(request: GenericUsersRequest, metadata?: Metadata): Promise<UserTrophiesResponse>;
    /** https://www.reddit.com/dev/api#GET_user_username_about */
    UserAbout(request: UserAboutRequest, metadata?: Metadata): Promise<UserAboutResponse>;
    /** https://www.reddit.com/dev/api#GET_user_username_where */
    UserWhere(request: UserWhereRequest, metadata?: Metadata): Promise<Listing>;
}
export declare class UsersClientImpl implements Users {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    BlockUser(request: BlockUserRequest): Promise<BlockUserResponse>;
    Friend(request: FriendRequest): Promise<JsonStatus>;
    ReportUser(request: ReportUserRequest): Promise<Empty>;
    SetPermissions(request: SetPermissionsRequest): Promise<JsonStatus>;
    Unfriend(request: UnfriendRequest): Promise<Empty>;
    UserDataByAccountIds(request: UserDataByAccountIdsRequest): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(request: UsernameAvailableRequest): Promise<BoolValue>;
    UnfriendUser(request: GenericUsersRequest): Promise<Empty>;
    GetFriendInformation(request: GenericUsersRequest): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest): Promise<GeneralFriendResponse>;
    UserTrophies(request: GenericUsersRequest): Promise<UserTrophiesResponse>;
    UserAbout(request: UserAboutRequest): Promise<UserAboutResponse>;
    UserWhere(request: UserWhereRequest): Promise<Listing>;
}
/**
 * USERS - https://www.reddit.com/dev/api#section_users
 * Note: all endpoints require oauth
 */
export type UsersDefinition = typeof UsersDefinition;
export declare const UsersDefinition: {
    name: 'Users';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=users_svc.d.ts.map
/**
 * #linksandcomments_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { BasicIdRequest, CommentRequest, FollowPostRequest, InfoRequest, JsonWrappedComment, MoreChildrenRequest, ReportAwardRequest, ReportRequest, SaveRequest, SendRepliesRequest, SetContestModeRequest, SetSubredditStickyRequest, SetSuggestedSortRequest, SubmitRequest, SubmitResponse, VoteRequest } from './linksandcomments_msg.js';
/**
 * LINKS & COMMENTS - https://www.reddit.com/dev/api#section_links_and_comments
 * Note: all endpoints require oauth
 */
export interface LinksAndComments {
    /**
     * Submit a new Comment
     * Note: `thing_id` refers to the Post or Comment this comment is replying to
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_comment}
     */
    Comment(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Delete a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_del}
     */
    Del(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Edit the body text of a Comment or Post
     * Note: `thing_id` refers to the Post or Comment being edited
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_editusertext}
     */
    EditUserText(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Follow or unfollow a Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_follow_post}
     */
    FollowPost(request: FollowPostRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Hide one or more Posts for the user
     * Note: `id` must be one or more comma-separated Post thing IDs
     *
     * @see {@link Unhide}
     * @see {@link https://www.reddit.com/dev/api#POST_api_hide}
     */
    Hide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get one or more things by ID, Subreddit name, or Link Post URL
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_info}
     */
    Info(request: InfoRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Disable comments for a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_lock}
     */
    Lock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Marks a Post as Not-Safe-For-Work
     *
     * @see {@link UnmarkNSFW}
     * @see {@link https://www.reddit.com/dev/api#POST_api_marknsfw}
     */
    MarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get more comments from a truncated Comment tree
     *
     * A comment tree has been truncated if it ends with an entry of kind "more"
     * instead of "t1".  Use this API to fetch the additional comments listed in
     * the "children" array of the "more" entry.
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_morechildren}
     */
    MoreChildren(request: MoreChildrenRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Report a Post, Comment, or Private Message
     *
     * If reporting a Post or Comment the report is sent to the moderators of the subreddit for review.
     * If reporting a Private Message the report is sent to Reddit for review.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_report}
     */
    Report(request: ReportRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Report an award to Reddit for review
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_report_award}
     */
    ReportAward(request: ReportAwardRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Save a Post or Comment to the user's Saved list
     *
     * @see {@link Unsave}
     * @see {@link https://www.reddit.com/dev/api#POST_api_save}
     */
    Save(request: SaveRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Enable or disable reply notifications for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_sendreplies}
     */
    SendReplies(request: SendRepliesRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Toggle Contest Mode for a Post's comments
     *
     * Contest Mode randomizes the sort order and hides the vote score for comments
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_contest_mode}
     */
    SetContestMode(request: SetContestModeRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Set the "sticky" or "pinned" status of a Post
     *
     * If the post was created by the current user they can pin the post
     * to the top of their user profile.  Otherwise they must be a moderator
     * of the subreddit to stick it to the top of the subreddit it was posted in.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_subreddit_sticky}
     */
    SetSubredditSticky(request: SetSubredditStickyRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Set the default sort order for comments in the given Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_suggested_sort}
     */
    SetSuggestedSort(request: SetSuggestedSortRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Sets the spoiler tag on a given Post to hide its contents by default
     * Note: `id` must be a single thing ID for a Post
     *
     * @see {@link Unspoiler}
     * @see {@link https://www.reddit.com/dev/api#POST_api_spoiler}
     */
    Spoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Create a new Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_submit}
     */
    Submit(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    /**
     * Unhide one or more Posts for the user
     * Note: `id` must be one or more comma-separated Post thing IDs
     *
     * @see {@link Hide}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unhide}
     */
    Unhide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Enable comments for a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link Lock}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unlock}
     */
    Unlock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Clears the Not-Safe-For-Work status from a Post
     *
     * @see {@link MarkNSFW}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unmarknsfw}
     */
    UnmarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Remove a Post or Comment from the user's Saved list
     *
     * @see {@link Save}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unsave}
     */
    Unsave(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Clears the spoiler tag on a given Post
     *
     * @see {@link Spoiler}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unspoiler}
     */
    Unspoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Vote or clear a vote on a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_vote}
     */
    Vote(request: VoteRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class LinksAndCommentsClientImpl implements LinksAndComments {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Comment(request: CommentRequest): Promise<JsonWrappedComment>;
    Del(request: BasicIdRequest): Promise<Empty>;
    EditUserText(request: CommentRequest): Promise<JsonWrappedComment>;
    FollowPost(request: FollowPostRequest): Promise<Empty>;
    Hide(request: BasicIdRequest): Promise<Empty>;
    Info(request: InfoRequest): Promise<Listing>;
    Lock(request: BasicIdRequest): Promise<Empty>;
    MarkNSFW(request: BasicIdRequest): Promise<Empty>;
    MoreChildren(request: MoreChildrenRequest): Promise<JsonWrappedComment>;
    Report(request: ReportRequest): Promise<JsonStatus>;
    ReportAward(request: ReportAwardRequest): Promise<Empty>;
    Save(request: SaveRequest): Promise<Empty>;
    SendReplies(request: SendRepliesRequest): Promise<Empty>;
    SetContestMode(request: SetContestModeRequest): Promise<JsonStatus>;
    SetSubredditSticky(request: SetSubredditStickyRequest): Promise<JsonStatus>;
    SetSuggestedSort(request: SetSuggestedSortRequest): Promise<JsonStatus>;
    Spoiler(request: BasicIdRequest): Promise<Empty>;
    Submit(request: SubmitRequest): Promise<SubmitResponse>;
    Unhide(request: BasicIdRequest): Promise<Empty>;
    Unlock(request: BasicIdRequest): Promise<Empty>;
    UnmarkNSFW(request: BasicIdRequest): Promise<Empty>;
    Unsave(request: BasicIdRequest): Promise<Empty>;
    Unspoiler(request: BasicIdRequest): Promise<Empty>;
    Vote(request: VoteRequest): Promise<Empty>;
}
/**
 * LINKS & COMMENTS - https://www.reddit.com/dev/api#section_links_and_comments
 * Note: all endpoints require oauth
 */
export type LinksAndCommentsDefinition = typeof LinksAndCommentsDefinition;
export declare const LinksAndCommentsDefinition: {
    name: 'LinksAndComments';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=linksandcomments_svc.d.ts.map
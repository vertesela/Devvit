/**
 * #modnote_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { DeleteNotesRequest, DeleteNotesResponse, GetNotesRequest, ModNotesResponse, PostModNotesResponse, PostNotesRequest, PostRemovalNoteRequest, RecentNotesRequest } from './modnote_msg.js';
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export interface ModNote {
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
    GetNotes(request: GetNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
    DeleteNotes(request: DeleteNotesRequest, metadata?: Metadata): Promise<DeleteNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
    PostNotes(request: PostNotesRequest, metadata?: Metadata): Promise<PostModNotesResponse>;
    /** Add a mod note for why a post or comment was removed */
    PostRemovalNote(request: PostRemovalNoteRequest, metadata?: Metadata): Promise<Empty>;
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
    RecentNotes(request: RecentNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
}
export declare class ModNoteClientImpl implements ModNote {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetNotes(request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest): Promise<ModNotesResponse>;
}
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export type ModNoteDefinition = typeof ModNoteDefinition;
export declare const ModNoteDefinition: {
    name: 'ModNote';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=modnote_svc.d.ts.map
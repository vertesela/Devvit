/**
 * #privatemessages_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing } from '../common/common_msg.js';
import { ComposeRequest, GenericPrivateMessagesRequest, MessageWhereRequest, ReadAllMessagesRequest } from './privatemessages_msg.js';
/**
 * PRIVATE MESSAGES - https://www.reddit.com/dev/api#section_messages
 * Note: all endpoints require oauth
 */
export interface PrivateMessages {
    /** https://www.reddit.com/dev/api#POST_api_block */
    Block(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_collapse_message */
    CollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_compose */
    Compose(request: ComposeRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_del_msg */
    DelMsg(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_read_all_messages */
    ReadAllMessages(request: ReadAllMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_read_message */
    ReadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unblock_subreddit */
    UnblockSubreddit(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_uncollapse_message */
    UncollapseMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unread_message */
    UnreadMessage(request: GenericPrivateMessagesRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_message_where */
    MessageWhere(request: MessageWhereRequest, metadata?: Metadata): Promise<Listing>;
}
export declare class PrivateMessagesClientImpl implements PrivateMessages {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Block(request: GenericPrivateMessagesRequest): Promise<Empty>;
    CollapseMessage(request: GenericPrivateMessagesRequest): Promise<Empty>;
    Compose(request: ComposeRequest): Promise<Empty>;
    DelMsg(request: GenericPrivateMessagesRequest): Promise<Empty>;
    ReadAllMessages(request: ReadAllMessagesRequest): Promise<Empty>;
    ReadMessage(request: GenericPrivateMessagesRequest): Promise<Empty>;
    UnblockSubreddit(request: GenericPrivateMessagesRequest): Promise<Empty>;
    UncollapseMessage(request: GenericPrivateMessagesRequest): Promise<Empty>;
    UnreadMessage(request: GenericPrivateMessagesRequest): Promise<Empty>;
    MessageWhere(request: MessageWhereRequest): Promise<Listing>;
}
/**
 * PRIVATE MESSAGES - https://www.reddit.com/dev/api#section_messages
 * Note: all endpoints require oauth
 */
export type PrivateMessagesDefinition = typeof PrivateMessagesDefinition;
export declare const PrivateMessagesDefinition: {
    name: 'PrivateMessages';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=privatemessages_svc.d.ts.map
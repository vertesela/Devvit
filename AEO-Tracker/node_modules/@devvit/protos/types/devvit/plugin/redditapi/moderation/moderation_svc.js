/**
 * #moderation_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
import { JsonRedditObjects, JsonStatus, Listing } from '../common/common_msg.js';
import { AboutLocationRequest, AboutLogRequest, AboutLogResponse, AcceptModeratorInviteRequest, BasicModerationIdRequest, DistinguishRequest, RemoveRequest, SnoozeReportsRequest, StylesheetRequest, UpdateCrowdControlLevelRequest, } from './moderation_msg.js';
export class ModerationClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.redditapi.moderation.Moderation";
        this.rpc = rpc;
        this.AboutLog = this.AboutLog.bind(this);
        this.AboutLocation = this.AboutLocation.bind(this);
        this.AboutReports = this.AboutReports.bind(this);
        this.AboutSpam = this.AboutSpam.bind(this);
        this.AboutModqueue = this.AboutModqueue.bind(this);
        this.AboutUnmoderated = this.AboutUnmoderated.bind(this);
        this.AboutEdited = this.AboutEdited.bind(this);
        this.AcceptModeratorInvite = this.AcceptModeratorInvite.bind(this);
        this.Approve = this.Approve.bind(this);
        this.Distinguish = this.Distinguish.bind(this);
        this.IgnoreReports = this.IgnoreReports.bind(this);
        this.LeaveContributor = this.LeaveContributor.bind(this);
        this.LeaveModerator = this.LeaveModerator.bind(this);
        this.MuteMessageAuthor = this.MuteMessageAuthor.bind(this);
        this.Remove = this.Remove.bind(this);
        this.ShowComment = this.ShowComment.bind(this);
        this.SnoozeReports = this.SnoozeReports.bind(this);
        this.UnignoreReports = this.UnignoreReports.bind(this);
        this.UnmuteMessageAuthor = this.UnmuteMessageAuthor.bind(this);
        this.UnsnoozeReports = this.UnsnoozeReports.bind(this);
        this.UpdateCrowdControlLevel = this.UpdateCrowdControlLevel.bind(this);
        this.Stylesheet = this.Stylesheet.bind(this);
    }
    AboutLog(request) {
        const data = AboutLogRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutLog", data);
        return promise.then((data) => AboutLogResponse.decode(new _m0.Reader(data)));
    }
    AboutLocation(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutLocation", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AboutReports(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutReports", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AboutSpam(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutSpam", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AboutModqueue(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutModqueue", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AboutUnmoderated(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutUnmoderated", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AboutEdited(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AboutEdited", data);
        return promise.then((data) => Listing.decode(new _m0.Reader(data)));
    }
    AcceptModeratorInvite(request) {
        const data = AcceptModeratorInviteRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AcceptModeratorInvite", data);
        return promise.then((data) => JsonStatus.decode(new _m0.Reader(data)));
    }
    Approve(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Approve", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Distinguish(request) {
        const data = DistinguishRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Distinguish", data);
        return promise.then((data) => JsonRedditObjects.decode(new _m0.Reader(data)));
    }
    IgnoreReports(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "IgnoreReports", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    LeaveContributor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LeaveContributor", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    LeaveModerator(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LeaveModerator", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    MuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MuteMessageAuthor", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Remove(request) {
        const data = RemoveRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Remove", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    ShowComment(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ShowComment", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    SnoozeReports(request) {
        const data = SnoozeReportsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SnoozeReports", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UnignoreReports(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnignoreReports", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UnmuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnmuteMessageAuthor", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UnsnoozeReports(request) {
        const data = SnoozeReportsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnsnoozeReports", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UpdateCrowdControlLevel(request) {
        const data = UpdateCrowdControlLevelRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCrowdControlLevel", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Stylesheet(request) {
        const data = StylesheetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Stylesheet", data);
        return promise.then((data) => StringValue.decode(new _m0.Reader(data)));
    }
}
export const ModerationDefinition = {
    name: "Moderation",
    fullName: "devvit.plugin.redditapi.moderation.Moderation",
    methods: {
        /** https://www.reddit.com/dev/api#GET_about_log */
        aboutLog: {
            name: "AboutLog",
            requestType: AboutLogRequest,
            requestStream: false,
            responseType: AboutLogResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\{location\} */
        aboutLocation: {
            name: "AboutLocation",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\reports */
        aboutReports: {
            name: "AboutReports",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\spam */
        aboutSpam: {
            name: "AboutSpam",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\modqueue */
        aboutModqueue: {
            name: "AboutModqueue",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\unmoderated */
        aboutUnmoderated: {
            name: "AboutUnmoderated",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_about_\edited */
        aboutEdited: {
            name: "AboutEdited",
            requestType: AboutLocationRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_accept_moderator_invite */
        acceptModeratorInvite: {
            name: "AcceptModeratorInvite",
            requestType: AcceptModeratorInviteRequest,
            requestStream: false,
            responseType: JsonStatus,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_approve */
        approve: {
            name: "Approve",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_distinguish */
        distinguish: {
            name: "Distinguish",
            requestType: DistinguishRequest,
            requestStream: false,
            responseType: JsonRedditObjects,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_ignore_reports */
        ignoreReports: {
            name: "IgnoreReports",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_leavecontributor */
        leaveContributor: {
            name: "LeaveContributor",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_leavemoderator */
        leaveModerator: {
            name: "LeaveModerator",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mute_message_author */
        muteMessageAuthor: {
            name: "MuteMessageAuthor",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_remove */
        remove: {
            name: "Remove",
            requestType: RemoveRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_show_comment */
        showComment: {
            name: "ShowComment",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_snooze_reports */
        snoozeReports: {
            name: "SnoozeReports",
            requestType: SnoozeReportsRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_unignore_reports */
        unignoreReports: {
            name: "UnignoreReports",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_unmute_message_author */
        unmuteMessageAuthor: {
            name: "UnmuteMessageAuthor",
            requestType: BasicModerationIdRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_unsnooze_reports */
        unsnoozeReports: {
            name: "UnsnoozeReports",
            requestType: SnoozeReportsRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_update_crowd_control_level */
        updateCrowdControlLevel: {
            name: "UpdateCrowdControlLevel",
            requestType: UpdateCrowdControlLevelRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_stylesheet */
        stylesheet: {
            name: "Stylesheet",
            requestType: StylesheetRequest,
            requestStream: false,
            responseType: StringValue,
            responseStream: false,
            options: {},
        },
    },
};

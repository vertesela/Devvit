/**
 * #listings_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Listing } from '../common/common_msg.js';
import { GetBestRequest, GetByIdRequest, GetCommentsRequest, GetDuplicatesRequest, GetHotRequest, GetNewRequest, GetRisingRequest, GetSortRequest, ListingResponse } from './listings_msg.js';
/** LISTINGS - https://www.reddit.com/dev/api#section_listings */
export interface Listings {
    /**
     * Home listing
     *
     * @see {@link https://www.reddit.com/dev/api#GET_best}
     */
    Best(request: GetBestRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Create a custom listing with the Post IDs provided
     *
     * @see {@link https://www.reddit.com/dev/api#GET_by_id_\{names\}}
     */
    ById(request: GetByIdRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Get a comment tree for a Post
     *
     * @see {@link https://www.reddit.com/dev/api#GET_comments_\{article\}}
     */
    Comments(request: GetCommentsRequest, metadata?: Metadata): Promise<ListingResponse>;
    /**
     * Find duplicate posts that reference the same URL as this Post
     *
     * @see {@link https://www.reddit.com/dev/api#GET_duplicates_\{article\}}
     */
    Duplicates(request: GetDuplicatesRequest, metadata?: Metadata): Promise<ListingResponse>;
    /**
     * Listing with Hot sort
     *
     * @see {@link https://www.reddit.com/dev/api#GET_hot}
     */
    Hot(request: GetHotRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Listing with New sort
     *
     * @see {@link https://www.reddit.com/dev/api#GET_new}
     */
    New(request: GetNewRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Listing with Rising sort
     *
     * @see {@link https://www.reddit.com/dev/api#GET_rising}
     */
    Rising(request: GetRisingRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Listing with Top or Controversial sort
     *
     * @see {@link https://www.reddit.com/dev/api#GET_\{sort\}}
     */
    Sort(request: GetSortRequest, metadata?: Metadata): Promise<Listing>;
}
export declare class ListingsClientImpl implements Listings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Best(request: GetBestRequest): Promise<Listing>;
    ById(request: GetByIdRequest): Promise<Listing>;
    Comments(request: GetCommentsRequest): Promise<ListingResponse>;
    Duplicates(request: GetDuplicatesRequest): Promise<ListingResponse>;
    Hot(request: GetHotRequest): Promise<Listing>;
    New(request: GetNewRequest): Promise<Listing>;
    Rising(request: GetRisingRequest): Promise<Listing>;
    Sort(request: GetSortRequest): Promise<Listing>;
}
/** LISTINGS - https://www.reddit.com/dev/api#section_listings */
export type ListingsDefinition = typeof ListingsDefinition;
export declare const ListingsDefinition: {
    name: 'Listings';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=listings_svc.d.ts.map
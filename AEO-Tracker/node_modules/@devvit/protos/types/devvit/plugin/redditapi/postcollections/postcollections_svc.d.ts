/**
 * #postcollections_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddPostToCollectionRequest, CollectionRequest, CollectionResponse, CreateCollectionRequest, DeleteCollectionRequest, FollowCollectionRequest, RemovePostInCollectionRequest, ReorderCollectionRequest, SubredditCollectionsRequest, SubredditCollectionsResponse, UpdateCollectionDescriptionRequest, UpdateCollectionDisplayLayoutRequest, UpdateCollectionTitleRequest } from './postcollections_msg.js';
/** COLLECTIONS - https://www.reddit.com/dev/api#section_collections */
export interface PostCollections {
    /** https://www.reddit.com/dev/api/#GET_api_v1_collections_collection */
    Collection(request: CollectionRequest, metadata?: Metadata): Promise<CollectionResponse>;
    /** https://www.reddit.com/dev/api/#GET_api_v1_collections_subreddit_collections */
    SubredditCollections(request: SubredditCollectionsRequest, metadata?: Metadata): Promise<SubredditCollectionsResponse>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_create_collection */
    Create(request: CreateCollectionRequest, metadata?: Metadata): Promise<CollectionResponse>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_delete_collection */
    Delete(request: DeleteCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_add_post_to_collection */
    AddPost(request: AddPostToCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_remove_post_in_collection */
    RemovePost(request: RemovePostInCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_follow_collection */
    Follow(request: FollowCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_reorder_collection */
    Reorder(request: ReorderCollectionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_title */
    UpdateTitle(request: UpdateCollectionTitleRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_description */
    UpdateDescription(request: UpdateCollectionDescriptionRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_display_layout */
    UpdateDisplayLayout(request: UpdateCollectionDisplayLayoutRequest, metadata?: Metadata): Promise<Empty>;
}
export declare class PostCollectionsClientImpl implements PostCollections {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Collection(request: CollectionRequest): Promise<CollectionResponse>;
    SubredditCollections(request: SubredditCollectionsRequest): Promise<SubredditCollectionsResponse>;
    Create(request: CreateCollectionRequest): Promise<CollectionResponse>;
    Delete(request: DeleteCollectionRequest): Promise<Empty>;
    AddPost(request: AddPostToCollectionRequest): Promise<Empty>;
    RemovePost(request: RemovePostInCollectionRequest): Promise<Empty>;
    Follow(request: FollowCollectionRequest): Promise<Empty>;
    Reorder(request: ReorderCollectionRequest): Promise<Empty>;
    UpdateTitle(request: UpdateCollectionTitleRequest): Promise<Empty>;
    UpdateDescription(request: UpdateCollectionDescriptionRequest): Promise<Empty>;
    UpdateDisplayLayout(request: UpdateCollectionDisplayLayoutRequest): Promise<Empty>;
}
/** COLLECTIONS - https://www.reddit.com/dev/api#section_collections */
export type PostCollectionsDefinition = typeof PostCollectionsDefinition;
export declare const PostCollectionsDefinition: {
    name: 'PostCollections';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=postcollections_svc.d.ts.map
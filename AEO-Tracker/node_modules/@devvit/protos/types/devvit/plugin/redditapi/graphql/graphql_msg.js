/**
 * #graphql_msg.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Struct } from '../../../../google/protobuf/struct.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
function createBaseQueryRequest() {
    return { query: "", variables: undefined };
}
export const QueryRequest = {
    $type: "devvit.plugin.redditapi.graphql.QueryRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.variables !== undefined) {
            Struct.encode(Struct.wrap(message.variables), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.query = reader.string();
                    break;
                case 2:
                    message.variables = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? String(object.query) : "",
            variables: isObject(object.variables) ? object.variables : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.query !== undefined && (obj.query = message.query);
        message.variables !== undefined && (obj.variables = message.variables);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryRequest();
        message.query = object.query ?? "";
        message.variables = object.variables ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.redditapi.graphql.QueryRequest", QueryRequest);
function createBasePersistedQueryRequest() {
    return { id: "", variables: undefined, operationName: "" };
}
export const PersistedQueryRequest = {
    $type: "devvit.plugin.redditapi.graphql.PersistedQueryRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.variables !== undefined) {
            Struct.encode(Struct.wrap(message.variables), writer.uint32(18).fork()).ldelim();
        }
        if (message.operationName !== "") {
            writer.uint32(26).string(message.operationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersistedQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.variables = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.operationName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            variables: isObject(object.variables) ? object.variables : undefined,
            operationName: isSet(object.operationName) ? String(object.operationName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.variables !== undefined && (obj.variables = message.variables);
        message.operationName !== undefined && (obj.operationName = message.operationName);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePersistedQueryRequest();
        message.id = object.id ?? "";
        message.variables = object.variables ?? undefined;
        message.operationName = object.operationName ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.redditapi.graphql.PersistedQueryRequest", PersistedQueryRequest);
function createBaseQueryResponse() {
    return { data: undefined };
}
export const QueryResponse = {
    $type: "devvit.plugin.redditapi.graphql.QueryResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { data: isObject(object.data) ? object.data : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined && (obj.data = message.data);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryResponse();
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.redditapi.graphql.QueryResponse", QueryResponse);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

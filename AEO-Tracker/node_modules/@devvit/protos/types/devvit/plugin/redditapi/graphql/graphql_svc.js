/**
 * #graphql_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { PersistedQueryRequest, QueryRequest, QueryResponse } from './graphql_msg.js';
export class GraphQLClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.redditapi.graphql.GraphQL";
        this.rpc = rpc;
        this.Query = this.Query.bind(this);
        this.PersistedQuery = this.PersistedQuery.bind(this);
    }
    Query(request) {
        const data = QueryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Query", data);
        return promise.then((data) => QueryResponse.decode(new _m0.Reader(data)));
    }
    PersistedQuery(request) {
        const data = PersistedQueryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PersistedQuery", data);
        return promise.then((data) => QueryResponse.decode(new _m0.Reader(data)));
    }
}
export const GraphQLDefinition = {
    name: "GraphQL",
    fullName: "devvit.plugin.redditapi.graphql.GraphQL",
    methods: {
        /** Sending a GraphQL query request using a custom query string */
        query: {
            name: "Query",
            requestType: QueryRequest,
            requestStream: false,
            responseType: QueryResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Sending a GraphQL persisted query request
         *
         * A persisted query is a query string that's cached on the server side,
         * along with its unique identifier (always its SHA-256 hash)
         */
        persistedQuery: {
            name: "PersistedQuery",
            requestType: PersistedQueryRequest,
            requestStream: false,
            responseType: QueryResponse,
            responseStream: false,
            options: {},
        },
    },
};

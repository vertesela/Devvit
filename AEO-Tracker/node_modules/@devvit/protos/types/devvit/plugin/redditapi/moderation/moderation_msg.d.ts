/**
 * #moderation_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** Requests */
export interface AboutLogRequest {
    /** a modaction thing uuid */
    after?: string;
    /** a modaction thing uuid */
    before?: string;
    count?: number;
    /** the maximum number of items desired (default: 25, maximum: 500) */
    limit?: number;
    /** (optional) the string all */
    show?: string;
    /** (optional) a moderator filter */
    mod?: string;
    /**
     * one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment,
     * approvecomment, addmoderator, showcomment, invitemoderator, uninvitemoderator,
     * acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings,
     * editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted,
     * removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports,
     * setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock,
     * unlock, muteuser, unmuteuser, createrule, editrule, reorderrules, deleterule, spoiler,
     * unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent,
     * collections, events, hidden_award, add_community_topics, remove_community_topics,
     * create_scheduled_post, edit_scheduled_post, delete_scheduled_post, submit_scheduled_post,
     * edit_post_requirements, invitesubscriber, submit_content_rating_survey,
     * adjust_post_crowd_control_level, enable_post_crowd_control_filter,
     * disable_post_crowd_control_filter, deleteoverriddenclassification, overrideclassification,
     * reordermoderators, snoozereports, unsnoozereports, addnote, deletenote, addremovalreason,
     * createremovalreason, updateremovalreason, deleteremovalreason)
     */
    type?: string;
    /** subreddit name without the r/ */
    subreddit?: string;
}
export interface AboutLocationRequest {
    /** thing id (e.g t1_15bfi0) */
    after?: string;
    /** thing id (e.g t1_15bfi0) */
    before?: string;
    count?: number;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number;
    location: string;
    /** one of (links, comments, chat_comments) */
    only?: string;
    /** (optional) the string all */
    show?: string;
    /** subreddit name without the r/ */
    subreddit: string;
}
export interface AcceptModeratorInviteRequest {
    /** subreddit name without the r/ */
    subreddit: string;
}
export interface BasicModerationIdRequest {
    id: string;
}
export interface DistinguishRequest {
    /** one of (yes, no, admin, special) */
    how: string;
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** stick the distinguished comment to the top of all comments threads */
    sticky: boolean;
}
export interface RemoveRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** is it spam? */
    spam: boolean;
}
export interface SnoozeReportsRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** report reason */
    reason: string;
}
export interface UpdateCrowdControlLevelRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** an integer between 0 and 3 */
    level: number;
}
export interface StylesheetRequest {
    /** subreddit name without the r/ */
    subreddit: string;
}
/** Responses */
export interface AboutLogResponse {
    kind: string;
    data?: AboutLogResponse_AboutLogListing;
}
export interface AboutLogResponse_LogObject {
    description?: string;
    targetBody?: string;
    modId36?: string;
    createdUtc?: number;
    subreddit?: string;
    targetTitle?: string;
    targetPermalink?: string;
    subredditNamePrefixed?: string;
    details?: string;
    action?: string;
    targetAuthor?: string;
    targetFullname?: string;
    srId36?: string;
    id?: string;
    mod?: string;
}
export interface AboutLogResponse_AboutLogListing {
    after?: string;
    before?: string;
    children: AboutLogResponse_AboutLogListing_WrappedLogObject[];
    dist?: number;
}
export interface AboutLogResponse_AboutLogListing_WrappedLogObject {
    kind: string;
    data?: AboutLogResponse_LogObject;
}
export declare const AboutLogRequest: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogRequest";
    encode(message: AboutLogRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogRequest;
    fromJSON(object: any): AboutLogRequest;
    toJSON(message: AboutLogRequest): unknown;
    fromPartial<I extends {
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        show?: string | undefined;
        mod?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & {
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        show?: string | undefined;
        mod?: string | undefined;
        type?: string | undefined;
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AboutLogRequest>]: never; }>(object: I): AboutLogRequest;
};
export declare const AboutLocationRequest: {
    $type: "devvit.plugin.redditapi.moderation.AboutLocationRequest";
    encode(message: AboutLocationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLocationRequest;
    fromJSON(object: any): AboutLocationRequest;
    toJSON(message: AboutLocationRequest): unknown;
    fromPartial<I extends {
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        location?: string | undefined;
        only?: string | undefined;
        show?: string | undefined;
        subreddit?: string | undefined;
    } & {
        after?: string | undefined;
        before?: string | undefined;
        count?: number | undefined;
        limit?: number | undefined;
        location?: string | undefined;
        only?: string | undefined;
        show?: string | undefined;
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AboutLocationRequest>]: never; }>(object: I): AboutLocationRequest;
};
export declare const AcceptModeratorInviteRequest: {
    $type: "devvit.plugin.redditapi.moderation.AcceptModeratorInviteRequest";
    encode(message: AcceptModeratorInviteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcceptModeratorInviteRequest;
    fromJSON(object: any): AcceptModeratorInviteRequest;
    toJSON(message: AcceptModeratorInviteRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
    } & {
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I): AcceptModeratorInviteRequest;
};
export declare const BasicModerationIdRequest: {
    $type: "devvit.plugin.redditapi.moderation.BasicModerationIdRequest";
    encode(message: BasicModerationIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicModerationIdRequest;
    fromJSON(object: any): BasicModerationIdRequest;
    toJSON(message: BasicModerationIdRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): BasicModerationIdRequest;
};
export declare const DistinguishRequest: {
    $type: "devvit.plugin.redditapi.moderation.DistinguishRequest";
    encode(message: DistinguishRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DistinguishRequest;
    fromJSON(object: any): DistinguishRequest;
    toJSON(message: DistinguishRequest): unknown;
    fromPartial<I extends {
        how?: string | undefined;
        id?: string | undefined;
        sticky?: boolean | undefined;
    } & {
        how?: string | undefined;
        id?: string | undefined;
        sticky?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof DistinguishRequest>]: never; }>(object: I): DistinguishRequest;
};
export declare const RemoveRequest: {
    $type: "devvit.plugin.redditapi.moderation.RemoveRequest";
    encode(message: RemoveRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveRequest;
    fromJSON(object: any): RemoveRequest;
    toJSON(message: RemoveRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        spam?: boolean | undefined;
    } & {
        id?: string | undefined;
        spam?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RemoveRequest>]: never; }>(object: I): RemoveRequest;
};
export declare const SnoozeReportsRequest: {
    $type: "devvit.plugin.redditapi.moderation.SnoozeReportsRequest";
    encode(message: SnoozeReportsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SnoozeReportsRequest;
    fromJSON(object: any): SnoozeReportsRequest;
    toJSON(message: SnoozeReportsRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        reason?: string | undefined;
    } & {
        id?: string | undefined;
        reason?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof SnoozeReportsRequest>]: never; }>(object: I): SnoozeReportsRequest;
};
export declare const UpdateCrowdControlLevelRequest: {
    $type: "devvit.plugin.redditapi.moderation.UpdateCrowdControlLevelRequest";
    encode(message: UpdateCrowdControlLevelRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCrowdControlLevelRequest;
    fromJSON(object: any): UpdateCrowdControlLevelRequest;
    toJSON(message: UpdateCrowdControlLevelRequest): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        level?: number | undefined;
    } & {
        id?: string | undefined;
        level?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UpdateCrowdControlLevelRequest>]: never; }>(object: I): UpdateCrowdControlLevelRequest;
};
export declare const StylesheetRequest: {
    $type: "devvit.plugin.redditapi.moderation.StylesheetRequest";
    encode(message: StylesheetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StylesheetRequest;
    fromJSON(object: any): StylesheetRequest;
    toJSON(message: StylesheetRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
    } & {
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I): StylesheetRequest;
};
export declare const AboutLogResponse: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse";
    encode(message: AboutLogResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse;
    fromJSON(object: any): AboutLogResponse;
    toJSON(message: AboutLogResponse): unknown;
    fromPartial<I extends {
        kind?: string | undefined;
        data?: {
            after?: string | undefined;
            before?: string | undefined;
            children?: {
                kind?: string | undefined;
                data?: {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } | undefined;
            }[] | undefined;
            dist?: number | undefined;
        } | undefined;
    } & {
        kind?: string | undefined;
        data?: ({
            after?: string | undefined;
            before?: string | undefined;
            children?: {
                kind?: string | undefined;
                data?: {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } | undefined;
            }[] | undefined;
            dist?: number | undefined;
        } & {
            after?: string | undefined;
            before?: string | undefined;
            children?: ({
                kind?: string | undefined;
                data?: {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } | undefined;
            }[] & ({
                kind?: string | undefined;
                data?: {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } | undefined;
            } & {
                kind?: string | undefined;
                data?: ({
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } & {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } & { [K in Exclude<keyof I["data"]["children"][number]["data"], "$type" | keyof AboutLogResponse_LogObject>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["data"]["children"][number], "$type" | keyof AboutLogResponse_AboutLogListing_WrappedLogObject>]: never; })[] & { [K_2 in Exclude<keyof I["data"]["children"], "$type" | keyof {
                kind?: string | undefined;
                data?: {
                    description?: string | undefined;
                    targetBody?: string | undefined;
                    modId36?: string | undefined;
                    createdUtc?: number | undefined;
                    subreddit?: string | undefined;
                    targetTitle?: string | undefined;
                    targetPermalink?: string | undefined;
                    subredditNamePrefixed?: string | undefined;
                    details?: string | undefined;
                    action?: string | undefined;
                    targetAuthor?: string | undefined;
                    targetFullname?: string | undefined;
                    srId36?: string | undefined;
                    id?: string | undefined;
                    mod?: string | undefined;
                } | undefined;
            }[]>]: never; }) | undefined;
            dist?: number | undefined;
        } & { [K_3 in Exclude<keyof I["data"], "$type" | keyof AboutLogResponse_AboutLogListing>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "$type" | keyof AboutLogResponse>]: never; }>(object: I): AboutLogResponse;
};
export declare const AboutLogResponse_LogObject: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.LogObject";
    encode(message: AboutLogResponse_LogObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_LogObject;
    fromJSON(object: any): AboutLogResponse_LogObject;
    toJSON(message: AboutLogResponse_LogObject): unknown;
    fromPartial<I extends {
        description?: string | undefined;
        targetBody?: string | undefined;
        modId36?: string | undefined;
        createdUtc?: number | undefined;
        subreddit?: string | undefined;
        targetTitle?: string | undefined;
        targetPermalink?: string | undefined;
        subredditNamePrefixed?: string | undefined;
        details?: string | undefined;
        action?: string | undefined;
        targetAuthor?: string | undefined;
        targetFullname?: string | undefined;
        srId36?: string | undefined;
        id?: string | undefined;
        mod?: string | undefined;
    } & {
        description?: string | undefined;
        targetBody?: string | undefined;
        modId36?: string | undefined;
        createdUtc?: number | undefined;
        subreddit?: string | undefined;
        targetTitle?: string | undefined;
        targetPermalink?: string | undefined;
        subredditNamePrefixed?: string | undefined;
        details?: string | undefined;
        action?: string | undefined;
        targetAuthor?: string | undefined;
        targetFullname?: string | undefined;
        srId36?: string | undefined;
        id?: string | undefined;
        mod?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AboutLogResponse_LogObject>]: never; }>(object: I): AboutLogResponse_LogObject;
};
export declare const AboutLogResponse_AboutLogListing: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.AboutLogListing";
    encode(message: AboutLogResponse_AboutLogListing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_AboutLogListing;
    fromJSON(object: any): AboutLogResponse_AboutLogListing;
    toJSON(message: AboutLogResponse_AboutLogListing): unknown;
    fromPartial<I extends {
        after?: string | undefined;
        before?: string | undefined;
        children?: {
            kind?: string | undefined;
            data?: {
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } | undefined;
        }[] | undefined;
        dist?: number | undefined;
    } & {
        after?: string | undefined;
        before?: string | undefined;
        children?: ({
            kind?: string | undefined;
            data?: {
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } | undefined;
        }[] & ({
            kind?: string | undefined;
            data?: {
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } | undefined;
        } & {
            kind?: string | undefined;
            data?: ({
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } & {
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } & { [K in Exclude<keyof I["children"][number]["data"], "$type" | keyof AboutLogResponse_LogObject>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["children"][number], "$type" | keyof AboutLogResponse_AboutLogListing_WrappedLogObject>]: never; })[] & { [K_2 in Exclude<keyof I["children"], "$type" | keyof {
            kind?: string | undefined;
            data?: {
                description?: string | undefined;
                targetBody?: string | undefined;
                modId36?: string | undefined;
                createdUtc?: number | undefined;
                subreddit?: string | undefined;
                targetTitle?: string | undefined;
                targetPermalink?: string | undefined;
                subredditNamePrefixed?: string | undefined;
                details?: string | undefined;
                action?: string | undefined;
                targetAuthor?: string | undefined;
                targetFullname?: string | undefined;
                srId36?: string | undefined;
                id?: string | undefined;
                mod?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        dist?: number | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof AboutLogResponse_AboutLogListing>]: never; }>(object: I): AboutLogResponse_AboutLogListing;
};
export declare const AboutLogResponse_AboutLogListing_WrappedLogObject: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.AboutLogListing.WrappedLogObject";
    encode(message: AboutLogResponse_AboutLogListing_WrappedLogObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_AboutLogListing_WrappedLogObject;
    fromJSON(object: any): AboutLogResponse_AboutLogListing_WrappedLogObject;
    toJSON(message: AboutLogResponse_AboutLogListing_WrappedLogObject): unknown;
    fromPartial<I extends {
        kind?: string | undefined;
        data?: {
            description?: string | undefined;
            targetBody?: string | undefined;
            modId36?: string | undefined;
            createdUtc?: number | undefined;
            subreddit?: string | undefined;
            targetTitle?: string | undefined;
            targetPermalink?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            details?: string | undefined;
            action?: string | undefined;
            targetAuthor?: string | undefined;
            targetFullname?: string | undefined;
            srId36?: string | undefined;
            id?: string | undefined;
            mod?: string | undefined;
        } | undefined;
    } & {
        kind?: string | undefined;
        data?: ({
            description?: string | undefined;
            targetBody?: string | undefined;
            modId36?: string | undefined;
            createdUtc?: number | undefined;
            subreddit?: string | undefined;
            targetTitle?: string | undefined;
            targetPermalink?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            details?: string | undefined;
            action?: string | undefined;
            targetAuthor?: string | undefined;
            targetFullname?: string | undefined;
            srId36?: string | undefined;
            id?: string | undefined;
            mod?: string | undefined;
        } & {
            description?: string | undefined;
            targetBody?: string | undefined;
            modId36?: string | undefined;
            createdUtc?: number | undefined;
            subreddit?: string | undefined;
            targetTitle?: string | undefined;
            targetPermalink?: string | undefined;
            subredditNamePrefixed?: string | undefined;
            details?: string | undefined;
            action?: string | undefined;
            targetAuthor?: string | undefined;
            targetFullname?: string | undefined;
            srId36?: string | undefined;
            id?: string | undefined;
            mod?: string | undefined;
        } & { [K in Exclude<keyof I["data"], "$type" | keyof AboutLogResponse_LogObject>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof AboutLogResponse_AboutLogListing_WrappedLogObject>]: never; }>(object: I): AboutLogResponse_AboutLogListing_WrappedLogObject;
};
//# sourceMappingURL=moderation_msg.d.ts.map
/**
 * #moderation_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
import { JsonRedditObjects, JsonStatus, Listing } from '../common/common_msg.js';
import { AboutLocationRequest, AboutLogRequest, AboutLogResponse, AcceptModeratorInviteRequest, BasicModerationIdRequest, DistinguishRequest, RemoveRequest, SnoozeReportsRequest, StylesheetRequest, UpdateCrowdControlLevelRequest } from './moderation_msg.js';
/** MODERATION -  https://www.reddit.com/dev/api#section_moderation */
export interface Moderation {
    /** https://www.reddit.com/dev/api#GET_about_log */
    AboutLog(request: AboutLogRequest, metadata?: Metadata): Promise<AboutLogResponse>;
    /** https://www.reddit.com/dev/api#GET_about_\{location\} */
    AboutLocation(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#GET_about_\reports */
    AboutReports(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#GET_about_\spam */
    AboutSpam(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#GET_about_\modqueue */
    AboutModqueue(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#GET_about_\unmoderated */
    AboutUnmoderated(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#GET_about_\edited */
    AboutEdited(request: AboutLocationRequest, metadata?: Metadata): Promise<Listing>;
    /** https://www.reddit.com/dev/api#POST_api_accept_moderator_invite */
    AcceptModeratorInvite(request: AcceptModeratorInviteRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_approve */
    Approve(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_distinguish */
    Distinguish(request: DistinguishRequest, metadata?: Metadata): Promise<JsonRedditObjects>;
    /** https://www.reddit.com/dev/api#POST_api_ignore_reports */
    IgnoreReports(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_leavecontributor */
    LeaveContributor(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_leavemoderator */
    LeaveModerator(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_mute_message_author */
    MuteMessageAuthor(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_remove */
    Remove(request: RemoveRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_show_comment */
    ShowComment(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_snooze_reports */
    SnoozeReports(request: SnoozeReportsRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unignore_reports */
    UnignoreReports(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unmute_message_author */
    UnmuteMessageAuthor(request: BasicModerationIdRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_unsnooze_reports */
    UnsnoozeReports(request: SnoozeReportsRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_update_crowd_control_level */
    UpdateCrowdControlLevel(request: UpdateCrowdControlLevelRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_stylesheet */
    Stylesheet(request: StylesheetRequest, metadata?: Metadata): Promise<StringValue>;
}
export declare class ModerationClientImpl implements Moderation {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AboutLog(request: AboutLogRequest): Promise<AboutLogResponse>;
    AboutLocation(request: AboutLocationRequest): Promise<Listing>;
    AboutReports(request: AboutLocationRequest): Promise<Listing>;
    AboutSpam(request: AboutLocationRequest): Promise<Listing>;
    AboutModqueue(request: AboutLocationRequest): Promise<Listing>;
    AboutUnmoderated(request: AboutLocationRequest): Promise<Listing>;
    AboutEdited(request: AboutLocationRequest): Promise<Listing>;
    AcceptModeratorInvite(request: AcceptModeratorInviteRequest): Promise<JsonStatus>;
    Approve(request: BasicModerationIdRequest): Promise<Empty>;
    Distinguish(request: DistinguishRequest): Promise<JsonRedditObjects>;
    IgnoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveContributor(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveModerator(request: BasicModerationIdRequest): Promise<Empty>;
    MuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    Remove(request: RemoveRequest): Promise<Empty>;
    ShowComment(request: BasicModerationIdRequest): Promise<Empty>;
    SnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UnignoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    UnmuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    UnsnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UpdateCrowdControlLevel(request: UpdateCrowdControlLevelRequest): Promise<Empty>;
    Stylesheet(request: StylesheetRequest): Promise<StringValue>;
}
/** MODERATION -  https://www.reddit.com/dev/api#section_moderation */
export type ModerationDefinition = typeof ModerationDefinition;
export declare const ModerationDefinition: {
    name: 'Moderation';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=moderation_svc.d.ts.map
/**
 * #flair_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { JsonStatus } from '../common/common_msg.js';
import { ClearFlairTemplatesRequest, DeleteFlairRequest, DeleteFlairTemplateRequest, FlairArray, FlairConfigRequest, FlairCsvRequest, FlairCsvResponse, FlairListRequest, FlairListResponse, FlairObject, FlairRequest, FlairSelectorRequest, FlairSelectorResponse, FlairTemplateOrderRequest, FlairTemplateRequest, LinkFlairRequest, SelectFlairRequest, SetFlairEnabledRequest } from './flair_msg.js';
/** FLAIR - https://www.reddit.com/dev/api#section_flair */
export interface Flair {
    /** https://www.reddit.com/dev/api#POST_api_clearflairtemplates */
    ClearFlairTemplates(request: ClearFlairTemplatesRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_deleteflair */
    DeleteFlair(request: DeleteFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_deleteflairtemplate */
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_flair */
    Flair(request: FlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * https://www.reddit.com/dev/api#PATCH_api_flair_template_order
     * Note: Endpoint expects body as raw array of flair id's
     */
    FlairTemplateOrder(request: FlairTemplateOrderRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_flairconfig */
    FlairConfig(request: FlairConfigRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_flaircsv */
    FlairCsv(request: FlairCsvRequest, metadata?: Metadata): Promise<FlairCsvResponse>;
    /** https://www.reddit.com/dev/api#GET_api_flairlist */
    FlairList(request: FlairListRequest, metadata?: Metadata): Promise<FlairListResponse>;
    /** https://www.reddit.com/dev/api#POST_api_flairselector */
    FlairSelector(request: FlairSelectorRequest, metadata?: Metadata): Promise<FlairSelectorResponse>;
    /**
     * https://www.reddit.com/dev/api#POST_api_flairtemplate_v2
     * Note: We ignore the "v1" implementation of this method
     * Beware: The JSON response to this endpoint is a FlairObject in camelCase, not snake_case
     * like the other responses.
     */
    FlairTemplate(request: FlairTemplateRequest, metadata?: Metadata): Promise<FlairObject>;
    /**
     * https://www.reddit.com/dev/api#GET_api_link_flair_v2
     * Note: We ignore the "v1" implementation of this method
     */
    LinkFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
    /** https://www.reddit.com/dev/api#POST_api_selectflair */
    SelectFlair(request: SelectFlairRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_setflairenabled */
    SetFlairEnabled(request: SetFlairEnabledRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * https://www.reddit.com/dev/api#GET_api_user_flair_v2
     * Note: We ignore the "v1" implementation of this method
     */
    UserFlair(request: LinkFlairRequest, metadata?: Metadata): Promise<FlairArray>;
}
export declare class FlairClientImpl implements Flair {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ClearFlairTemplates(request: ClearFlairTemplatesRequest): Promise<JsonStatus>;
    DeleteFlair(request: DeleteFlairRequest): Promise<JsonStatus>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest): Promise<JsonStatus>;
    Flair(request: FlairRequest): Promise<JsonStatus>;
    FlairTemplateOrder(request: FlairTemplateOrderRequest): Promise<Empty>;
    FlairConfig(request: FlairConfigRequest): Promise<JsonStatus>;
    FlairCsv(request: FlairCsvRequest): Promise<FlairCsvResponse>;
    FlairList(request: FlairListRequest): Promise<FlairListResponse>;
    FlairSelector(request: FlairSelectorRequest): Promise<FlairSelectorResponse>;
    FlairTemplate(request: FlairTemplateRequest): Promise<FlairObject>;
    LinkFlair(request: LinkFlairRequest): Promise<FlairArray>;
    SelectFlair(request: SelectFlairRequest): Promise<JsonStatus>;
    SetFlairEnabled(request: SetFlairEnabledRequest): Promise<JsonStatus>;
    UserFlair(request: LinkFlairRequest): Promise<FlairArray>;
}
/** FLAIR - https://www.reddit.com/dev/api#section_flair */
export type FlairDefinition = typeof FlairDefinition;
export declare const FlairDefinition: {
    name: 'Flair';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=flair_svc.d.ts.map
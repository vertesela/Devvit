/**
 * #newmodmail_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { ApproveConversationResponse, ArchiveConversationResponse, BasicConversationRequest, BasicConversationsRequest, BulkReadConversationsRequest, BulkReadConversationsResponse, ConversationUserData, CreateConversationMessageRequest, CreateConversationMessageResponse, CreateConversationRequest, CreateConversationResponse, GetConversationRequest, GetConversationResponse, GetConversationsRequest, GetConversationsResponse, HighlightConversationResponse, MuteConversationRequest, MuteConversationResponse, SubredditsResponse, TempBanRequest, TempBanResponse, UnreadCountResponse } from './newmodmail_msg.js';
/** NEWMODMAIL - https://www.reddit.com/dev/api#section_modmail */
export interface NewModmail {
    /** https://www.reddit.com/dev/api#POST_api_mod_bulk_read */
    BulkReadConversations(request: BulkReadConversationsRequest, metadata?: Metadata): Promise<BulkReadConversationsResponse>;
    /** https://www.reddit.com/dev/api#GET_api_mod_conversations */
    GetConversations(request: GetConversationsRequest, metadata?: Metadata): Promise<GetConversationsResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations */
    CreateConversation(request: CreateConversationRequest, metadata?: Metadata): Promise<CreateConversationResponse>;
    /** https://www.reddit.com/dev/api#GET_api_mod_conversations_:conversation_id */
    GetConversation(request: GetConversationRequest, metadata?: Metadata): Promise<GetConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id */
    CreateConversationMessage(request: CreateConversationMessageRequest, metadata?: Metadata): Promise<CreateConversationMessageResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_approve */
    ApproveConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<ApproveConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_archive */
    ArchiveConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<ArchiveConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_disapprove */
    DisapproveConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<ApproveConversationResponse>;
    /** https://www.reddit.com/dev/api#DELETE_api_mod_conversations_:conversation_id_highlight */
    UnhighlightConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<HighlightConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_highlight */
    HighlightConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<HighlightConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_mute */
    MuteConversation(request: MuteConversationRequest, metadata?: Metadata): Promise<MuteConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_temp_ban */
    TempBan(request: TempBanRequest, metadata?: Metadata): Promise<TempBanResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unarchive */
    UnarchiveConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<ArchiveConversationResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unban */
    Unban(request: BasicConversationRequest, metadata?: Metadata): Promise<TempBanResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unmute */
    UnmuteConversation(request: BasicConversationRequest, metadata?: Metadata): Promise<MuteConversationResponse>;
    /** https://www.reddit.com/dev/api#GET_api_mod_conversations_:conversation_id_user */
    UserConversations(request: BasicConversationRequest, metadata?: Metadata): Promise<ConversationUserData>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_read */
    Read(request: BasicConversationsRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_api_mod_conversations_subreddits */
    Subreddits(request: Empty, metadata?: Metadata): Promise<SubredditsResponse>;
    /** https://www.reddit.com/dev/api#POST_api_mod_conversations_unread */
    Unread(request: BasicConversationsRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_api_mod_conversations_unread_count */
    UnreadCount(request: Empty, metadata?: Metadata): Promise<UnreadCountResponse>;
}
export declare class NewModmailClientImpl implements NewModmail {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    BulkReadConversations(request: BulkReadConversationsRequest): Promise<BulkReadConversationsResponse>;
    GetConversations(request: GetConversationsRequest): Promise<GetConversationsResponse>;
    CreateConversation(request: CreateConversationRequest): Promise<CreateConversationResponse>;
    GetConversation(request: GetConversationRequest): Promise<GetConversationResponse>;
    CreateConversationMessage(request: CreateConversationMessageRequest): Promise<CreateConversationMessageResponse>;
    ApproveConversation(request: BasicConversationRequest): Promise<ApproveConversationResponse>;
    ArchiveConversation(request: BasicConversationRequest): Promise<ArchiveConversationResponse>;
    DisapproveConversation(request: BasicConversationRequest): Promise<ApproveConversationResponse>;
    UnhighlightConversation(request: BasicConversationRequest): Promise<HighlightConversationResponse>;
    HighlightConversation(request: BasicConversationRequest): Promise<HighlightConversationResponse>;
    MuteConversation(request: MuteConversationRequest): Promise<MuteConversationResponse>;
    TempBan(request: TempBanRequest): Promise<TempBanResponse>;
    UnarchiveConversation(request: BasicConversationRequest): Promise<ArchiveConversationResponse>;
    Unban(request: BasicConversationRequest): Promise<TempBanResponse>;
    UnmuteConversation(request: BasicConversationRequest): Promise<MuteConversationResponse>;
    UserConversations(request: BasicConversationRequest): Promise<ConversationUserData>;
    Read(request: BasicConversationsRequest): Promise<Empty>;
    Subreddits(request: Empty): Promise<SubredditsResponse>;
    Unread(request: BasicConversationsRequest): Promise<Empty>;
    UnreadCount(request: Empty): Promise<UnreadCountResponse>;
}
/** NEWMODMAIL - https://www.reddit.com/dev/api#section_modmail */
export type NewModmailDefinition = typeof NewModmailDefinition;
export declare const NewModmailDefinition: {
    name: 'NewModmail';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=newmodmail_svc.d.ts.map
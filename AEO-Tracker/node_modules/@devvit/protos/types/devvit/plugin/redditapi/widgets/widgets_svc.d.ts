/**
 * #widgets_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, ButtonWidget, CalendarWidget, CommunityListWidget, CustomWidget, DeleteWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, GetWidgetsRequest, GetWidgetsResponse, ImageWidget, OrderWidgetsRequest, PostFlairWidget, TextAreaWidget, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest } from './widgets_msg.js';
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export interface Widgets {
    /**
     * Add a button widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddButtonWidget(request: AddButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Add an image widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddImageWidget(request: AddImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Add a calendar widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCalendarWidget(request: AddCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Add a text widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddTextAreaWidget(request: AddTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Add a community list widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCommunityListWidget(request: AddCommunityListWidgetRequest, metadata?: Metadata): Promise<CommunityListWidget>;
    /**
     * Add a post flair widget to a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddPostFlairWidget(request: AddPostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Add a custom widget to a subreddit. This is an experimental feature.
     * Custom widgets don't display on mobile devices. Customizations can break at any time
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
     */
    AddCustomWidget(request: AddCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Delete a widget from a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
     */
    DeleteWidget(request: DeleteWidgetRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Update a button widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateButtonWidget(request: UpdateButtonWidgetRequest, metadata?: Metadata): Promise<ButtonWidget>;
    /**
     * Update an image widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateImageWidget(request: UpdateImageWidgetRequest, metadata?: Metadata): Promise<ImageWidget>;
    /**
     * Update a calendar widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest, metadata?: Metadata): Promise<CalendarWidget>;
    /**
     * Update a text widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest, metadata?: Metadata): Promise<TextAreaWidget>;
    /**
     * Update a community list widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest, metadata?: Metadata): Promise<UpdateCommunityListWidgetResponse>;
    /**
     * Update a post flair widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest, metadata?: Metadata): Promise<PostFlairWidget>;
    /**
     * Update a custom widget on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
     */
    UpdateCustomWidget(request: UpdateCustomWidgetRequest, metadata?: Metadata): Promise<CustomWidget>;
    /**
     * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
     */
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest, metadata?: Metadata): Promise<GetWidgetImageUploadLeaseResponse>;
    /**
     * Update the order of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
     */
    OrderWidgets(request: OrderWidgetsRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get a list of widgets on a subreddit.
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
     */
    GetWidgets(request: GetWidgetsRequest, metadata?: Metadata): Promise<GetWidgetsResponse>;
}
export declare class WidgetsClientImpl implements Widgets {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AddButtonWidget(request: AddButtonWidgetRequest): Promise<ButtonWidget>;
    AddImageWidget(request: AddImageWidgetRequest): Promise<ImageWidget>;
    AddCalendarWidget(request: AddCalendarWidgetRequest): Promise<CalendarWidget>;
    AddTextAreaWidget(request: AddTextAreaWidgetRequest): Promise<TextAreaWidget>;
    AddCommunityListWidget(request: AddCommunityListWidgetRequest): Promise<CommunityListWidget>;
    AddPostFlairWidget(request: AddPostFlairWidgetRequest): Promise<PostFlairWidget>;
    AddCustomWidget(request: AddCustomWidgetRequest): Promise<CustomWidget>;
    DeleteWidget(request: DeleteWidgetRequest): Promise<Empty>;
    UpdateButtonWidget(request: UpdateButtonWidgetRequest): Promise<ButtonWidget>;
    UpdateImageWidget(request: UpdateImageWidgetRequest): Promise<ImageWidget>;
    UpdateCalendarWidget(request: UpdateCalendarWidgetRequest): Promise<CalendarWidget>;
    UpdateTextAreaWidget(request: UpdateTextAreaWidgetRequest): Promise<TextAreaWidget>;
    UpdateCommunityListWidget(request: UpdateCommunityListWidgetRequest): Promise<UpdateCommunityListWidgetResponse>;
    UpdatePostFlairWidget(request: UpdatePostFlairWidgetRequest): Promise<PostFlairWidget>;
    UpdateCustomWidget(request: UpdateCustomWidgetRequest): Promise<CustomWidget>;
    GetWidgetImageUploadLease(request: GetWidgetImageUploadLeaseRequest): Promise<GetWidgetImageUploadLeaseResponse>;
    OrderWidgets(request: OrderWidgetsRequest): Promise<Empty>;
    GetWidgets(request: GetWidgetsRequest): Promise<GetWidgetsResponse>;
}
/** WIDGETS - https://www.reddit.com/dev/api#section_widgets */
export type WidgetsDefinition = typeof WidgetsDefinition;
export declare const WidgetsDefinition: {
    name: 'Widgets';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=widgets_svc.d.ts.map
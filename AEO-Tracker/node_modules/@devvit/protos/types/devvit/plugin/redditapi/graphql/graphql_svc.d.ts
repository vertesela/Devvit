/**
 * #graphql_svc.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { PersistedQueryRequest, QueryRequest, QueryResponse } from './graphql_msg.js';
export interface GraphQL {
    /** Sending a GraphQL query request using a custom query string */
    Query(request: QueryRequest, metadata?: Metadata): Promise<QueryResponse>;
    /**
     * Sending a GraphQL persisted query request
     *
     * A persisted query is a query string that's cached on the server side,
     * along with its unique identifier (always its SHA-256 hash)
     */
    PersistedQuery(request: PersistedQueryRequest, metadata?: Metadata): Promise<QueryResponse>;
}
export declare class GraphQLClientImpl implements GraphQL {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Query(request: QueryRequest): Promise<QueryResponse>;
    PersistedQuery(request: PersistedQueryRequest): Promise<QueryResponse>;
}
export type GraphQLDefinition = typeof GraphQLDefinition;
export declare const GraphQLDefinition: {
    name: 'GraphQL';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=graphql_svc.d.ts.map
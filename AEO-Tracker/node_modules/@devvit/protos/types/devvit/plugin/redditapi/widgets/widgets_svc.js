/**
 * #widgets_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddButtonWidgetRequest, AddCalendarWidgetRequest, AddCommunityListWidgetRequest, AddCustomWidgetRequest, AddImageWidgetRequest, AddPostFlairWidgetRequest, AddTextAreaWidgetRequest, ButtonWidget, CalendarWidget, CommunityListWidget, CustomWidget, DeleteWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, GetWidgetsRequest, GetWidgetsResponse, ImageWidget, OrderWidgetsRequest, PostFlairWidget, TextAreaWidget, UpdateButtonWidgetRequest, UpdateCalendarWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdateCustomWidgetRequest, UpdateImageWidgetRequest, UpdatePostFlairWidgetRequest, UpdateTextAreaWidgetRequest, } from './widgets_msg.js';
export class WidgetsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.redditapi.widgets.Widgets";
        this.rpc = rpc;
        this.AddButtonWidget = this.AddButtonWidget.bind(this);
        this.AddImageWidget = this.AddImageWidget.bind(this);
        this.AddCalendarWidget = this.AddCalendarWidget.bind(this);
        this.AddTextAreaWidget = this.AddTextAreaWidget.bind(this);
        this.AddCommunityListWidget = this.AddCommunityListWidget.bind(this);
        this.AddPostFlairWidget = this.AddPostFlairWidget.bind(this);
        this.AddCustomWidget = this.AddCustomWidget.bind(this);
        this.DeleteWidget = this.DeleteWidget.bind(this);
        this.UpdateButtonWidget = this.UpdateButtonWidget.bind(this);
        this.UpdateImageWidget = this.UpdateImageWidget.bind(this);
        this.UpdateCalendarWidget = this.UpdateCalendarWidget.bind(this);
        this.UpdateTextAreaWidget = this.UpdateTextAreaWidget.bind(this);
        this.UpdateCommunityListWidget = this.UpdateCommunityListWidget.bind(this);
        this.UpdatePostFlairWidget = this.UpdatePostFlairWidget.bind(this);
        this.UpdateCustomWidget = this.UpdateCustomWidget.bind(this);
        this.GetWidgetImageUploadLease = this.GetWidgetImageUploadLease.bind(this);
        this.OrderWidgets = this.OrderWidgets.bind(this);
        this.GetWidgets = this.GetWidgets.bind(this);
    }
    AddButtonWidget(request) {
        const data = AddButtonWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddButtonWidget", data);
        return promise.then((data) => ButtonWidget.decode(new _m0.Reader(data)));
    }
    AddImageWidget(request) {
        const data = AddImageWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddImageWidget", data);
        return promise.then((data) => ImageWidget.decode(new _m0.Reader(data)));
    }
    AddCalendarWidget(request) {
        const data = AddCalendarWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddCalendarWidget", data);
        return promise.then((data) => CalendarWidget.decode(new _m0.Reader(data)));
    }
    AddTextAreaWidget(request) {
        const data = AddTextAreaWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddTextAreaWidget", data);
        return promise.then((data) => TextAreaWidget.decode(new _m0.Reader(data)));
    }
    AddCommunityListWidget(request) {
        const data = AddCommunityListWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddCommunityListWidget", data);
        return promise.then((data) => CommunityListWidget.decode(new _m0.Reader(data)));
    }
    AddPostFlairWidget(request) {
        const data = AddPostFlairWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddPostFlairWidget", data);
        return promise.then((data) => PostFlairWidget.decode(new _m0.Reader(data)));
    }
    AddCustomWidget(request) {
        const data = AddCustomWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddCustomWidget", data);
        return promise.then((data) => CustomWidget.decode(new _m0.Reader(data)));
    }
    DeleteWidget(request) {
        const data = DeleteWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteWidget", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    UpdateButtonWidget(request) {
        const data = UpdateButtonWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateButtonWidget", data);
        return promise.then((data) => ButtonWidget.decode(new _m0.Reader(data)));
    }
    UpdateImageWidget(request) {
        const data = UpdateImageWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateImageWidget", data);
        return promise.then((data) => ImageWidget.decode(new _m0.Reader(data)));
    }
    UpdateCalendarWidget(request) {
        const data = UpdateCalendarWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCalendarWidget", data);
        return promise.then((data) => CalendarWidget.decode(new _m0.Reader(data)));
    }
    UpdateTextAreaWidget(request) {
        const data = UpdateTextAreaWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateTextAreaWidget", data);
        return promise.then((data) => TextAreaWidget.decode(new _m0.Reader(data)));
    }
    UpdateCommunityListWidget(request) {
        const data = UpdateCommunityListWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCommunityListWidget", data);
        return promise.then((data) => UpdateCommunityListWidgetResponse.decode(new _m0.Reader(data)));
    }
    UpdatePostFlairWidget(request) {
        const data = UpdatePostFlairWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdatePostFlairWidget", data);
        return promise.then((data) => PostFlairWidget.decode(new _m0.Reader(data)));
    }
    UpdateCustomWidget(request) {
        const data = UpdateCustomWidgetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateCustomWidget", data);
        return promise.then((data) => CustomWidget.decode(new _m0.Reader(data)));
    }
    GetWidgetImageUploadLease(request) {
        const data = GetWidgetImageUploadLeaseRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWidgetImageUploadLease", data);
        return promise.then((data) => GetWidgetImageUploadLeaseResponse.decode(new _m0.Reader(data)));
    }
    OrderWidgets(request) {
        const data = OrderWidgetsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "OrderWidgets", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    GetWidgets(request) {
        const data = GetWidgetsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWidgets", data);
        return promise.then((data) => GetWidgetsResponse.decode(new _m0.Reader(data)));
    }
}
export const WidgetsDefinition = {
    name: "Widgets",
    fullName: "devvit.plugin.redditapi.widgets.Widgets",
    methods: {
        /**
         * Add a button widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addButtonWidget: {
            name: "AddButtonWidget",
            requestType: AddButtonWidgetRequest,
            requestStream: false,
            responseType: ButtonWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add an image widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addImageWidget: {
            name: "AddImageWidget",
            requestType: AddImageWidgetRequest,
            requestStream: false,
            responseType: ImageWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add a calendar widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addCalendarWidget: {
            name: "AddCalendarWidget",
            requestType: AddCalendarWidgetRequest,
            requestStream: false,
            responseType: CalendarWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add a text widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addTextAreaWidget: {
            name: "AddTextAreaWidget",
            requestType: AddTextAreaWidgetRequest,
            requestStream: false,
            responseType: TextAreaWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add a community list widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addCommunityListWidget: {
            name: "AddCommunityListWidget",
            requestType: AddCommunityListWidgetRequest,
            requestStream: false,
            responseType: CommunityListWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add a post flair widget to a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addPostFlairWidget: {
            name: "AddPostFlairWidget",
            requestType: AddPostFlairWidgetRequest,
            requestStream: false,
            responseType: PostFlairWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Add a custom widget to a subreddit. This is an experimental feature.
         * Custom widgets don't display on mobile devices. Customizations can break at any time
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget}
         */
        addCustomWidget: {
            name: "AddCustomWidget",
            requestType: AddCustomWidgetRequest,
            requestStream: false,
            responseType: CustomWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Delete a widget from a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#DELETE_api_widget_\{widget_id\}}
         */
        deleteWidget: {
            name: "DeleteWidget",
            requestType: DeleteWidgetRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Update a button widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateButtonWidget: {
            name: "UpdateButtonWidget",
            requestType: UpdateButtonWidgetRequest,
            requestStream: false,
            responseType: ButtonWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Update an image widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateImageWidget: {
            name: "UpdateImageWidget",
            requestType: UpdateImageWidgetRequest,
            requestStream: false,
            responseType: ImageWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Update a calendar widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateCalendarWidget: {
            name: "UpdateCalendarWidget",
            requestType: UpdateCalendarWidgetRequest,
            requestStream: false,
            responseType: CalendarWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Update a text widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateTextAreaWidget: {
            name: "UpdateTextAreaWidget",
            requestType: UpdateTextAreaWidgetRequest,
            requestStream: false,
            responseType: TextAreaWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Update a community list widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateCommunityListWidget: {
            name: "UpdateCommunityListWidget",
            requestType: UpdateCommunityListWidgetRequest,
            requestStream: false,
            responseType: UpdateCommunityListWidgetResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Update a post flair widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updatePostFlairWidget: {
            name: "UpdatePostFlairWidget",
            requestType: UpdatePostFlairWidgetRequest,
            requestStream: false,
            responseType: PostFlairWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Update a custom widget on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PUT_api_widget_\{widget_id\}}
         */
        updateCustomWidget: {
            name: "UpdateCustomWidget",
            requestType: UpdateCustomWidgetRequest,
            requestStream: false,
            responseType: CustomWidget,
            responseStream: false,
            options: {},
        },
        /**
         * Get an S3 upload lease for a widget image. This is used to upload images for image widgets.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_widget_image_upload_s3}
         */
        getWidgetImageUploadLease: {
            name: "GetWidgetImageUploadLease",
            requestType: GetWidgetImageUploadLeaseRequest,
            requestStream: false,
            responseType: GetWidgetImageUploadLeaseResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Update the order of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#PATCH_api_widget_order_\{section\}}
         */
        orderWidgets: {
            name: "OrderWidgets",
            requestType: OrderWidgetsRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Get a list of widgets on a subreddit.
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_widgets}
         */
        getWidgets: {
            name: "GetWidgets",
            requestType: GetWidgetsRequest,
            requestStream: false,
            responseType: GetWidgetsResponse,
            responseStream: false,
            options: {},
        },
    },
};

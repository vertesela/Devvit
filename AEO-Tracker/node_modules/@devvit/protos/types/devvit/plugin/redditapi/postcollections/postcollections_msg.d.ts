/**
 * #postcollections_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** requests */
export interface CollectionRequest {
    /** The id of the collection to fetch. */
    collectionId?: string;
    /** The id of the collection to fetch. */
    includeLinks?: boolean;
}
export interface CreateCollectionRequest {
    /** The title of the collection. */
    title?: string;
    /** The t5_ id of the subreddit in which this collection will be created. */
    srFullname?: string;
    /** The description of the collection. */
    description?: string;
    /** One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui. */
    displayLayout?: string;
}
export interface AddPostToCollectionRequest {
    /** The id of the collection. */
    collectionId?: string;
    /** The t3_ id of post which should be added to the collection. */
    linkFullname?: string;
}
export interface DeleteCollectionRequest {
    /** The id of the collection. */
    collectionId?: string;
}
export interface FollowCollectionRequest {
    /** The id of the collection. */
    collectionId?: string;
    /** One of: true | false. Indicating whether the collection should be followed or unfollowed. */
    follow?: boolean;
}
export interface RemovePostInCollectionRequest {
    /** The id of the collection. */
    collectionId?: string;
    /** The t3_ id of post which should be removed to the collection. */
    linkFullname?: string;
}
export interface ReorderCollectionRequest {
    /** The id of the collection. */
    collectionId?: string;
    /** A comma separated list of post ids e.g. "t3_abc,t3_def", which will determine the order of posts in the collection. */
    linkIds?: string;
}
export interface SubredditCollectionsRequest {
    /** The subreddit id of the subreddit for which to fetch a list of the collections */
    srFullname?: string;
}
export interface UpdateCollectionDescriptionRequest {
    /** The id of the collection to update. */
    collectionId?: string;
    /** The new description of the collection */
    description?: string;
}
export interface UpdateCollectionTitleRequest {
    /** The id of the collection to update. */
    collectionId?: string;
    /** The new title of the collection */
    title?: string;
}
export interface UpdateCollectionDisplayLayoutRequest {
    /** The id of the collection to update. */
    collectionId?: string;
    /** One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui. */
    displayLayout?: string;
}
/** responses */
export interface CollectionResponse {
    /** The id of the collection. */
    collectionId?: string;
    /** The subreddit id of subreddit that owns the collection. */
    subredditId?: string;
    /** The title of the collection. */
    title?: string;
    /** The description of the collection. */
    description?: string;
    /** The t2_ id of the user that created the collection. */
    authorId?: string;
    /** The username of the user that created the collection. */
    authorName?: string;
    /** A deep link to the collection. */
    permalink?: string;
    linkIds: string[];
    primaryLinkId?: string;
    /** One of: TIMELINE | GALLERY. This determines the layout of posts in the collection ui. */
    displayLayout?: string;
    createdAtUtc?: Date;
    lastUpdateUtc?: Date;
}
export interface SubredditCollectionsResponse {
    /** A list of collections. */
    collections: CollectionResponse[];
}
export declare const CollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.CollectionRequest";
    encode(message: CollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CollectionRequest;
    fromJSON(object: any): CollectionRequest;
    toJSON(message: CollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        includeLinks?: boolean | undefined;
    } & {
        collectionId?: string | undefined;
        includeLinks?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CollectionRequest>]: never; }>(object: I): CollectionRequest;
};
export declare const CreateCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.CreateCollectionRequest";
    encode(message: CreateCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateCollectionRequest;
    fromJSON(object: any): CreateCollectionRequest;
    toJSON(message: CreateCollectionRequest): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        srFullname?: string | undefined;
        description?: string | undefined;
        displayLayout?: string | undefined;
    } & {
        title?: string | undefined;
        srFullname?: string | undefined;
        description?: string | undefined;
        displayLayout?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof CreateCollectionRequest>]: never; }>(object: I): CreateCollectionRequest;
};
export declare const AddPostToCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.AddPostToCollectionRequest";
    encode(message: AddPostToCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddPostToCollectionRequest;
    fromJSON(object: any): AddPostToCollectionRequest;
    toJSON(message: AddPostToCollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        linkFullname?: string | undefined;
    } & {
        collectionId?: string | undefined;
        linkFullname?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AddPostToCollectionRequest>]: never; }>(object: I): AddPostToCollectionRequest;
};
export declare const DeleteCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.DeleteCollectionRequest";
    encode(message: DeleteCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteCollectionRequest;
    fromJSON(object: any): DeleteCollectionRequest;
    toJSON(message: DeleteCollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
    } & {
        collectionId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "collectionId">]: never; }>(object: I): DeleteCollectionRequest;
};
export declare const FollowCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.FollowCollectionRequest";
    encode(message: FollowCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FollowCollectionRequest;
    fromJSON(object: any): FollowCollectionRequest;
    toJSON(message: FollowCollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        follow?: boolean | undefined;
    } & {
        collectionId?: string | undefined;
        follow?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof FollowCollectionRequest>]: never; }>(object: I): FollowCollectionRequest;
};
export declare const RemovePostInCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.RemovePostInCollectionRequest";
    encode(message: RemovePostInCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemovePostInCollectionRequest;
    fromJSON(object: any): RemovePostInCollectionRequest;
    toJSON(message: RemovePostInCollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        linkFullname?: string | undefined;
    } & {
        collectionId?: string | undefined;
        linkFullname?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RemovePostInCollectionRequest>]: never; }>(object: I): RemovePostInCollectionRequest;
};
export declare const ReorderCollectionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.ReorderCollectionRequest";
    encode(message: ReorderCollectionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReorderCollectionRequest;
    fromJSON(object: any): ReorderCollectionRequest;
    toJSON(message: ReorderCollectionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        linkIds?: string | undefined;
    } & {
        collectionId?: string | undefined;
        linkIds?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ReorderCollectionRequest>]: never; }>(object: I): ReorderCollectionRequest;
};
export declare const SubredditCollectionsRequest: {
    $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsRequest";
    encode(message: SubredditCollectionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditCollectionsRequest;
    fromJSON(object: any): SubredditCollectionsRequest;
    toJSON(message: SubredditCollectionsRequest): unknown;
    fromPartial<I extends {
        srFullname?: string | undefined;
    } & {
        srFullname?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "srFullname">]: never; }>(object: I): SubredditCollectionsRequest;
};
export declare const UpdateCollectionDescriptionRequest: {
    $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionDescriptionRequest";
    encode(message: UpdateCollectionDescriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCollectionDescriptionRequest;
    fromJSON(object: any): UpdateCollectionDescriptionRequest;
    toJSON(message: UpdateCollectionDescriptionRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        description?: string | undefined;
    } & {
        collectionId?: string | undefined;
        description?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UpdateCollectionDescriptionRequest>]: never; }>(object: I): UpdateCollectionDescriptionRequest;
};
export declare const UpdateCollectionTitleRequest: {
    $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionTitleRequest";
    encode(message: UpdateCollectionTitleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCollectionTitleRequest;
    fromJSON(object: any): UpdateCollectionTitleRequest;
    toJSON(message: UpdateCollectionTitleRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        title?: string | undefined;
    } & {
        collectionId?: string | undefined;
        title?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UpdateCollectionTitleRequest>]: never; }>(object: I): UpdateCollectionTitleRequest;
};
export declare const UpdateCollectionDisplayLayoutRequest: {
    $type: "devvit.plugin.redditapi.postcollections.UpdateCollectionDisplayLayoutRequest";
    encode(message: UpdateCollectionDisplayLayoutRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCollectionDisplayLayoutRequest;
    fromJSON(object: any): UpdateCollectionDisplayLayoutRequest;
    toJSON(message: UpdateCollectionDisplayLayoutRequest): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        displayLayout?: string | undefined;
    } & {
        collectionId?: string | undefined;
        displayLayout?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof UpdateCollectionDisplayLayoutRequest>]: never; }>(object: I): UpdateCollectionDisplayLayoutRequest;
};
export declare const CollectionResponse: {
    $type: "devvit.plugin.redditapi.postcollections.CollectionResponse";
    encode(message: CollectionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CollectionResponse;
    fromJSON(object: any): CollectionResponse;
    toJSON(message: CollectionResponse): unknown;
    fromPartial<I extends {
        collectionId?: string | undefined;
        subredditId?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        authorId?: string | undefined;
        authorName?: string | undefined;
        permalink?: string | undefined;
        linkIds?: string[] | undefined;
        primaryLinkId?: string | undefined;
        displayLayout?: string | undefined;
        createdAtUtc?: Date | undefined;
        lastUpdateUtc?: Date | undefined;
    } & {
        collectionId?: string | undefined;
        subredditId?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        authorId?: string | undefined;
        authorName?: string | undefined;
        permalink?: string | undefined;
        linkIds?: (string[] & string[] & { [K in Exclude<keyof I["linkIds"], "$type" | keyof string[]>]: never; }) | undefined;
        primaryLinkId?: string | undefined;
        displayLayout?: string | undefined;
        createdAtUtc?: Date | undefined;
        lastUpdateUtc?: Date | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof CollectionResponse>]: never; }>(object: I): CollectionResponse;
};
export declare const SubredditCollectionsResponse: {
    $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsResponse";
    encode(message: SubredditCollectionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditCollectionsResponse;
    fromJSON(object: any): SubredditCollectionsResponse;
    toJSON(message: SubredditCollectionsResponse): unknown;
    fromPartial<I extends {
        collections?: {
            collectionId?: string | undefined;
            subredditId?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorId?: string | undefined;
            authorName?: string | undefined;
            permalink?: string | undefined;
            linkIds?: string[] | undefined;
            primaryLinkId?: string | undefined;
            displayLayout?: string | undefined;
            createdAtUtc?: Date | undefined;
            lastUpdateUtc?: Date | undefined;
        }[] | undefined;
    } & {
        collections?: ({
            collectionId?: string | undefined;
            subredditId?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorId?: string | undefined;
            authorName?: string | undefined;
            permalink?: string | undefined;
            linkIds?: string[] | undefined;
            primaryLinkId?: string | undefined;
            displayLayout?: string | undefined;
            createdAtUtc?: Date | undefined;
            lastUpdateUtc?: Date | undefined;
        }[] & ({
            collectionId?: string | undefined;
            subredditId?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorId?: string | undefined;
            authorName?: string | undefined;
            permalink?: string | undefined;
            linkIds?: string[] | undefined;
            primaryLinkId?: string | undefined;
            displayLayout?: string | undefined;
            createdAtUtc?: Date | undefined;
            lastUpdateUtc?: Date | undefined;
        } & {
            collectionId?: string | undefined;
            subredditId?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorId?: string | undefined;
            authorName?: string | undefined;
            permalink?: string | undefined;
            linkIds?: (string[] & string[] & { [K in Exclude<keyof I["collections"][number]["linkIds"], "$type" | keyof string[]>]: never; }) | undefined;
            primaryLinkId?: string | undefined;
            displayLayout?: string | undefined;
            createdAtUtc?: Date | undefined;
            lastUpdateUtc?: Date | undefined;
        } & { [K_1 in Exclude<keyof I["collections"][number], "$type" | keyof CollectionResponse>]: never; })[] & { [K_2 in Exclude<keyof I["collections"], "$type" | keyof {
            collectionId?: string | undefined;
            subredditId?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            authorId?: string | undefined;
            authorName?: string | undefined;
            permalink?: string | undefined;
            linkIds?: string[] | undefined;
            primaryLinkId?: string | undefined;
            displayLayout?: string | undefined;
            createdAtUtc?: Date | undefined;
            lastUpdateUtc?: Date | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "collections">]: never; }>(object: I): SubredditCollectionsResponse;
};
//# sourceMappingURL=postcollections_msg.d.ts.map
/**
 * #filesystem.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** A file is a single file or directory in a filesystem. */
export interface File {
    /**
     * The name of the file, relative to the root of the filesystem.
     * Please don't start with a slash.
     */
    path: string;
    content: string;
    isDirectory: boolean;
    isBase64: boolean;
}
/**
 * A filesystem is a collection of files and directories.
 * This often will be a git repository.
 */
export interface FileSystem {
    files: File[];
}
export declare const File: {
    $type: "devvit.plugin.buildpack.File";
    encode(message: File, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): File;
    fromJSON(object: any): File;
    toJSON(message: File): unknown;
    fromPartial<I extends {
        path?: string | undefined;
        content?: string | undefined;
        isDirectory?: boolean | undefined;
        isBase64?: boolean | undefined;
    } & {
        path?: string | undefined;
        content?: string | undefined;
        isDirectory?: boolean | undefined;
        isBase64?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof File>]: never; }>(object: I): File;
};
export declare const FileSystem: {
    $type: "devvit.plugin.buildpack.FileSystem";
    encode(message: FileSystem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FileSystem;
    fromJSON(object: any): FileSystem;
    toJSON(message: FileSystem): unknown;
    fromPartial<I extends {
        files?: {
            path?: string | undefined;
            content?: string | undefined;
            isDirectory?: boolean | undefined;
            isBase64?: boolean | undefined;
        }[] | undefined;
    } & {
        files?: ({
            path?: string | undefined;
            content?: string | undefined;
            isDirectory?: boolean | undefined;
            isBase64?: boolean | undefined;
        }[] & ({
            path?: string | undefined;
            content?: string | undefined;
            isDirectory?: boolean | undefined;
            isBase64?: boolean | undefined;
        } & {
            path?: string | undefined;
            content?: string | undefined;
            isDirectory?: boolean | undefined;
            isBase64?: boolean | undefined;
        } & { [K in Exclude<keyof I["files"][number], "$type" | keyof File>]: never; })[] & { [K_1 in Exclude<keyof I["files"], "$type" | keyof {
            path?: string | undefined;
            content?: string | undefined;
            isDirectory?: boolean | undefined;
            isBase64?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "files">]: never; }>(object: I): FileSystem;
};
//# sourceMappingURL=filesystem.d.ts.map
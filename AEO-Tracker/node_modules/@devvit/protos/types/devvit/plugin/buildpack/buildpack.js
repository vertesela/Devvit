/**
 * #buildpack.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { CompileParams, CompileResponse } from './buildpack_common.js';
export class BuildPackClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.buildpack.BuildPack";
        this.rpc = rpc;
        this.Compile = this.Compile.bind(this);
        this.Watch = this.Watch.bind(this);
    }
    Compile(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "Compile", data);
        return promise.then((data) => CompileResponse.decode(new _m0.Reader(data)));
    }
    Watch(request) {
        const data = CompileParams.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Watch", data);
        return result.pipe(map((data) => CompileResponse.decode(new _m0.Reader(data))));
    }
}
export const BuildPackDefinition = {
    name: "BuildPack",
    fullName: "devvit.plugin.buildpack.BuildPack",
    methods: {
        /** Compiles user code into an output bundle, including an audit trail, if desired. */
        compile: {
            name: "Compile",
            requestType: CompileParams,
            requestStream: false,
            responseType: CompileResponse,
            responseStream: false,
            options: {},
        },
        /** Automatically rebundle when input files change. */
        watch: {
            name: "Watch",
            requestType: CompileParams,
            requestStream: false,
            responseType: CompileResponse,
            responseStream: true,
            options: {},
        },
    },
};

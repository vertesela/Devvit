/**
 * #buildpack.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Observable } from "rxjs";
import { CompileParams, CompileResponse } from './buildpack_common.js';
export interface BuildPack {
    /** Compiles user code into an output bundle, including an audit trail, if desired. */
    Compile(request: CompileParams, metadata?: Metadata): Promise<CompileResponse>;
    /** Automatically rebundle when input files change. */
    Watch(request: CompileParams, metadata?: Metadata): Observable<CompileResponse>;
}
export declare class BuildPackClientImpl implements BuildPack {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Compile(request: CompileParams): Promise<CompileResponse>;
    Watch(request: CompileParams): Observable<CompileResponse>;
}
export type BuildPackDefinition = typeof BuildPackDefinition;
export declare const BuildPackDefinition: {
    name: 'BuildPack';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}
export {};
//# sourceMappingURL=buildpack.d.ts.map
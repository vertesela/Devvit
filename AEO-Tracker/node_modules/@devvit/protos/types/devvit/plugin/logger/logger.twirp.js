import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { LogErrorMessage, LogErrorResponse, LogEventMessage, LogEventResponse, LogMessage, LogResponse, } from './logger.js';
export var LoggerMethod;
(function (LoggerMethod) {
    LoggerMethod["Error"] = "Error";
    LoggerMethod["Event"] = "Event";
    LoggerMethod["Log"] = "Log";
})(LoggerMethod || (LoggerMethod = {}));
export const LoggerMethodList = [
    LoggerMethod.Error,
    LoggerMethod.Event,
    LoggerMethod.Log,
];
export function createLoggerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.logger',
        serviceName: 'Logger',
        methodList: LoggerMethodList,
        matchRoute: matchLoggerRoute,
    });
}
function matchLoggerRoute(method, events) {
    switch (method) {
        case 'Error':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Error' };
                await events.onMatch(ctx);
                return handleLoggerErrorRequest(ctx, service, data, interceptors);
            };
        case 'Event':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Event' };
                await events.onMatch(ctx);
                return handleLoggerEventRequest(ctx, service, data, interceptors);
            };
        case 'Log':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Log' };
                await events.onMatch(ctx);
                return handleLoggerLogRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleLoggerErrorRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleLoggerErrorJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleLoggerErrorProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleLoggerEventRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleLoggerEventJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleLoggerEventProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleLoggerLogRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleLoggerLogJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleLoggerLogProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleLoggerErrorJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LogErrorMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Error(ctx, inputReq);
        });
    }
    else {
        response = await service.Error(ctx, request);
    }
    return JSON.stringify(LogErrorResponse.toJSON(response));
}
async function handleLoggerEventJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LogEventMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Event(ctx, inputReq);
        });
    }
    else {
        response = await service.Event(ctx, request);
    }
    return JSON.stringify(LogEventResponse.toJSON(response));
}
async function handleLoggerLogJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LogMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Log(ctx, inputReq);
        });
    }
    else {
        response = await service.Log(ctx, request);
    }
    return JSON.stringify(LogResponse.toJSON(response));
}
async function handleLoggerErrorProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LogErrorMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Error(ctx, inputReq);
        });
    }
    else {
        response = await service.Error(ctx, request);
    }
    return Buffer.from(LogErrorResponse.encode(response).finish());
}
async function handleLoggerEventProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LogEventMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Event(ctx, inputReq);
        });
    }
    else {
        response = await service.Event(ctx, request);
    }
    return Buffer.from(LogEventResponse.encode(response).finish());
}
async function handleLoggerLogProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LogMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Log(ctx, inputReq);
        });
    }
    else {
        response = await service.Log(ctx, request);
    }
    return Buffer.from(LogResponse.encode(response).finish());
}

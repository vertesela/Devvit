import { LogErrorMessage, LogErrorResponse, LogEventMessage, LogEventResponse, LogMessage, LogResponse, } from './logger.js';
export class LoggerClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Error.bind(this);
        this.Event.bind(this);
        this.Log.bind(this);
    }
    Error(request) {
        const data = LogErrorMessage.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Error', 'application/json', data);
        return promise.then((data) => LogErrorResponse.fromJSON(data));
    }
    Event(request) {
        const data = LogEventMessage.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Event', 'application/json', data);
        return promise.then((data) => LogEventResponse.fromJSON(data));
    }
    Log(request) {
        const data = LogMessage.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Log', 'application/json', data);
        return promise.then((data) => LogResponse.fromJSON(data));
    }
}
export class LoggerClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Error.bind(this);
        this.Event.bind(this);
        this.Log.bind(this);
    }
    Error(request) {
        const data = LogErrorMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Error', 'application/protobuf', data);
        return promise.then((data) => LogErrorResponse.decode(data));
    }
    Event(request) {
        const data = LogEventMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Event', 'application/protobuf', data);
        return promise.then((data) => LogEventResponse.decode(data));
    }
    Log(request) {
        const data = LogMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.logger.Logger', 'Log', 'application/protobuf', data);
        return promise.then((data) => LogResponse.decode(data));
    }
}

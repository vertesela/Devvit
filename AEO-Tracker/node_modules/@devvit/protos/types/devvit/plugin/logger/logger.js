/**
 * #logger.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Timestamp } from '../../../google/protobuf/timestamp.js';
import { StringValue, UInt32Value } from '../../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
export var Severity;
(function (Severity) {
    /**
     * DEBUG - Debug logs should never be committed.
     *
     * These logs are always enabled in development builds but disabled in
     * production.
     */
    Severity[Severity["DEBUG"] = 0] = "DEBUG";
    /**
     * INFO - Informational logs should be used to mark significant non-erroneous events.
     * Little information is significant.
     *
     * These logs are enabled by default in development builds but may be
     * disabled in production.
     */
    Severity[Severity["INFO"] = 1] = "INFO";
    /**
     * WARN - Warnings should be reported as long as they do not contain sensitive data.
     *
     * These logs are always enabled.
     */
    Severity[Severity["WARN"] = 2] = "WARN";
    /** ERROR - Errors should always be reported as long as they do not contain sensitive data. */
    Severity[Severity["ERROR"] = 3] = "ERROR";
    /**
     * VERBOSE - Verbose logs are useful for tracing but usually a hindrance for others not
     * working where the log is placed. Keep our logs clean and add with care.
     *
     * These logs are disabled by default in all environments but can be enabled.
     */
    Severity[Severity["VERBOSE"] = 4] = "VERBOSE";
    Severity[Severity["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Severity || (Severity = {}));
export function severityFromJSON(object) {
    switch (object) {
        case 0:
        case "DEBUG":
            return Severity.DEBUG;
        case 1:
        case "INFO":
            return Severity.INFO;
        case 2:
        case "WARN":
            return Severity.WARN;
        case 3:
        case "ERROR":
            return Severity.ERROR;
        case 4:
        case "VERBOSE":
            return Severity.VERBOSE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Severity.UNRECOGNIZED;
    }
}
export function severityToJSON(object) {
    switch (object) {
        case Severity.DEBUG:
            return 0;
        case Severity.INFO:
            return 1;
        case Severity.WARN:
            return 2;
        case Severity.ERROR:
            return 3;
        case Severity.VERBOSE:
            return 4;
        case Severity.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseLogErrorMessage() {
    return {
        message: "",
        name: "",
        fileName: undefined,
        lineNumber: undefined,
        columnNumber: undefined,
        stack: undefined,
        timestamp: undefined,
        tags: [],
    };
}
export const LogErrorMessage = {
    $type: "devvit.plugin.logger.LogErrorMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.fileName !== undefined) {
            StringValue.encode({ value: message.fileName }, writer.uint32(26).fork()).ldelim();
        }
        if (message.lineNumber !== undefined) {
            UInt32Value.encode({ value: message.lineNumber }, writer.uint32(34).fork()).ldelim();
        }
        if (message.columnNumber !== undefined) {
            UInt32Value.encode({ value: message.columnNumber }, writer.uint32(42).fork()).ldelim();
        }
        if (message.stack !== undefined) {
            StringValue.encode({ value: message.stack }, writer.uint32(50).fork()).ldelim();
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.tags) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogErrorMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.fileName = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.lineNumber = UInt32Value.decode(reader, reader.uint32()).value;
                    break;
                case 5:
                    message.columnNumber = UInt32Value.decode(reader, reader.uint32()).value;
                    break;
                case 6:
                    message.stack = StringValue.decode(reader, reader.uint32()).value;
                    break;
                case 7:
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.tags.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? String(object.message) : "",
            name: isSet(object.name) ? String(object.name) : "",
            fileName: isSet(object.fileName) ? String(object.fileName) : undefined,
            lineNumber: isSet(object.lineNumber) ? Number(object.lineNumber) : undefined,
            columnNumber: isSet(object.columnNumber) ? Number(object.columnNumber) : undefined,
            stack: isSet(object.stack) ? String(object.stack) : undefined,
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            tags: Array.isArray(object?.tags) ? object.tags.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.name !== undefined && (obj.name = message.name);
        message.fileName !== undefined && (obj.fileName = message.fileName);
        message.lineNumber !== undefined && (obj.lineNumber = message.lineNumber);
        message.columnNumber !== undefined && (obj.columnNumber = message.columnNumber);
        message.stack !== undefined && (obj.stack = message.stack);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        if (message.tags) {
            obj.tags = message.tags.map((e) => e);
        }
        else {
            obj.tags = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLogErrorMessage();
        message.message = object.message ?? "";
        message.name = object.name ?? "";
        message.fileName = object.fileName ?? undefined;
        message.lineNumber = object.lineNumber ?? undefined;
        message.columnNumber = object.columnNumber ?? undefined;
        message.stack = object.stack ?? undefined;
        message.timestamp = object.timestamp ?? undefined;
        message.tags = object.tags?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogErrorMessage", LogErrorMessage);
function createBaseLogEventMessage() {
    return { type: "", timestamp: undefined, labels: {}, data: {} };
}
export const LogEventMessage = {
    $type: "devvit.plugin.logger.LogEventMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        Object.entries(message.labels).forEach(([key, value]) => {
            LogEventMessage_LabelsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        Object.entries(message.data).forEach(([key, value]) => {
            LogEventMessage_DataEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogEventMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.string();
                    break;
                case 2:
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    const entry3 = LogEventMessage_LabelsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.labels[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    const entry4 = LogEventMessage_DataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.data[entry4.key] = entry4.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? String(object.type) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            labels: isObject(object.labels)
                ? Object.entries(object.labels).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            data: isObject(object.data)
                ? Object.entries(object.data).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = message.type);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        obj.labels = {};
        if (message.labels) {
            Object.entries(message.labels).forEach(([k, v]) => {
                obj.labels[k] = v;
            });
        }
        obj.data = {};
        if (message.data) {
            Object.entries(message.data).forEach(([k, v]) => {
                obj.data[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLogEventMessage();
        message.type = object.type ?? "";
        message.timestamp = object.timestamp ?? undefined;
        message.labels = Object.entries(object.labels ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.data = Object.entries(object.data ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogEventMessage", LogEventMessage);
function createBaseLogEventMessage_LabelsEntry() {
    return { key: "", value: "" };
}
export const LogEventMessage_LabelsEntry = {
    $type: "devvit.plugin.logger.LogEventMessage.LabelsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogEventMessage_LabelsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLogEventMessage_LabelsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogEventMessage.LabelsEntry", LogEventMessage_LabelsEntry);
function createBaseLogEventMessage_DataEntry() {
    return { key: "", value: "" };
}
export const LogEventMessage_DataEntry = {
    $type: "devvit.plugin.logger.LogEventMessage.DataEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogEventMessage_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLogEventMessage_DataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogEventMessage.DataEntry", LogEventMessage_DataEntry);
function createBaseLogMessage() {
    return { severity: 0, message: "", timestamp: undefined, tags: [] };
}
export const LogMessage = {
    $type: "devvit.plugin.logger.LogMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.severity !== 0) {
            writer.uint32(8).int32(message.severity);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.tags) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.severity = reader.int32();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                case 3:
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.tags.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            severity: isSet(object.severity) ? severityFromJSON(object.severity) : 0,
            message: isSet(object.message) ? String(object.message) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            tags: Array.isArray(object?.tags) ? object.tags.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.severity !== undefined && (obj.severity = severityToJSON(message.severity));
        message.message !== undefined && (obj.message = message.message);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        if (message.tags) {
            obj.tags = message.tags.map((e) => e);
        }
        else {
            obj.tags = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseLogMessage();
        message.severity = object.severity ?? 0;
        message.message = object.message ?? "";
        message.timestamp = object.timestamp ?? undefined;
        message.tags = object.tags?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogMessage", LogMessage);
function createBaseLogErrorResponse() {
    return {};
}
export const LogErrorResponse = {
    $type: "devvit.plugin.logger.LogErrorResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogErrorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseLogErrorResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogErrorResponse", LogErrorResponse);
function createBaseLogEventResponse() {
    return {};
}
export const LogEventResponse = {
    $type: "devvit.plugin.logger.LogEventResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseLogEventResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogEventResponse", LogEventResponse);
function createBaseLogResponse() {
    return {};
}
export const LogResponse = {
    $type: "devvit.plugin.logger.LogResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseLogResponse();
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.logger.LogResponse", LogResponse);
export class LoggerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.logger.Logger";
        this.rpc = rpc;
        this.Error = this.Error.bind(this);
        this.Event = this.Event.bind(this);
        this.Log = this.Log.bind(this);
    }
    Error(request) {
        const data = LogErrorMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Error", data);
        return promise.then((data) => LogErrorResponse.decode(new _m0.Reader(data)));
    }
    Event(request) {
        const data = LogEventMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Event", data);
        return promise.then((data) => LogEventResponse.decode(new _m0.Reader(data)));
    }
    Log(request) {
        const data = LogMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Log", data);
        return promise.then((data) => LogResponse.decode(new _m0.Reader(data)));
    }
}
export const LoggerDefinition = {
    name: "Logger",
    fullName: "devvit.plugin.logger.Logger",
    methods: {
        error: {
            name: "Error",
            requestType: LogErrorMessage,
            requestStream: false,
            responseType: LogErrorResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Record a notable event or historical record for analytics and security.
         *
         * @internal
         */
        event: {
            name: "Event",
            requestType: LogEventMessage,
            requestStream: false,
            responseType: LogEventResponse,
            responseStream: false,
            options: {},
        },
        log: {
            name: "Log",
            requestType: LogMessage,
            requestStream: false,
            responseType: LogResponse,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

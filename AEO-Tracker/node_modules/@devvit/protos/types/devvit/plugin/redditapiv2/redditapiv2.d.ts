/**
 * #redditapiv2.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { JsonStatus } from '../redditapi/common/common_msg.js';
import { DeleteFlairTemplateRequest } from '../redditapi/flair/flair_msg.js';
import { SubredditCollectionsRequest, SubredditCollectionsResponse } from '../redditapi/postcollections/postcollections_msg.js';
export interface RedditAPIV2 {
    GetSubredditCollections(request: SubredditCollectionsRequest, metadata?: Metadata): Promise<SubredditCollectionsResponse>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
}
export declare class RedditAPIV2ClientImpl implements RedditAPIV2 {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubredditCollections(request: SubredditCollectionsRequest): Promise<SubredditCollectionsResponse>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest): Promise<JsonStatus>;
}
export type RedditAPIV2Definition = typeof RedditAPIV2Definition;
export declare const RedditAPIV2Definition: {
    name: 'RedditAPIV2';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=redditapiv2.d.ts.map
/**
 * #kvstore.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface MessageSet {
    messages: {
        [key: string]: string;
    };
}
export interface MessageSet_MessagesEntry {
    key: string;
    value: string;
}
export interface KeySet {
    keys: string[];
}
export interface ListFilter {
    filter: string;
}
export declare const MessageSet: {
    $type: "devvit.plugin.kvstore.MessageSet";
    encode(message: MessageSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet;
    fromJSON(object: any): MessageSet;
    toJSON(message: MessageSet): unknown;
    fromPartial<I extends {
        messages?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        messages?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["messages"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "messages">]: never; }>(object: I): MessageSet;
};
export declare const MessageSet_MessagesEntry: {
    $type: "devvit.plugin.kvstore.MessageSet.MessagesEntry";
    encode(message: MessageSet_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet_MessagesEntry;
    fromJSON(object: any): MessageSet_MessagesEntry;
    toJSON(message: MessageSet_MessagesEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof MessageSet_MessagesEntry>]: never; }>(object: I): MessageSet_MessagesEntry;
};
export declare const KeySet: {
    $type: "devvit.plugin.kvstore.KeySet";
    encode(message: KeySet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeySet;
    fromJSON(object: any): KeySet;
    toJSON(message: KeySet): unknown;
    fromPartial<I extends {
        keys?: string[] | undefined;
    } & {
        keys?: (string[] & string[] & { [K in Exclude<keyof I["keys"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "keys">]: never; }>(object: I): KeySet;
};
export declare const ListFilter: {
    $type: "devvit.plugin.kvstore.ListFilter";
    encode(message: ListFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListFilter;
    fromJSON(object: any): ListFilter;
    toJSON(message: ListFilter): unknown;
    fromPartial<I extends {
        filter?: string | undefined;
    } & {
        filter?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "filter">]: never; }>(object: I): ListFilter;
};
export interface KVStore {
    Put(request: MessageSet, metadata?: Metadata): Promise<Empty>;
    Get(request: KeySet, metadata?: Metadata): Promise<MessageSet>;
    Del(request: KeySet, metadata?: Metadata): Promise<Empty>;
    List(request: ListFilter, metadata?: Metadata): Promise<KeySet>;
}
export declare class KVStoreClientImpl implements KVStore {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: MessageSet): Promise<Empty>;
    Get(request: KeySet): Promise<MessageSet>;
    Del(request: KeySet): Promise<Empty>;
    List(request: ListFilter): Promise<KeySet>;
}
export type KVStoreDefinition = typeof KVStoreDefinition;
export declare const KVStoreDefinition: {
    name: 'KVStore';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=kvstore.d.ts.map
/**
 * #builder.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { LinkedBundle } from '../../runtime/bundle.js';
import { CompileLog, CompileParams } from '../buildpack/buildpack_common.js';
function createBaseBuildResponse() {
    return { bundle: undefined, errors: [], warnings: [] };
}
export const BuildResponse = {
    $type: "devvit.plugin.builder.BuildResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bundle !== undefined) {
            LinkedBundle.encode(message.bundle, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.errors) {
            CompileLog.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.warnings) {
            CompileLog.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bundle = LinkedBundle.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.errors.push(CompileLog.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.warnings.push(CompileLog.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundle: isSet(object.bundle) ? LinkedBundle.fromJSON(object.bundle) : undefined,
            errors: Array.isArray(object?.errors) ? object.errors.map((e) => CompileLog.fromJSON(e)) : [],
            warnings: Array.isArray(object?.warnings) ? object.warnings.map((e) => CompileLog.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.bundle !== undefined && (obj.bundle = message.bundle ? LinkedBundle.toJSON(message.bundle) : undefined);
        if (message.errors) {
            obj.errors = message.errors.map((e) => e ? CompileLog.toJSON(e) : undefined);
        }
        else {
            obj.errors = [];
        }
        if (message.warnings) {
            obj.warnings = message.warnings.map((e) => e ? CompileLog.toJSON(e) : undefined);
        }
        else {
            obj.warnings = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseBuildResponse();
        message.bundle = (object.bundle !== undefined && object.bundle !== null)
            ? LinkedBundle.fromPartial(object.bundle)
            : undefined;
        message.errors = object.errors?.map((e) => CompileLog.fromPartial(e)) || [];
        message.warnings = object.warnings?.map((e) => CompileLog.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.builder.BuildResponse", BuildResponse);
export class BuilderClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.builder.Builder";
        this.rpc = rpc;
        this.Build = this.Build.bind(this);
        this.Watch = this.Watch.bind(this);
    }
    Build(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "Build", data);
        return promise.then((data) => BuildResponse.decode(new _m0.Reader(data)));
    }
    Watch(request) {
        const data = CompileParams.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Watch", data);
        return result.pipe(map((data) => BuildResponse.decode(new _m0.Reader(data))));
    }
}
export const BuilderDefinition = {
    name: "Builder",
    fullName: "devvit.plugin.builder.Builder",
    methods: {
        /** Compiles and links user code into an output bundle, including an audit trail, if desired. */
        build: {
            name: "Build",
            requestType: CompileParams,
            requestStream: false,
            responseType: BuildResponse,
            responseStream: false,
            options: {},
        },
        /** Automatically rebuild when input files change. */
        watch: {
            name: "Watch",
            requestType: CompileParams,
            requestStream: false,
            responseType: BuildResponse,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

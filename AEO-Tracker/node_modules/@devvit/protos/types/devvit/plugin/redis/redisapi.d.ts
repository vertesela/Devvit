/**
 * #redisapi.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { DoubleValue, Int64Value, StringValue } from '../../../google/protobuf/wrappers.js';
/**
 * This key scope determines the key namespacing in Redis storage
 * By default, all keys in Redis are namespaced to an installation
 * Global redis enables apps to persist and access state across subreddit installations
 * Default key format - installation:app:custom-key
 * Global redis key format - global:app:custom-key
 */
export declare enum RedisKeyScope {
    INSTALLATION = 0,
    GLOBAL = 1,
    UNRECOGNIZED = -1
}
export declare function redisKeyScopeFromJSON(object: any): RedisKeyScope;
export declare function redisKeyScopeToJSON(object: RedisKeyScope): number;
export interface TransactionResponses {
    response: TransactionResponse[];
}
export interface TransactionResponse {
    str?: string;
    nil?: Empty | undefined;
    num?: number;
    members?: ZMembers | undefined;
    values?: RedisValues | undefined;
}
export interface ZRangeRequest {
    key?: KeyRequest;
    start: string;
    stop: string;
    byScore: boolean;
    byLex: boolean;
    rev: boolean;
    offset: number;
    count: number;
    scope?: RedisKeyScope | undefined;
}
export interface ZRangeByLexRequest {
    key?: KeyRequest;
    min: string;
    max: string;
    scope?: RedisKeyScope | undefined;
}
export interface ZRangeByScoreRequest {
    key?: KeyRequest;
    min: number;
    max: number;
    withScores: boolean;
    scope?: RedisKeyScope | undefined;
}
export interface ZRemRequest {
    key?: KeyRequest;
    members: string[];
    scope?: RedisKeyScope | undefined;
}
export interface ZRemRangeByLexRequest {
    key?: KeyRequest;
    min: string;
    max: string;
    scope?: RedisKeyScope | undefined;
}
export interface ZRemRangeByRankRequest {
    key?: KeyRequest;
    start: number;
    stop: number;
    scope?: RedisKeyScope | undefined;
}
export interface ZRemRangeByScoreRequest {
    key?: KeyRequest;
    min: number;
    max: number;
    scope?: RedisKeyScope | undefined;
}
export interface ZScoreRequest {
    key?: KeyRequest;
    member: string;
    scope?: RedisKeyScope | undefined;
}
export interface ZRankRequest {
    key?: KeyRequest;
    member: string;
    scope?: RedisKeyScope | undefined;
}
export interface ZIncrByRequest {
    key: string;
    member: string;
    value: number;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface KeyRequest {
    key: string;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface IncrByRequest {
    key: string;
    value: number;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface SetRequest {
    key: string;
    value: string;
    /** Expiration time in seconds */
    expiration: number;
    /** Set only if key does not exist */
    nx: boolean;
    /** Set only if key already exists */
    xx: boolean;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface KeyRangeRequest {
    key: string;
    start: number;
    end: number;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface SetRangeRequest {
    key: string;
    offset: number;
    value: string;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface KeysRequest {
    keys: string[];
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface KeysResponse {
    keys: string[];
}
export interface HGetRequest {
    key: string;
    field: string;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface HSetRequest {
    key: string;
    fv: RedisFieldValue[];
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface HDelRequest {
    key: string;
    fields: string[];
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface HScanRequest {
    key: string;
    cursor: number;
    pattern?: string | undefined;
    count?: number | undefined;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface HScanResponse {
    cursor: number;
    fieldValues: RedisFieldValue[];
}
export interface HIncrByRequest {
    key: string;
    field: string;
    value: number;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface RedisFieldValue {
    field: string;
    value: string;
}
export interface RedisFieldValues {
    fieldValues: {
        [key: string]: string;
    };
}
export interface RedisFieldValues_FieldValuesEntry {
    key: string;
    value: string;
}
export interface KeyValuesRequest {
    kv: RedisKeyValue[];
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface RedisKeyValue {
    key: string;
    value: string;
}
export interface RedisValues {
    values: string[];
}
export interface ExpireRequest {
    key: string;
    seconds: number;
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface ZAddRequest {
    key: string;
    members: ZMember[];
    /** Optional transaction id */
    transactionId?: TransactionId;
    scope?: RedisKeyScope | undefined;
}
export interface ZMembers {
    members: ZMember[];
}
export interface ZMember {
    score: number;
    member: string;
}
export interface TransactionId {
    id: string;
}
export interface WatchRequest {
    transactionId?: TransactionId;
    keys: string[];
}
export declare const TransactionResponses: {
    $type: "devvit.plugin.redis.TransactionResponses";
    encode(message: TransactionResponses, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransactionResponses;
    fromJSON(object: any): TransactionResponses;
    toJSON(message: TransactionResponses): unknown;
    fromPartial<I extends {
        response?: {
            str?: string | undefined;
            nil?: {} | undefined;
            num?: number | undefined;
            members?: {
                members?: {
                    score?: number | undefined;
                    member?: string | undefined;
                }[] | undefined;
            } | undefined;
            values?: {
                values?: string[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        response?: ({
            str?: string | undefined;
            nil?: {} | undefined;
            num?: number | undefined;
            members?: {
                members?: {
                    score?: number | undefined;
                    member?: string | undefined;
                }[] | undefined;
            } | undefined;
            values?: {
                values?: string[] | undefined;
            } | undefined;
        }[] & ({
            str?: string | undefined;
            nil?: {} | undefined;
            num?: number | undefined;
            members?: {
                members?: {
                    score?: number | undefined;
                    member?: string | undefined;
                }[] | undefined;
            } | undefined;
            values?: {
                values?: string[] | undefined;
            } | undefined;
        } & {
            str?: string | undefined;
            nil?: ({} & {} & { [K in Exclude<keyof I["response"][number]["nil"], "$type">]: never; }) | undefined;
            num?: number | undefined;
            members?: ({
                members?: {
                    score?: number | undefined;
                    member?: string | undefined;
                }[] | undefined;
            } & {
                members?: ({
                    score?: number | undefined;
                    member?: string | undefined;
                }[] & ({
                    score?: number | undefined;
                    member?: string | undefined;
                } & {
                    score?: number | undefined;
                    member?: string | undefined;
                } & { [K_1 in Exclude<keyof I["response"][number]["members"]["members"][number], "$type" | keyof ZMember>]: never; })[] & { [K_2 in Exclude<keyof I["response"][number]["members"]["members"], "$type" | keyof {
                    score?: number | undefined;
                    member?: string | undefined;
                }[]>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["response"][number]["members"], "$type" | "members">]: never; }) | undefined;
            values?: ({
                values?: string[] | undefined;
            } & {
                values?: (string[] & string[] & { [K_4 in Exclude<keyof I["response"][number]["values"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_5 in Exclude<keyof I["response"][number]["values"], "$type" | "values">]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I["response"][number], "$type" | keyof TransactionResponse>]: never; })[] & { [K_7 in Exclude<keyof I["response"], "$type" | keyof {
            str?: string | undefined;
            nil?: {} | undefined;
            num?: number | undefined;
            members?: {
                members?: {
                    score?: number | undefined;
                    member?: string | undefined;
                }[] | undefined;
            } | undefined;
            values?: {
                values?: string[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_8 in Exclude<keyof I, "$type" | "response">]: never; }>(object: I): TransactionResponses;
};
export declare const TransactionResponse: {
    $type: "devvit.plugin.redis.TransactionResponse";
    encode(message: TransactionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransactionResponse;
    fromJSON(object: any): TransactionResponse;
    toJSON(message: TransactionResponse): unknown;
    fromPartial<I extends {
        str?: string | undefined;
        nil?: {} | undefined;
        num?: number | undefined;
        members?: {
            members?: {
                score?: number | undefined;
                member?: string | undefined;
            }[] | undefined;
        } | undefined;
        values?: {
            values?: string[] | undefined;
        } | undefined;
    } & {
        str?: string | undefined;
        nil?: ({} & {} & { [K in Exclude<keyof I["nil"], "$type">]: never; }) | undefined;
        num?: number | undefined;
        members?: ({
            members?: {
                score?: number | undefined;
                member?: string | undefined;
            }[] | undefined;
        } & {
            members?: ({
                score?: number | undefined;
                member?: string | undefined;
            }[] & ({
                score?: number | undefined;
                member?: string | undefined;
            } & {
                score?: number | undefined;
                member?: string | undefined;
            } & { [K_1 in Exclude<keyof I["members"]["members"][number], "$type" | keyof ZMember>]: never; })[] & { [K_2 in Exclude<keyof I["members"]["members"], "$type" | keyof {
                score?: number | undefined;
                member?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["members"], "$type" | "members">]: never; }) | undefined;
        values?: ({
            values?: string[] | undefined;
        } & {
            values?: (string[] & string[] & { [K_4 in Exclude<keyof I["values"]["values"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_5 in Exclude<keyof I["values"], "$type" | "values">]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, "$type" | keyof TransactionResponse>]: never; }>(object: I): TransactionResponse;
};
export declare const ZRangeRequest: {
    $type: "devvit.plugin.redis.ZRangeRequest";
    encode(message: ZRangeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRangeRequest;
    fromJSON(object: any): ZRangeRequest;
    toJSON(message: ZRangeRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        start?: string | undefined;
        stop?: string | undefined;
        byScore?: boolean | undefined;
        byLex?: boolean | undefined;
        rev?: boolean | undefined;
        offset?: number | undefined;
        count?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        start?: string | undefined;
        stop?: string | undefined;
        byScore?: boolean | undefined;
        byLex?: boolean | undefined;
        rev?: boolean | undefined;
        offset?: number | undefined;
        count?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRangeRequest>]: never; }>(object: I): ZRangeRequest;
};
export declare const ZRangeByLexRequest: {
    $type: "devvit.plugin.redis.ZRangeByLexRequest";
    encode(message: ZRangeByLexRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRangeByLexRequest;
    fromJSON(object: any): ZRangeByLexRequest;
    toJSON(message: ZRangeByLexRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        min?: string | undefined;
        max?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        min?: string | undefined;
        max?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRangeByLexRequest>]: never; }>(object: I): ZRangeByLexRequest;
};
export declare const ZRangeByScoreRequest: {
    $type: "devvit.plugin.redis.ZRangeByScoreRequest";
    encode(message: ZRangeByScoreRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRangeByScoreRequest;
    fromJSON(object: any): ZRangeByScoreRequest;
    toJSON(message: ZRangeByScoreRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        min?: number | undefined;
        max?: number | undefined;
        withScores?: boolean | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        min?: number | undefined;
        max?: number | undefined;
        withScores?: boolean | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRangeByScoreRequest>]: never; }>(object: I): ZRangeByScoreRequest;
};
export declare const ZRemRequest: {
    $type: "devvit.plugin.redis.ZRemRequest";
    encode(message: ZRemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRemRequest;
    fromJSON(object: any): ZRemRequest;
    toJSON(message: ZRemRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        members?: string[] | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        members?: (string[] & string[] & { [K_2 in Exclude<keyof I["members"], "$type" | keyof string[]>]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof ZRemRequest>]: never; }>(object: I): ZRemRequest;
};
export declare const ZRemRangeByLexRequest: {
    $type: "devvit.plugin.redis.ZRemRangeByLexRequest";
    encode(message: ZRemRangeByLexRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRemRangeByLexRequest;
    fromJSON(object: any): ZRemRangeByLexRequest;
    toJSON(message: ZRemRangeByLexRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        min?: string | undefined;
        max?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        min?: string | undefined;
        max?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRemRangeByLexRequest>]: never; }>(object: I): ZRemRangeByLexRequest;
};
export declare const ZRemRangeByRankRequest: {
    $type: "devvit.plugin.redis.ZRemRangeByRankRequest";
    encode(message: ZRemRangeByRankRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRemRangeByRankRequest;
    fromJSON(object: any): ZRemRangeByRankRequest;
    toJSON(message: ZRemRangeByRankRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        start?: number | undefined;
        stop?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        start?: number | undefined;
        stop?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRemRangeByRankRequest>]: never; }>(object: I): ZRemRangeByRankRequest;
};
export declare const ZRemRangeByScoreRequest: {
    $type: "devvit.plugin.redis.ZRemRangeByScoreRequest";
    encode(message: ZRemRangeByScoreRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRemRangeByScoreRequest;
    fromJSON(object: any): ZRemRangeByScoreRequest;
    toJSON(message: ZRemRangeByScoreRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        min?: number | undefined;
        max?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        min?: number | undefined;
        max?: number | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRemRangeByScoreRequest>]: never; }>(object: I): ZRemRangeByScoreRequest;
};
export declare const ZScoreRequest: {
    $type: "devvit.plugin.redis.ZScoreRequest";
    encode(message: ZScoreRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZScoreRequest;
    fromJSON(object: any): ZScoreRequest;
    toJSON(message: ZScoreRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        member?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        member?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZScoreRequest>]: never; }>(object: I): ZScoreRequest;
};
export declare const ZRankRequest: {
    $type: "devvit.plugin.redis.ZRankRequest";
    encode(message: ZRankRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZRankRequest;
    fromJSON(object: any): ZRankRequest;
    toJSON(message: ZRankRequest): unknown;
    fromPartial<I extends {
        key?: {
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } | undefined;
        member?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: ({
            key?: string | undefined;
            transactionId?: {
                id?: string | undefined;
            } | undefined;
            scope?: RedisKeyScope | undefined;
        } & {
            key?: string | undefined;
            transactionId?: ({
                id?: string | undefined;
            } & {
                id?: string | undefined;
            } & { [K in Exclude<keyof I["key"]["transactionId"], "$type" | "id">]: never; }) | undefined;
            scope?: RedisKeyScope | undefined;
        } & { [K_1 in Exclude<keyof I["key"], "$type" | keyof KeyRequest>]: never; }) | undefined;
        member?: string | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof ZRankRequest>]: never; }>(object: I): ZRankRequest;
};
export declare const ZIncrByRequest: {
    $type: "devvit.plugin.redis.ZIncrByRequest";
    encode(message: ZIncrByRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZIncrByRequest;
    fromJSON(object: any): ZIncrByRequest;
    toJSON(message: ZIncrByRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        member?: string | undefined;
        value?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        member?: string | undefined;
        value?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof ZIncrByRequest>]: never; }>(object: I): ZIncrByRequest;
};
export declare const KeyRequest: {
    $type: "devvit.plugin.redis.KeyRequest";
    encode(message: KeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeyRequest;
    fromJSON(object: any): KeyRequest;
    toJSON(message: KeyRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof KeyRequest>]: never; }>(object: I): KeyRequest;
};
export declare const IncrByRequest: {
    $type: "devvit.plugin.redis.IncrByRequest";
    encode(message: IncrByRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IncrByRequest;
    fromJSON(object: any): IncrByRequest;
    toJSON(message: IncrByRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        value?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof IncrByRequest>]: never; }>(object: I): IncrByRequest;
};
export declare const SetRequest: {
    $type: "devvit.plugin.redis.SetRequest";
    encode(message: SetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetRequest;
    fromJSON(object: any): SetRequest;
    toJSON(message: SetRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
        expiration?: number | undefined;
        nx?: boolean | undefined;
        xx?: boolean | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
        expiration?: number | undefined;
        nx?: boolean | undefined;
        xx?: boolean | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof SetRequest>]: never; }>(object: I): SetRequest;
};
export declare const KeyRangeRequest: {
    $type: "devvit.plugin.redis.KeyRangeRequest";
    encode(message: KeyRangeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeyRangeRequest;
    fromJSON(object: any): KeyRangeRequest;
    toJSON(message: KeyRangeRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        start?: number | undefined;
        end?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        start?: number | undefined;
        end?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof KeyRangeRequest>]: never; }>(object: I): KeyRangeRequest;
};
export declare const SetRangeRequest: {
    $type: "devvit.plugin.redis.SetRangeRequest";
    encode(message: SetRangeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetRangeRequest;
    fromJSON(object: any): SetRangeRequest;
    toJSON(message: SetRangeRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        offset?: number | undefined;
        value?: string | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        offset?: number | undefined;
        value?: string | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof SetRangeRequest>]: never; }>(object: I): SetRangeRequest;
};
export declare const KeysRequest: {
    $type: "devvit.plugin.redis.KeysRequest";
    encode(message: KeysRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeysRequest;
    fromJSON(object: any): KeysRequest;
    toJSON(message: KeysRequest): unknown;
    fromPartial<I extends {
        keys?: string[] | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        keys?: (string[] & string[] & { [K in Exclude<keyof I["keys"], "$type" | keyof string[]>]: never; }) | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_1 in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof KeysRequest>]: never; }>(object: I): KeysRequest;
};
export declare const KeysResponse: {
    $type: "devvit.plugin.redis.KeysResponse";
    encode(message: KeysResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeysResponse;
    fromJSON(object: any): KeysResponse;
    toJSON(message: KeysResponse): unknown;
    fromPartial<I extends {
        keys?: string[] | undefined;
    } & {
        keys?: (string[] & string[] & { [K in Exclude<keyof I["keys"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "keys">]: never; }>(object: I): KeysResponse;
};
export declare const HGetRequest: {
    $type: "devvit.plugin.redis.HGetRequest";
    encode(message: HGetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HGetRequest;
    fromJSON(object: any): HGetRequest;
    toJSON(message: HGetRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        field?: string | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        field?: string | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof HGetRequest>]: never; }>(object: I): HGetRequest;
};
export declare const HSetRequest: {
    $type: "devvit.plugin.redis.HSetRequest";
    encode(message: HSetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HSetRequest;
    fromJSON(object: any): HSetRequest;
    toJSON(message: HSetRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        fv?: {
            field?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        fv?: ({
            field?: string | undefined;
            value?: string | undefined;
        }[] & ({
            field?: string | undefined;
            value?: string | undefined;
        } & {
            field?: string | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["fv"][number], "$type" | keyof RedisFieldValue>]: never; })[] & { [K_1 in Exclude<keyof I["fv"], "$type" | keyof {
            field?: string | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_2 in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof HSetRequest>]: never; }>(object: I): HSetRequest;
};
export declare const HDelRequest: {
    $type: "devvit.plugin.redis.HDelRequest";
    encode(message: HDelRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HDelRequest;
    fromJSON(object: any): HDelRequest;
    toJSON(message: HDelRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        fields?: string[] | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        fields?: (string[] & string[] & { [K in Exclude<keyof I["fields"], "$type" | keyof string[]>]: never; }) | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_1 in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof HDelRequest>]: never; }>(object: I): HDelRequest;
};
export declare const HScanRequest: {
    $type: "devvit.plugin.redis.HScanRequest";
    encode(message: HScanRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HScanRequest;
    fromJSON(object: any): HScanRequest;
    toJSON(message: HScanRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        cursor?: number | undefined;
        pattern?: string | undefined;
        count?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        cursor?: number | undefined;
        pattern?: string | undefined;
        count?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof HScanRequest>]: never; }>(object: I): HScanRequest;
};
export declare const HScanResponse: {
    $type: "devvit.plugin.redis.HScanResponse";
    encode(message: HScanResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HScanResponse;
    fromJSON(object: any): HScanResponse;
    toJSON(message: HScanResponse): unknown;
    fromPartial<I extends {
        cursor?: number | undefined;
        fieldValues?: {
            field?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        cursor?: number | undefined;
        fieldValues?: ({
            field?: string | undefined;
            value?: string | undefined;
        }[] & ({
            field?: string | undefined;
            value?: string | undefined;
        } & {
            field?: string | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["fieldValues"][number], "$type" | keyof RedisFieldValue>]: never; })[] & { [K_1 in Exclude<keyof I["fieldValues"], "$type" | keyof {
            field?: string | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof HScanResponse>]: never; }>(object: I): HScanResponse;
};
export declare const HIncrByRequest: {
    $type: "devvit.plugin.redis.HIncrByRequest";
    encode(message: HIncrByRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HIncrByRequest;
    fromJSON(object: any): HIncrByRequest;
    toJSON(message: HIncrByRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        field?: string | undefined;
        value?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        field?: string | undefined;
        value?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof HIncrByRequest>]: never; }>(object: I): HIncrByRequest;
};
export declare const RedisFieldValue: {
    $type: "devvit.plugin.redis.RedisFieldValue";
    encode(message: RedisFieldValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisFieldValue;
    fromJSON(object: any): RedisFieldValue;
    toJSON(message: RedisFieldValue): unknown;
    fromPartial<I extends {
        field?: string | undefined;
        value?: string | undefined;
    } & {
        field?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RedisFieldValue>]: never; }>(object: I): RedisFieldValue;
};
export declare const RedisFieldValues: {
    $type: "devvit.plugin.redis.RedisFieldValues";
    encode(message: RedisFieldValues, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisFieldValues;
    fromJSON(object: any): RedisFieldValues;
    toJSON(message: RedisFieldValues): unknown;
    fromPartial<I extends {
        fieldValues?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        fieldValues?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["fieldValues"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "fieldValues">]: never; }>(object: I): RedisFieldValues;
};
export declare const RedisFieldValues_FieldValuesEntry: {
    $type: "devvit.plugin.redis.RedisFieldValues.FieldValuesEntry";
    encode(message: RedisFieldValues_FieldValuesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisFieldValues_FieldValuesEntry;
    fromJSON(object: any): RedisFieldValues_FieldValuesEntry;
    toJSON(message: RedisFieldValues_FieldValuesEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RedisFieldValues_FieldValuesEntry>]: never; }>(object: I): RedisFieldValues_FieldValuesEntry;
};
export declare const KeyValuesRequest: {
    $type: "devvit.plugin.redis.KeyValuesRequest";
    encode(message: KeyValuesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeyValuesRequest;
    fromJSON(object: any): KeyValuesRequest;
    toJSON(message: KeyValuesRequest): unknown;
    fromPartial<I extends {
        kv?: {
            key?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        kv?: ({
            key?: string | undefined;
            value?: string | undefined;
        }[] & ({
            key?: string | undefined;
            value?: string | undefined;
        } & {
            key?: string | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["kv"][number], "$type" | keyof RedisKeyValue>]: never; })[] & { [K_1 in Exclude<keyof I["kv"], "$type" | keyof {
            key?: string | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_2 in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof KeyValuesRequest>]: never; }>(object: I): KeyValuesRequest;
};
export declare const RedisKeyValue: {
    $type: "devvit.plugin.redis.RedisKeyValue";
    encode(message: RedisKeyValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisKeyValue;
    fromJSON(object: any): RedisKeyValue;
    toJSON(message: RedisKeyValue): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof RedisKeyValue>]: never; }>(object: I): RedisKeyValue;
};
export declare const RedisValues: {
    $type: "devvit.plugin.redis.RedisValues";
    encode(message: RedisValues, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisValues;
    fromJSON(object: any): RedisValues;
    toJSON(message: RedisValues): unknown;
    fromPartial<I extends {
        values?: string[] | undefined;
    } & {
        values?: (string[] & string[] & { [K in Exclude<keyof I["values"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "values">]: never; }>(object: I): RedisValues;
};
export declare const ExpireRequest: {
    $type: "devvit.plugin.redis.ExpireRequest";
    encode(message: ExpireRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExpireRequest;
    fromJSON(object: any): ExpireRequest;
    toJSON(message: ExpireRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        seconds?: number | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        seconds?: number | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof ExpireRequest>]: never; }>(object: I): ExpireRequest;
};
export declare const ZAddRequest: {
    $type: "devvit.plugin.redis.ZAddRequest";
    encode(message: ZAddRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZAddRequest;
    fromJSON(object: any): ZAddRequest;
    toJSON(message: ZAddRequest): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        members?: {
            score?: number | undefined;
            member?: string | undefined;
        }[] | undefined;
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        scope?: RedisKeyScope | undefined;
    } & {
        key?: string | undefined;
        members?: ({
            score?: number | undefined;
            member?: string | undefined;
        }[] & ({
            score?: number | undefined;
            member?: string | undefined;
        } & {
            score?: number | undefined;
            member?: string | undefined;
        } & { [K in Exclude<keyof I["members"][number], "$type" | keyof ZMember>]: never; })[] & { [K_1 in Exclude<keyof I["members"], "$type" | keyof {
            score?: number | undefined;
            member?: string | undefined;
        }[]>]: never; }) | undefined;
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K_2 in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        scope?: RedisKeyScope | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | keyof ZAddRequest>]: never; }>(object: I): ZAddRequest;
};
export declare const ZMembers: {
    $type: "devvit.plugin.redis.ZMembers";
    encode(message: ZMembers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZMembers;
    fromJSON(object: any): ZMembers;
    toJSON(message: ZMembers): unknown;
    fromPartial<I extends {
        members?: {
            score?: number | undefined;
            member?: string | undefined;
        }[] | undefined;
    } & {
        members?: ({
            score?: number | undefined;
            member?: string | undefined;
        }[] & ({
            score?: number | undefined;
            member?: string | undefined;
        } & {
            score?: number | undefined;
            member?: string | undefined;
        } & { [K in Exclude<keyof I["members"][number], "$type" | keyof ZMember>]: never; })[] & { [K_1 in Exclude<keyof I["members"], "$type" | keyof {
            score?: number | undefined;
            member?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | "members">]: never; }>(object: I): ZMembers;
};
export declare const ZMember: {
    $type: "devvit.plugin.redis.ZMember";
    encode(message: ZMember, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ZMember;
    fromJSON(object: any): ZMember;
    toJSON(message: ZMember): unknown;
    fromPartial<I extends {
        score?: number | undefined;
        member?: string | undefined;
    } & {
        score?: number | undefined;
        member?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof ZMember>]: never; }>(object: I): ZMember;
};
export declare const TransactionId: {
    $type: "devvit.plugin.redis.TransactionId";
    encode(message: TransactionId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransactionId;
    fromJSON(object: any): TransactionId;
    toJSON(message: TransactionId): unknown;
    fromPartial<I extends {
        id?: string | undefined;
    } & {
        id?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "id">]: never; }>(object: I): TransactionId;
};
export declare const WatchRequest: {
    $type: "devvit.plugin.redis.WatchRequest";
    encode(message: WatchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WatchRequest;
    fromJSON(object: any): WatchRequest;
    toJSON(message: WatchRequest): unknown;
    fromPartial<I extends {
        transactionId?: {
            id?: string | undefined;
        } | undefined;
        keys?: string[] | undefined;
    } & {
        transactionId?: ({
            id?: string | undefined;
        } & {
            id?: string | undefined;
        } & { [K in Exclude<keyof I["transactionId"], "$type" | "id">]: never; }) | undefined;
        keys?: (string[] & string[] & { [K_1 in Exclude<keyof I["keys"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof WatchRequest>]: never; }>(object: I): WatchRequest;
};
/**
 * This should match as closely as reasonable to redis's names, arguments, etc.
 *
 * DO NOT CHANGE Redis names.  It's DEL, not DELETE, no matter your preferences.
 *
 * One catch here is that this interface mediates transactions, without exposing
 * the details of connection management.  Therefore, if you're doing an operation
 * in a transaction, two things are different:
 *
 *    1. You should provide a transaction id in your request.
 *    2. You should ignore the response (as it should be a zero value)
 *
 * The Typescript Redis client wrapper is smart enough to handle transactions
 * with a nice chaining API on your behalf.
 */
export interface RedisAPI {
    /** Simple Key-Value operations */
    Get(request: KeyRequest, metadata?: Metadata): Promise<StringValue>;
    Set(request: SetRequest, metadata?: Metadata): Promise<StringValue>;
    Del(request: KeysRequest, metadata?: Metadata): Promise<Int64Value>;
    Type(request: KeyRequest, metadata?: Metadata): Promise<StringValue>;
    /** Number operations */
    IncrBy(request: IncrByRequest, metadata?: Metadata): Promise<Int64Value>;
    /** Redis Hash operations */
    HSet(request: HSetRequest, metadata?: Metadata): Promise<Int64Value>;
    HGet(request: HGetRequest, metadata?: Metadata): Promise<StringValue>;
    HGetAll(request: KeyRequest, metadata?: Metadata): Promise<RedisFieldValues>;
    HDel(request: HDelRequest, metadata?: Metadata): Promise<Int64Value>;
    HScan(request: HScanRequest, metadata?: Metadata): Promise<HScanResponse>;
    HKeys(request: KeyRequest, metadata?: Metadata): Promise<KeysResponse>;
    HIncrBy(request: HIncrByRequest, metadata?: Metadata): Promise<Int64Value>;
    /** Transactions */
    Multi(request: TransactionId, metadata?: Metadata): Promise<Empty>;
    Exec(request: TransactionId, metadata?: Metadata): Promise<TransactionResponses>;
    Discard(request: TransactionId, metadata?: Metadata): Promise<Empty>;
    Watch(request: WatchRequest, metadata?: Metadata): Promise<TransactionId>;
    Unwatch(request: TransactionId, metadata?: Metadata): Promise<Empty>;
    /** String operations */
    GetRange(request: KeyRangeRequest, metadata?: Metadata): Promise<StringValue>;
    SetRange(request: SetRangeRequest, metadata?: Metadata): Promise<Int64Value>;
    Strlen(request: KeyRequest, metadata?: Metadata): Promise<Int64Value>;
    /** Batch Key-Value operations */
    MGet(request: KeysRequest, metadata?: Metadata): Promise<RedisValues>;
    MSet(request: KeyValuesRequest, metadata?: Metadata): Promise<Empty>;
    /** Key expiration */
    Expire(request: ExpireRequest, metadata?: Metadata): Promise<Empty>;
    ExpireTime(request: KeyRequest, metadata?: Metadata): Promise<Int64Value>;
    /** Sorted sets */
    ZAdd(request: ZAddRequest, metadata?: Metadata): Promise<Int64Value>;
    ZCard(request: KeyRequest, metadata?: Metadata): Promise<Int64Value>;
    ZRange(request: ZRangeRequest, metadata?: Metadata): Promise<ZMembers>;
    ZRem(request: ZRemRequest, metadata?: Metadata): Promise<Int64Value>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest, metadata?: Metadata): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest, metadata?: Metadata): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest, metadata?: Metadata): Promise<Int64Value>;
    ZScore(request: ZScoreRequest, metadata?: Metadata): Promise<DoubleValue>;
    ZRank(request: ZRankRequest, metadata?: Metadata): Promise<Int64Value>;
    ZIncrBy(request: ZIncrByRequest, metadata?: Metadata): Promise<DoubleValue>;
}
export declare class RedisAPIClientImpl implements RedisAPI {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Get(request: KeyRequest): Promise<StringValue>;
    Set(request: SetRequest): Promise<StringValue>;
    Del(request: KeysRequest): Promise<Int64Value>;
    Type(request: KeyRequest): Promise<StringValue>;
    IncrBy(request: IncrByRequest): Promise<Int64Value>;
    HSet(request: HSetRequest): Promise<Int64Value>;
    HGet(request: HGetRequest): Promise<StringValue>;
    HGetAll(request: KeyRequest): Promise<RedisFieldValues>;
    HDel(request: HDelRequest): Promise<Int64Value>;
    HScan(request: HScanRequest): Promise<HScanResponse>;
    HKeys(request: KeyRequest): Promise<KeysResponse>;
    HIncrBy(request: HIncrByRequest): Promise<Int64Value>;
    Multi(request: TransactionId): Promise<Empty>;
    Exec(request: TransactionId): Promise<TransactionResponses>;
    Discard(request: TransactionId): Promise<Empty>;
    Watch(request: WatchRequest): Promise<TransactionId>;
    Unwatch(request: TransactionId): Promise<Empty>;
    GetRange(request: KeyRangeRequest): Promise<StringValue>;
    SetRange(request: SetRangeRequest): Promise<Int64Value>;
    Strlen(request: KeyRequest): Promise<Int64Value>;
    MGet(request: KeysRequest): Promise<RedisValues>;
    MSet(request: KeyValuesRequest): Promise<Empty>;
    Expire(request: ExpireRequest): Promise<Empty>;
    ExpireTime(request: KeyRequest): Promise<Int64Value>;
    ZAdd(request: ZAddRequest): Promise<Int64Value>;
    ZCard(request: KeyRequest): Promise<Int64Value>;
    ZRange(request: ZRangeRequest): Promise<ZMembers>;
    ZRem(request: ZRemRequest): Promise<Int64Value>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest): Promise<Int64Value>;
    ZScore(request: ZScoreRequest): Promise<DoubleValue>;
    ZRank(request: ZRankRequest): Promise<Int64Value>;
    ZIncrBy(request: ZIncrByRequest): Promise<DoubleValue>;
}
/**
 * This should match as closely as reasonable to redis's names, arguments, etc.
 *
 * DO NOT CHANGE Redis names.  It's DEL, not DELETE, no matter your preferences.
 *
 * One catch here is that this interface mediates transactions, without exposing
 * the details of connection management.  Therefore, if you're doing an operation
 * in a transaction, two things are different:
 *
 *    1. You should provide a transaction id in your request.
 *    2. You should ignore the response (as it should be a zero value)
 *
 * The Typescript Redis client wrapper is smart enough to handle transactions
 * with a nice chaining API on your behalf.
 */
export type RedisAPIDefinition = typeof RedisAPIDefinition;
export declare const RedisAPIDefinition: {
    name: 'RedisAPI';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=redisapi.d.ts.map
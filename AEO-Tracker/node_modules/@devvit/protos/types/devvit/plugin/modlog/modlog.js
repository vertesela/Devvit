/**
 * #modlog.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseModlogRequest() {
    return { action: "", details: undefined, description: undefined, note: undefined, target: undefined };
}
export const ModlogRequest = {
    $type: "devvit.plugin.modlog.ModlogRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.action !== "") {
            writer.uint32(10).string(message.action);
        }
        if (message.details !== undefined) {
            writer.uint32(18).string(message.details);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.note !== undefined) {
            writer.uint32(34).string(message.note);
        }
        if (message.target !== undefined) {
            writer.uint32(42).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModlogRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.action = reader.string();
                    break;
                case 2:
                    message.details = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.note = reader.string();
                    break;
                case 5:
                    message.target = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            action: isSet(object.action) ? String(object.action) : "",
            details: isSet(object.details) ? String(object.details) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            note: isSet(object.note) ? String(object.note) : undefined,
            target: isSet(object.target) ? String(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.action !== undefined && (obj.action = message.action);
        message.details !== undefined && (obj.details = message.details);
        message.description !== undefined && (obj.description = message.description);
        message.note !== undefined && (obj.note = message.note);
        message.target !== undefined && (obj.target = message.target);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseModlogRequest();
        message.action = object.action ?? "";
        message.details = object.details ?? undefined;
        message.description = object.description ?? undefined;
        message.note = object.note ?? undefined;
        message.target = object.target ?? undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.modlog.ModlogRequest", ModlogRequest);
function createBaseModlogResponse() {
    return { success: false };
}
export const ModlogResponse = {
    $type: "devvit.plugin.modlog.ModlogResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModlogResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseModlogResponse();
        message.success = object.success ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.modlog.ModlogResponse", ModlogResponse);
export class ModlogClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.modlog.Modlog";
        this.rpc = rpc;
        this.Add = this.Add.bind(this);
    }
    Add(request) {
        const data = ModlogRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Add", data);
        return promise.then((data) => ModlogResponse.decode(new _m0.Reader(data)));
    }
}
export const ModlogDefinition = {
    name: "Modlog",
    fullName: "devvit.plugin.modlog.Modlog",
    methods: {
        add: {
            name: "Add",
            requestType: ModlogRequest,
            requestStream: false,
            responseType: ModlogResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

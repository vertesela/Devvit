/**
 * #assetresolver.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface GetAssetURLRequest {
    /** The path to the asset relative to the /assets directory of the project */
    path: string;
}
export interface GetAssetURLResponse {
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * Example: https://i.redd.it/asdf.png
     */
    url: string;
    /**
     * Whether or not the asset is in the linked bundle. If false, the value in url should
     * be ignored. (It should also be the empty string.)
     */
    found: boolean;
}
export interface GetMultipleAssetURLsRequest {
    /**
     * The paths to the assets relative to the /assets directory of the project
     * could be a mix of file paths, and glob patterns
     */
    paths: string[];
}
export interface GetMultipleAssetURLsResponse {
    /**
     * A map indexed by the paths to the assets relative to the /assets directory of the project
     * whose values are the full public URLs to the assets (including the protocol)
     */
    urls: {
        [key: string]: GetMultipleAssetURLsResponse_GlobResult;
    };
}
export interface GetMultipleAssetURLsResponse_GlobResult {
    /**
     * Whether or not the asset is in the linked bundle. If false, the paths value below should
     * be ignored. (It should also be an empty array.)
     */
    found: boolean;
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * For studio compatability reasons, this is an array.
     * Example: ["https://i.redd.it/asdf.png"]
     */
    paths: string[];
}
export interface GetMultipleAssetURLsResponse_UrlsEntry {
    key: string;
    value?: GetMultipleAssetURLsResponse_GlobResult;
}
export declare const GetAssetURLRequest: {
    $type: "devvit.plugin.assetresolver.GetAssetURLRequest";
    encode(message: GetAssetURLRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLRequest;
    fromJSON(object: any): GetAssetURLRequest;
    toJSON(message: GetAssetURLRequest): unknown;
    fromPartial<I extends {
        path?: string | undefined;
    } & {
        path?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "path">]: never; }>(object: I): GetAssetURLRequest;
};
export declare const GetAssetURLResponse: {
    $type: "devvit.plugin.assetresolver.GetAssetURLResponse";
    encode(message: GetAssetURLResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLResponse;
    fromJSON(object: any): GetAssetURLResponse;
    toJSON(message: GetAssetURLResponse): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        found?: boolean | undefined;
    } & {
        url?: string | undefined;
        found?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof GetAssetURLResponse>]: never; }>(object: I): GetAssetURLResponse;
};
export declare const GetMultipleAssetURLsRequest: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsRequest";
    encode(message: GetMultipleAssetURLsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsRequest;
    fromJSON(object: any): GetMultipleAssetURLsRequest;
    toJSON(message: GetMultipleAssetURLsRequest): unknown;
    fromPartial<I extends {
        paths?: string[] | undefined;
    } & {
        paths?: (string[] & string[] & { [K in Exclude<keyof I["paths"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "paths">]: never; }>(object: I): GetMultipleAssetURLsRequest;
};
export declare const GetMultipleAssetURLsResponse: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse";
    encode(message: GetMultipleAssetURLsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse;
    fromJSON(object: any): GetMultipleAssetURLsResponse;
    toJSON(message: GetMultipleAssetURLsResponse): unknown;
    fromPartial<I extends {
        urls?: {
            [x: string]: {
                found?: boolean | undefined;
                paths?: string[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        urls?: ({
            [x: string]: {
                found?: boolean | undefined;
                paths?: string[] | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                found?: boolean | undefined;
                paths?: string[] | undefined;
            } & {
                found?: boolean | undefined;
                paths?: (string[] & string[] & { [K in Exclude<keyof I["urls"][string]["paths"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["urls"][string], "$type" | keyof GetMultipleAssetURLsResponse_GlobResult>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["urls"], string | number>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "urls">]: never; }>(object: I): GetMultipleAssetURLsResponse;
};
export declare const GetMultipleAssetURLsResponse_GlobResult: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.GlobResult";
    encode(message: GetMultipleAssetURLsResponse_GlobResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse_GlobResult;
    fromJSON(object: any): GetMultipleAssetURLsResponse_GlobResult;
    toJSON(message: GetMultipleAssetURLsResponse_GlobResult): unknown;
    fromPartial<I extends {
        found?: boolean | undefined;
        paths?: string[] | undefined;
    } & {
        found?: boolean | undefined;
        paths?: (string[] & string[] & { [K in Exclude<keyof I["paths"], "$type" | keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | keyof GetMultipleAssetURLsResponse_GlobResult>]: never; }>(object: I): GetMultipleAssetURLsResponse_GlobResult;
};
export declare const GetMultipleAssetURLsResponse_UrlsEntry: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.UrlsEntry";
    encode(message: GetMultipleAssetURLsResponse_UrlsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse_UrlsEntry;
    fromJSON(object: any): GetMultipleAssetURLsResponse_UrlsEntry;
    toJSON(message: GetMultipleAssetURLsResponse_UrlsEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: {
            found?: boolean | undefined;
            paths?: string[] | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            found?: boolean | undefined;
            paths?: string[] | undefined;
        } & {
            found?: boolean | undefined;
            paths?: (string[] & string[] & { [K in Exclude<keyof I["value"]["paths"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["value"], "$type" | keyof GetMultipleAssetURLsResponse_GlobResult>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "$type" | keyof GetMultipleAssetURLsResponse_UrlsEntry>]: never; }>(object: I): GetMultipleAssetURLsResponse_UrlsEntry;
};
export interface AssetResolver {
    /** Gets a public URL for a given asset */
    GetAssetURL(request: GetAssetURLRequest, metadata?: Metadata): Promise<GetAssetURLResponse>;
    /** Gets the public URLs for multiple assets at the same time */
    GetAssetURLs(request: GetMultipleAssetURLsRequest, metadata?: Metadata): Promise<GetMultipleAssetURLsResponse>;
}
export declare class AssetResolverClientImpl implements AssetResolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetAssetURL(request: GetAssetURLRequest): Promise<GetAssetURLResponse>;
    GetAssetURLs(request: GetMultipleAssetURLsRequest): Promise<GetMultipleAssetURLsResponse>;
}
export type AssetResolverDefinition = typeof AssetResolverDefinition;
export declare const AssetResolverDefinition: {
    name: 'AssetResolver';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=assetresolver.d.ts.map
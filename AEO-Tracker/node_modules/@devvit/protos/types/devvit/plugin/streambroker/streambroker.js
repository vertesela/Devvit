/**
 * #streambroker.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from 'protobufjs/minimal.js';
import { map } from "rxjs/operators";
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseMessage() {
    return { topic: "", value: "" };
}
export const Message = {
    $type: "devvit.plugin.streambroker.Message",
    encode(message, writer = _m0.Writer.create()) {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.topic = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            topic: isSet(object.topic) ? String(object.topic) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.topic !== undefined && (obj.topic = message.topic);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMessage();
        message.topic = object.topic ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.streambroker.Message", Message);
function createBaseCursor() {
    return { topic: "", offset: 0, closeAtEnd: false };
}
export const Cursor = {
    $type: "devvit.plugin.streambroker.Cursor",
    encode(message, writer = _m0.Writer.create()) {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        if (message.offset !== 0) {
            writer.uint32(16).int64(message.offset);
        }
        if (message.closeAtEnd === true) {
            writer.uint32(24).bool(message.closeAtEnd);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCursor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.topic = reader.string();
                    break;
                case 2:
                    message.offset = longToNumber(reader.int64());
                    break;
                case 3:
                    message.closeAtEnd = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            topic: isSet(object.topic) ? String(object.topic) : "",
            offset: isSet(object.offset) ? Number(object.offset) : 0,
            closeAtEnd: isSet(object.closeAtEnd) ? Boolean(object.closeAtEnd) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.topic !== undefined && (obj.topic = message.topic);
        message.offset !== undefined && (obj.offset = Math.round(message.offset));
        message.closeAtEnd !== undefined && (obj.closeAtEnd = message.closeAtEnd);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCursor();
        message.topic = object.topic ?? "";
        message.offset = object.offset ?? 0;
        message.closeAtEnd = object.closeAtEnd ?? false;
        return message;
    },
};
messageTypeRegistry.set("devvit.plugin.streambroker.Cursor", Cursor);
export class StreamBrokerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.plugin.streambroker.StreamBroker";
        this.rpc = rpc;
        this.Put = this.Put.bind(this);
        this.Get = this.Get.bind(this);
    }
    Put(request) {
        const data = Message.encode(request).finish();
        const promise = this.rpc.request(this.service, "Put", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    Get(request) {
        const data = Cursor.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Get", data);
        return result.pipe(map((data) => Message.decode(new _m0.Reader(data))));
    }
}
export const StreamBrokerDefinition = {
    name: "StreamBroker",
    fullName: "devvit.plugin.streambroker.StreamBroker",
    methods: {
        put: {
            name: "Put",
            requestType: Message,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        get: {
            name: "Get",
            requestType: Cursor,
            requestStream: false,
            responseType: Message,
            responseStream: true,
            options: {},
        },
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}

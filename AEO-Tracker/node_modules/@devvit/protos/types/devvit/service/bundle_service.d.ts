/**
 * #bundle_service.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import { Empty } from '../../google/protobuf/empty.js';
import { LinkedBundle } from '../runtime/bundle.js';
export interface BundleService {
    Upload(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
}
export declare class BundleServiceClientImpl implements BundleService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Upload(request: LinkedBundle): Promise<Empty>;
}
export type BundleServiceDefinition = typeof BundleServiceDefinition;
export declare const BundleServiceDefinition: {
    name: 'BundleService';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=bundle_service.d.ts.map
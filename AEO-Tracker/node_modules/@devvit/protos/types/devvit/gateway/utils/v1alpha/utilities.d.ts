/**
 * #utilities.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
export interface AccessKeyPurgeRequest {
    /** the t2_ user id */
    userId: string;
    /** also purge the refresh key */
    includeRefresh: boolean;
}
export interface InstallationsPurgeRequest {
    /** t5 subreddit id */
    subreddit: string;
}
export interface InstallationPurgeRequest {
    installationId: string;
}
export interface AppVersionPurgeRequest {
    appVersionId: string;
}
export interface AppPurgeRequest {
    appId: string;
}
export interface PurgeResult {
    /** Number of items purged */
    count: number;
}
export interface AcceptInviteRequest {
    subredditName: string;
    appAccountId: string;
}
export interface AcceptInviteResponse {
}
export declare const AccessKeyPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.AccessKeyPurgeRequest";
    encode(message: AccessKeyPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccessKeyPurgeRequest;
    fromJSON(object: any): AccessKeyPurgeRequest;
    toJSON(message: AccessKeyPurgeRequest): unknown;
    fromPartial<I extends {
        userId?: string | undefined;
        includeRefresh?: boolean | undefined;
    } & {
        userId?: string | undefined;
        includeRefresh?: boolean | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AccessKeyPurgeRequest>]: never; }>(object: I): AccessKeyPurgeRequest;
};
export declare const InstallationsPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.InstallationsPurgeRequest";
    encode(message: InstallationsPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallationsPurgeRequest;
    fromJSON(object: any): InstallationsPurgeRequest;
    toJSON(message: InstallationsPurgeRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
    } & {
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I): InstallationsPurgeRequest;
};
export declare const InstallationPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.InstallationPurgeRequest";
    encode(message: InstallationPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallationPurgeRequest;
    fromJSON(object: any): InstallationPurgeRequest;
    toJSON(message: InstallationPurgeRequest): unknown;
    fromPartial<I extends {
        installationId?: string | undefined;
    } & {
        installationId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "installationId">]: never; }>(object: I): InstallationPurgeRequest;
};
export declare const AppVersionPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.AppVersionPurgeRequest";
    encode(message: AppVersionPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppVersionPurgeRequest;
    fromJSON(object: any): AppVersionPurgeRequest;
    toJSON(message: AppVersionPurgeRequest): unknown;
    fromPartial<I extends {
        appVersionId?: string | undefined;
    } & {
        appVersionId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "appVersionId">]: never; }>(object: I): AppVersionPurgeRequest;
};
export declare const AppPurgeRequest: {
    $type: "devvit.gateway.utils.v1alpha.AppPurgeRequest";
    encode(message: AppPurgeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppPurgeRequest;
    fromJSON(object: any): AppPurgeRequest;
    toJSON(message: AppPurgeRequest): unknown;
    fromPartial<I extends {
        appId?: string | undefined;
    } & {
        appId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "appId">]: never; }>(object: I): AppPurgeRequest;
};
export declare const PurgeResult: {
    $type: "devvit.gateway.utils.v1alpha.PurgeResult";
    encode(message: PurgeResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PurgeResult;
    fromJSON(object: any): PurgeResult;
    toJSON(message: PurgeResult): unknown;
    fromPartial<I extends {
        count?: number | undefined;
    } & {
        count?: number | undefined;
    } & { [K in Exclude<keyof I, "$type" | "count">]: never; }>(object: I): PurgeResult;
};
export declare const AcceptInviteRequest: {
    $type: "devvit.gateway.utils.v1alpha.AcceptInviteRequest";
    encode(message: AcceptInviteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcceptInviteRequest;
    fromJSON(object: any): AcceptInviteRequest;
    toJSON(message: AcceptInviteRequest): unknown;
    fromPartial<I extends {
        subredditName?: string | undefined;
        appAccountId?: string | undefined;
    } & {
        subredditName?: string | undefined;
        appAccountId?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | keyof AcceptInviteRequest>]: never; }>(object: I): AcceptInviteRequest;
};
export declare const AcceptInviteResponse: {
    $type: "devvit.gateway.utils.v1alpha.AcceptInviteResponse";
    encode(_: AcceptInviteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcceptInviteResponse;
    fromJSON(_: any): AcceptInviteResponse;
    toJSON(_: AcceptInviteResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): AcceptInviteResponse;
};
export interface CacheUtils {
    PurgeAccessKey(request: AccessKeyPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
    PurgeInstallation(request: InstallationPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
    PurgeAppVersion(request: AppVersionPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
    PurgeApp(request: AppPurgeRequest, metadata?: Metadata): Promise<PurgeResult>;
}
export declare class CacheUtilsClientImpl implements CacheUtils {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    PurgeAccessKey(request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest): Promise<PurgeResult>;
    PurgeInstallation(request: InstallationPurgeRequest): Promise<PurgeResult>;
    PurgeAppVersion(request: AppVersionPurgeRequest): Promise<PurgeResult>;
    PurgeApp(request: AppPurgeRequest): Promise<PurgeResult>;
}
export type CacheUtilsDefinition = typeof CacheUtilsDefinition;
export declare const CacheUtilsDefinition: {
    name: 'CacheUtils';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
export interface ModInviteUtils {
    AcceptInvite(request: AcceptInviteRequest, metadata?: Metadata): Promise<AcceptInviteResponse>;
}
export declare class ModInviteUtilsClientImpl implements ModInviteUtils {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AcceptInvite(request: AcceptInviteRequest): Promise<AcceptInviteResponse>;
}
export type ModInviteUtilsDefinition = typeof ModInviteUtilsDefinition;
export declare const ModInviteUtilsDefinition: {
    name: 'ModInviteUtils';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=utilities.d.ts.map
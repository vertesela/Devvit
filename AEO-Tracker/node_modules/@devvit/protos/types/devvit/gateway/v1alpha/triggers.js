/**
 * #triggers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { TriggerEvent } from '../../data/triggers/v1alpha/triggers.js';
import { InstallationInfo } from '../../dev_portal/installation/installation.js';
function createBaseTriggerResponse() {
    return { total: 0, success: [], errors: {} };
}
export const TriggerResponse = {
    $type: "devvit.gateway.v1alpha.TriggerResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.total !== 0) {
            writer.uint32(8).int32(message.total);
        }
        for (const v of message.success) {
            writer.uint32(18).string(v);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            TriggerResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.total = reader.int32();
                    break;
                case 2:
                    message.success.push(reader.string());
                    break;
                case 3:
                    const entry3 = TriggerResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.errors[entry3.key] = entry3.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            total: isSet(object.total) ? Number(object.total) : 0,
            success: Array.isArray(object?.success) ? object.success.map((e) => String(e)) : [],
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.total !== undefined && (obj.total = Math.round(message.total));
        if (message.success) {
            obj.success = message.success.map((e) => e);
        }
        else {
            obj.success = [];
        }
        obj.errors = {};
        if (message.errors) {
            Object.entries(message.errors).forEach(([k, v]) => {
                obj.errors[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerResponse();
        message.total = object.total ?? 0;
        message.success = object.success?.map((e) => e) || [];
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.v1alpha.TriggerResponse", TriggerResponse);
function createBaseTriggerResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const TriggerResponse_ErrorsEntry = {
    $type: "devvit.gateway.v1alpha.TriggerResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.v1alpha.TriggerResponse.ErrorsEntry", TriggerResponse_ErrorsEntry);
function createBaseTriggerFanOutResponse() {
    return { installationIds: [] };
}
export const TriggerFanOutResponse = {
    $type: "devvit.gateway.v1alpha.TriggerFanOutResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.installationIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerFanOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            installationIds: Array.isArray(object?.installationIds) ? object.installationIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.installationIds) {
            obj.installationIds = message.installationIds.map((e) => e);
        }
        else {
            obj.installationIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerFanOutResponse();
        message.installationIds = object.installationIds?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.v1alpha.TriggerFanOutResponse", TriggerFanOutResponse);
function createBaseTriggerInvocation() {
    return { installationId: "", evt: undefined };
}
export const TriggerInvocation = {
    $type: "devvit.gateway.v1alpha.TriggerInvocation",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        if (message.evt !== undefined) {
            TriggerEvent.encode(message.evt, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerInvocation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.installationId = reader.string();
                    break;
                case 2:
                    message.evt = TriggerEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            installationId: isSet(object.installationId) ? String(object.installationId) : "",
            evt: isSet(object.evt) ? TriggerEvent.fromJSON(object.evt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.installationId !== undefined && (obj.installationId = message.installationId);
        message.evt !== undefined && (obj.evt = message.evt ? TriggerEvent.toJSON(message.evt) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseTriggerInvocation();
        message.installationId = object.installationId ?? "";
        message.evt = (object.evt !== undefined && object.evt !== null) ? TriggerEvent.fromPartial(object.evt) : undefined;
        return message;
    },
};
messageTypeRegistry.set("devvit.gateway.v1alpha.TriggerInvocation", TriggerInvocation);
export class TriggersClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "devvit.gateway.v1alpha.Triggers";
        this.rpc = rpc;
        this.OnTrigger = this.OnTrigger.bind(this);
        this.OnFanOut = this.OnFanOut.bind(this);
        this.OnInvoke = this.OnInvoke.bind(this);
        this.OnInstall = this.OnInstall.bind(this);
        this.OnUninstall = this.OnUninstall.bind(this);
        this.OnInstallChanged = this.OnInstallChanged.bind(this);
    }
    OnTrigger(request) {
        const data = TriggerEvent.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnTrigger", data);
        return promise.then((data) => TriggerResponse.decode(new _m0.Reader(data)));
    }
    OnFanOut(request) {
        const data = TriggerEvent.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnFanOut", data);
        return promise.then((data) => TriggerFanOutResponse.decode(new _m0.Reader(data)));
    }
    OnInvoke(request) {
        const data = TriggerInvocation.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnInvoke", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    OnInstall(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnInstall", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    OnUninstall(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnUninstall", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
    OnInstallChanged(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnInstallChanged", data);
        return promise.then((data) => Empty.decode(new _m0.Reader(data)));
    }
}
export const TriggersDefinition = {
    name: "Triggers",
    fullName: "devvit.gateway.v1alpha.Triggers",
    methods: {
        onTrigger: {
            name: "OnTrigger",
            requestType: TriggerEvent,
            requestStream: false,
            responseType: TriggerResponse,
            responseStream: false,
            options: {},
        },
        onFanOut: {
            name: "OnFanOut",
            requestType: TriggerEvent,
            requestStream: false,
            responseType: TriggerFanOutResponse,
            responseStream: false,
            options: {},
        },
        onInvoke: {
            name: "OnInvoke",
            requestType: TriggerInvocation,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        onInstall: {
            name: "OnInstall",
            requestType: InstallationInfo,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        onUninstall: {
            name: "OnUninstall",
            requestType: InstallationInfo,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        onInstallChanged: {
            name: "OnInstallChanged",
            requestType: InstallationInfo,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

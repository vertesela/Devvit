/**
 * #resolvers.ts
 *
 * @packageDocumentation
 */
import { Metadata, MethodDefinition } from "@lib/Types.js";
import _m0 from 'protobufjs/minimal.js';
import { DevvitSubredditMetadata } from '../gql/subreddit_metadata.js';
export interface SubredditMetadataRequest {
    /** t5_ subreddit id */
    subreddit: string;
}
export declare const SubredditMetadataRequest: {
    $type: "devvit.gateway.SubredditMetadataRequest";
    encode(message: SubredditMetadataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditMetadataRequest;
    fromJSON(object: any): SubredditMetadataRequest;
    toJSON(message: SubredditMetadataRequest): unknown;
    fromPartial<I extends {
        subreddit?: string | undefined;
    } & {
        subreddit?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "subreddit">]: never; }>(object: I): SubredditMetadataRequest;
};
export interface SubredditMetadataResolver {
    GetSubredditMetadata(request: SubredditMetadataRequest, metadata?: Metadata): Promise<DevvitSubredditMetadata>;
}
export declare class SubredditMetadataResolverClientImpl implements SubredditMetadataResolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubredditMetadata(request: SubredditMetadataRequest): Promise<DevvitSubredditMetadata>;
}
export type SubredditMetadataResolverDefinition = typeof SubredditMetadataResolverDefinition;
export declare const SubredditMetadataResolverDefinition: {
    name: 'SubredditMetadataResolver';
    fullName: string;
    methods: {
        [methodName: string]: MethodDefinition & {
            options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=resolvers.d.ts.map
/**
 * #playtest.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { LogMessage } from '../plugin/logger/logger.js';
/** A message from a client (usually embedded in shreddit) to a server. */
export interface PlaytestProviderMessage {
    callState?: PlaytestCallState | undefined;
    connect?: PlaytestConnect | undefined;
}
/** A message from a server (usually the Devvit CLI) to a client. */
export interface PlaytestSubscriberMessage {
    appInstalled?: PlaytestAppInstalled | undefined;
}
/** Playtest app install notification. */
export interface PlaytestAppInstalled {
}
/** Runtime.getCallState() reported by BrowserLiteClient. */
export interface PlaytestCallState {
    logs: LogMessage[];
}
/**
 * Connection details from BrowserLiteClient sent immediately after opening
 * socket.
 */
export interface PlaytestConnect {
    /**
     * The full web address of the client. Eg,
     * https://www.reddit.com/r/pixelary?playtest=pixelary-game and
     * https://www.reddit.com/r/Pixelary/comments/1agoaja/what_is_this/?playtest&foo=bar.
     */
    url: string;
}
export declare const PlaytestProviderMessage: {
    $type: "devvit.cli.PlaytestProviderMessage";
    encode(message: PlaytestProviderMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestProviderMessage;
    fromJSON(object: any): PlaytestProviderMessage;
    toJSON(message: PlaytestProviderMessage): unknown;
    fromPartial<I extends {
        callState?: {
            logs?: {
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: string[] | undefined;
            }[] | undefined;
        } | undefined;
        connect?: {
            url?: string | undefined;
        } | undefined;
    } & {
        callState?: ({
            logs?: {
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: string[] | undefined;
            }[] | undefined;
        } & {
            logs?: ({
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: string[] | undefined;
            }[] & ({
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: string[] | undefined;
            } & {
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: (string[] & string[] & { [K in Exclude<keyof I["callState"]["logs"][number]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["callState"]["logs"][number], "$type" | keyof LogMessage>]: never; })[] & { [K_2 in Exclude<keyof I["callState"]["logs"], "$type" | keyof {
                severity?: import("../plugin/logger/logger.js").Severity | undefined;
                message?: string | undefined;
                timestamp?: Date | undefined;
                tags?: string[] | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["callState"], "$type" | "logs">]: never; }) | undefined;
        connect?: ({
            url?: string | undefined;
        } & {
            url?: string | undefined;
        } & { [K_4 in Exclude<keyof I["connect"], "$type" | "url">]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, "$type" | keyof PlaytestProviderMessage>]: never; }>(object: I): PlaytestProviderMessage;
};
export declare const PlaytestSubscriberMessage: {
    $type: "devvit.cli.PlaytestSubscriberMessage";
    encode(message: PlaytestSubscriberMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestSubscriberMessage;
    fromJSON(object: any): PlaytestSubscriberMessage;
    toJSON(message: PlaytestSubscriberMessage): unknown;
    fromPartial<I extends {
        appInstalled?: {} | undefined;
    } & {
        appInstalled?: ({} & {} & { [K in Exclude<keyof I["appInstalled"], "$type">]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "$type" | "appInstalled">]: never; }>(object: I): PlaytestSubscriberMessage;
};
export declare const PlaytestAppInstalled: {
    $type: "devvit.cli.PlaytestAppInstalled";
    encode(_: PlaytestAppInstalled, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestAppInstalled;
    fromJSON(_: any): PlaytestAppInstalled;
    toJSON(_: PlaytestAppInstalled): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, "$type">]: never; }>(_: I): PlaytestAppInstalled;
};
export declare const PlaytestCallState: {
    $type: "devvit.cli.PlaytestCallState";
    encode(message: PlaytestCallState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestCallState;
    fromJSON(object: any): PlaytestCallState;
    toJSON(message: PlaytestCallState): unknown;
    fromPartial<I extends {
        logs?: {
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        }[] | undefined;
    } & {
        logs?: ({
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        }[] & ({
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        } & {
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: (string[] & string[] & { [K in Exclude<keyof I["logs"][number]["tags"], "$type" | keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["logs"][number], "$type" | keyof LogMessage>]: never; })[] & { [K_2 in Exclude<keyof I["logs"], "$type" | keyof {
            severity?: import("../plugin/logger/logger.js").Severity | undefined;
            message?: string | undefined;
            timestamp?: Date | undefined;
            tags?: string[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "$type" | "logs">]: never; }>(object: I): PlaytestCallState;
};
export declare const PlaytestConnect: {
    $type: "devvit.cli.PlaytestConnect";
    encode(message: PlaytestConnect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestConnect;
    fromJSON(object: any): PlaytestConnect;
    toJSON(message: PlaytestConnect): unknown;
    fromPartial<I extends {
        url?: string | undefined;
    } & {
        url?: string | undefined;
    } & { [K in Exclude<keyof I, "$type" | "url">]: never; }>(object: I): PlaytestConnect;
};
//# sourceMappingURL=playtest.d.ts.map
syntax = "proto3";

package devvit.gateway;

import "devvit/reddit/comment.proto";
import "devvit/reddit/post.proto";
import "devvit/reddit/subreddit.proto";
import "devvit/reddit/user.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/gateway";

message AutomodInvocation {
  google.protobuf.StringValue yaml_text = 1; // Rule YAML to evaluate
  oneof item { // Content being evaluated
    devvit.reddit.Comment comment = 2;
    devvit.reddit.Post post = 3;
  }
  devvit.reddit.User author = 4; // Content author
  devvit.reddit.Post parent_post = 5; // Comment parent post
  devvit.reddit.Subreddit subreddit = 6; // Content subreddit
  devvit.reddit.Post crosspost = 7; // Content crosspost
  devvit.reddit.Subreddit crosspost_subreddit = 8; // Content crosspost subreddit
  devvit.reddit.User crosspost_author = 9; // Content crosspost author
  Poll poll = 10; // Content poll
}

message Poll {
  google.protobuf.BoolValue is_prediction = 1;
  repeated google.protobuf.Struct options = 2;
  google.protobuf.StringValue prediction_status = 3;
  google.protobuf.StringValue resolved_option_id = 4;
  google.protobuf.Int32Value total_stake_amount = 5;
  google.protobuf.Int32Value total_vote_count = 6;
  google.protobuf.StringValue tournament_id = 7;
  google.protobuf.StringValue user_selection = 8;
  google.protobuf.Int32Value user_won_amount = 9;
  google.protobuf.Int32Value vote_updates_remained = 10;
  google.protobuf.Int32Value voting_end_timestamp = 11;
}

message AutomodResult {
  string result = 1;
  string errors = 2;
}

// Temporary Automod interface for tap/compare purposes
service Automod {
  rpc Evaluate(AutomodInvocation) returns (AutomodResult);
}

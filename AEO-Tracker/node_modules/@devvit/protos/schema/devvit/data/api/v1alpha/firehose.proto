syntax = "proto3";

package devvit.data.api.v1alpha;

import "buf/validate/validate.proto";
import "devvit/data/api/v1alpha/delivery.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "openapi/helper.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/data/api/v1alpha";

// Reddit communities are data-rich forums where people go to discuss specific topics, events,
// brands, products, and services. Reddit Firehose gives you access to this real-time stream
// of content and lets you determine the type of content you want to see.
service Firehose {
  option (google.api.default_host) = "data.reddit.com";
  // Use your subscription ID and authentication token to set up an HTTP request to start
  // receiving Reddit Firehose data.
  rpc Stream(FirehoseRequest) returns (stream FirehoseReply) {
    option (google.api.http) = {
      post: "/firehose"
      body: "*"
    };
  }
}

// Firehose Request body
message FirehoseRequest {
  // This is the subscription id provided by your account manager.
  string subscription_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (openapi.field_example) = "e59bfsw9-5cf2-4544-9779-11111cebaa2b"
  ];
  // Indicates the maximum number of event types you are tracking.
  int32 max = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (openapi.field_example) = '1'
  ];
  // Begins streaming data from the specified event id.
  string start = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (openapi.field_example) = "f927d8b4-8207-4f3c-ba07-40992c0574ec"
  ];
  // Enables you to monitor your subscription to ensure the connection is working.
  bool keepalive = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (openapi.field_example) = 'true'
  ];
}

// Firehose response
message FirehoseReply {
  // The Unique ID for the event, can be used to restart a stream
  string id = 1 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
  // Timestamp from the event
  google.protobuf.Timestamp timestamp = 2 [(buf.validate.field).required = true];
  // Type of the event
  string event_type = 3 [(buf.validate.field).required = true];

  // Event only one of
  oneof event {
    PostCreateFirehose post_create = 10;
    PostEditFirehose post_edit = 11;
    CommentCreateFirehose comment_create = 12;
    CommentEditFirehose comment_edit = 13;
    PostApproveFirehose post_approve = 19;
    CommentApproveFirehose comment_approve = 20;
    DeletionFirehose deletion = 14;
    VoteFirehose vote = 15;
    ModActionFirehose mod_action = 16;
    FirehoseSystemMessage error = 17;
    FirehoseSystemMessage warning = 18;

    // next field 21
  }
}

// Firehose error/warning message
//  |**Error message**|**HTTP status code**|**What's wrong**|
//  | -- | -- | -- |
//  | NotFound | 404 | Endpoint not found. |
//  | AuthTokenMissing | 401 | Missing <API Key\> header with valid auth token. |
//  | AuthTokenInvalid | 401 | Auth token is invalid. |
//  | AuthTokenRevoked | 403 | Auth token has been revoked. |
//  | AuthTokenExpired | 403 | Auth token is expired. |
//  | InvalidSubscription | 400 | Invalid subscription ID. |
//  | InternalError | 500 | An internal error has occurred. |
//  | TooManyConnections | 429 | Max connections exceeded for subscription ID. |
message FirehoseSystemMessage {
  // Error/Warning message id
  string id = 1 [(openapi.field_example) = "'404'"];
  // Error/Warning message
  string message = 2 [(openapi.field_example) = "Endpoint not found."];
}

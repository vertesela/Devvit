syntax = "proto3";

package devvit.plugin.buildpack;

import "devvit/plugin/buildpack/filesystem.proto";
import "devvit/runtime/bundle.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/buildpack";

// Actor program and configuration.
message Bundle {
  // See LinkedBundle.code.
  string code = 1;
  // This is the the detail on the bundle itself **and** its dependendencies.
  //
  // to-do: Can we can rename to "spec" or something like that. This is really
  //   confusing because if you want the Bundle's exported actor name (ie,
  //   `Devvit.init(name, ...)`), you have to ask for it form the dependencies
  //   which doesn't make sense.
  devvit.runtime.DependencySpec dependencies = 2;

  // Optional information about the environment the code was built in. Outdated
  // dependencies may indicate an invalid build.
  devvit.runtime.BuildInfo build_info = 3;

  // Contents of the ./assets directory, rooted at the ./assets directory.
  FileSystem assets = 4 [deprecated = true];

  // This map contains the contents of the assets directory, rooted at the
  // assets directory. The keys are the relative paths of the files, and the
  // values are the devvit asset ids used to look up the asset during upload
  //  e.g. "images/en/banner.jpg": "30d509ee-208d-4b45-86b8-b48ef48cc524",
  map<string, string> asset_ids = 5;
}

message CompileParams {
  // The repository of user code to bundle.
  oneof repository {
    // This is the stateless version, where the entire information needed to be
    // bundled is included with the request.  This **MUST** be supported for all
    // languages/implementations.
    FileSystem virtual_file_system = 1;

    // Path to a directory with a file named BuildPack.DevvitModuleEntryPoint.
    //
    // Here we assume that we've transferred the repo to the build server using
    // rsync, git, or some other efficient protocol with e.g. deltas and
    // compression.
    //
    // This **MAY** be supported for various languages/implementations, and the
    // rsync-like protocol is left as an exercise for the build pack
    // implementor.
    string filename = 2;
  }

  Minify minify = 3;

  devvit.runtime.ActorSpec info = 4;

  bool include_assets = 5;
}

message CompileLog {
  CompileLogLineDetail detail = 1;
  string text = 2;
}

message CompileLogLineDetail {
  // 0-based.
  uint32 column = 1;
  string filename = 2;
  // 1-based.
  uint32 line = 3;
  string suggestion = 4;
  string text = 5;
}

message CompileResponse {
  // This bundle may be present even when the build was erroneous.
  Bundle bundle = 1;
  repeated CompileLog errors = 2;
  repeated CompileLog warnings = 3;
}

enum Minify {
  // Disable minification. The default.
  NONE = 0;
  // Minify everything.
  ALL = 1;
}

syntax = "proto3";

package devvit.plugin.redditapi.moderation;

import "devvit/plugin/redditapi/common/common_msg.proto";
import "devvit/plugin/redditapi/moderation/moderation_msg.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/redditapi";
option java_package = "com.reddit.devvit.plugin.redditapi.moderation";

// MODERATION -  https://www.reddit.com/dev/api#section_moderation
service Moderation {
  // https://www.reddit.com/dev/api#GET_about_log
  rpc AboutLog(AboutLogRequest) returns (AboutLogResponse);

  // https://www.reddit.com/dev/api#GET_about_\{location\}
  rpc AboutLocation(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#GET_about_\reports
  rpc AboutReports(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#GET_about_\spam
  rpc AboutSpam(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#GET_about_\modqueue
  rpc AboutModqueue(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#GET_about_\unmoderated
  rpc AboutUnmoderated(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#GET_about_\edited
  rpc AboutEdited(AboutLocationRequest) returns (devvit.plugin.redditapi.common.Listing);

  // https://www.reddit.com/dev/api#POST_api_accept_moderator_invite
  rpc AcceptModeratorInvite(AcceptModeratorInviteRequest) returns (devvit.plugin.redditapi.common.JsonStatus);

  // https://www.reddit.com/dev/api#POST_api_approve
  rpc Approve(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_distinguish
  rpc Distinguish(DistinguishRequest) returns (devvit.plugin.redditapi.common.JsonRedditObjects);

  // https://www.reddit.com/dev/api#POST_api_ignore_reports
  rpc IgnoreReports(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_leavecontributor
  rpc LeaveContributor(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_leavemoderator
  rpc LeaveModerator(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_mute_message_author
  rpc MuteMessageAuthor(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_remove
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_show_comment
  rpc ShowComment(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_snooze_reports
  rpc SnoozeReports(SnoozeReportsRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_unignore_reports
  rpc UnignoreReports(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_unmute_message_author
  rpc UnmuteMessageAuthor(BasicModerationIdRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_unsnooze_reports
  rpc UnsnoozeReports(SnoozeReportsRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#POST_api_update_crowd_control_level
  rpc UpdateCrowdControlLevel(UpdateCrowdControlLevelRequest) returns (google.protobuf.Empty);

  // https://www.reddit.com/dev/api#GET_stylesheet
  rpc Stylesheet(StylesheetRequest) returns (google.protobuf.StringValue);
}

syntax = "proto3";

package devvit.plugin.assetresolver;

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/assetresolver";
option java_package = "com.reddit.devvit.plugin.assetresolver";

message GetAssetURLRequest {
  // The path to the asset relative to the /assets directory of the project
  string path = 1;
}

message GetAssetURLResponse {
  // The full public URL to the asset (including the protocol); empty string if not found.
  // Example: https://i.redd.it/asdf.png
  string url = 1;
  // Whether or not the asset is in the linked bundle. If false, the value in url should
  // be ignored. (It should also be the empty string.)
  bool found = 2;
}

message GetMultipleAssetURLsRequest {
  // The paths to the assets relative to the /assets directory of the project
  // could be a mix of file paths, and glob patterns
  repeated string paths = 1;
}

message GetMultipleAssetURLsResponse {
  message GlobResult {
    // Whether or not the asset is in the linked bundle. If false, the paths value below should
    // be ignored. (It should also be an empty array.)
    bool found = 1;
    // The full public URL to the asset (including the protocol); empty string if not found.
    // For studio compatability reasons, this is an array.
    // Example: ["https://i.redd.it/asdf.png"]
    repeated string paths = 2;
  }

  // A map indexed by the paths to the assets relative to the /assets directory of the project
  // whose values are the full public URLs to the assets (including the protocol)
  map<string, GlobResult> urls = 1;
}

service AssetResolver {
  // Gets a public URL for a given asset
  rpc GetAssetURL(GetAssetURLRequest) returns (GetAssetURLResponse);
  // Gets the public URLs for multiple assets at the same time
  rpc GetAssetURLs(GetMultipleAssetURLsRequest) returns (GetMultipleAssetURLsResponse);
}

syntax = "proto3";

package devvit.actor.automation.v1alpha;

import "devvit/reddit/comment.proto";
import "devvit/reddit/post.proto";
import "devvit/reddit/user.proto";
import "google/protobuf/struct.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/actor/automation";
option java_package = "com.reddit.devvit.actor.automation";

// A description of a single Step, to be run in a sequence in an Automation
message StepDescription {
  string actor = 1; // The actor hostname to be invoked for the step. Must be in the format <actor_name>@<version>
  google.protobuf.Struct config = 2; // configuration data that is sent to the step
}

// Data from previous steps and config data for the step
message StepInput {
  google.protobuf.Struct config = 1; // Configuration for the step. The shape of this struct will be dictated by the actor's config
  google.protobuf.Struct prev = 2; // Custom data that came from the previous step in the automation
}

// Data going into an automation step with a comment
message StepCommentInput {
  StepInput input = 1; // The step input
  devvit.reddit.Comment comment = 2; // The Comment data from the trigger.
}

// Data going into of an automation step with a post
message StepPostInput {
  StepInput input = 1; // The step input
  devvit.reddit.Post post = 2; // The Post data from the trigger.
}

// Data going into of an automation step with a user
message StepUserInput {
  StepInput input = 1; // The step input
  devvit.reddit.User user = 2; // The User data from the trigger.
}

// The result of a step
message StepResult {
  google.protobuf.Struct output = 1; // The output of the step. This will also be passed to the next step as prev
  bool stop = 2; // Whether the automation should stop or not. If false, continue on to the next step. If true, stop the automation.
}

// A report of an individual step execution, to be returned from the AutomationEngine
message StepReport {
  string actor = 1; // The actor that was invoked. Must be in the format <actor_name>@<version>
  string message = 2; // Message provided by actor. If success is false, this could display output from an error, if any.
  float duration = 3; // How long in milliseconds the step ran. This is a float to represent microseconds as well.
  bool success = 4; // Whether the step was a success or failure/error. If true, the next step will be executed.
  StepResult data = 5; // The result data from the step
}

// Interface for an step that will receive a comment as input and be executed from the AutomationEngine.
service CommentStep {
  rpc Invoke(StepCommentInput) returns (StepResult);
}

// Interface for an step that will receive a post as input and be executed from the AutomationEngine.
service PostStep {
  rpc Invoke(StepPostInput) returns (StepResult);
}

// Interface for an step that will receive a user as input and be executed from the AutomationEngine.
service UserStep {
  rpc Invoke(StepUserInput) returns (StepResult);
}

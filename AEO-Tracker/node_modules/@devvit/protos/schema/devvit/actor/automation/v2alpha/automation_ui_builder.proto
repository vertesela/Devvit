syntax = "proto3";

package devvit.actor.automation.v2alpha;

import "devvit/actor/automation/v1alpha/automation.proto";
import "devvit/actor/automation/v1alpha/trigger.proto";
import "devvit/ui/form_builder/v1alpha/form.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/actor/automation";
option java_outer_classname = "BuilderAutomationUI";
option java_package = "com.reddit.devvit.actor.automation";

// The type of step it is. Used to filter list request
enum AutomationUIBuilderStepType {
  ACTION = 0; // Action type step
  FILTER = 1; // Filter type step
}

// Arguments for listing available triggers
message AutomationUIBuilderListTriggersRequest {}

// A list of triggers that may kick off an automation
message AutomationUIBuilderListTriggersResponse {
  repeated devvit.actor.automation.v1alpha.Trigger triggers = 1;
}

// Arguments for listing available steps
message AutomationUIBuilderListStepsRequest {
  string location = 1; // t5 id for subreddit
  devvit.actor.automation.v1alpha.TriggerType trigger_type = 2; // datatype the step operates on
  AutomationUIBuilderStepType step_type = 3; // type of step
}

message AutomationUIBuilderStepActor {
  string actor = 1;
  string label = 2;
  string description = 3;
  AutomationUIBuilderStepType type = 4;
}

// A list of steps that can be added to an automation
message AutomationUIBuilderListStepsResponse {
  repeated AutomationUIBuilderStepActor steps = 1;
}

// Arguments for listing installed automations for a subreddit
message AutomationUIBuilderListAutomationsRequest {
  string location = 1; // t5_id for subreddit
}

// A list of automations installed to a subreddit
message AutomationUIBuilderListAutomationsResponse {
  repeated devvit.actor.automation.v1alpha.Automation automations = 1;
}

message AutomationUIBuilderGetAutomationRequest {
  string id = 1; // automation uuid
}

message AutomationUIBuilderGetAutomationResponse {
  devvit.actor.automation.v1alpha.Automation automation = 1; // automation
}

message AutomationUIBuilderGetStepFormRequest {
  string actor = 1;
}

message AutomationUIBuilderGetStepFormResponse {
  devvit.ui.form_builder.v1alpha.Form form = 1;
}

// Arguments for updating a specific automation
message AutomationUIBuilderUpdateAutomationRequest {
  string id = 1; // The uuid of the automation
  devvit.actor.automation.v1alpha.Automation automation = 2; // The automation engine representation of the automation
}

message AutomationUIBuilderUpdateAutomationResponse {}

// Service for providing data to Automation Builder UI element
service AutomationUIBuilder {
  // Looks up all registered Triggers from the database
  rpc ListTriggers(AutomationUIBuilderListTriggersRequest) returns (AutomationUIBuilderListTriggersResponse);
  // Find all installed Apps for the installation and return any actors that implement the trigger and step type
  rpc ListSteps(AutomationUIBuilderListStepsRequest) returns (AutomationUIBuilderListStepsResponse);
  // Get all automations for a given location (subreddit)
  rpc ListAutomations(AutomationUIBuilderListAutomationsRequest) returns (AutomationUIBuilderListAutomationsResponse);
  // Gets an automation
  rpc GetAutomation(AutomationUIBuilderGetAutomationRequest) returns (AutomationUIBuilderGetAutomationResponse);
  // Updates an automation. Will create a new automation if ID isn't set
  rpc UpdateAutomation(AutomationUIBuilderUpdateAutomationRequest) returns (AutomationUIBuilderUpdateAutomationResponse);
  // Get form layout for step
  rpc GetStepForm(AutomationUIBuilderGetStepFormRequest) returns (AutomationUIBuilderGetStepFormResponse);
}

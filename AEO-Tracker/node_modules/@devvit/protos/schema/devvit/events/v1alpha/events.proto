syntax = "proto3";

package devvit.events.v1alpha;

import "devvit/options/options.proto";
import "devvit/reddit/v2alpha/commentv2.proto";
import "devvit/reddit/v2alpha/postv2.proto";
import "devvit/reddit/v2alpha/subredditv2.proto";
import "devvit/reddit/v2alpha/userv2.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/events";
option java_package = "com.reddit.devvit.actor.events";

enum EventSource {
  UNKNOWN_EVENT_SOURCE = 0;
  USER = 1;
  ADMIN = 2;
  MODERATOR = 3;
}

enum DeletionReason {
  UNSPECIFIED_DELETION_REASON = 0;
  SPAM = 1;
  LEGAL = 2;
  OTHER = 3;
  UNKNOWN = 4;
}

message PostSubmit {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "submit"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message PostCreate {
  option (devvit.options.trigger) = {
    source: "firehose"
    action: "create"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message PostUpdate {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "edit"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;
  string previous_body = 3 [(devvit.options.v2_event_path) = "edit.previous_body_text"];
  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message PostReport {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "report"
    noun: "post"
  };

  option (devvit.options.trigger) = {
    source: "automoderator"
    action: "report"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;

  // Deprecated - preserving privacy for the user reporting post
  reserved 2;
  reserved "reporter";

  string reason = 3 [(devvit.options.v2_event_path) = "action_info.reason"];
}

message PostFlairUpdate {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "apply_flair"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10 [(devvit.options.secondary_hydration_path) = "post.subreddit_id"];
}

message PostDelete {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "delete"
    noun: "post"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "remove"
    noun: "post"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "takedown"
    noun: "post"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "purge"
    noun: "post"
  };
  option (devvit.options.trigger) = {
    source: "moderator"
    action: "remove"
    noun: "post"
  };

  string post_id = 1 [(devvit.options.v2_event_path) = "post.id"];
  google.protobuf.Timestamp deleted_at = 2 [(devvit.options.v2_event_path) = "endpoint_timestamp"];

  devvit.reddit.v2alpha.UserV2 author = 3;

  google.protobuf.Timestamp created_at = 4 [(devvit.options.v2_event_path) = "post.created_timestamp"];
  EventSource source = 5;

  DeletionReason reason = 6;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message PostApprove {
  option (devvit.options.trigger) = {
    source: "admin"
    action: "unremove"
    noun: "post"
  };
  option (devvit.options.trigger) = {
    source: "moderator"
    action: "approve"
    noun: "post"
  };

  devvit.reddit.v2alpha.PostV2 post = 1;
  google.protobuf.Timestamp approved_at = 2 [(devvit.options.v2_event_path) = "endpoint_timestamp"];
  devvit.reddit.v2alpha.UserV2 author = 3 [(devvit.options.v2_event_path) = "target_user.id"];
  EventSource source = 5;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message CommentApprove {
  option (devvit.options.trigger) = {
    source: "admin"
    action: "unremove"
    noun: "comment"
  };
  option (devvit.options.trigger) = {
    source: "moderator"
    action: "approve"
    noun: "comment"
  };

  devvit.reddit.v2alpha.CommentV2 comment = 1;
  devvit.reddit.v2alpha.PostV2 post = 2;
  google.protobuf.Timestamp approved_at = 3 [(devvit.options.v2_event_path) = "endpoint_timestamp"];
  devvit.reddit.v2alpha.UserV2 author = 4 [(devvit.options.v2_event_path) = "target_user.id"];
  EventSource source = 6;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message CommentSubmit {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "submit"
    noun: "comment"
  };

  devvit.reddit.v2alpha.CommentV2 comment = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;
  devvit.reddit.v2alpha.PostV2 post = 3 [(devvit.options.v2_event_path) = "comment.post_id"];

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message CommentCreate {
  option (devvit.options.trigger) = {
    source: "firehose"
    action: "create"
    noun: "comment"
  };

  devvit.reddit.v2alpha.CommentV2 comment = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;
  devvit.reddit.v2alpha.PostV2 post = 3 [(devvit.options.v2_event_path) = "comment.post_id"];

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message CommentUpdate {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "edit"
    noun: "comment"
  };

  devvit.reddit.v2alpha.CommentV2 comment = 1;
  devvit.reddit.v2alpha.UserV2 author = 2;
  devvit.reddit.v2alpha.PostV2 post = 3 [(devvit.options.v2_event_path) = "comment.post_id"];
  string previous_body = 4 [(devvit.options.v2_event_path) = "edit.previous_body_text"];

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message CommentReport {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "report"
    noun: "comment"
  };

  devvit.reddit.v2alpha.CommentV2 comment = 1;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;

  // Deprecated - preserving privacy for the user reporting comment
  reserved 2;
  reserved "reporter";

  string reason = 3 [(devvit.options.v2_event_path) = "action_info.reason"];
}

message CommentDelete {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "delete"
    noun: "comment"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "remove"
    noun: "comment"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "takedown"
    noun: "comment"
  };
  option (devvit.options.trigger) = {
    source: "admin"
    action: "purge"
    noun: "comment"
  };
  option (devvit.options.trigger) = {
    source: "moderator"
    action: "remove"
    noun: "comment"
  };

  string comment_id = 1 [(devvit.options.v2_event_path) = "comment.id"];
  string post_id = 2 [(devvit.options.v2_event_path) = "comment.post_id"];
  string parent_id = 3 [(devvit.options.v2_event_path) = "comment.parent_id"];
  google.protobuf.Timestamp deleted_at = 4 [(devvit.options.v2_event_path) = "endpoint_timestamp"];

  devvit.reddit.v2alpha.UserV2 author = 5;

  google.protobuf.Timestamp created_at = 6 [(devvit.options.v2_event_path) = "comment.created_timestamp"];
  EventSource source = 7;
  DeletionReason reason = 8;

  devvit.reddit.v2alpha.SubredditV2 subreddit = 10;
}

message SubredditSubscribe {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "subscribe"
    noun: "subreddit"
  };

  devvit.reddit.v2alpha.SubredditV2 subreddit = 1;
  devvit.reddit.v2alpha.UserV2 subscriber = 2;
}

message AppInstall {
  option (devvit.options.trigger) = {
    source: "devplatform"
    action: "install"
    noun: "app"
  };

  devvit.reddit.v2alpha.SubredditV2 subreddit = 1;
  devvit.reddit.v2alpha.UserV2 installer = 2;
}

message AppUpgrade {
  option (devvit.options.trigger) = {
    source: "devplatform"
    action: "uninstall"
    noun: "app"
  };

  devvit.reddit.v2alpha.SubredditV2 subreddit = 1;
  devvit.reddit.v2alpha.UserV2 installer = 2;
}

message AccountDelete {
  option (devvit.options.trigger) = {
    source: "backend"
    action: "deactivate"
    noun: "user"
  };

  string user_id = 1 [(devvit.options.v2_event_path) = "user.id"];
  google.protobuf.Timestamp deleted_at = 2 [(devvit.options.v2_event_path) = "endpoint_timestamp"];

  devvit.reddit.v2alpha.UserV2 user = 3;
}

message Vote {
  google.protobuf.Timestamp updated_at = 4;

  devvit.reddit.v2alpha.CommentV2 comment = 5;
  devvit.reddit.v2alpha.PostV2 post = 6;
  devvit.reddit.v2alpha.SubredditV2 subreddit = 7;
  float upvote_ratio = 8;
  int32 score = 9;

  // removed fields
  reserved 1 to 3;
  reserved "thing_id", "upvotes", "downvotes";
}
